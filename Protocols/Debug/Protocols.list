
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e2c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08001fbc  08001fbc  00002fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080020c4  080020c4  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  080020c4  080020c4  000030c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080020cc  080020cc  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080020cc  080020cc  000030cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080020d0  080020d0  000030d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080020d4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000184  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b6d  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000076b  00000000  00000000  00005bf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00006368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000177  00000000  00000000  00006578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000178a  00000000  00000000  000066ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002d18  00000000  00000000  00007e79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b79d  00000000  00000000  0000ab91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001632e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f24  00000000  00000000  00016374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00017298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001fa4 	.word	0x08001fa4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08001fa4 	.word	0x08001fa4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a90      	ldr	r2, [pc, #576]	@ (80004d0 <GPIO_INIT+0x250>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d106      	bne.n	80002a0 <GPIO_INIT+0x20>
		GPIOA_EN();
 8000292:	4b90      	ldr	r3, [pc, #576]	@ (80004d4 <GPIO_INIT+0x254>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a8f      	ldr	r2, [pc, #572]	@ (80004d4 <GPIO_INIT+0x254>)
 8000298:	f043 0301 	orr.w	r3, r3, #1
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
 800029e:	e05e      	b.n	800035e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a8c      	ldr	r2, [pc, #560]	@ (80004d8 <GPIO_INIT+0x258>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	d106      	bne.n	80002b8 <GPIO_INIT+0x38>
		GPIOB_EN();
 80002aa:	4b8a      	ldr	r3, [pc, #552]	@ (80004d4 <GPIO_INIT+0x254>)
 80002ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ae:	4a89      	ldr	r2, [pc, #548]	@ (80004d4 <GPIO_INIT+0x254>)
 80002b0:	f043 0302 	orr.w	r3, r3, #2
 80002b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002b6:	e052      	b.n	800035e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4a87      	ldr	r2, [pc, #540]	@ (80004dc <GPIO_INIT+0x25c>)
 80002be:	4293      	cmp	r3, r2
 80002c0:	d106      	bne.n	80002d0 <GPIO_INIT+0x50>
		GPIOC_EN();
 80002c2:	4b84      	ldr	r3, [pc, #528]	@ (80004d4 <GPIO_INIT+0x254>)
 80002c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c6:	4a83      	ldr	r2, [pc, #524]	@ (80004d4 <GPIO_INIT+0x254>)
 80002c8:	f043 0304 	orr.w	r3, r3, #4
 80002cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ce:	e046      	b.n	800035e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a82      	ldr	r2, [pc, #520]	@ (80004e0 <GPIO_INIT+0x260>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_INIT+0x68>
		GPIOD_EN();
 80002da:	4b7e      	ldr	r3, [pc, #504]	@ (80004d4 <GPIO_INIT+0x254>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002de:	4a7d      	ldr	r2, [pc, #500]	@ (80004d4 <GPIO_INIT+0x254>)
 80002e0:	f043 0308 	orr.w	r3, r3, #8
 80002e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002e6:	e03a      	b.n	800035e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a7d      	ldr	r2, [pc, #500]	@ (80004e4 <GPIO_INIT+0x264>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d106      	bne.n	8000300 <GPIO_INIT+0x80>
		GPIOE_EN();
 80002f2:	4b78      	ldr	r3, [pc, #480]	@ (80004d4 <GPIO_INIT+0x254>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f6:	4a77      	ldr	r2, [pc, #476]	@ (80004d4 <GPIO_INIT+0x254>)
 80002f8:	f043 0310 	orr.w	r3, r3, #16
 80002fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80002fe:	e02e      	b.n	800035e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a78      	ldr	r2, [pc, #480]	@ (80004e8 <GPIO_INIT+0x268>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_INIT+0x98>
		GPIOF_EN();
 800030a:	4b72      	ldr	r3, [pc, #456]	@ (80004d4 <GPIO_INIT+0x254>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030e:	4a71      	ldr	r2, [pc, #452]	@ (80004d4 <GPIO_INIT+0x254>)
 8000310:	f043 0320 	orr.w	r3, r3, #32
 8000314:	6313      	str	r3, [r2, #48]	@ 0x30
 8000316:	e022      	b.n	800035e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a73      	ldr	r2, [pc, #460]	@ (80004ec <GPIO_INIT+0x26c>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000322:	4b6c      	ldr	r3, [pc, #432]	@ (80004d4 <GPIO_INIT+0x254>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000326:	4a6b      	ldr	r2, [pc, #428]	@ (80004d4 <GPIO_INIT+0x254>)
 8000328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800032c:	6313      	str	r3, [r2, #48]	@ 0x30
 800032e:	e016      	b.n	800035e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a6e      	ldr	r2, [pc, #440]	@ (80004f0 <GPIO_INIT+0x270>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_INIT+0xc8>
		GPIOH_EN();
 800033a:	4b66      	ldr	r3, [pc, #408]	@ (80004d4 <GPIO_INIT+0x254>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	4a65      	ldr	r2, [pc, #404]	@ (80004d4 <GPIO_INIT+0x254>)
 8000340:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000344:	6313      	str	r3, [r2, #48]	@ 0x30
 8000346:	e00a      	b.n	800035e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	4a69      	ldr	r2, [pc, #420]	@ (80004f4 <GPIO_INIT+0x274>)
 800034e:	4293      	cmp	r3, r2
 8000350:	d105      	bne.n	800035e <GPIO_INIT+0xde>
		GPIOI_EN();
 8000352:	4b60      	ldr	r3, [pc, #384]	@ (80004d4 <GPIO_INIT+0x254>)
 8000354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000356:	4a5f      	ldr	r2, [pc, #380]	@ (80004d4 <GPIO_INIT+0x254>)
 8000358:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800035c:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791b      	ldrb	r3, [r3, #4]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	2103      	movs	r1, #3
 800036c:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000370:	43db      	mvns	r3, r3
 8000372:	4619      	mov	r1, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	400a      	ands	r2, r1
 800037a:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	791b      	ldrb	r3, [r3, #4]
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	2103      	movs	r1, #3
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 800038e:	43db      	mvns	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	400a      	ands	r2, r1
 8000398:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	68da      	ldr	r2, [r3, #12]
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	799b      	ldrb	r3, [r3, #6]
 80003a4:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	791b      	ldrb	r3, [r3, #4]
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	fa01 f303 	lsl.w	r3, r1, r3
 80003b0:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	430a      	orrs	r2, r1
 80003b8:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	795b      	ldrb	r3, [r3, #5]
 80003be:	2b02      	cmp	r3, #2
 80003c0:	f200 809a 	bhi.w	80004f8 <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	791b      	ldrb	r3, [r3, #4]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	fa01 f303 	lsl.w	r3, r1, r3
 80003da:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	4619      	mov	r1, r3
 80003f0:	2303      	movs	r3, #3
 80003f2:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80003f4:	43db      	mvns	r3, r3
 80003f6:	4619      	mov	r1, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	400a      	ands	r2, r1
 80003fe:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	685a      	ldr	r2, [r3, #4]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	7a1b      	ldrb	r3, [r3, #8]
 800040a:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	fa01 f303 	lsl.w	r3, r1, r3
 8000414:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	430a      	orrs	r2, r1
 800041c:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	791b      	ldrb	r3, [r3, #4]
 8000428:	005b      	lsls	r3, r3, #1
 800042a:	2103      	movs	r1, #3
 800042c:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000430:	43db      	mvns	r3, r3
 8000432:	4619      	mov	r1, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	400a      	ands	r2, r1
 800043a:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	689a      	ldr	r2, [r3, #8]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	79db      	ldrb	r3, [r3, #7]
 8000446:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	fa01 f303 	lsl.w	r3, r1, r3
 8000452:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	430a      	orrs	r2, r1
 800045a:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b02      	cmp	r3, #2
 8000462:	f040 80ec 	bne.w	800063e <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 800046a:	08db      	lsrs	r3, r3, #3
 800046c:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	791b      	ldrb	r3, [r3, #4]
 8000472:	f003 0307 	and.w	r3, r3, #7
 8000476:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	7b7a      	ldrb	r2, [r7, #13]
 800047e:	3208      	adds	r2, #8
 8000480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	791b      	ldrb	r3, [r3, #4]
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	2203      	movs	r2, #3
 800048c:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000490:	43db      	mvns	r3, r3
 8000492:	4618      	mov	r0, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	7b7a      	ldrb	r2, [r7, #13]
 800049a:	4001      	ands	r1, r0
 800049c:	3208      	adds	r2, #8
 800049e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	7b7a      	ldrb	r2, [r7, #13]
 80004a8:	3208      	adds	r2, #8
 80004aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	7a5b      	ldrb	r3, [r3, #9]
 80004b2:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	009b      	lsls	r3, r3, #2
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	7b7a      	ldrb	r2, [r7, #13]
 80004c4:	4301      	orrs	r1, r0
 80004c6:	3208      	adds	r2, #8
 80004c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 80004cc:	e0b7      	b.n	800063e <GPIO_INIT+0x3be>
 80004ce:	bf00      	nop
 80004d0:	40020000 	.word	0x40020000
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020400 	.word	0x40020400
 80004dc:	40020800 	.word	0x40020800
 80004e0:	40020c00 	.word	0x40020c00
 80004e4:	40021000 	.word	0x40021000
 80004e8:	40021400 	.word	0x40021400
 80004ec:	40021800 	.word	0x40021800
 80004f0:	40021c00 	.word	0x40021c00
 80004f4:	40022000 	.word	0x40022000
		SYSCFG_EN();
 80004f8:	4b54      	ldr	r3, [pc, #336]	@ (800064c <GPIO_INIT+0x3cc>)
 80004fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004fc:	4a53      	ldr	r2, [pc, #332]	@ (800064c <GPIO_INIT+0x3cc>)
 80004fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000502:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	2b06      	cmp	r3, #6
 800050a:	d12e      	bne.n	800056a <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 800050c:	4b50      	ldr	r3, [pc, #320]	@ (8000650 <GPIO_INIT+0x3d0>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	7912      	ldrb	r2, [r2, #4]
 8000514:	4611      	mov	r1, r2
 8000516:	2201      	movs	r2, #1
 8000518:	408a      	lsls	r2, r1
 800051a:	43d2      	mvns	r2, r2
 800051c:	4611      	mov	r1, r2
 800051e:	4a4c      	ldr	r2, [pc, #304]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000520:	400b      	ands	r3, r1
 8000522:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000524:	4b4a      	ldr	r3, [pc, #296]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000526:	68db      	ldr	r3, [r3, #12]
 8000528:	687a      	ldr	r2, [r7, #4]
 800052a:	7912      	ldrb	r2, [r2, #4]
 800052c:	4611      	mov	r1, r2
 800052e:	2201      	movs	r2, #1
 8000530:	408a      	lsls	r2, r1
 8000532:	43d2      	mvns	r2, r2
 8000534:	4611      	mov	r1, r2
 8000536:	4a46      	ldr	r2, [pc, #280]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000538:	400b      	ands	r3, r1
 800053a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 800053c:	4b44      	ldr	r3, [pc, #272]	@ (8000650 <GPIO_INIT+0x3d0>)
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	687a      	ldr	r2, [r7, #4]
 8000542:	7912      	ldrb	r2, [r2, #4]
 8000544:	4611      	mov	r1, r2
 8000546:	2201      	movs	r2, #1
 8000548:	408a      	lsls	r2, r1
 800054a:	4611      	mov	r1, r2
 800054c:	4a40      	ldr	r2, [pc, #256]	@ (8000650 <GPIO_INIT+0x3d0>)
 800054e:	430b      	orrs	r3, r1
 8000550:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000552:	4b3f      	ldr	r3, [pc, #252]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000554:	68db      	ldr	r3, [r3, #12]
 8000556:	687a      	ldr	r2, [r7, #4]
 8000558:	7912      	ldrb	r2, [r2, #4]
 800055a:	4611      	mov	r1, r2
 800055c:	2201      	movs	r2, #1
 800055e:	408a      	lsls	r2, r1
 8000560:	4611      	mov	r1, r2
 8000562:	4a3b      	ldr	r2, [pc, #236]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000564:	430b      	orrs	r3, r1
 8000566:	60d3      	str	r3, [r2, #12]
 8000568:	e036      	b.n	80005d8 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	2b05      	cmp	r3, #5
 8000570:	d117      	bne.n	80005a2 <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000572:	4b37      	ldr	r3, [pc, #220]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	43d2      	mvns	r2, r2
 8000582:	4611      	mov	r1, r2
 8000584:	4a32      	ldr	r2, [pc, #200]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000586:	400b      	ands	r3, r1
 8000588:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 800058a:	4b31      	ldr	r3, [pc, #196]	@ (8000650 <GPIO_INIT+0x3d0>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	687a      	ldr	r2, [r7, #4]
 8000590:	7912      	ldrb	r2, [r2, #4]
 8000592:	4611      	mov	r1, r2
 8000594:	2201      	movs	r2, #1
 8000596:	408a      	lsls	r2, r1
 8000598:	4611      	mov	r1, r2
 800059a:	4a2d      	ldr	r2, [pc, #180]	@ (8000650 <GPIO_INIT+0x3d0>)
 800059c:	430b      	orrs	r3, r1
 800059e:	60d3      	str	r3, [r2, #12]
 80005a0:	e01a      	b.n	80005d8 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d116      	bne.n	80005d8 <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80005aa:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <GPIO_INIT+0x3d0>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	43d2      	mvns	r2, r2
 80005ba:	4611      	mov	r1, r2
 80005bc:	4a24      	ldr	r2, [pc, #144]	@ (8000650 <GPIO_INIT+0x3d0>)
 80005be:	400b      	ands	r3, r1
 80005c0:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 80005c2:	4b23      	ldr	r3, [pc, #140]	@ (8000650 <GPIO_INIT+0x3d0>)
 80005c4:	689b      	ldr	r3, [r3, #8]
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	7912      	ldrb	r2, [r2, #4]
 80005ca:	4611      	mov	r1, r2
 80005cc:	2201      	movs	r2, #1
 80005ce:	408a      	lsls	r2, r1
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a1f      	ldr	r2, [pc, #124]	@ (8000650 <GPIO_INIT+0x3d0>)
 80005d4:	430b      	orrs	r3, r1
 80005d6:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	791b      	ldrb	r3, [r3, #4]
 80005dc:	089b      	lsrs	r3, r3, #2
 80005de:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	f003 0303 	and.w	r3, r3, #3
 80005e8:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 80005ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000654 <GPIO_INIT+0x3d4>)
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3302      	adds	r3, #2
 80005f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	7a9b      	ldrb	r3, [r3, #10]
 80005f8:	4619      	mov	r1, r3
 80005fa:	7bbb      	ldrb	r3, [r7, #14]
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000602:	4618      	mov	r0, r3
 8000604:	4913      	ldr	r1, [pc, #76]	@ (8000654 <GPIO_INIT+0x3d4>)
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	4302      	orrs	r2, r0
 800060a:	3302      	adds	r3, #2
 800060c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8000610:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	43d2      	mvns	r2, r2
 8000620:	4611      	mov	r1, r2
 8000622:	4a0b      	ldr	r2, [pc, #44]	@ (8000650 <GPIO_INIT+0x3d0>)
 8000624:	400b      	ands	r3, r1
 8000626:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 8000628:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <GPIO_INIT+0x3d0>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	7912      	ldrb	r2, [r2, #4]
 8000630:	4611      	mov	r1, r2
 8000632:	2201      	movs	r2, #1
 8000634:	408a      	lsls	r2, r1
 8000636:	4611      	mov	r1, r2
 8000638:	4a05      	ldr	r2, [pc, #20]	@ (8000650 <GPIO_INIT+0x3d0>)
 800063a:	430b      	orrs	r3, r1
 800063c:	6013      	str	r3, [r2, #0]
}
 800063e:	bf00      	nop
 8000640:	3714      	adds	r7, #20
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40013c00 	.word	0x40013c00
 8000654:	40013800 	.word	0x40013800

08000658 <GPIO_INPUT>:

uint8_t GPIO_INPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
 8000658:	b480      	push	{r7}
 800065a:	b085      	sub	sp, #20
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	70fb      	strb	r3, [r7, #3]
	uint8_t val = ((gpiox->IDR >> gpio_pins) & GPIO_BIT_1_Mask);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	691a      	ldr	r2, [r3, #16]
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	fa22 f303 	lsr.w	r3, r2, r3
 800066e:	b2db      	uxtb	r3, r3
 8000670:	f003 0301 	and.w	r3, r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
	return val;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <SPI_PERIPHERAL_ENABLE>:
		return HIGH;
	}
	return LOW;
}

void SPI_PERIPHERAL_ENABLE(SPI_HandleTypedef *spi_handle, uint8_t EN) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	70fb      	strb	r3, [r7, #3]
	if (EN == HIGH) {
 8000690:	78fb      	ldrb	r3, [r7, #3]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d108      	bne.n	80006a8 <SPI_PERIPHERAL_ENABLE+0x24>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_6_pos);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80006a4:	601a      	str	r2, [r3, #0]
	} else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_6_pos);
	}
}
 80006a6:	e007      	b.n	80006b8 <SPI_PERIPHERAL_ENABLE+0x34>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_6_pos);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80006b6:	601a      	str	r2, [r3, #0]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr

080006c4 <SPI_SSI_CONFIG>:

void SPI_SSI_CONFIG(SPI_HandleTypedef *spi_handle, uint8_t EN) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	460b      	mov	r3, r1
 80006ce:	70fb      	strb	r3, [r7, #3]
	if (EN == HIGH) {
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b01      	cmp	r3, #1
 80006d4:	d108      	bne.n	80006e8 <SPI_SSI_CONFIG+0x24>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_8_pos);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80006e4:	601a      	str	r2, [r3, #0]
	} else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_8_pos);
	}
}
 80006e6:	e007      	b.n	80006f8 <SPI_SSI_CONFIG+0x34>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_8_pos);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80006f6:	601a      	str	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	370c      	adds	r7, #12
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr

08000704 <SPI_INIT>:

void SPI_INIT(SPI_HandleTypedef *spi_handle) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	if (spi_handle->SPIx == SPI1) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a8a      	ldr	r2, [pc, #552]	@ (800093c <SPI_INIT+0x238>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d106      	bne.n	8000724 <SPI_INIT+0x20>
		SPI1_EN();
 8000716:	4b8a      	ldr	r3, [pc, #552]	@ (8000940 <SPI_INIT+0x23c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	4a89      	ldr	r2, [pc, #548]	@ (8000940 <SPI_INIT+0x23c>)
 800071c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000720:	6453      	str	r3, [r2, #68]	@ 0x44
 8000722:	e03a      	b.n	800079a <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI2) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a86      	ldr	r2, [pc, #536]	@ (8000944 <SPI_INIT+0x240>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d106      	bne.n	800073c <SPI_INIT+0x38>
		SPI2_EN();
 800072e:	4b84      	ldr	r3, [pc, #528]	@ (8000940 <SPI_INIT+0x23c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000732:	4a83      	ldr	r2, [pc, #524]	@ (8000940 <SPI_INIT+0x23c>)
 8000734:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000738:	6413      	str	r3, [r2, #64]	@ 0x40
 800073a:	e02e      	b.n	800079a <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI3) {
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a81      	ldr	r2, [pc, #516]	@ (8000948 <SPI_INIT+0x244>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d106      	bne.n	8000754 <SPI_INIT+0x50>
		SPI3_EN();
 8000746:	4b7e      	ldr	r3, [pc, #504]	@ (8000940 <SPI_INIT+0x23c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	4a7d      	ldr	r2, [pc, #500]	@ (8000940 <SPI_INIT+0x23c>)
 800074c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000750:	6413      	str	r3, [r2, #64]	@ 0x40
 8000752:	e022      	b.n	800079a <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI4) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a7c      	ldr	r2, [pc, #496]	@ (800094c <SPI_INIT+0x248>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <SPI_INIT+0x68>
		SPI4_EN();
 800075e:	4b78      	ldr	r3, [pc, #480]	@ (8000940 <SPI_INIT+0x23c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a77      	ldr	r2, [pc, #476]	@ (8000940 <SPI_INIT+0x23c>)
 8000764:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	e016      	b.n	800079a <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI5) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a77      	ldr	r2, [pc, #476]	@ (8000950 <SPI_INIT+0x24c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <SPI_INIT+0x80>
		SPI5_EN();
 8000776:	4b72      	ldr	r3, [pc, #456]	@ (8000940 <SPI_INIT+0x23c>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800077a:	4a71      	ldr	r2, [pc, #452]	@ (8000940 <SPI_INIT+0x23c>)
 800077c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000780:	6453      	str	r3, [r2, #68]	@ 0x44
 8000782:	e00a      	b.n	800079a <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI6) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a72      	ldr	r2, [pc, #456]	@ (8000954 <SPI_INIT+0x250>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d105      	bne.n	800079a <SPI_INIT+0x96>
		SPI6_EN();
 800078e:	4b6c      	ldr	r3, [pc, #432]	@ (8000940 <SPI_INIT+0x23c>)
 8000790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000792:	4a6b      	ldr	r2, [pc, #428]	@ (8000940 <SPI_INIT+0x23c>)
 8000794:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000798:	6453      	str	r3, [r2, #68]	@ 0x44
	}

	// Master/Slave
	spi_handle->SPIx->CR1 &= ~(HIGH << Shift_2_pos);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f022 0204 	bic.w	r2, r2, #4
 80007a8:	601a      	str	r2, [r3, #0]
	if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	799b      	ldrb	r3, [r3, #6]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d107      	bne.n	80007c2 <SPI_INIT+0xbe>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_2_pos); // Set MSTR bit for master
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f042 0204 	orr.w	r2, r2, #4
 80007c0:	601a      	str	r2, [r3, #0]
	}

	// Simplex mode RX: we need to configure this because the communication happens only when master produces the clock, the clock happens when MOSI line has the data
	if (spi_handle->spi_data_direction == SPI_SIMPLEX_MODE_RX) {
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	791b      	ldrb	r3, [r3, #4]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d110      	bne.n	80007ec <SPI_INIT+0xe8>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	681a      	ldr	r2, [r3, #0]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80007d8:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_10_pos);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	e024      	b.n	8000836 <SPI_INIT+0x132>
	}
	// Simplex mode TX: just remove the MISO line in full duplex mode

	// Half duplex mode:
	// In master mode, the MOSI pin is used while the MISO pin is used in slave mode.
	else if (spi_handle->spi_data_direction == SPI_HALF_DUPLEX_MODE) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	2b02      	cmp	r3, #2
 80007f2:	d110      	bne.n	8000816 <SPI_INIT+0x112>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000802:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_15_pos);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	e00f      	b.n	8000836 <SPI_INIT+0x132>
	}
	// Full duplex mode or Simplex mode TX
	else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000824:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_10_pos);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000834:	601a      	str	r2, [r3, #0]
	}

	// Configure baud rate
	spi_handle->SPIx->CR1 &= ~(BIT_111_MASK << Shift_3_pos);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000844:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_sclk_prescaler << Shift_3_pos);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7a9b      	ldrb	r3, [r3, #10]
 8000850:	00da      	lsls	r2, r3, #3
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	430a      	orrs	r2, r1
 8000858:	601a      	str	r2, [r3, #0]

	// Select data frame
	spi_handle->SPIx->CR1 &= ~(HIGH << Shift_11_pos);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000868:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_frame_format << Shift_11_pos);
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	6819      	ldr	r1, [r3, #0]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	795b      	ldrb	r3, [r3, #5]
 8000874:	02da      	lsls	r2, r3, #11
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	430a      	orrs	r2, r1
 800087c:	601a      	str	r2, [r3, #0]

	// Configure CPOL and CPHA
	// CPHA
	spi_handle->SPIx->CR1 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f022 0203 	bic.w	r2, r2, #3
 800088c:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_clock_phase << Shift_0_pos);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	7a1b      	ldrb	r3, [r3, #8]
 8000898:	4619      	mov	r1, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	430a      	orrs	r2, r1
 80008a0:	601a      	str	r2, [r3, #0]

	//CPOL
	spi_handle->SPIx->CR1 |= (spi_handle->spi_clock_polarity << Shift_1_pos);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6819      	ldr	r1, [r3, #0]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	79db      	ldrb	r3, [r3, #7]
 80008ac:	005a      	lsls	r2, r3, #1
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	430a      	orrs	r2, r1
 80008b4:	601a      	str	r2, [r3, #0]

	// Software slave management
	// Software
	if (spi_handle->spi_ssm == SPI_SOFTWARE_SLAVE_EN) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7a5b      	ldrb	r3, [r3, #9]
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	d118      	bne.n	80008f0 <SPI_INIT+0x1ec>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_9_pos);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80008cc:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_9_pos);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80008dc:	601a      	str	r2, [r3, #0]
		if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	799b      	ldrb	r3, [r3, #6]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d125      	bne.n	8000932 <SPI_INIT+0x22e>
			// Internal slave select HIGH
			SPI_SSI_CONFIG(spi_handle, HIGH);
 80008e6:	2101      	movs	r1, #1
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff feeb 	bl	80006c4 <SPI_SSI_CONFIG>
			spi_handle->SPIx->CR2 |= (HIGH << Shift_2_pos);
		} else if (spi_handle->spi_master_slave == SPI_SLAVE_MODE) {
			spi_handle->SPIx->CR2 &= ~(HIGH << Shift_2_pos);
		}
	}
}
 80008ee:	e020      	b.n	8000932 <SPI_INIT+0x22e>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_9_pos); // Clear SSM bit
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80008fe:	601a      	str	r2, [r3, #0]
		if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d108      	bne.n	800091a <SPI_INIT+0x216>
			spi_handle->SPIx->CR2 |= (HIGH << Shift_2_pos);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	685a      	ldr	r2, [r3, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f042 0204 	orr.w	r2, r2, #4
 8000916:	605a      	str	r2, [r3, #4]
}
 8000918:	e00b      	b.n	8000932 <SPI_INIT+0x22e>
		} else if (spi_handle->spi_master_slave == SPI_SLAVE_MODE) {
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	799b      	ldrb	r3, [r3, #6]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d107      	bne.n	8000932 <SPI_INIT+0x22e>
			spi_handle->SPIx->CR2 &= ~(HIGH << Shift_2_pos);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f022 0204 	bic.w	r2, r2, #4
 8000930:	605a      	str	r2, [r3, #4]
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40013000 	.word	0x40013000
 8000940:	40023800 	.word	0x40023800
 8000944:	40003800 	.word	0x40003800
 8000948:	40003c00 	.word	0x40003c00
 800094c:	40013400 	.word	0x40013400
 8000950:	40015000 	.word	0x40015000
 8000954:	40015400 	.word	0x40015400

08000958 <SPI_SendReceive_FullDuplex>:
	// Disable SPI
	SPI_PERIPHERAL_ENABLE(spi_handle, LOW);
}

void SPI_SendReceive_FullDuplex(SPI_HandleTypedef *spi_handle,
		uint8_t *txBuffer, uint8_t *rxBuffer, uint32_t len) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
 8000964:	603b      	str	r3, [r7, #0]
	// Enable SPI
	SPI_PERIPHERAL_ENABLE(spi_handle, HIGH);
 8000966:	2101      	movs	r1, #1
 8000968:	68f8      	ldr	r0, [r7, #12]
 800096a:	f7ff fe8b 	bl	8000684 <SPI_PERIPHERAL_ENABLE>

	while (len > 0) {
 800096e:	e04d      	b.n	8000a0c <SPI_SendReceive_FullDuplex+0xb4>

		// Wait for TXE is empty
		while (!((spi_handle->SPIx->SR >> Shift_1_pos) & 0x1))
 8000970:	bf00      	nop
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	689b      	ldr	r3, [r3, #8]
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f7      	beq.n	8000972 <SPI_SendReceive_FullDuplex+0x1a>
			;
		if (spi_handle->spi_frame_format == SPI_8_BIT_FRAME_FORMAT) {
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	795b      	ldrb	r3, [r3, #5]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d10b      	bne.n	80009a2 <SPI_SendReceive_FullDuplex+0x4a>
			spi_handle->SPIx->DR = *txBuffer;
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	781a      	ldrb	r2, [r3, #0]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	60da      	str	r2, [r3, #12]
			len--;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	603b      	str	r3, [r7, #0]
			txBuffer++;
 800099a:	68bb      	ldr	r3, [r7, #8]
 800099c:	3301      	adds	r3, #1
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	e011      	b.n	80009c6 <SPI_SendReceive_FullDuplex+0x6e>
		} else if (spi_handle->spi_frame_format == SPI_16_BIT_FRAME_FORMAT) {
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	795b      	ldrb	r3, [r3, #5]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d10d      	bne.n	80009c6 <SPI_SendReceive_FullDuplex+0x6e>
			spi_handle->SPIx->DR = *(uint16_t*) txBuffer;
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	881a      	ldrh	r2, [r3, #0]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	60da      	str	r2, [r3, #12]
			len--;
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	603b      	str	r3, [r7, #0]
			len--;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	3b01      	subs	r3, #1
 80009be:	603b      	str	r3, [r7, #0]
			(uint16_t*) txBuffer++;
 80009c0:	68bb      	ldr	r3, [r7, #8]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60bb      	str	r3, [r7, #8]
		}

		// Wait for RXE is not empty
		while (!((spi_handle->SPIx->SR >> Shift_0_pos) & 0x1))
 80009c6:	bf00      	nop
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d0f8      	beq.n	80009c8 <SPI_SendReceive_FullDuplex+0x70>
			;

		if (spi_handle->spi_frame_format == SPI_8_BIT_FRAME_FORMAT) {
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d109      	bne.n	80009f2 <SPI_SendReceive_FullDuplex+0x9a>
			*rxBuffer = spi_handle->SPIx->DR;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3301      	adds	r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	e00c      	b.n	8000a0c <SPI_SendReceive_FullDuplex+0xb4>
		} else if (spi_handle->spi_frame_format == SPI_16_BIT_FRAME_FORMAT) {
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	795b      	ldrb	r3, [r3, #5]
 80009f6:	2b01      	cmp	r3, #1
 80009f8:	d108      	bne.n	8000a0c <SPI_SendReceive_FullDuplex+0xb4>
			*(uint16_t*) rxBuffer = spi_handle->SPIx->DR;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	801a      	strh	r2, [r3, #0]
			(uint16_t*) rxBuffer++;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
	while (len > 0) {
 8000a0c:	683b      	ldr	r3, [r7, #0]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1ae      	bne.n	8000970 <SPI_SendReceive_FullDuplex+0x18>
		}

	}

	// Wait for TXE is empty
	while (!((spi_handle->SPIx->SR >> Shift_1_pos) & 0x1))
 8000a12:	bf00      	nop
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	085b      	lsrs	r3, r3, #1
 8000a1c:	f003 0301 	and.w	r3, r3, #1
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d0f7      	beq.n	8000a14 <SPI_SendReceive_FullDuplex+0xbc>
		;

	// Wait until BSY=0
	while ((spi_handle->SPIx->SR >> Shift_7_pos) & 0x1)
 8000a24:	bf00      	nop
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	09db      	lsrs	r3, r3, #7
 8000a2e:	f003 0301 	and.w	r3, r3, #1
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d1f7      	bne.n	8000a26 <SPI_SendReceive_FullDuplex+0xce>
		;

	// Disable SPI
	SPI_PERIPHERAL_ENABLE(spi_handle, LOW);
 8000a36:	2100      	movs	r1, #0
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f7ff fe23 	bl	8000684 <SPI_PERIPHERAL_ENABLE>
}
 8000a3e:	bf00      	nop
 8000a40:	3710      	adds	r7, #16
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <delay>:
 * SS    10  // Slave Select . Arduino SPI pins respond only if SS pulled low by the master
 *

 */

void delay(void) {
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000 / 2; i++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	e002      	b.n	8000a5a <delay+0x12>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	3301      	adds	r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <delay+0x28>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d9f8      	bls.n	8000a54 <delay+0xc>
		;
}
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	0003d08f 	.word	0x0003d08f

08000a74 <SPI_VerifyResponse>:

uint8_t SPI_VerifyResponse(uint8_t ackbyte) {
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]

	if (ackbyte == (uint8_t) 0xF5) {
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	2bf5      	cmp	r3, #245	@ 0xf5
 8000a82:	d101      	bne.n	8000a88 <SPI_VerifyResponse+0x14>
		//ack
		return 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	e000      	b.n	8000a8a <SPI_VerifyResponse+0x16>
	}

	return 0;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
	...

08000a98 <main>:

int main() {
 8000a98:	b5b0      	push	{r4, r5, r7, lr}
 8000a9a:	b090      	sub	sp, #64	@ 0x40
 8000a9c:	af00      	add	r7, sp, #0

	uint8_t dummy_write = 0xff;
 8000a9e:	23ff      	movs	r3, #255	@ 0xff
 8000aa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t dummy_read;

	printf("Application is running\n");
 8000aa4:	48b3      	ldr	r0, [pc, #716]	@ (8000d74 <main+0x2dc>)
 8000aa6:	f000 fc1b 	bl	80012e0 <puts>

	GPIO_USER_INIT();
 8000aaa:	f000 f97b 	bl	8000da4 <GPIO_USER_INIT>
	SPI_USER_INIT();
 8000aae:	f000 f9d3 	bl	8000e58 <SPI_USER_INIT>

	printf("SPI Init. done\n");
 8000ab2:	48b1      	ldr	r0, [pc, #708]	@ (8000d78 <main+0x2e0>)
 8000ab4:	f000 fc14 	bl	80012e0 <puts>

	// strlen: excluding the null terminator itself (\0);
	// sizeof: including the null terminator (\0) and any unused space

	while (1) {
		while (!GPIO_INPUT(GPIOA, GPIO_PIN_0))
 8000ab8:	bf00      	nop
 8000aba:	2100      	movs	r1, #0
 8000abc:	48af      	ldr	r0, [pc, #700]	@ (8000d7c <main+0x2e4>)
 8000abe:	f7ff fdcb 	bl	8000658 <GPIO_INPUT>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d0f8      	beq.n	8000aba <main+0x22>
			;

		for (uint32_t i = 0; i < 500000; i++)
 8000ac8:	2300      	movs	r3, #0
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000acc:	e002      	b.n	8000ad4 <main+0x3c>
 8000ace:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ad6:	4aaa      	ldr	r2, [pc, #680]	@ (8000d80 <main+0x2e8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d9f8      	bls.n	8000ace <main+0x36>
			;

		//1. CMD_LED_CTRL  	<pin no(1)>     <value(1)>
		uint8_t commandcode = COMMAND_LED_CTRL;
 8000adc:	2350      	movs	r3, #80	@ 0x50
 8000ade:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

		//Send command
//		SPI_SEND(&SPI_Handle, &commandcode, 1);
//		SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &commandcode, &dummy_read, 1);
 8000ae2:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000ae6:	f107 0131 	add.w	r1, r7, #49	@ 0x31
 8000aea:	2301      	movs	r3, #1
 8000aec:	48a5      	ldr	r0, [pc, #660]	@ (8000d84 <main+0x2ec>)
 8000aee:	f7ff ff33 	bl	8000958 <SPI_SendReceive_FullDuplex>
//		SPI_SEND(&SPI_Handle, &dummy_write, 1);

		//Read the ack byte received
//		SPI_RECEIVE(&SPI_Handle, &ackbyte, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &dummy_write, &ackbyte, 1);
 8000af2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000af6:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8000afa:	2301      	movs	r3, #1
 8000afc:	48a1      	ldr	r0, [pc, #644]	@ (8000d84 <main+0x2ec>)
 8000afe:	f7ff ff2b 	bl	8000958 <SPI_SendReceive_FullDuplex>

		if (SPI_VerifyResponse(ackbyte)) {
 8000b02:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ffb4 	bl	8000a74 <SPI_VerifyResponse>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00f      	beq.n	8000b32 <main+0x9a>
			args[0] = LED_PIN;
 8000b12:	2309      	movs	r3, #9
 8000b14:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			args[1] = LED_ON;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			uint8_t argsDummy[2];

//			SPI_SEND(&SPI_Handle, args, 2);
			SPI_SendReceive_FullDuplex(&SPI_Handle, args, argsDummy, 2);
 8000b1e:	1d3a      	adds	r2, r7, #4
 8000b20:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000b24:	2302      	movs	r3, #2
 8000b26:	4897      	ldr	r0, [pc, #604]	@ (8000d84 <main+0x2ec>)
 8000b28:	f7ff ff16 	bl	8000958 <SPI_SendReceive_FullDuplex>
			printf("COMMAND_LED_CTRL Executed\n");
 8000b2c:	4896      	ldr	r0, [pc, #600]	@ (8000d88 <main+0x2f0>)
 8000b2e:	f000 fbd7 	bl	80012e0 <puts>
		//end of COMMAND_LED_CTRL

		//2. CMD_SENOSR_READ   <analog pin number(1) >

		//wait till button is pressed
		while (!GPIO_INPUT(GPIOA, GPIO_PIN_0))
 8000b32:	bf00      	nop
 8000b34:	2100      	movs	r1, #0
 8000b36:	4891      	ldr	r0, [pc, #580]	@ (8000d7c <main+0x2e4>)
 8000b38:	f7ff fd8e 	bl	8000658 <GPIO_INPUT>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d0f8      	beq.n	8000b34 <main+0x9c>
			;

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000b42:	f7ff ff81 	bl	8000a48 <delay>

		commandcode = COMMAND_SENSOR_READ;
 8000b46:	2351      	movs	r3, #81	@ 0x51
 8000b48:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

//		SPI_SEND(&SPI_Handle, &commandcode, 1);
		//do dummy read to clear off the RXNE
//		SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &commandcode, &dummy_read, 1);
 8000b4c:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000b50:	f107 0131 	add.w	r1, r7, #49	@ 0x31
 8000b54:	2301      	movs	r3, #1
 8000b56:	488b      	ldr	r0, [pc, #556]	@ (8000d84 <main+0x2ec>)
 8000b58:	f7ff fefe 	bl	8000958 <SPI_SendReceive_FullDuplex>
//		SPI_SEND(&SPI_Handle, &dummy_write, 1);

		//read the ack byte received
//		SPI_RECEIVE(&SPI_Handle, &ackbyte, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &dummy_write, &ackbyte, 1);
 8000b5c:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000b60:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8000b64:	2301      	movs	r3, #1
 8000b66:	4887      	ldr	r0, [pc, #540]	@ (8000d84 <main+0x2ec>)
 8000b68:	f7ff fef6 	bl	8000958 <SPI_SendReceive_FullDuplex>

		if (SPI_VerifyResponse(ackbyte)) {
 8000b6c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff ff7f 	bl	8000a74 <SPI_VerifyResponse>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d018      	beq.n	8000bae <main+0x116>
			args[0] = ANALOG_PIN0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
//			SPI_SEND(&SPI_Handle, args, 1); //sending one byte of

			//do dummy read to clear off the RXNE
//			SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);

			SPI_SendReceive_FullDuplex(&SPI_Handle, args, &dummy_read, 1);
 8000b82:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000b86:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	487d      	ldr	r0, [pc, #500]	@ (8000d84 <main+0x2ec>)
 8000b8e:	f7ff fee3 	bl	8000958 <SPI_SendReceive_FullDuplex>

			//insert some delay so that slave can ready with the data
			delay();
 8000b92:	f7ff ff59 	bl	8000a48 <delay>

			uint8_t analog_read;
			//Send some dummy bits (1 byte) fetch the response from the slave
//			SPI_SEND(&SPI_Handle, &dummy_write, 1);
//			SPI_RECEIVE(&SPI_Handle, &analog_read, 1);
			SPI_SendReceive_FullDuplex(&SPI_Handle, &dummy_write, &analog_read,
 8000b96:	1cfa      	adds	r2, r7, #3
 8000b98:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	4879      	ldr	r0, [pc, #484]	@ (8000d84 <main+0x2ec>)
 8000ba0:	f7ff feda 	bl	8000958 <SPI_SendReceive_FullDuplex>
					1);
			printf("COMMAND_SENSOR_READ %d\n", analog_read);
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4878      	ldr	r0, [pc, #480]	@ (8000d8c <main+0x2f4>)
 8000baa:	f000 fb31 	bl	8001210 <iprintf>
		}

		//3.  CMD_LED_READ 	 <pin no(1) >

		//wait till button is pressed
		while (!GPIO_INPUT(GPIOA, GPIO_PIN_0))
 8000bae:	bf00      	nop
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4872      	ldr	r0, [pc, #456]	@ (8000d7c <main+0x2e4>)
 8000bb4:	f7ff fd50 	bl	8000658 <GPIO_INPUT>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f8      	beq.n	8000bb0 <main+0x118>
			;

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000bbe:	f7ff ff43 	bl	8000a48 <delay>

		commandcode = COMMAND_LED_READ;
 8000bc2:	2352      	movs	r3, #82	@ 0x52
 8000bc4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
//		SPI_SEND(&SPI_Handle, &commandcode, 1);

		//do dummy read to clear off the RXNE
//		SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &commandcode, &dummy_read, 1);
 8000bc8:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000bcc:	f107 0131 	add.w	r1, r7, #49	@ 0x31
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	486c      	ldr	r0, [pc, #432]	@ (8000d84 <main+0x2ec>)
 8000bd4:	f7ff fec0 	bl	8000958 <SPI_SendReceive_FullDuplex>
		//Send some dummy byte to fetch the response from the slave
//		SPI_SEND(&SPI_Handle, &dummy_write, 1);

		//read the ack byte received
//		SPI_RECEIVE(&SPI_Handle, &ackbyte, 1);
		SPI_SendReceive_FullDuplex(&SPI_Handle, &dummy_write, &ackbyte, 1);
 8000bd8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000bdc:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8000be0:	2301      	movs	r3, #1
 8000be2:	4868      	ldr	r0, [pc, #416]	@ (8000d84 <main+0x2ec>)
 8000be4:	f7ff feb8 	bl	8000958 <SPI_SendReceive_FullDuplex>

		if (SPI_VerifyResponse(ackbyte)) {
 8000be8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff41 	bl	8000a74 <SPI_VerifyResponse>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d018      	beq.n	8000c2a <main+0x192>
			args[0] = LED_PIN;
 8000bf8:	2309      	movs	r3, #9
 8000bfa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
			//send arguments
//			SPI_SEND(&SPI_Handle, args, 1); //sending one byte of

			//do dummy read to clear off the RXNE
//			SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);
			SPI_SendReceive_FullDuplex(&SPI_Handle, args, &dummy_read, 1);
 8000bfe:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000c02:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000c06:	2301      	movs	r3, #1
 8000c08:	485e      	ldr	r0, [pc, #376]	@ (8000d84 <main+0x2ec>)
 8000c0a:	f7ff fea5 	bl	8000958 <SPI_SendReceive_FullDuplex>

			//insert some delay so that slave can ready with the data
			delay();
 8000c0e:	f7ff ff1b 	bl	8000a48 <delay>

			uint8_t led_status;
			//Send some dummy bits (1 byte) fetch the response from the slave
//			SPI_SEND(&SPI_Handle, &dummy_write, 1);
//			SPI_RECEIVE(&SPI_Handle, &led_status, 1);
			SPI_SendReceive_FullDuplex(&SPI_Handle, &dummy_write, &led_status,
 8000c12:	1cba      	adds	r2, r7, #2
 8000c14:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8000c18:	2301      	movs	r3, #1
 8000c1a:	485a      	ldr	r0, [pc, #360]	@ (8000d84 <main+0x2ec>)
 8000c1c:	f7ff fe9c 	bl	8000958 <SPI_SendReceive_FullDuplex>
					1);

			printf("COMMAND_READ_LED %d\n", led_status);
 8000c20:	78bb      	ldrb	r3, [r7, #2]
 8000c22:	4619      	mov	r1, r3
 8000c24:	485a      	ldr	r0, [pc, #360]	@ (8000d90 <main+0x2f8>)
 8000c26:	f000 faf3 	bl	8001210 <iprintf>

		}

		//4. CMD_PRINT 		<len(2)>  <message(len) >
		//wait till button is pressed
		while (!GPIO_INPUT(GPIOA, GPIO_PIN_0))
 8000c2a:	bf00      	nop
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4853      	ldr	r0, [pc, #332]	@ (8000d7c <main+0x2e4>)
 8000c30:	f7ff fd12 	bl	8000658 <GPIO_INPUT>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f8      	beq.n	8000c2c <main+0x194>
			;

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000c3a:	f7ff ff05 	bl	8000a48 <delay>
		commandcode = COMMAND_PRINT;
 8000c3e:	2353      	movs	r3, #83	@ 0x53
 8000c40:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
//		SPI_SEND(&SPI_Handle, &commandcode, 1);

		//do dummy read to clear off the RXNE
//		SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &commandcode, &dummy_read, 1);
 8000c44:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000c48:	f107 0131 	add.w	r1, r7, #49	@ 0x31
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	484d      	ldr	r0, [pc, #308]	@ (8000d84 <main+0x2ec>)
 8000c50:	f7ff fe82 	bl	8000958 <SPI_SendReceive_FullDuplex>
//		SPI_SEND(&SPI_Handle, &dummy_write, 1);

		//read the ack byte received
//		SPI_RECEIVE(&SPI_Handle, &ackbyte, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &dummy_write, &ackbyte, 1);
 8000c54:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000c58:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	4849      	ldr	r0, [pc, #292]	@ (8000d84 <main+0x2ec>)
 8000c60:	f7ff fe7a 	bl	8000958 <SPI_SendReceive_FullDuplex>

		uint8_t message[] = "Hello ! How are you ??";
 8000c64:	4b4b      	ldr	r3, [pc, #300]	@ (8000d94 <main+0x2fc>)
 8000c66:	f107 0414 	add.w	r4, r7, #20
 8000c6a:	461d      	mov	r5, r3
 8000c6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000c74:	6020      	str	r0, [r4, #0]
 8000c76:	3404      	adds	r4, #4
 8000c78:	8021      	strh	r1, [r4, #0]
 8000c7a:	3402      	adds	r4, #2
 8000c7c:	0c0b      	lsrs	r3, r1, #16
 8000c7e:	7023      	strb	r3, [r4, #0]
		if (SPI_VerifyResponse(ackbyte)) {
 8000c80:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fef5 	bl	8000a74 <SPI_VerifyResponse>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d02b      	beq.n	8000ce8 <main+0x250>
			args[0] = strlen((char*) message);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff fa9b 	bl	80001d0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
//			SPI_SEND(&SPI_Handle, args, 1); //sending length

			//do dummy read to clear off the RXNE
//			SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);

			SPI_SendReceive_FullDuplex(&SPI_Handle, args, &dummy_read, 1);
 8000ca2:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000ca6:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000caa:	2301      	movs	r3, #1
 8000cac:	4835      	ldr	r0, [pc, #212]	@ (8000d84 <main+0x2ec>)
 8000cae:	f7ff fe53 	bl	8000958 <SPI_SendReceive_FullDuplex>

			delay();
 8000cb2:	f7ff fec9 	bl	8000a48 <delay>

			//send message
			for (int i = 0; i < args[0]; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cba:	e00c      	b.n	8000cd6 <main+0x23e>
//				SPI_SEND(&SPI_Handle, &message[i], 1);
//				SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);

				SPI_SendReceive_FullDuplex(&SPI_Handle, &message[i],
 8000cbc:	f107 0214 	add.w	r2, r7, #20
 8000cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cc2:	18d1      	adds	r1, r2, r3
 8000cc4:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000cc8:	2301      	movs	r3, #1
 8000cca:	482e      	ldr	r0, [pc, #184]	@ (8000d84 <main+0x2ec>)
 8000ccc:	f7ff fe44 	bl	8000958 <SPI_SendReceive_FullDuplex>
			for (int i = 0; i < args[0]; i++) {
 8000cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000cd6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000cda:	461a      	mov	r2, r3
 8000cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	dbec      	blt.n	8000cbc <main+0x224>
						&dummy_read, 1);
			}

			printf("COMMAND_PRINT Executed \n");
 8000ce2:	482d      	ldr	r0, [pc, #180]	@ (8000d98 <main+0x300>)
 8000ce4:	f000 fafc 	bl	80012e0 <puts>

		}

		//5. CMD_ID_READ
		//wait till button is pressed
		while (!GPIO_INPUT(GPIOA, GPIO_PIN_0))
 8000ce8:	bf00      	nop
 8000cea:	2100      	movs	r1, #0
 8000cec:	4823      	ldr	r0, [pc, #140]	@ (8000d7c <main+0x2e4>)
 8000cee:	f7ff fcb3 	bl	8000658 <GPIO_INPUT>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d0f8      	beq.n	8000cea <main+0x252>
			;

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000cf8:	f7ff fea6 	bl	8000a48 <delay>

		commandcode = COMMAND_ID_READ;
 8000cfc:	2354      	movs	r3, #84	@ 0x54
 8000cfe:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
//		SPI_SEND(&SPI_Handle, &commandcode, 1);

		//do dummy read to clear off the RXNE
//		SPI_RECEIVE(&SPI_Handle, &dummy_read, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &commandcode, &dummy_read, 1);
 8000d02:	f107 0232 	add.w	r2, r7, #50	@ 0x32
 8000d06:	f107 0131 	add.w	r1, r7, #49	@ 0x31
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <main+0x2ec>)
 8000d0e:	f7ff fe23 	bl	8000958 <SPI_SendReceive_FullDuplex>
//		SPI_SEND(&SPI_Handle, &dummy_write, 1);

		//read the ack byte received
//		SPI_RECEIVE(&SPI_Handle, &ackbyte, 1);

		SPI_SendReceive_FullDuplex(&SPI_Handle, &dummy_write, &ackbyte, 1);
 8000d12:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8000d16:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	4819      	ldr	r0, [pc, #100]	@ (8000d84 <main+0x2ec>)
 8000d1e:	f7ff fe1b 	bl	8000958 <SPI_SendReceive_FullDuplex>

		uint8_t id[11];
		uint32_t i = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	@ 0x34
		if (SPI_VerifyResponse(ackbyte)) {
 8000d26:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fea2 	bl	8000a74 <SPI_VerifyResponse>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d01a      	beq.n	8000d6c <main+0x2d4>
			//read 10 bytes id from the slave
			for (i = 0; i < 10; i++) {
 8000d36:	2300      	movs	r3, #0
 8000d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d3a:	e00c      	b.n	8000d56 <main+0x2be>
				//send dummy byte to fetch data from slave
//				SPI_SEND(&SPI_Handle, &dummy_write, 1);
//				SPI_RECEIVE(&SPI_Handle, &id[i], 1);
				SPI_SendReceive_FullDuplex(&SPI_Handle, &dummy_write, &id[i],
 8000d3c:	f107 0208 	add.w	r2, r7, #8
 8000d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d42:	441a      	add	r2, r3
 8000d44:	f107 0133 	add.w	r1, r7, #51	@ 0x33
 8000d48:	2301      	movs	r3, #1
 8000d4a:	480e      	ldr	r0, [pc, #56]	@ (8000d84 <main+0x2ec>)
 8000d4c:	f7ff fe04 	bl	8000958 <SPI_SendReceive_FullDuplex>
			for (i = 0; i < 10; i++) {
 8000d50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d52:	3301      	adds	r3, #1
 8000d54:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d58:	2b09      	cmp	r3, #9
 8000d5a:	d9ef      	bls.n	8000d3c <main+0x2a4>
						1);
			}

			id[10] = '\0';
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	74bb      	strb	r3, [r7, #18]

			printf("COMMAND_ID : %s \n", id);
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4619      	mov	r1, r3
 8000d66:	480d      	ldr	r0, [pc, #52]	@ (8000d9c <main+0x304>)
 8000d68:	f000 fa52 	bl	8001210 <iprintf>

		}

		printf("SPI Communication Closed\n");
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <main+0x308>)
 8000d6e:	f000 fab7 	bl	80012e0 <puts>
	while (1) {
 8000d72:	e6a1      	b.n	8000ab8 <main+0x20>
 8000d74:	08001fbc 	.word	0x08001fbc
 8000d78:	08001fd4 	.word	0x08001fd4
 8000d7c:	40020000 	.word	0x40020000
 8000d80:	0007a11f 	.word	0x0007a11f
 8000d84:	20000078 	.word	0x20000078
 8000d88:	08001fe4 	.word	0x08001fe4
 8000d8c:	08002000 	.word	0x08002000
 8000d90:	08002018 	.word	0x08002018
 8000d94:	08002078 	.word	0x08002078
 8000d98:	08002030 	.word	0x08002030
 8000d9c:	08002048 	.word	0x08002048
 8000da0:	0800205c 	.word	0x0800205c

08000da4 <GPIO_USER_INIT>:

	}
	return 0;
}

void GPIO_USER_INIT(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
 8000da8:	4b27      	ldr	r3, [pc, #156]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000daa:	4a28      	ldr	r2, [pc, #160]	@ (8000e4c <GPIO_USER_INIT+0xa8>)
 8000dac:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 8000dae:	4b26      	ldr	r3, [pc, #152]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8000db4:	4b24      	ldr	r3, [pc, #144]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000dba:	4b23      	ldr	r3, [pc, #140]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8000dc0:	4821      	ldr	r0, [pc, #132]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000dc2:	f7ff fa5d 	bl	8000280 <GPIO_INIT>

	//this is led gpio configuration
	GPIO_Handle.GPIOX = GPIOD;
 8000dc6:	4b20      	ldr	r3, [pc, #128]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000dc8:	4a21      	ldr	r2, [pc, #132]	@ (8000e50 <GPIO_USER_INIT+0xac>)
 8000dca:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_OUTPUT;
 8000dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000dd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_PP;
 8000dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000dde:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	719a      	strb	r2, [r3, #6]
	GPIO_Handle.pin_number = GPIO_PIN_12;
 8000de4:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000dea:	4817      	ldr	r0, [pc, #92]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000dec:	f7ff fa48 	bl	8000280 <GPIO_INIT>

	// PB12 - SPI2_NSS
	GPIO_Handle.GPIOX = GPIOB;
 8000df0:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000df2:	4a18      	ldr	r2, [pc, #96]	@ (8000e54 <GPIO_USER_INIT+0xb0>)
 8000df4:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8000df6:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.alternate_function_select = GPIO_AF5;
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000dfe:	2205      	movs	r2, #5
 8000e00:	725a      	strb	r2, [r3, #9]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_PP;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	719a      	strb	r2, [r3, #6]
	GPIO_Handle.pin_number = GPIO_PIN_12;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e1a:	480b      	ldr	r0, [pc, #44]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e1c:	f7ff fa30 	bl	8000280 <GPIO_INIT>

	// PB13 - SPI2_SCLK
	GPIO_Handle.pin_number = GPIO_PIN_13;
 8000e20:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e22:	220d      	movs	r2, #13
 8000e24:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e26:	4808      	ldr	r0, [pc, #32]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e28:	f7ff fa2a 	bl	8000280 <GPIO_INIT>

	// PB14 - SPI2_MISO
	GPIO_Handle.pin_number = GPIO_PIN_14;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e2e:	220e      	movs	r2, #14
 8000e30:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e32:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e34:	f7ff fa24 	bl	8000280 <GPIO_INIT>

	// PB15 - SPI2_MOSI
	GPIO_Handle.pin_number = GPIO_PIN_15;
 8000e38:	4b03      	ldr	r3, [pc, #12]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e3a:	220f      	movs	r2, #15
 8000e3c:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e3e:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <GPIO_USER_INIT+0xa4>)
 8000e40:	f7ff fa1e 	bl	8000280 <GPIO_INIT>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000084 	.word	0x20000084
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020c00 	.word	0x40020c00
 8000e54:	40020400 	.word	0x40020400

08000e58 <SPI_USER_INIT>:

void SPI_USER_INIT() {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	SPI_Handle.SPIx = SPI2;
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e5e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e9c <SPI_USER_INIT+0x44>)
 8000e60:	601a      	str	r2, [r3, #0]
	SPI_Handle.spi_clock_phase = SPI_DATA_CAPTURED_FIRST_CLOCK;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	721a      	strb	r2, [r3, #8]
	SPI_Handle.spi_clock_polarity = SPI_IDLE_LOW;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	71da      	strb	r2, [r3, #7]
	SPI_Handle.spi_data_direction = SPI_FULL_DUPLEX_MODE;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e70:	2203      	movs	r2, #3
 8000e72:	711a      	strb	r2, [r3, #4]
	SPI_Handle.spi_frame_format = SPI_8_BIT_FRAME_FORMAT;
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	715a      	strb	r2, [r3, #5]
	SPI_Handle.spi_master_slave = SPI_MASTER_MODE;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	719a      	strb	r2, [r3, #6]
	SPI_Handle.spi_sclk_prescaler = SPI_PRES_32;
 8000e80:	4b05      	ldr	r3, [pc, #20]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	729a      	strb	r2, [r3, #10]
	SPI_Handle.spi_ssm = SPI_SOFTWARE_SLAVE_DIS;
 8000e86:	4b04      	ldr	r3, [pc, #16]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	725a      	strb	r2, [r3, #9]
	SPI_INIT(&SPI_Handle);
 8000e8c:	4802      	ldr	r0, [pc, #8]	@ (8000e98 <SPI_USER_INIT+0x40>)
 8000e8e:	f7ff fc39 	bl	8000704 <SPI_INIT>
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000078 	.word	0x20000078
 8000e9c:	40003800 	.word	0x40003800

08000ea0 <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <ITM_SendChar+0x48>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a0e      	ldr	r2, [pc, #56]	@ (8000ee8 <ITM_SendChar+0x48>)
 8000eb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000eb4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 8000eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000eec <ITM_SendChar+0x4c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a0c      	ldr	r2, [pc, #48]	@ (8000eec <ITM_SendChar+0x4c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 8000ec2:	bf00      	nop
 8000ec4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d0f8      	beq.n	8000ec4 <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000ed2:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000edfc 	.word	0xe000edfc
 8000eec:	e0000e00 	.word	0xe0000e00

08000ef0 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00a      	b.n	8000f18 <_read+0x28>
		*ptr++ = __io_getchar();
 8000f02:	f3af 8000 	nop.w
 8000f06:	4601      	mov	r1, r0
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	1c5a      	adds	r2, r3, #1
 8000f0c:	60ba      	str	r2, [r7, #8]
 8000f0e:	b2ca      	uxtb	r2, r1
 8000f10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	3301      	adds	r3, #1
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697a      	ldr	r2, [r7, #20]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	dbf0      	blt.n	8000f02 <_read+0x12>
	}

	return len;
 8000f20:	687b      	ldr	r3, [r7, #4]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	60f8      	str	r0, [r7, #12]
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	e009      	b.n	8000f50 <_write+0x26>
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ffab 	bl	8000ea0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dbf1      	blt.n	8000f3c <_write+0x12>
	}
	return len;
 8000f58:	687b      	ldr	r3, [r7, #4]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3718      	adds	r7, #24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <_close>:

int _close(int file) {
 8000f62:	b480      	push	{r7}
 8000f64:	b083      	sub	sp, #12
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <_fstat>:

int _fstat(int file, struct stat *st) {
 8000f7a:	b480      	push	{r7}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
 8000f82:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f8c:	2300      	movs	r3, #0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr

08000f9a <_isatty>:

int _isatty(int file) {
 8000f9a:	b480      	push	{r7}
 8000f9c:	b083      	sub	sp, #12
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8000fb0:	b480      	push	{r7}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3714      	adds	r7, #20
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
	...

08000fcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd4:	4a14      	ldr	r2, [pc, #80]	@ (8001028 <_sbrk+0x5c>)
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <_sbrk+0x60>)
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe0:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <_sbrk+0x64>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d102      	bne.n	8000fee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe8:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <_sbrk+0x64>)
 8000fea:	4a12      	ldr	r2, [pc, #72]	@ (8001034 <_sbrk+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <_sbrk+0x64>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d207      	bcs.n	800100c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ffc:	f000 fa9e 	bl	800153c <__errno>
 8001000:	4603      	mov	r3, r0
 8001002:	220c      	movs	r2, #12
 8001004:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001006:	f04f 33ff 	mov.w	r3, #4294967295
 800100a:	e009      	b.n	8001020 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800100c:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <_sbrk+0x64>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <_sbrk+0x64>)
 800101c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800101e:	68fb      	ldr	r3, [r7, #12]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3718      	adds	r7, #24
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20020000 	.word	0x20020000
 800102c:	00000400 	.word	0x00000400
 8001030:	20000090 	.word	0x20000090
 8001034:	200001e0 	.word	0x200001e0

08001038 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001038:	480d      	ldr	r0, [pc, #52]	@ (8001070 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800103c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001040:	480c      	ldr	r0, [pc, #48]	@ (8001074 <LoopForever+0x6>)
  ldr r1, =_edata
 8001042:	490d      	ldr	r1, [pc, #52]	@ (8001078 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <LoopForever+0xe>)
  movs r3, #0
 8001046:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001048:	e002      	b.n	8001050 <LoopCopyDataInit>

0800104a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800104c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800104e:	3304      	adds	r3, #4

08001050 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001050:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001052:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001054:	d3f9      	bcc.n	800104a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001056:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001058:	4c0a      	ldr	r4, [pc, #40]	@ (8001084 <LoopForever+0x16>)
  movs r3, #0
 800105a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800105c:	e001      	b.n	8001062 <LoopFillZerobss>

0800105e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800105e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001060:	3204      	adds	r2, #4

08001062 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001062:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001064:	d3fb      	bcc.n	800105e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001066:	f000 fa6f 	bl	8001548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800106a:	f7ff fd15 	bl	8000a98 <main>

0800106e <LoopForever>:

LoopForever:
  b LoopForever
 800106e:	e7fe      	b.n	800106e <LoopForever>
  ldr   r0, =_estack
 8001070:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001078:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800107c:	080020d4 	.word	0x080020d4
  ldr r2, =_sbss
 8001080:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001084:	200001e0 	.word	0x200001e0

08001088 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001088:	e7fe      	b.n	8001088 <ADC_IRQHandler>
	...

0800108c <std>:
 800108c:	2300      	movs	r3, #0
 800108e:	b510      	push	{r4, lr}
 8001090:	4604      	mov	r4, r0
 8001092:	e9c0 3300 	strd	r3, r3, [r0]
 8001096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800109a:	6083      	str	r3, [r0, #8]
 800109c:	8181      	strh	r1, [r0, #12]
 800109e:	6643      	str	r3, [r0, #100]	@ 0x64
 80010a0:	81c2      	strh	r2, [r0, #14]
 80010a2:	6183      	str	r3, [r0, #24]
 80010a4:	4619      	mov	r1, r3
 80010a6:	2208      	movs	r2, #8
 80010a8:	305c      	adds	r0, #92	@ 0x5c
 80010aa:	f000 f9f9 	bl	80014a0 <memset>
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <std+0x58>)
 80010b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <std+0x5c>)
 80010b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80010b6:	4b0d      	ldr	r3, [pc, #52]	@ (80010ec <std+0x60>)
 80010b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80010ba:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <std+0x64>)
 80010bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80010be:	4b0d      	ldr	r3, [pc, #52]	@ (80010f4 <std+0x68>)
 80010c0:	6224      	str	r4, [r4, #32]
 80010c2:	429c      	cmp	r4, r3
 80010c4:	d006      	beq.n	80010d4 <std+0x48>
 80010c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80010ca:	4294      	cmp	r4, r2
 80010cc:	d002      	beq.n	80010d4 <std+0x48>
 80010ce:	33d0      	adds	r3, #208	@ 0xd0
 80010d0:	429c      	cmp	r4, r3
 80010d2:	d105      	bne.n	80010e0 <std+0x54>
 80010d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80010d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80010dc:	f000 ba58 	b.w	8001590 <__retarget_lock_init_recursive>
 80010e0:	bd10      	pop	{r4, pc}
 80010e2:	bf00      	nop
 80010e4:	080012f1 	.word	0x080012f1
 80010e8:	08001313 	.word	0x08001313
 80010ec:	0800134b 	.word	0x0800134b
 80010f0:	0800136f 	.word	0x0800136f
 80010f4:	20000094 	.word	0x20000094

080010f8 <stdio_exit_handler>:
 80010f8:	4a02      	ldr	r2, [pc, #8]	@ (8001104 <stdio_exit_handler+0xc>)
 80010fa:	4903      	ldr	r1, [pc, #12]	@ (8001108 <stdio_exit_handler+0x10>)
 80010fc:	4803      	ldr	r0, [pc, #12]	@ (800110c <stdio_exit_handler+0x14>)
 80010fe:	f000 b869 	b.w	80011d4 <_fwalk_sglue>
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000
 8001108:	08001e2d 	.word	0x08001e2d
 800110c:	20000010 	.word	0x20000010

08001110 <cleanup_stdio>:
 8001110:	6841      	ldr	r1, [r0, #4]
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <cleanup_stdio+0x34>)
 8001114:	4299      	cmp	r1, r3
 8001116:	b510      	push	{r4, lr}
 8001118:	4604      	mov	r4, r0
 800111a:	d001      	beq.n	8001120 <cleanup_stdio+0x10>
 800111c:	f000 fe86 	bl	8001e2c <_fflush_r>
 8001120:	68a1      	ldr	r1, [r4, #8]
 8001122:	4b09      	ldr	r3, [pc, #36]	@ (8001148 <cleanup_stdio+0x38>)
 8001124:	4299      	cmp	r1, r3
 8001126:	d002      	beq.n	800112e <cleanup_stdio+0x1e>
 8001128:	4620      	mov	r0, r4
 800112a:	f000 fe7f 	bl	8001e2c <_fflush_r>
 800112e:	68e1      	ldr	r1, [r4, #12]
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <cleanup_stdio+0x3c>)
 8001132:	4299      	cmp	r1, r3
 8001134:	d004      	beq.n	8001140 <cleanup_stdio+0x30>
 8001136:	4620      	mov	r0, r4
 8001138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800113c:	f000 be76 	b.w	8001e2c <_fflush_r>
 8001140:	bd10      	pop	{r4, pc}
 8001142:	bf00      	nop
 8001144:	20000094 	.word	0x20000094
 8001148:	200000fc 	.word	0x200000fc
 800114c:	20000164 	.word	0x20000164

08001150 <global_stdio_init.part.0>:
 8001150:	b510      	push	{r4, lr}
 8001152:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <global_stdio_init.part.0+0x30>)
 8001154:	4c0b      	ldr	r4, [pc, #44]	@ (8001184 <global_stdio_init.part.0+0x34>)
 8001156:	4a0c      	ldr	r2, [pc, #48]	@ (8001188 <global_stdio_init.part.0+0x38>)
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	4620      	mov	r0, r4
 800115c:	2200      	movs	r2, #0
 800115e:	2104      	movs	r1, #4
 8001160:	f7ff ff94 	bl	800108c <std>
 8001164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001168:	2201      	movs	r2, #1
 800116a:	2109      	movs	r1, #9
 800116c:	f7ff ff8e 	bl	800108c <std>
 8001170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001174:	2202      	movs	r2, #2
 8001176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800117a:	2112      	movs	r1, #18
 800117c:	f7ff bf86 	b.w	800108c <std>
 8001180:	200001cc 	.word	0x200001cc
 8001184:	20000094 	.word	0x20000094
 8001188:	080010f9 	.word	0x080010f9

0800118c <__sfp_lock_acquire>:
 800118c:	4801      	ldr	r0, [pc, #4]	@ (8001194 <__sfp_lock_acquire+0x8>)
 800118e:	f000 ba00 	b.w	8001592 <__retarget_lock_acquire_recursive>
 8001192:	bf00      	nop
 8001194:	200001d5 	.word	0x200001d5

08001198 <__sfp_lock_release>:
 8001198:	4801      	ldr	r0, [pc, #4]	@ (80011a0 <__sfp_lock_release+0x8>)
 800119a:	f000 b9fb 	b.w	8001594 <__retarget_lock_release_recursive>
 800119e:	bf00      	nop
 80011a0:	200001d5 	.word	0x200001d5

080011a4 <__sinit>:
 80011a4:	b510      	push	{r4, lr}
 80011a6:	4604      	mov	r4, r0
 80011a8:	f7ff fff0 	bl	800118c <__sfp_lock_acquire>
 80011ac:	6a23      	ldr	r3, [r4, #32]
 80011ae:	b11b      	cbz	r3, 80011b8 <__sinit+0x14>
 80011b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b4:	f7ff bff0 	b.w	8001198 <__sfp_lock_release>
 80011b8:	4b04      	ldr	r3, [pc, #16]	@ (80011cc <__sinit+0x28>)
 80011ba:	6223      	str	r3, [r4, #32]
 80011bc:	4b04      	ldr	r3, [pc, #16]	@ (80011d0 <__sinit+0x2c>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f5      	bne.n	80011b0 <__sinit+0xc>
 80011c4:	f7ff ffc4 	bl	8001150 <global_stdio_init.part.0>
 80011c8:	e7f2      	b.n	80011b0 <__sinit+0xc>
 80011ca:	bf00      	nop
 80011cc:	08001111 	.word	0x08001111
 80011d0:	200001cc 	.word	0x200001cc

080011d4 <_fwalk_sglue>:
 80011d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80011d8:	4607      	mov	r7, r0
 80011da:	4688      	mov	r8, r1
 80011dc:	4614      	mov	r4, r2
 80011de:	2600      	movs	r6, #0
 80011e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80011e4:	f1b9 0901 	subs.w	r9, r9, #1
 80011e8:	d505      	bpl.n	80011f6 <_fwalk_sglue+0x22>
 80011ea:	6824      	ldr	r4, [r4, #0]
 80011ec:	2c00      	cmp	r4, #0
 80011ee:	d1f7      	bne.n	80011e0 <_fwalk_sglue+0xc>
 80011f0:	4630      	mov	r0, r6
 80011f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011f6:	89ab      	ldrh	r3, [r5, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d907      	bls.n	800120c <_fwalk_sglue+0x38>
 80011fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001200:	3301      	adds	r3, #1
 8001202:	d003      	beq.n	800120c <_fwalk_sglue+0x38>
 8001204:	4629      	mov	r1, r5
 8001206:	4638      	mov	r0, r7
 8001208:	47c0      	blx	r8
 800120a:	4306      	orrs	r6, r0
 800120c:	3568      	adds	r5, #104	@ 0x68
 800120e:	e7e9      	b.n	80011e4 <_fwalk_sglue+0x10>

08001210 <iprintf>:
 8001210:	b40f      	push	{r0, r1, r2, r3}
 8001212:	b507      	push	{r0, r1, r2, lr}
 8001214:	4906      	ldr	r1, [pc, #24]	@ (8001230 <iprintf+0x20>)
 8001216:	ab04      	add	r3, sp, #16
 8001218:	6808      	ldr	r0, [r1, #0]
 800121a:	f853 2b04 	ldr.w	r2, [r3], #4
 800121e:	6881      	ldr	r1, [r0, #8]
 8001220:	9301      	str	r3, [sp, #4]
 8001222:	f000 fadb 	bl	80017dc <_vfiprintf_r>
 8001226:	b003      	add	sp, #12
 8001228:	f85d eb04 	ldr.w	lr, [sp], #4
 800122c:	b004      	add	sp, #16
 800122e:	4770      	bx	lr
 8001230:	2000000c 	.word	0x2000000c

08001234 <_puts_r>:
 8001234:	6a03      	ldr	r3, [r0, #32]
 8001236:	b570      	push	{r4, r5, r6, lr}
 8001238:	6884      	ldr	r4, [r0, #8]
 800123a:	4605      	mov	r5, r0
 800123c:	460e      	mov	r6, r1
 800123e:	b90b      	cbnz	r3, 8001244 <_puts_r+0x10>
 8001240:	f7ff ffb0 	bl	80011a4 <__sinit>
 8001244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001246:	07db      	lsls	r3, r3, #31
 8001248:	d405      	bmi.n	8001256 <_puts_r+0x22>
 800124a:	89a3      	ldrh	r3, [r4, #12]
 800124c:	0598      	lsls	r0, r3, #22
 800124e:	d402      	bmi.n	8001256 <_puts_r+0x22>
 8001250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001252:	f000 f99e 	bl	8001592 <__retarget_lock_acquire_recursive>
 8001256:	89a3      	ldrh	r3, [r4, #12]
 8001258:	0719      	lsls	r1, r3, #28
 800125a:	d502      	bpl.n	8001262 <_puts_r+0x2e>
 800125c:	6923      	ldr	r3, [r4, #16]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d135      	bne.n	80012ce <_puts_r+0x9a>
 8001262:	4621      	mov	r1, r4
 8001264:	4628      	mov	r0, r5
 8001266:	f000 f8c5 	bl	80013f4 <__swsetup_r>
 800126a:	b380      	cbz	r0, 80012ce <_puts_r+0x9a>
 800126c:	f04f 35ff 	mov.w	r5, #4294967295
 8001270:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001272:	07da      	lsls	r2, r3, #31
 8001274:	d405      	bmi.n	8001282 <_puts_r+0x4e>
 8001276:	89a3      	ldrh	r3, [r4, #12]
 8001278:	059b      	lsls	r3, r3, #22
 800127a:	d402      	bmi.n	8001282 <_puts_r+0x4e>
 800127c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800127e:	f000 f989 	bl	8001594 <__retarget_lock_release_recursive>
 8001282:	4628      	mov	r0, r5
 8001284:	bd70      	pop	{r4, r5, r6, pc}
 8001286:	2b00      	cmp	r3, #0
 8001288:	da04      	bge.n	8001294 <_puts_r+0x60>
 800128a:	69a2      	ldr	r2, [r4, #24]
 800128c:	429a      	cmp	r2, r3
 800128e:	dc17      	bgt.n	80012c0 <_puts_r+0x8c>
 8001290:	290a      	cmp	r1, #10
 8001292:	d015      	beq.n	80012c0 <_puts_r+0x8c>
 8001294:	6823      	ldr	r3, [r4, #0]
 8001296:	1c5a      	adds	r2, r3, #1
 8001298:	6022      	str	r2, [r4, #0]
 800129a:	7019      	strb	r1, [r3, #0]
 800129c:	68a3      	ldr	r3, [r4, #8]
 800129e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80012a2:	3b01      	subs	r3, #1
 80012a4:	60a3      	str	r3, [r4, #8]
 80012a6:	2900      	cmp	r1, #0
 80012a8:	d1ed      	bne.n	8001286 <_puts_r+0x52>
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	da11      	bge.n	80012d2 <_puts_r+0x9e>
 80012ae:	4622      	mov	r2, r4
 80012b0:	210a      	movs	r1, #10
 80012b2:	4628      	mov	r0, r5
 80012b4:	f000 f85f 	bl	8001376 <__swbuf_r>
 80012b8:	3001      	adds	r0, #1
 80012ba:	d0d7      	beq.n	800126c <_puts_r+0x38>
 80012bc:	250a      	movs	r5, #10
 80012be:	e7d7      	b.n	8001270 <_puts_r+0x3c>
 80012c0:	4622      	mov	r2, r4
 80012c2:	4628      	mov	r0, r5
 80012c4:	f000 f857 	bl	8001376 <__swbuf_r>
 80012c8:	3001      	adds	r0, #1
 80012ca:	d1e7      	bne.n	800129c <_puts_r+0x68>
 80012cc:	e7ce      	b.n	800126c <_puts_r+0x38>
 80012ce:	3e01      	subs	r6, #1
 80012d0:	e7e4      	b.n	800129c <_puts_r+0x68>
 80012d2:	6823      	ldr	r3, [r4, #0]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	6022      	str	r2, [r4, #0]
 80012d8:	220a      	movs	r2, #10
 80012da:	701a      	strb	r2, [r3, #0]
 80012dc:	e7ee      	b.n	80012bc <_puts_r+0x88>
	...

080012e0 <puts>:
 80012e0:	4b02      	ldr	r3, [pc, #8]	@ (80012ec <puts+0xc>)
 80012e2:	4601      	mov	r1, r0
 80012e4:	6818      	ldr	r0, [r3, #0]
 80012e6:	f7ff bfa5 	b.w	8001234 <_puts_r>
 80012ea:	bf00      	nop
 80012ec:	2000000c 	.word	0x2000000c

080012f0 <__sread>:
 80012f0:	b510      	push	{r4, lr}
 80012f2:	460c      	mov	r4, r1
 80012f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012f8:	f000 f8fc 	bl	80014f4 <_read_r>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	bfab      	itete	ge
 8001300:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001302:	89a3      	ldrhlt	r3, [r4, #12]
 8001304:	181b      	addge	r3, r3, r0
 8001306:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800130a:	bfac      	ite	ge
 800130c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800130e:	81a3      	strhlt	r3, [r4, #12]
 8001310:	bd10      	pop	{r4, pc}

08001312 <__swrite>:
 8001312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001316:	461f      	mov	r7, r3
 8001318:	898b      	ldrh	r3, [r1, #12]
 800131a:	05db      	lsls	r3, r3, #23
 800131c:	4605      	mov	r5, r0
 800131e:	460c      	mov	r4, r1
 8001320:	4616      	mov	r6, r2
 8001322:	d505      	bpl.n	8001330 <__swrite+0x1e>
 8001324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001328:	2302      	movs	r3, #2
 800132a:	2200      	movs	r2, #0
 800132c:	f000 f8d0 	bl	80014d0 <_lseek_r>
 8001330:	89a3      	ldrh	r3, [r4, #12]
 8001332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001336:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800133a:	81a3      	strh	r3, [r4, #12]
 800133c:	4632      	mov	r2, r6
 800133e:	463b      	mov	r3, r7
 8001340:	4628      	mov	r0, r5
 8001342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001346:	f000 b8e7 	b.w	8001518 <_write_r>

0800134a <__sseek>:
 800134a:	b510      	push	{r4, lr}
 800134c:	460c      	mov	r4, r1
 800134e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001352:	f000 f8bd 	bl	80014d0 <_lseek_r>
 8001356:	1c43      	adds	r3, r0, #1
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	bf15      	itete	ne
 800135c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800135e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001362:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001366:	81a3      	strheq	r3, [r4, #12]
 8001368:	bf18      	it	ne
 800136a:	81a3      	strhne	r3, [r4, #12]
 800136c:	bd10      	pop	{r4, pc}

0800136e <__sclose>:
 800136e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001372:	f000 b89d 	b.w	80014b0 <_close_r>

08001376 <__swbuf_r>:
 8001376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001378:	460e      	mov	r6, r1
 800137a:	4614      	mov	r4, r2
 800137c:	4605      	mov	r5, r0
 800137e:	b118      	cbz	r0, 8001388 <__swbuf_r+0x12>
 8001380:	6a03      	ldr	r3, [r0, #32]
 8001382:	b90b      	cbnz	r3, 8001388 <__swbuf_r+0x12>
 8001384:	f7ff ff0e 	bl	80011a4 <__sinit>
 8001388:	69a3      	ldr	r3, [r4, #24]
 800138a:	60a3      	str	r3, [r4, #8]
 800138c:	89a3      	ldrh	r3, [r4, #12]
 800138e:	071a      	lsls	r2, r3, #28
 8001390:	d501      	bpl.n	8001396 <__swbuf_r+0x20>
 8001392:	6923      	ldr	r3, [r4, #16]
 8001394:	b943      	cbnz	r3, 80013a8 <__swbuf_r+0x32>
 8001396:	4621      	mov	r1, r4
 8001398:	4628      	mov	r0, r5
 800139a:	f000 f82b 	bl	80013f4 <__swsetup_r>
 800139e:	b118      	cbz	r0, 80013a8 <__swbuf_r+0x32>
 80013a0:	f04f 37ff 	mov.w	r7, #4294967295
 80013a4:	4638      	mov	r0, r7
 80013a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	6922      	ldr	r2, [r4, #16]
 80013ac:	1a98      	subs	r0, r3, r2
 80013ae:	6963      	ldr	r3, [r4, #20]
 80013b0:	b2f6      	uxtb	r6, r6
 80013b2:	4283      	cmp	r3, r0
 80013b4:	4637      	mov	r7, r6
 80013b6:	dc05      	bgt.n	80013c4 <__swbuf_r+0x4e>
 80013b8:	4621      	mov	r1, r4
 80013ba:	4628      	mov	r0, r5
 80013bc:	f000 fd36 	bl	8001e2c <_fflush_r>
 80013c0:	2800      	cmp	r0, #0
 80013c2:	d1ed      	bne.n	80013a0 <__swbuf_r+0x2a>
 80013c4:	68a3      	ldr	r3, [r4, #8]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	60a3      	str	r3, [r4, #8]
 80013ca:	6823      	ldr	r3, [r4, #0]
 80013cc:	1c5a      	adds	r2, r3, #1
 80013ce:	6022      	str	r2, [r4, #0]
 80013d0:	701e      	strb	r6, [r3, #0]
 80013d2:	6962      	ldr	r2, [r4, #20]
 80013d4:	1c43      	adds	r3, r0, #1
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d004      	beq.n	80013e4 <__swbuf_r+0x6e>
 80013da:	89a3      	ldrh	r3, [r4, #12]
 80013dc:	07db      	lsls	r3, r3, #31
 80013de:	d5e1      	bpl.n	80013a4 <__swbuf_r+0x2e>
 80013e0:	2e0a      	cmp	r6, #10
 80013e2:	d1df      	bne.n	80013a4 <__swbuf_r+0x2e>
 80013e4:	4621      	mov	r1, r4
 80013e6:	4628      	mov	r0, r5
 80013e8:	f000 fd20 	bl	8001e2c <_fflush_r>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d0d9      	beq.n	80013a4 <__swbuf_r+0x2e>
 80013f0:	e7d6      	b.n	80013a0 <__swbuf_r+0x2a>
	...

080013f4 <__swsetup_r>:
 80013f4:	b538      	push	{r3, r4, r5, lr}
 80013f6:	4b29      	ldr	r3, [pc, #164]	@ (800149c <__swsetup_r+0xa8>)
 80013f8:	4605      	mov	r5, r0
 80013fa:	6818      	ldr	r0, [r3, #0]
 80013fc:	460c      	mov	r4, r1
 80013fe:	b118      	cbz	r0, 8001408 <__swsetup_r+0x14>
 8001400:	6a03      	ldr	r3, [r0, #32]
 8001402:	b90b      	cbnz	r3, 8001408 <__swsetup_r+0x14>
 8001404:	f7ff fece 	bl	80011a4 <__sinit>
 8001408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800140c:	0719      	lsls	r1, r3, #28
 800140e:	d422      	bmi.n	8001456 <__swsetup_r+0x62>
 8001410:	06da      	lsls	r2, r3, #27
 8001412:	d407      	bmi.n	8001424 <__swsetup_r+0x30>
 8001414:	2209      	movs	r2, #9
 8001416:	602a      	str	r2, [r5, #0]
 8001418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800141c:	81a3      	strh	r3, [r4, #12]
 800141e:	f04f 30ff 	mov.w	r0, #4294967295
 8001422:	e033      	b.n	800148c <__swsetup_r+0x98>
 8001424:	0758      	lsls	r0, r3, #29
 8001426:	d512      	bpl.n	800144e <__swsetup_r+0x5a>
 8001428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800142a:	b141      	cbz	r1, 800143e <__swsetup_r+0x4a>
 800142c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001430:	4299      	cmp	r1, r3
 8001432:	d002      	beq.n	800143a <__swsetup_r+0x46>
 8001434:	4628      	mov	r0, r5
 8001436:	f000 f8af 	bl	8001598 <_free_r>
 800143a:	2300      	movs	r3, #0
 800143c:	6363      	str	r3, [r4, #52]	@ 0x34
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001444:	81a3      	strh	r3, [r4, #12]
 8001446:	2300      	movs	r3, #0
 8001448:	6063      	str	r3, [r4, #4]
 800144a:	6923      	ldr	r3, [r4, #16]
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	81a3      	strh	r3, [r4, #12]
 8001456:	6923      	ldr	r3, [r4, #16]
 8001458:	b94b      	cbnz	r3, 800146e <__swsetup_r+0x7a>
 800145a:	89a3      	ldrh	r3, [r4, #12]
 800145c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001464:	d003      	beq.n	800146e <__swsetup_r+0x7a>
 8001466:	4621      	mov	r1, r4
 8001468:	4628      	mov	r0, r5
 800146a:	f000 fd2d 	bl	8001ec8 <__smakebuf_r>
 800146e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001472:	f013 0201 	ands.w	r2, r3, #1
 8001476:	d00a      	beq.n	800148e <__swsetup_r+0x9a>
 8001478:	2200      	movs	r2, #0
 800147a:	60a2      	str	r2, [r4, #8]
 800147c:	6962      	ldr	r2, [r4, #20]
 800147e:	4252      	negs	r2, r2
 8001480:	61a2      	str	r2, [r4, #24]
 8001482:	6922      	ldr	r2, [r4, #16]
 8001484:	b942      	cbnz	r2, 8001498 <__swsetup_r+0xa4>
 8001486:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800148a:	d1c5      	bne.n	8001418 <__swsetup_r+0x24>
 800148c:	bd38      	pop	{r3, r4, r5, pc}
 800148e:	0799      	lsls	r1, r3, #30
 8001490:	bf58      	it	pl
 8001492:	6962      	ldrpl	r2, [r4, #20]
 8001494:	60a2      	str	r2, [r4, #8]
 8001496:	e7f4      	b.n	8001482 <__swsetup_r+0x8e>
 8001498:	2000      	movs	r0, #0
 800149a:	e7f7      	b.n	800148c <__swsetup_r+0x98>
 800149c:	2000000c 	.word	0x2000000c

080014a0 <memset>:
 80014a0:	4402      	add	r2, r0
 80014a2:	4603      	mov	r3, r0
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d100      	bne.n	80014aa <memset+0xa>
 80014a8:	4770      	bx	lr
 80014aa:	f803 1b01 	strb.w	r1, [r3], #1
 80014ae:	e7f9      	b.n	80014a4 <memset+0x4>

080014b0 <_close_r>:
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4d06      	ldr	r5, [pc, #24]	@ (80014cc <_close_r+0x1c>)
 80014b4:	2300      	movs	r3, #0
 80014b6:	4604      	mov	r4, r0
 80014b8:	4608      	mov	r0, r1
 80014ba:	602b      	str	r3, [r5, #0]
 80014bc:	f7ff fd51 	bl	8000f62 <_close>
 80014c0:	1c43      	adds	r3, r0, #1
 80014c2:	d102      	bne.n	80014ca <_close_r+0x1a>
 80014c4:	682b      	ldr	r3, [r5, #0]
 80014c6:	b103      	cbz	r3, 80014ca <_close_r+0x1a>
 80014c8:	6023      	str	r3, [r4, #0]
 80014ca:	bd38      	pop	{r3, r4, r5, pc}
 80014cc:	200001d0 	.word	0x200001d0

080014d0 <_lseek_r>:
 80014d0:	b538      	push	{r3, r4, r5, lr}
 80014d2:	4d07      	ldr	r5, [pc, #28]	@ (80014f0 <_lseek_r+0x20>)
 80014d4:	4604      	mov	r4, r0
 80014d6:	4608      	mov	r0, r1
 80014d8:	4611      	mov	r1, r2
 80014da:	2200      	movs	r2, #0
 80014dc:	602a      	str	r2, [r5, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	f7ff fd66 	bl	8000fb0 <_lseek>
 80014e4:	1c43      	adds	r3, r0, #1
 80014e6:	d102      	bne.n	80014ee <_lseek_r+0x1e>
 80014e8:	682b      	ldr	r3, [r5, #0]
 80014ea:	b103      	cbz	r3, 80014ee <_lseek_r+0x1e>
 80014ec:	6023      	str	r3, [r4, #0]
 80014ee:	bd38      	pop	{r3, r4, r5, pc}
 80014f0:	200001d0 	.word	0x200001d0

080014f4 <_read_r>:
 80014f4:	b538      	push	{r3, r4, r5, lr}
 80014f6:	4d07      	ldr	r5, [pc, #28]	@ (8001514 <_read_r+0x20>)
 80014f8:	4604      	mov	r4, r0
 80014fa:	4608      	mov	r0, r1
 80014fc:	4611      	mov	r1, r2
 80014fe:	2200      	movs	r2, #0
 8001500:	602a      	str	r2, [r5, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	f7ff fcf4 	bl	8000ef0 <_read>
 8001508:	1c43      	adds	r3, r0, #1
 800150a:	d102      	bne.n	8001512 <_read_r+0x1e>
 800150c:	682b      	ldr	r3, [r5, #0]
 800150e:	b103      	cbz	r3, 8001512 <_read_r+0x1e>
 8001510:	6023      	str	r3, [r4, #0]
 8001512:	bd38      	pop	{r3, r4, r5, pc}
 8001514:	200001d0 	.word	0x200001d0

08001518 <_write_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d07      	ldr	r5, [pc, #28]	@ (8001538 <_write_r+0x20>)
 800151c:	4604      	mov	r4, r0
 800151e:	4608      	mov	r0, r1
 8001520:	4611      	mov	r1, r2
 8001522:	2200      	movs	r2, #0
 8001524:	602a      	str	r2, [r5, #0]
 8001526:	461a      	mov	r2, r3
 8001528:	f7ff fcff 	bl	8000f2a <_write>
 800152c:	1c43      	adds	r3, r0, #1
 800152e:	d102      	bne.n	8001536 <_write_r+0x1e>
 8001530:	682b      	ldr	r3, [r5, #0]
 8001532:	b103      	cbz	r3, 8001536 <_write_r+0x1e>
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	bd38      	pop	{r3, r4, r5, pc}
 8001538:	200001d0 	.word	0x200001d0

0800153c <__errno>:
 800153c:	4b01      	ldr	r3, [pc, #4]	@ (8001544 <__errno+0x8>)
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	2000000c 	.word	0x2000000c

08001548 <__libc_init_array>:
 8001548:	b570      	push	{r4, r5, r6, lr}
 800154a:	4d0d      	ldr	r5, [pc, #52]	@ (8001580 <__libc_init_array+0x38>)
 800154c:	4c0d      	ldr	r4, [pc, #52]	@ (8001584 <__libc_init_array+0x3c>)
 800154e:	1b64      	subs	r4, r4, r5
 8001550:	10a4      	asrs	r4, r4, #2
 8001552:	2600      	movs	r6, #0
 8001554:	42a6      	cmp	r6, r4
 8001556:	d109      	bne.n	800156c <__libc_init_array+0x24>
 8001558:	4d0b      	ldr	r5, [pc, #44]	@ (8001588 <__libc_init_array+0x40>)
 800155a:	4c0c      	ldr	r4, [pc, #48]	@ (800158c <__libc_init_array+0x44>)
 800155c:	f000 fd22 	bl	8001fa4 <_init>
 8001560:	1b64      	subs	r4, r4, r5
 8001562:	10a4      	asrs	r4, r4, #2
 8001564:	2600      	movs	r6, #0
 8001566:	42a6      	cmp	r6, r4
 8001568:	d105      	bne.n	8001576 <__libc_init_array+0x2e>
 800156a:	bd70      	pop	{r4, r5, r6, pc}
 800156c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001570:	4798      	blx	r3
 8001572:	3601      	adds	r6, #1
 8001574:	e7ee      	b.n	8001554 <__libc_init_array+0xc>
 8001576:	f855 3b04 	ldr.w	r3, [r5], #4
 800157a:	4798      	blx	r3
 800157c:	3601      	adds	r6, #1
 800157e:	e7f2      	b.n	8001566 <__libc_init_array+0x1e>
 8001580:	080020cc 	.word	0x080020cc
 8001584:	080020cc 	.word	0x080020cc
 8001588:	080020cc 	.word	0x080020cc
 800158c:	080020d0 	.word	0x080020d0

08001590 <__retarget_lock_init_recursive>:
 8001590:	4770      	bx	lr

08001592 <__retarget_lock_acquire_recursive>:
 8001592:	4770      	bx	lr

08001594 <__retarget_lock_release_recursive>:
 8001594:	4770      	bx	lr
	...

08001598 <_free_r>:
 8001598:	b538      	push	{r3, r4, r5, lr}
 800159a:	4605      	mov	r5, r0
 800159c:	2900      	cmp	r1, #0
 800159e:	d041      	beq.n	8001624 <_free_r+0x8c>
 80015a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015a4:	1f0c      	subs	r4, r1, #4
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	bfb8      	it	lt
 80015aa:	18e4      	addlt	r4, r4, r3
 80015ac:	f000 f8e0 	bl	8001770 <__malloc_lock>
 80015b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <_free_r+0x90>)
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	b933      	cbnz	r3, 80015c4 <_free_r+0x2c>
 80015b6:	6063      	str	r3, [r4, #4]
 80015b8:	6014      	str	r4, [r2, #0]
 80015ba:	4628      	mov	r0, r5
 80015bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80015c0:	f000 b8dc 	b.w	800177c <__malloc_unlock>
 80015c4:	42a3      	cmp	r3, r4
 80015c6:	d908      	bls.n	80015da <_free_r+0x42>
 80015c8:	6820      	ldr	r0, [r4, #0]
 80015ca:	1821      	adds	r1, r4, r0
 80015cc:	428b      	cmp	r3, r1
 80015ce:	bf01      	itttt	eq
 80015d0:	6819      	ldreq	r1, [r3, #0]
 80015d2:	685b      	ldreq	r3, [r3, #4]
 80015d4:	1809      	addeq	r1, r1, r0
 80015d6:	6021      	streq	r1, [r4, #0]
 80015d8:	e7ed      	b.n	80015b6 <_free_r+0x1e>
 80015da:	461a      	mov	r2, r3
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	b10b      	cbz	r3, 80015e4 <_free_r+0x4c>
 80015e0:	42a3      	cmp	r3, r4
 80015e2:	d9fa      	bls.n	80015da <_free_r+0x42>
 80015e4:	6811      	ldr	r1, [r2, #0]
 80015e6:	1850      	adds	r0, r2, r1
 80015e8:	42a0      	cmp	r0, r4
 80015ea:	d10b      	bne.n	8001604 <_free_r+0x6c>
 80015ec:	6820      	ldr	r0, [r4, #0]
 80015ee:	4401      	add	r1, r0
 80015f0:	1850      	adds	r0, r2, r1
 80015f2:	4283      	cmp	r3, r0
 80015f4:	6011      	str	r1, [r2, #0]
 80015f6:	d1e0      	bne.n	80015ba <_free_r+0x22>
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	6053      	str	r3, [r2, #4]
 80015fe:	4408      	add	r0, r1
 8001600:	6010      	str	r0, [r2, #0]
 8001602:	e7da      	b.n	80015ba <_free_r+0x22>
 8001604:	d902      	bls.n	800160c <_free_r+0x74>
 8001606:	230c      	movs	r3, #12
 8001608:	602b      	str	r3, [r5, #0]
 800160a:	e7d6      	b.n	80015ba <_free_r+0x22>
 800160c:	6820      	ldr	r0, [r4, #0]
 800160e:	1821      	adds	r1, r4, r0
 8001610:	428b      	cmp	r3, r1
 8001612:	bf04      	itt	eq
 8001614:	6819      	ldreq	r1, [r3, #0]
 8001616:	685b      	ldreq	r3, [r3, #4]
 8001618:	6063      	str	r3, [r4, #4]
 800161a:	bf04      	itt	eq
 800161c:	1809      	addeq	r1, r1, r0
 800161e:	6021      	streq	r1, [r4, #0]
 8001620:	6054      	str	r4, [r2, #4]
 8001622:	e7ca      	b.n	80015ba <_free_r+0x22>
 8001624:	bd38      	pop	{r3, r4, r5, pc}
 8001626:	bf00      	nop
 8001628:	200001dc 	.word	0x200001dc

0800162c <sbrk_aligned>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4e0f      	ldr	r6, [pc, #60]	@ (800166c <sbrk_aligned+0x40>)
 8001630:	460c      	mov	r4, r1
 8001632:	6831      	ldr	r1, [r6, #0]
 8001634:	4605      	mov	r5, r0
 8001636:	b911      	cbnz	r1, 800163e <sbrk_aligned+0x12>
 8001638:	f000 fca4 	bl	8001f84 <_sbrk_r>
 800163c:	6030      	str	r0, [r6, #0]
 800163e:	4621      	mov	r1, r4
 8001640:	4628      	mov	r0, r5
 8001642:	f000 fc9f 	bl	8001f84 <_sbrk_r>
 8001646:	1c43      	adds	r3, r0, #1
 8001648:	d103      	bne.n	8001652 <sbrk_aligned+0x26>
 800164a:	f04f 34ff 	mov.w	r4, #4294967295
 800164e:	4620      	mov	r0, r4
 8001650:	bd70      	pop	{r4, r5, r6, pc}
 8001652:	1cc4      	adds	r4, r0, #3
 8001654:	f024 0403 	bic.w	r4, r4, #3
 8001658:	42a0      	cmp	r0, r4
 800165a:	d0f8      	beq.n	800164e <sbrk_aligned+0x22>
 800165c:	1a21      	subs	r1, r4, r0
 800165e:	4628      	mov	r0, r5
 8001660:	f000 fc90 	bl	8001f84 <_sbrk_r>
 8001664:	3001      	adds	r0, #1
 8001666:	d1f2      	bne.n	800164e <sbrk_aligned+0x22>
 8001668:	e7ef      	b.n	800164a <sbrk_aligned+0x1e>
 800166a:	bf00      	nop
 800166c:	200001d8 	.word	0x200001d8

08001670 <_malloc_r>:
 8001670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001674:	1ccd      	adds	r5, r1, #3
 8001676:	f025 0503 	bic.w	r5, r5, #3
 800167a:	3508      	adds	r5, #8
 800167c:	2d0c      	cmp	r5, #12
 800167e:	bf38      	it	cc
 8001680:	250c      	movcc	r5, #12
 8001682:	2d00      	cmp	r5, #0
 8001684:	4606      	mov	r6, r0
 8001686:	db01      	blt.n	800168c <_malloc_r+0x1c>
 8001688:	42a9      	cmp	r1, r5
 800168a:	d904      	bls.n	8001696 <_malloc_r+0x26>
 800168c:	230c      	movs	r3, #12
 800168e:	6033      	str	r3, [r6, #0]
 8001690:	2000      	movs	r0, #0
 8001692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001696:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800176c <_malloc_r+0xfc>
 800169a:	f000 f869 	bl	8001770 <__malloc_lock>
 800169e:	f8d8 3000 	ldr.w	r3, [r8]
 80016a2:	461c      	mov	r4, r3
 80016a4:	bb44      	cbnz	r4, 80016f8 <_malloc_r+0x88>
 80016a6:	4629      	mov	r1, r5
 80016a8:	4630      	mov	r0, r6
 80016aa:	f7ff ffbf 	bl	800162c <sbrk_aligned>
 80016ae:	1c43      	adds	r3, r0, #1
 80016b0:	4604      	mov	r4, r0
 80016b2:	d158      	bne.n	8001766 <_malloc_r+0xf6>
 80016b4:	f8d8 4000 	ldr.w	r4, [r8]
 80016b8:	4627      	mov	r7, r4
 80016ba:	2f00      	cmp	r7, #0
 80016bc:	d143      	bne.n	8001746 <_malloc_r+0xd6>
 80016be:	2c00      	cmp	r4, #0
 80016c0:	d04b      	beq.n	800175a <_malloc_r+0xea>
 80016c2:	6823      	ldr	r3, [r4, #0]
 80016c4:	4639      	mov	r1, r7
 80016c6:	4630      	mov	r0, r6
 80016c8:	eb04 0903 	add.w	r9, r4, r3
 80016cc:	f000 fc5a 	bl	8001f84 <_sbrk_r>
 80016d0:	4581      	cmp	r9, r0
 80016d2:	d142      	bne.n	800175a <_malloc_r+0xea>
 80016d4:	6821      	ldr	r1, [r4, #0]
 80016d6:	1a6d      	subs	r5, r5, r1
 80016d8:	4629      	mov	r1, r5
 80016da:	4630      	mov	r0, r6
 80016dc:	f7ff ffa6 	bl	800162c <sbrk_aligned>
 80016e0:	3001      	adds	r0, #1
 80016e2:	d03a      	beq.n	800175a <_malloc_r+0xea>
 80016e4:	6823      	ldr	r3, [r4, #0]
 80016e6:	442b      	add	r3, r5
 80016e8:	6023      	str	r3, [r4, #0]
 80016ea:	f8d8 3000 	ldr.w	r3, [r8]
 80016ee:	685a      	ldr	r2, [r3, #4]
 80016f0:	bb62      	cbnz	r2, 800174c <_malloc_r+0xdc>
 80016f2:	f8c8 7000 	str.w	r7, [r8]
 80016f6:	e00f      	b.n	8001718 <_malloc_r+0xa8>
 80016f8:	6822      	ldr	r2, [r4, #0]
 80016fa:	1b52      	subs	r2, r2, r5
 80016fc:	d420      	bmi.n	8001740 <_malloc_r+0xd0>
 80016fe:	2a0b      	cmp	r2, #11
 8001700:	d917      	bls.n	8001732 <_malloc_r+0xc2>
 8001702:	1961      	adds	r1, r4, r5
 8001704:	42a3      	cmp	r3, r4
 8001706:	6025      	str	r5, [r4, #0]
 8001708:	bf18      	it	ne
 800170a:	6059      	strne	r1, [r3, #4]
 800170c:	6863      	ldr	r3, [r4, #4]
 800170e:	bf08      	it	eq
 8001710:	f8c8 1000 	streq.w	r1, [r8]
 8001714:	5162      	str	r2, [r4, r5]
 8001716:	604b      	str	r3, [r1, #4]
 8001718:	4630      	mov	r0, r6
 800171a:	f000 f82f 	bl	800177c <__malloc_unlock>
 800171e:	f104 000b 	add.w	r0, r4, #11
 8001722:	1d23      	adds	r3, r4, #4
 8001724:	f020 0007 	bic.w	r0, r0, #7
 8001728:	1ac2      	subs	r2, r0, r3
 800172a:	bf1c      	itt	ne
 800172c:	1a1b      	subne	r3, r3, r0
 800172e:	50a3      	strne	r3, [r4, r2]
 8001730:	e7af      	b.n	8001692 <_malloc_r+0x22>
 8001732:	6862      	ldr	r2, [r4, #4]
 8001734:	42a3      	cmp	r3, r4
 8001736:	bf0c      	ite	eq
 8001738:	f8c8 2000 	streq.w	r2, [r8]
 800173c:	605a      	strne	r2, [r3, #4]
 800173e:	e7eb      	b.n	8001718 <_malloc_r+0xa8>
 8001740:	4623      	mov	r3, r4
 8001742:	6864      	ldr	r4, [r4, #4]
 8001744:	e7ae      	b.n	80016a4 <_malloc_r+0x34>
 8001746:	463c      	mov	r4, r7
 8001748:	687f      	ldr	r7, [r7, #4]
 800174a:	e7b6      	b.n	80016ba <_malloc_r+0x4a>
 800174c:	461a      	mov	r2, r3
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	42a3      	cmp	r3, r4
 8001752:	d1fb      	bne.n	800174c <_malloc_r+0xdc>
 8001754:	2300      	movs	r3, #0
 8001756:	6053      	str	r3, [r2, #4]
 8001758:	e7de      	b.n	8001718 <_malloc_r+0xa8>
 800175a:	230c      	movs	r3, #12
 800175c:	6033      	str	r3, [r6, #0]
 800175e:	4630      	mov	r0, r6
 8001760:	f000 f80c 	bl	800177c <__malloc_unlock>
 8001764:	e794      	b.n	8001690 <_malloc_r+0x20>
 8001766:	6005      	str	r5, [r0, #0]
 8001768:	e7d6      	b.n	8001718 <_malloc_r+0xa8>
 800176a:	bf00      	nop
 800176c:	200001dc 	.word	0x200001dc

08001770 <__malloc_lock>:
 8001770:	4801      	ldr	r0, [pc, #4]	@ (8001778 <__malloc_lock+0x8>)
 8001772:	f7ff bf0e 	b.w	8001592 <__retarget_lock_acquire_recursive>
 8001776:	bf00      	nop
 8001778:	200001d4 	.word	0x200001d4

0800177c <__malloc_unlock>:
 800177c:	4801      	ldr	r0, [pc, #4]	@ (8001784 <__malloc_unlock+0x8>)
 800177e:	f7ff bf09 	b.w	8001594 <__retarget_lock_release_recursive>
 8001782:	bf00      	nop
 8001784:	200001d4 	.word	0x200001d4

08001788 <__sfputc_r>:
 8001788:	6893      	ldr	r3, [r2, #8]
 800178a:	3b01      	subs	r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	b410      	push	{r4}
 8001790:	6093      	str	r3, [r2, #8]
 8001792:	da08      	bge.n	80017a6 <__sfputc_r+0x1e>
 8001794:	6994      	ldr	r4, [r2, #24]
 8001796:	42a3      	cmp	r3, r4
 8001798:	db01      	blt.n	800179e <__sfputc_r+0x16>
 800179a:	290a      	cmp	r1, #10
 800179c:	d103      	bne.n	80017a6 <__sfputc_r+0x1e>
 800179e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017a2:	f7ff bde8 	b.w	8001376 <__swbuf_r>
 80017a6:	6813      	ldr	r3, [r2, #0]
 80017a8:	1c58      	adds	r0, r3, #1
 80017aa:	6010      	str	r0, [r2, #0]
 80017ac:	7019      	strb	r1, [r3, #0]
 80017ae:	4608      	mov	r0, r1
 80017b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <__sfputs_r>:
 80017b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017b8:	4606      	mov	r6, r0
 80017ba:	460f      	mov	r7, r1
 80017bc:	4614      	mov	r4, r2
 80017be:	18d5      	adds	r5, r2, r3
 80017c0:	42ac      	cmp	r4, r5
 80017c2:	d101      	bne.n	80017c8 <__sfputs_r+0x12>
 80017c4:	2000      	movs	r0, #0
 80017c6:	e007      	b.n	80017d8 <__sfputs_r+0x22>
 80017c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80017cc:	463a      	mov	r2, r7
 80017ce:	4630      	mov	r0, r6
 80017d0:	f7ff ffda 	bl	8001788 <__sfputc_r>
 80017d4:	1c43      	adds	r3, r0, #1
 80017d6:	d1f3      	bne.n	80017c0 <__sfputs_r+0xa>
 80017d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080017dc <_vfiprintf_r>:
 80017dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017e0:	460d      	mov	r5, r1
 80017e2:	b09d      	sub	sp, #116	@ 0x74
 80017e4:	4614      	mov	r4, r2
 80017e6:	4698      	mov	r8, r3
 80017e8:	4606      	mov	r6, r0
 80017ea:	b118      	cbz	r0, 80017f4 <_vfiprintf_r+0x18>
 80017ec:	6a03      	ldr	r3, [r0, #32]
 80017ee:	b90b      	cbnz	r3, 80017f4 <_vfiprintf_r+0x18>
 80017f0:	f7ff fcd8 	bl	80011a4 <__sinit>
 80017f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80017f6:	07d9      	lsls	r1, r3, #31
 80017f8:	d405      	bmi.n	8001806 <_vfiprintf_r+0x2a>
 80017fa:	89ab      	ldrh	r3, [r5, #12]
 80017fc:	059a      	lsls	r2, r3, #22
 80017fe:	d402      	bmi.n	8001806 <_vfiprintf_r+0x2a>
 8001800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001802:	f7ff fec6 	bl	8001592 <__retarget_lock_acquire_recursive>
 8001806:	89ab      	ldrh	r3, [r5, #12]
 8001808:	071b      	lsls	r3, r3, #28
 800180a:	d501      	bpl.n	8001810 <_vfiprintf_r+0x34>
 800180c:	692b      	ldr	r3, [r5, #16]
 800180e:	b99b      	cbnz	r3, 8001838 <_vfiprintf_r+0x5c>
 8001810:	4629      	mov	r1, r5
 8001812:	4630      	mov	r0, r6
 8001814:	f7ff fdee 	bl	80013f4 <__swsetup_r>
 8001818:	b170      	cbz	r0, 8001838 <_vfiprintf_r+0x5c>
 800181a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800181c:	07dc      	lsls	r4, r3, #31
 800181e:	d504      	bpl.n	800182a <_vfiprintf_r+0x4e>
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	b01d      	add	sp, #116	@ 0x74
 8001826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800182a:	89ab      	ldrh	r3, [r5, #12]
 800182c:	0598      	lsls	r0, r3, #22
 800182e:	d4f7      	bmi.n	8001820 <_vfiprintf_r+0x44>
 8001830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001832:	f7ff feaf 	bl	8001594 <__retarget_lock_release_recursive>
 8001836:	e7f3      	b.n	8001820 <_vfiprintf_r+0x44>
 8001838:	2300      	movs	r3, #0
 800183a:	9309      	str	r3, [sp, #36]	@ 0x24
 800183c:	2320      	movs	r3, #32
 800183e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001842:	f8cd 800c 	str.w	r8, [sp, #12]
 8001846:	2330      	movs	r3, #48	@ 0x30
 8001848:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80019f8 <_vfiprintf_r+0x21c>
 800184c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001850:	f04f 0901 	mov.w	r9, #1
 8001854:	4623      	mov	r3, r4
 8001856:	469a      	mov	sl, r3
 8001858:	f813 2b01 	ldrb.w	r2, [r3], #1
 800185c:	b10a      	cbz	r2, 8001862 <_vfiprintf_r+0x86>
 800185e:	2a25      	cmp	r2, #37	@ 0x25
 8001860:	d1f9      	bne.n	8001856 <_vfiprintf_r+0x7a>
 8001862:	ebba 0b04 	subs.w	fp, sl, r4
 8001866:	d00b      	beq.n	8001880 <_vfiprintf_r+0xa4>
 8001868:	465b      	mov	r3, fp
 800186a:	4622      	mov	r2, r4
 800186c:	4629      	mov	r1, r5
 800186e:	4630      	mov	r0, r6
 8001870:	f7ff ffa1 	bl	80017b6 <__sfputs_r>
 8001874:	3001      	adds	r0, #1
 8001876:	f000 80a7 	beq.w	80019c8 <_vfiprintf_r+0x1ec>
 800187a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800187c:	445a      	add	r2, fp
 800187e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001880:	f89a 3000 	ldrb.w	r3, [sl]
 8001884:	2b00      	cmp	r3, #0
 8001886:	f000 809f 	beq.w	80019c8 <_vfiprintf_r+0x1ec>
 800188a:	2300      	movs	r3, #0
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001894:	f10a 0a01 	add.w	sl, sl, #1
 8001898:	9304      	str	r3, [sp, #16]
 800189a:	9307      	str	r3, [sp, #28]
 800189c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80018a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80018a2:	4654      	mov	r4, sl
 80018a4:	2205      	movs	r2, #5
 80018a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80018aa:	4853      	ldr	r0, [pc, #332]	@ (80019f8 <_vfiprintf_r+0x21c>)
 80018ac:	f7fe fc98 	bl	80001e0 <memchr>
 80018b0:	9a04      	ldr	r2, [sp, #16]
 80018b2:	b9d8      	cbnz	r0, 80018ec <_vfiprintf_r+0x110>
 80018b4:	06d1      	lsls	r1, r2, #27
 80018b6:	bf44      	itt	mi
 80018b8:	2320      	movmi	r3, #32
 80018ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018be:	0713      	lsls	r3, r2, #28
 80018c0:	bf44      	itt	mi
 80018c2:	232b      	movmi	r3, #43	@ 0x2b
 80018c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80018c8:	f89a 3000 	ldrb.w	r3, [sl]
 80018cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80018ce:	d015      	beq.n	80018fc <_vfiprintf_r+0x120>
 80018d0:	9a07      	ldr	r2, [sp, #28]
 80018d2:	4654      	mov	r4, sl
 80018d4:	2000      	movs	r0, #0
 80018d6:	f04f 0c0a 	mov.w	ip, #10
 80018da:	4621      	mov	r1, r4
 80018dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80018e0:	3b30      	subs	r3, #48	@ 0x30
 80018e2:	2b09      	cmp	r3, #9
 80018e4:	d94b      	bls.n	800197e <_vfiprintf_r+0x1a2>
 80018e6:	b1b0      	cbz	r0, 8001916 <_vfiprintf_r+0x13a>
 80018e8:	9207      	str	r2, [sp, #28]
 80018ea:	e014      	b.n	8001916 <_vfiprintf_r+0x13a>
 80018ec:	eba0 0308 	sub.w	r3, r0, r8
 80018f0:	fa09 f303 	lsl.w	r3, r9, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	9304      	str	r3, [sp, #16]
 80018f8:	46a2      	mov	sl, r4
 80018fa:	e7d2      	b.n	80018a2 <_vfiprintf_r+0xc6>
 80018fc:	9b03      	ldr	r3, [sp, #12]
 80018fe:	1d19      	adds	r1, r3, #4
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	9103      	str	r1, [sp, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	bfbb      	ittet	lt
 8001908:	425b      	neglt	r3, r3
 800190a:	f042 0202 	orrlt.w	r2, r2, #2
 800190e:	9307      	strge	r3, [sp, #28]
 8001910:	9307      	strlt	r3, [sp, #28]
 8001912:	bfb8      	it	lt
 8001914:	9204      	strlt	r2, [sp, #16]
 8001916:	7823      	ldrb	r3, [r4, #0]
 8001918:	2b2e      	cmp	r3, #46	@ 0x2e
 800191a:	d10a      	bne.n	8001932 <_vfiprintf_r+0x156>
 800191c:	7863      	ldrb	r3, [r4, #1]
 800191e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001920:	d132      	bne.n	8001988 <_vfiprintf_r+0x1ac>
 8001922:	9b03      	ldr	r3, [sp, #12]
 8001924:	1d1a      	adds	r2, r3, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	9203      	str	r2, [sp, #12]
 800192a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800192e:	3402      	adds	r4, #2
 8001930:	9305      	str	r3, [sp, #20]
 8001932:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001a08 <_vfiprintf_r+0x22c>
 8001936:	7821      	ldrb	r1, [r4, #0]
 8001938:	2203      	movs	r2, #3
 800193a:	4650      	mov	r0, sl
 800193c:	f7fe fc50 	bl	80001e0 <memchr>
 8001940:	b138      	cbz	r0, 8001952 <_vfiprintf_r+0x176>
 8001942:	9b04      	ldr	r3, [sp, #16]
 8001944:	eba0 000a 	sub.w	r0, r0, sl
 8001948:	2240      	movs	r2, #64	@ 0x40
 800194a:	4082      	lsls	r2, r0
 800194c:	4313      	orrs	r3, r2
 800194e:	3401      	adds	r4, #1
 8001950:	9304      	str	r3, [sp, #16]
 8001952:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001956:	4829      	ldr	r0, [pc, #164]	@ (80019fc <_vfiprintf_r+0x220>)
 8001958:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800195c:	2206      	movs	r2, #6
 800195e:	f7fe fc3f 	bl	80001e0 <memchr>
 8001962:	2800      	cmp	r0, #0
 8001964:	d03f      	beq.n	80019e6 <_vfiprintf_r+0x20a>
 8001966:	4b26      	ldr	r3, [pc, #152]	@ (8001a00 <_vfiprintf_r+0x224>)
 8001968:	bb1b      	cbnz	r3, 80019b2 <_vfiprintf_r+0x1d6>
 800196a:	9b03      	ldr	r3, [sp, #12]
 800196c:	3307      	adds	r3, #7
 800196e:	f023 0307 	bic.w	r3, r3, #7
 8001972:	3308      	adds	r3, #8
 8001974:	9303      	str	r3, [sp, #12]
 8001976:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001978:	443b      	add	r3, r7
 800197a:	9309      	str	r3, [sp, #36]	@ 0x24
 800197c:	e76a      	b.n	8001854 <_vfiprintf_r+0x78>
 800197e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001982:	460c      	mov	r4, r1
 8001984:	2001      	movs	r0, #1
 8001986:	e7a8      	b.n	80018da <_vfiprintf_r+0xfe>
 8001988:	2300      	movs	r3, #0
 800198a:	3401      	adds	r4, #1
 800198c:	9305      	str	r3, [sp, #20]
 800198e:	4619      	mov	r1, r3
 8001990:	f04f 0c0a 	mov.w	ip, #10
 8001994:	4620      	mov	r0, r4
 8001996:	f810 2b01 	ldrb.w	r2, [r0], #1
 800199a:	3a30      	subs	r2, #48	@ 0x30
 800199c:	2a09      	cmp	r2, #9
 800199e:	d903      	bls.n	80019a8 <_vfiprintf_r+0x1cc>
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0c6      	beq.n	8001932 <_vfiprintf_r+0x156>
 80019a4:	9105      	str	r1, [sp, #20]
 80019a6:	e7c4      	b.n	8001932 <_vfiprintf_r+0x156>
 80019a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80019ac:	4604      	mov	r4, r0
 80019ae:	2301      	movs	r3, #1
 80019b0:	e7f0      	b.n	8001994 <_vfiprintf_r+0x1b8>
 80019b2:	ab03      	add	r3, sp, #12
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	462a      	mov	r2, r5
 80019b8:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <_vfiprintf_r+0x228>)
 80019ba:	a904      	add	r1, sp, #16
 80019bc:	4630      	mov	r0, r6
 80019be:	f3af 8000 	nop.w
 80019c2:	4607      	mov	r7, r0
 80019c4:	1c78      	adds	r0, r7, #1
 80019c6:	d1d6      	bne.n	8001976 <_vfiprintf_r+0x19a>
 80019c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80019ca:	07d9      	lsls	r1, r3, #31
 80019cc:	d405      	bmi.n	80019da <_vfiprintf_r+0x1fe>
 80019ce:	89ab      	ldrh	r3, [r5, #12]
 80019d0:	059a      	lsls	r2, r3, #22
 80019d2:	d402      	bmi.n	80019da <_vfiprintf_r+0x1fe>
 80019d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80019d6:	f7ff fddd 	bl	8001594 <__retarget_lock_release_recursive>
 80019da:	89ab      	ldrh	r3, [r5, #12]
 80019dc:	065b      	lsls	r3, r3, #25
 80019de:	f53f af1f 	bmi.w	8001820 <_vfiprintf_r+0x44>
 80019e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80019e4:	e71e      	b.n	8001824 <_vfiprintf_r+0x48>
 80019e6:	ab03      	add	r3, sp, #12
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	462a      	mov	r2, r5
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <_vfiprintf_r+0x228>)
 80019ee:	a904      	add	r1, sp, #16
 80019f0:	4630      	mov	r0, r6
 80019f2:	f000 f879 	bl	8001ae8 <_printf_i>
 80019f6:	e7e4      	b.n	80019c2 <_vfiprintf_r+0x1e6>
 80019f8:	0800208f 	.word	0x0800208f
 80019fc:	08002099 	.word	0x08002099
 8001a00:	00000000 	.word	0x00000000
 8001a04:	080017b7 	.word	0x080017b7
 8001a08:	08002095 	.word	0x08002095

08001a0c <_printf_common>:
 8001a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a10:	4616      	mov	r6, r2
 8001a12:	4698      	mov	r8, r3
 8001a14:	688a      	ldr	r2, [r1, #8]
 8001a16:	690b      	ldr	r3, [r1, #16]
 8001a18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	bfb8      	it	lt
 8001a20:	4613      	movlt	r3, r2
 8001a22:	6033      	str	r3, [r6, #0]
 8001a24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a28:	4607      	mov	r7, r0
 8001a2a:	460c      	mov	r4, r1
 8001a2c:	b10a      	cbz	r2, 8001a32 <_printf_common+0x26>
 8001a2e:	3301      	adds	r3, #1
 8001a30:	6033      	str	r3, [r6, #0]
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	0699      	lsls	r1, r3, #26
 8001a36:	bf42      	ittt	mi
 8001a38:	6833      	ldrmi	r3, [r6, #0]
 8001a3a:	3302      	addmi	r3, #2
 8001a3c:	6033      	strmi	r3, [r6, #0]
 8001a3e:	6825      	ldr	r5, [r4, #0]
 8001a40:	f015 0506 	ands.w	r5, r5, #6
 8001a44:	d106      	bne.n	8001a54 <_printf_common+0x48>
 8001a46:	f104 0a19 	add.w	sl, r4, #25
 8001a4a:	68e3      	ldr	r3, [r4, #12]
 8001a4c:	6832      	ldr	r2, [r6, #0]
 8001a4e:	1a9b      	subs	r3, r3, r2
 8001a50:	42ab      	cmp	r3, r5
 8001a52:	dc26      	bgt.n	8001aa2 <_printf_common+0x96>
 8001a54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001a58:	6822      	ldr	r2, [r4, #0]
 8001a5a:	3b00      	subs	r3, #0
 8001a5c:	bf18      	it	ne
 8001a5e:	2301      	movne	r3, #1
 8001a60:	0692      	lsls	r2, r2, #26
 8001a62:	d42b      	bmi.n	8001abc <_printf_common+0xb0>
 8001a64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001a68:	4641      	mov	r1, r8
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	47c8      	blx	r9
 8001a6e:	3001      	adds	r0, #1
 8001a70:	d01e      	beq.n	8001ab0 <_printf_common+0xa4>
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	6922      	ldr	r2, [r4, #16]
 8001a76:	f003 0306 	and.w	r3, r3, #6
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	bf02      	ittt	eq
 8001a7e:	68e5      	ldreq	r5, [r4, #12]
 8001a80:	6833      	ldreq	r3, [r6, #0]
 8001a82:	1aed      	subeq	r5, r5, r3
 8001a84:	68a3      	ldr	r3, [r4, #8]
 8001a86:	bf0c      	ite	eq
 8001a88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001a8c:	2500      	movne	r5, #0
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	bfc4      	itt	gt
 8001a92:	1a9b      	subgt	r3, r3, r2
 8001a94:	18ed      	addgt	r5, r5, r3
 8001a96:	2600      	movs	r6, #0
 8001a98:	341a      	adds	r4, #26
 8001a9a:	42b5      	cmp	r5, r6
 8001a9c:	d11a      	bne.n	8001ad4 <_printf_common+0xc8>
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	e008      	b.n	8001ab4 <_printf_common+0xa8>
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	4652      	mov	r2, sl
 8001aa6:	4641      	mov	r1, r8
 8001aa8:	4638      	mov	r0, r7
 8001aaa:	47c8      	blx	r9
 8001aac:	3001      	adds	r0, #1
 8001aae:	d103      	bne.n	8001ab8 <_printf_common+0xac>
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ab8:	3501      	adds	r5, #1
 8001aba:	e7c6      	b.n	8001a4a <_printf_common+0x3e>
 8001abc:	18e1      	adds	r1, r4, r3
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	2030      	movs	r0, #48	@ 0x30
 8001ac2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001ac6:	4422      	add	r2, r4
 8001ac8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001acc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	e7c7      	b.n	8001a64 <_printf_common+0x58>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	4622      	mov	r2, r4
 8001ad8:	4641      	mov	r1, r8
 8001ada:	4638      	mov	r0, r7
 8001adc:	47c8      	blx	r9
 8001ade:	3001      	adds	r0, #1
 8001ae0:	d0e6      	beq.n	8001ab0 <_printf_common+0xa4>
 8001ae2:	3601      	adds	r6, #1
 8001ae4:	e7d9      	b.n	8001a9a <_printf_common+0x8e>
	...

08001ae8 <_printf_i>:
 8001ae8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001aec:	7e0f      	ldrb	r7, [r1, #24]
 8001aee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001af0:	2f78      	cmp	r7, #120	@ 0x78
 8001af2:	4691      	mov	r9, r2
 8001af4:	4680      	mov	r8, r0
 8001af6:	460c      	mov	r4, r1
 8001af8:	469a      	mov	sl, r3
 8001afa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001afe:	d807      	bhi.n	8001b10 <_printf_i+0x28>
 8001b00:	2f62      	cmp	r7, #98	@ 0x62
 8001b02:	d80a      	bhi.n	8001b1a <_printf_i+0x32>
 8001b04:	2f00      	cmp	r7, #0
 8001b06:	f000 80d1 	beq.w	8001cac <_printf_i+0x1c4>
 8001b0a:	2f58      	cmp	r7, #88	@ 0x58
 8001b0c:	f000 80b8 	beq.w	8001c80 <_printf_i+0x198>
 8001b10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b18:	e03a      	b.n	8001b90 <_printf_i+0xa8>
 8001b1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b1e:	2b15      	cmp	r3, #21
 8001b20:	d8f6      	bhi.n	8001b10 <_printf_i+0x28>
 8001b22:	a101      	add	r1, pc, #4	@ (adr r1, 8001b28 <_printf_i+0x40>)
 8001b24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b28:	08001b81 	.word	0x08001b81
 8001b2c:	08001b95 	.word	0x08001b95
 8001b30:	08001b11 	.word	0x08001b11
 8001b34:	08001b11 	.word	0x08001b11
 8001b38:	08001b11 	.word	0x08001b11
 8001b3c:	08001b11 	.word	0x08001b11
 8001b40:	08001b95 	.word	0x08001b95
 8001b44:	08001b11 	.word	0x08001b11
 8001b48:	08001b11 	.word	0x08001b11
 8001b4c:	08001b11 	.word	0x08001b11
 8001b50:	08001b11 	.word	0x08001b11
 8001b54:	08001c93 	.word	0x08001c93
 8001b58:	08001bbf 	.word	0x08001bbf
 8001b5c:	08001c4d 	.word	0x08001c4d
 8001b60:	08001b11 	.word	0x08001b11
 8001b64:	08001b11 	.word	0x08001b11
 8001b68:	08001cb5 	.word	0x08001cb5
 8001b6c:	08001b11 	.word	0x08001b11
 8001b70:	08001bbf 	.word	0x08001bbf
 8001b74:	08001b11 	.word	0x08001b11
 8001b78:	08001b11 	.word	0x08001b11
 8001b7c:	08001c55 	.word	0x08001c55
 8001b80:	6833      	ldr	r3, [r6, #0]
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6032      	str	r2, [r6, #0]
 8001b88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001b90:	2301      	movs	r3, #1
 8001b92:	e09c      	b.n	8001cce <_printf_i+0x1e6>
 8001b94:	6833      	ldr	r3, [r6, #0]
 8001b96:	6820      	ldr	r0, [r4, #0]
 8001b98:	1d19      	adds	r1, r3, #4
 8001b9a:	6031      	str	r1, [r6, #0]
 8001b9c:	0606      	lsls	r6, r0, #24
 8001b9e:	d501      	bpl.n	8001ba4 <_printf_i+0xbc>
 8001ba0:	681d      	ldr	r5, [r3, #0]
 8001ba2:	e003      	b.n	8001bac <_printf_i+0xc4>
 8001ba4:	0645      	lsls	r5, r0, #25
 8001ba6:	d5fb      	bpl.n	8001ba0 <_printf_i+0xb8>
 8001ba8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001bac:	2d00      	cmp	r5, #0
 8001bae:	da03      	bge.n	8001bb8 <_printf_i+0xd0>
 8001bb0:	232d      	movs	r3, #45	@ 0x2d
 8001bb2:	426d      	negs	r5, r5
 8001bb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001bb8:	4858      	ldr	r0, [pc, #352]	@ (8001d1c <_printf_i+0x234>)
 8001bba:	230a      	movs	r3, #10
 8001bbc:	e011      	b.n	8001be2 <_printf_i+0xfa>
 8001bbe:	6821      	ldr	r1, [r4, #0]
 8001bc0:	6833      	ldr	r3, [r6, #0]
 8001bc2:	0608      	lsls	r0, r1, #24
 8001bc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8001bc8:	d402      	bmi.n	8001bd0 <_printf_i+0xe8>
 8001bca:	0649      	lsls	r1, r1, #25
 8001bcc:	bf48      	it	mi
 8001bce:	b2ad      	uxthmi	r5, r5
 8001bd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8001bd2:	4852      	ldr	r0, [pc, #328]	@ (8001d1c <_printf_i+0x234>)
 8001bd4:	6033      	str	r3, [r6, #0]
 8001bd6:	bf14      	ite	ne
 8001bd8:	230a      	movne	r3, #10
 8001bda:	2308      	moveq	r3, #8
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001be2:	6866      	ldr	r6, [r4, #4]
 8001be4:	60a6      	str	r6, [r4, #8]
 8001be6:	2e00      	cmp	r6, #0
 8001be8:	db05      	blt.n	8001bf6 <_printf_i+0x10e>
 8001bea:	6821      	ldr	r1, [r4, #0]
 8001bec:	432e      	orrs	r6, r5
 8001bee:	f021 0104 	bic.w	r1, r1, #4
 8001bf2:	6021      	str	r1, [r4, #0]
 8001bf4:	d04b      	beq.n	8001c8e <_printf_i+0x1a6>
 8001bf6:	4616      	mov	r6, r2
 8001bf8:	fbb5 f1f3 	udiv	r1, r5, r3
 8001bfc:	fb03 5711 	mls	r7, r3, r1, r5
 8001c00:	5dc7      	ldrb	r7, [r0, r7]
 8001c02:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c06:	462f      	mov	r7, r5
 8001c08:	42bb      	cmp	r3, r7
 8001c0a:	460d      	mov	r5, r1
 8001c0c:	d9f4      	bls.n	8001bf8 <_printf_i+0x110>
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d10b      	bne.n	8001c2a <_printf_i+0x142>
 8001c12:	6823      	ldr	r3, [r4, #0]
 8001c14:	07df      	lsls	r7, r3, #31
 8001c16:	d508      	bpl.n	8001c2a <_printf_i+0x142>
 8001c18:	6923      	ldr	r3, [r4, #16]
 8001c1a:	6861      	ldr	r1, [r4, #4]
 8001c1c:	4299      	cmp	r1, r3
 8001c1e:	bfde      	ittt	le
 8001c20:	2330      	movle	r3, #48	@ 0x30
 8001c22:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c26:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c2a:	1b92      	subs	r2, r2, r6
 8001c2c:	6122      	str	r2, [r4, #16]
 8001c2e:	f8cd a000 	str.w	sl, [sp]
 8001c32:	464b      	mov	r3, r9
 8001c34:	aa03      	add	r2, sp, #12
 8001c36:	4621      	mov	r1, r4
 8001c38:	4640      	mov	r0, r8
 8001c3a:	f7ff fee7 	bl	8001a0c <_printf_common>
 8001c3e:	3001      	adds	r0, #1
 8001c40:	d14a      	bne.n	8001cd8 <_printf_i+0x1f0>
 8001c42:	f04f 30ff 	mov.w	r0, #4294967295
 8001c46:	b004      	add	sp, #16
 8001c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c4c:	6823      	ldr	r3, [r4, #0]
 8001c4e:	f043 0320 	orr.w	r3, r3, #32
 8001c52:	6023      	str	r3, [r4, #0]
 8001c54:	4832      	ldr	r0, [pc, #200]	@ (8001d20 <_printf_i+0x238>)
 8001c56:	2778      	movs	r7, #120	@ 0x78
 8001c58:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	6831      	ldr	r1, [r6, #0]
 8001c60:	061f      	lsls	r7, r3, #24
 8001c62:	f851 5b04 	ldr.w	r5, [r1], #4
 8001c66:	d402      	bmi.n	8001c6e <_printf_i+0x186>
 8001c68:	065f      	lsls	r7, r3, #25
 8001c6a:	bf48      	it	mi
 8001c6c:	b2ad      	uxthmi	r5, r5
 8001c6e:	6031      	str	r1, [r6, #0]
 8001c70:	07d9      	lsls	r1, r3, #31
 8001c72:	bf44      	itt	mi
 8001c74:	f043 0320 	orrmi.w	r3, r3, #32
 8001c78:	6023      	strmi	r3, [r4, #0]
 8001c7a:	b11d      	cbz	r5, 8001c84 <_printf_i+0x19c>
 8001c7c:	2310      	movs	r3, #16
 8001c7e:	e7ad      	b.n	8001bdc <_printf_i+0xf4>
 8001c80:	4826      	ldr	r0, [pc, #152]	@ (8001d1c <_printf_i+0x234>)
 8001c82:	e7e9      	b.n	8001c58 <_printf_i+0x170>
 8001c84:	6823      	ldr	r3, [r4, #0]
 8001c86:	f023 0320 	bic.w	r3, r3, #32
 8001c8a:	6023      	str	r3, [r4, #0]
 8001c8c:	e7f6      	b.n	8001c7c <_printf_i+0x194>
 8001c8e:	4616      	mov	r6, r2
 8001c90:	e7bd      	b.n	8001c0e <_printf_i+0x126>
 8001c92:	6833      	ldr	r3, [r6, #0]
 8001c94:	6825      	ldr	r5, [r4, #0]
 8001c96:	6961      	ldr	r1, [r4, #20]
 8001c98:	1d18      	adds	r0, r3, #4
 8001c9a:	6030      	str	r0, [r6, #0]
 8001c9c:	062e      	lsls	r6, r5, #24
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	d501      	bpl.n	8001ca6 <_printf_i+0x1be>
 8001ca2:	6019      	str	r1, [r3, #0]
 8001ca4:	e002      	b.n	8001cac <_printf_i+0x1c4>
 8001ca6:	0668      	lsls	r0, r5, #25
 8001ca8:	d5fb      	bpl.n	8001ca2 <_printf_i+0x1ba>
 8001caa:	8019      	strh	r1, [r3, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	6123      	str	r3, [r4, #16]
 8001cb0:	4616      	mov	r6, r2
 8001cb2:	e7bc      	b.n	8001c2e <_printf_i+0x146>
 8001cb4:	6833      	ldr	r3, [r6, #0]
 8001cb6:	1d1a      	adds	r2, r3, #4
 8001cb8:	6032      	str	r2, [r6, #0]
 8001cba:	681e      	ldr	r6, [r3, #0]
 8001cbc:	6862      	ldr	r2, [r4, #4]
 8001cbe:	2100      	movs	r1, #0
 8001cc0:	4630      	mov	r0, r6
 8001cc2:	f7fe fa8d 	bl	80001e0 <memchr>
 8001cc6:	b108      	cbz	r0, 8001ccc <_printf_i+0x1e4>
 8001cc8:	1b80      	subs	r0, r0, r6
 8001cca:	6060      	str	r0, [r4, #4]
 8001ccc:	6863      	ldr	r3, [r4, #4]
 8001cce:	6123      	str	r3, [r4, #16]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001cd6:	e7aa      	b.n	8001c2e <_printf_i+0x146>
 8001cd8:	6923      	ldr	r3, [r4, #16]
 8001cda:	4632      	mov	r2, r6
 8001cdc:	4649      	mov	r1, r9
 8001cde:	4640      	mov	r0, r8
 8001ce0:	47d0      	blx	sl
 8001ce2:	3001      	adds	r0, #1
 8001ce4:	d0ad      	beq.n	8001c42 <_printf_i+0x15a>
 8001ce6:	6823      	ldr	r3, [r4, #0]
 8001ce8:	079b      	lsls	r3, r3, #30
 8001cea:	d413      	bmi.n	8001d14 <_printf_i+0x22c>
 8001cec:	68e0      	ldr	r0, [r4, #12]
 8001cee:	9b03      	ldr	r3, [sp, #12]
 8001cf0:	4298      	cmp	r0, r3
 8001cf2:	bfb8      	it	lt
 8001cf4:	4618      	movlt	r0, r3
 8001cf6:	e7a6      	b.n	8001c46 <_printf_i+0x15e>
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	4632      	mov	r2, r6
 8001cfc:	4649      	mov	r1, r9
 8001cfe:	4640      	mov	r0, r8
 8001d00:	47d0      	blx	sl
 8001d02:	3001      	adds	r0, #1
 8001d04:	d09d      	beq.n	8001c42 <_printf_i+0x15a>
 8001d06:	3501      	adds	r5, #1
 8001d08:	68e3      	ldr	r3, [r4, #12]
 8001d0a:	9903      	ldr	r1, [sp, #12]
 8001d0c:	1a5b      	subs	r3, r3, r1
 8001d0e:	42ab      	cmp	r3, r5
 8001d10:	dcf2      	bgt.n	8001cf8 <_printf_i+0x210>
 8001d12:	e7eb      	b.n	8001cec <_printf_i+0x204>
 8001d14:	2500      	movs	r5, #0
 8001d16:	f104 0619 	add.w	r6, r4, #25
 8001d1a:	e7f5      	b.n	8001d08 <_printf_i+0x220>
 8001d1c:	080020a0 	.word	0x080020a0
 8001d20:	080020b1 	.word	0x080020b1

08001d24 <__sflush_r>:
 8001d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d2c:	0716      	lsls	r6, r2, #28
 8001d2e:	4605      	mov	r5, r0
 8001d30:	460c      	mov	r4, r1
 8001d32:	d454      	bmi.n	8001dde <__sflush_r+0xba>
 8001d34:	684b      	ldr	r3, [r1, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	dc02      	bgt.n	8001d40 <__sflush_r+0x1c>
 8001d3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	dd48      	ble.n	8001dd2 <__sflush_r+0xae>
 8001d40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d42:	2e00      	cmp	r6, #0
 8001d44:	d045      	beq.n	8001dd2 <__sflush_r+0xae>
 8001d46:	2300      	movs	r3, #0
 8001d48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001d4c:	682f      	ldr	r7, [r5, #0]
 8001d4e:	6a21      	ldr	r1, [r4, #32]
 8001d50:	602b      	str	r3, [r5, #0]
 8001d52:	d030      	beq.n	8001db6 <__sflush_r+0x92>
 8001d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001d56:	89a3      	ldrh	r3, [r4, #12]
 8001d58:	0759      	lsls	r1, r3, #29
 8001d5a:	d505      	bpl.n	8001d68 <__sflush_r+0x44>
 8001d5c:	6863      	ldr	r3, [r4, #4]
 8001d5e:	1ad2      	subs	r2, r2, r3
 8001d60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001d62:	b10b      	cbz	r3, 8001d68 <__sflush_r+0x44>
 8001d64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001d66:	1ad2      	subs	r2, r2, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001d6c:	6a21      	ldr	r1, [r4, #32]
 8001d6e:	4628      	mov	r0, r5
 8001d70:	47b0      	blx	r6
 8001d72:	1c43      	adds	r3, r0, #1
 8001d74:	89a3      	ldrh	r3, [r4, #12]
 8001d76:	d106      	bne.n	8001d86 <__sflush_r+0x62>
 8001d78:	6829      	ldr	r1, [r5, #0]
 8001d7a:	291d      	cmp	r1, #29
 8001d7c:	d82b      	bhi.n	8001dd6 <__sflush_r+0xb2>
 8001d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8001e28 <__sflush_r+0x104>)
 8001d80:	40ca      	lsrs	r2, r1
 8001d82:	07d6      	lsls	r6, r2, #31
 8001d84:	d527      	bpl.n	8001dd6 <__sflush_r+0xb2>
 8001d86:	2200      	movs	r2, #0
 8001d88:	6062      	str	r2, [r4, #4]
 8001d8a:	04d9      	lsls	r1, r3, #19
 8001d8c:	6922      	ldr	r2, [r4, #16]
 8001d8e:	6022      	str	r2, [r4, #0]
 8001d90:	d504      	bpl.n	8001d9c <__sflush_r+0x78>
 8001d92:	1c42      	adds	r2, r0, #1
 8001d94:	d101      	bne.n	8001d9a <__sflush_r+0x76>
 8001d96:	682b      	ldr	r3, [r5, #0]
 8001d98:	b903      	cbnz	r3, 8001d9c <__sflush_r+0x78>
 8001d9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8001d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001d9e:	602f      	str	r7, [r5, #0]
 8001da0:	b1b9      	cbz	r1, 8001dd2 <__sflush_r+0xae>
 8001da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001da6:	4299      	cmp	r1, r3
 8001da8:	d002      	beq.n	8001db0 <__sflush_r+0x8c>
 8001daa:	4628      	mov	r0, r5
 8001dac:	f7ff fbf4 	bl	8001598 <_free_r>
 8001db0:	2300      	movs	r3, #0
 8001db2:	6363      	str	r3, [r4, #52]	@ 0x34
 8001db4:	e00d      	b.n	8001dd2 <__sflush_r+0xae>
 8001db6:	2301      	movs	r3, #1
 8001db8:	4628      	mov	r0, r5
 8001dba:	47b0      	blx	r6
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	1c50      	adds	r0, r2, #1
 8001dc0:	d1c9      	bne.n	8001d56 <__sflush_r+0x32>
 8001dc2:	682b      	ldr	r3, [r5, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0c6      	beq.n	8001d56 <__sflush_r+0x32>
 8001dc8:	2b1d      	cmp	r3, #29
 8001dca:	d001      	beq.n	8001dd0 <__sflush_r+0xac>
 8001dcc:	2b16      	cmp	r3, #22
 8001dce:	d11e      	bne.n	8001e0e <__sflush_r+0xea>
 8001dd0:	602f      	str	r7, [r5, #0]
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	e022      	b.n	8001e1c <__sflush_r+0xf8>
 8001dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dda:	b21b      	sxth	r3, r3
 8001ddc:	e01b      	b.n	8001e16 <__sflush_r+0xf2>
 8001dde:	690f      	ldr	r7, [r1, #16]
 8001de0:	2f00      	cmp	r7, #0
 8001de2:	d0f6      	beq.n	8001dd2 <__sflush_r+0xae>
 8001de4:	0793      	lsls	r3, r2, #30
 8001de6:	680e      	ldr	r6, [r1, #0]
 8001de8:	bf08      	it	eq
 8001dea:	694b      	ldreq	r3, [r1, #20]
 8001dec:	600f      	str	r7, [r1, #0]
 8001dee:	bf18      	it	ne
 8001df0:	2300      	movne	r3, #0
 8001df2:	eba6 0807 	sub.w	r8, r6, r7
 8001df6:	608b      	str	r3, [r1, #8]
 8001df8:	f1b8 0f00 	cmp.w	r8, #0
 8001dfc:	dde9      	ble.n	8001dd2 <__sflush_r+0xae>
 8001dfe:	6a21      	ldr	r1, [r4, #32]
 8001e00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001e02:	4643      	mov	r3, r8
 8001e04:	463a      	mov	r2, r7
 8001e06:	4628      	mov	r0, r5
 8001e08:	47b0      	blx	r6
 8001e0a:	2800      	cmp	r0, #0
 8001e0c:	dc08      	bgt.n	8001e20 <__sflush_r+0xfc>
 8001e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e16:	81a3      	strh	r3, [r4, #12]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e20:	4407      	add	r7, r0
 8001e22:	eba8 0800 	sub.w	r8, r8, r0
 8001e26:	e7e7      	b.n	8001df8 <__sflush_r+0xd4>
 8001e28:	20400001 	.word	0x20400001

08001e2c <_fflush_r>:
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	690b      	ldr	r3, [r1, #16]
 8001e30:	4605      	mov	r5, r0
 8001e32:	460c      	mov	r4, r1
 8001e34:	b913      	cbnz	r3, 8001e3c <_fflush_r+0x10>
 8001e36:	2500      	movs	r5, #0
 8001e38:	4628      	mov	r0, r5
 8001e3a:	bd38      	pop	{r3, r4, r5, pc}
 8001e3c:	b118      	cbz	r0, 8001e46 <_fflush_r+0x1a>
 8001e3e:	6a03      	ldr	r3, [r0, #32]
 8001e40:	b90b      	cbnz	r3, 8001e46 <_fflush_r+0x1a>
 8001e42:	f7ff f9af 	bl	80011a4 <__sinit>
 8001e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f3      	beq.n	8001e36 <_fflush_r+0xa>
 8001e4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001e50:	07d0      	lsls	r0, r2, #31
 8001e52:	d404      	bmi.n	8001e5e <_fflush_r+0x32>
 8001e54:	0599      	lsls	r1, r3, #22
 8001e56:	d402      	bmi.n	8001e5e <_fflush_r+0x32>
 8001e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e5a:	f7ff fb9a 	bl	8001592 <__retarget_lock_acquire_recursive>
 8001e5e:	4628      	mov	r0, r5
 8001e60:	4621      	mov	r1, r4
 8001e62:	f7ff ff5f 	bl	8001d24 <__sflush_r>
 8001e66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001e68:	07da      	lsls	r2, r3, #31
 8001e6a:	4605      	mov	r5, r0
 8001e6c:	d4e4      	bmi.n	8001e38 <_fflush_r+0xc>
 8001e6e:	89a3      	ldrh	r3, [r4, #12]
 8001e70:	059b      	lsls	r3, r3, #22
 8001e72:	d4e1      	bmi.n	8001e38 <_fflush_r+0xc>
 8001e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001e76:	f7ff fb8d 	bl	8001594 <__retarget_lock_release_recursive>
 8001e7a:	e7dd      	b.n	8001e38 <_fflush_r+0xc>

08001e7c <__swhatbuf_r>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	460c      	mov	r4, r1
 8001e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e84:	2900      	cmp	r1, #0
 8001e86:	b096      	sub	sp, #88	@ 0x58
 8001e88:	4615      	mov	r5, r2
 8001e8a:	461e      	mov	r6, r3
 8001e8c:	da0d      	bge.n	8001eaa <__swhatbuf_r+0x2e>
 8001e8e:	89a3      	ldrh	r3, [r4, #12]
 8001e90:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001e94:	f04f 0100 	mov.w	r1, #0
 8001e98:	bf14      	ite	ne
 8001e9a:	2340      	movne	r3, #64	@ 0x40
 8001e9c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	6031      	str	r1, [r6, #0]
 8001ea4:	602b      	str	r3, [r5, #0]
 8001ea6:	b016      	add	sp, #88	@ 0x58
 8001ea8:	bd70      	pop	{r4, r5, r6, pc}
 8001eaa:	466a      	mov	r2, sp
 8001eac:	f000 f848 	bl	8001f40 <_fstat_r>
 8001eb0:	2800      	cmp	r0, #0
 8001eb2:	dbec      	blt.n	8001e8e <__swhatbuf_r+0x12>
 8001eb4:	9901      	ldr	r1, [sp, #4]
 8001eb6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001eba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001ebe:	4259      	negs	r1, r3
 8001ec0:	4159      	adcs	r1, r3
 8001ec2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ec6:	e7eb      	b.n	8001ea0 <__swhatbuf_r+0x24>

08001ec8 <__smakebuf_r>:
 8001ec8:	898b      	ldrh	r3, [r1, #12]
 8001eca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001ecc:	079d      	lsls	r5, r3, #30
 8001ece:	4606      	mov	r6, r0
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	d507      	bpl.n	8001ee4 <__smakebuf_r+0x1c>
 8001ed4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001ed8:	6023      	str	r3, [r4, #0]
 8001eda:	6123      	str	r3, [r4, #16]
 8001edc:	2301      	movs	r3, #1
 8001ede:	6163      	str	r3, [r4, #20]
 8001ee0:	b003      	add	sp, #12
 8001ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ee4:	ab01      	add	r3, sp, #4
 8001ee6:	466a      	mov	r2, sp
 8001ee8:	f7ff ffc8 	bl	8001e7c <__swhatbuf_r>
 8001eec:	9f00      	ldr	r7, [sp, #0]
 8001eee:	4605      	mov	r5, r0
 8001ef0:	4639      	mov	r1, r7
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f7ff fbbc 	bl	8001670 <_malloc_r>
 8001ef8:	b948      	cbnz	r0, 8001f0e <__smakebuf_r+0x46>
 8001efa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001efe:	059a      	lsls	r2, r3, #22
 8001f00:	d4ee      	bmi.n	8001ee0 <__smakebuf_r+0x18>
 8001f02:	f023 0303 	bic.w	r3, r3, #3
 8001f06:	f043 0302 	orr.w	r3, r3, #2
 8001f0a:	81a3      	strh	r3, [r4, #12]
 8001f0c:	e7e2      	b.n	8001ed4 <__smakebuf_r+0xc>
 8001f0e:	89a3      	ldrh	r3, [r4, #12]
 8001f10:	6020      	str	r0, [r4, #0]
 8001f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f16:	81a3      	strh	r3, [r4, #12]
 8001f18:	9b01      	ldr	r3, [sp, #4]
 8001f1a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001f1e:	b15b      	cbz	r3, 8001f38 <__smakebuf_r+0x70>
 8001f20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f24:	4630      	mov	r0, r6
 8001f26:	f000 f81d 	bl	8001f64 <_isatty_r>
 8001f2a:	b128      	cbz	r0, 8001f38 <__smakebuf_r+0x70>
 8001f2c:	89a3      	ldrh	r3, [r4, #12]
 8001f2e:	f023 0303 	bic.w	r3, r3, #3
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	81a3      	strh	r3, [r4, #12]
 8001f38:	89a3      	ldrh	r3, [r4, #12]
 8001f3a:	431d      	orrs	r5, r3
 8001f3c:	81a5      	strh	r5, [r4, #12]
 8001f3e:	e7cf      	b.n	8001ee0 <__smakebuf_r+0x18>

08001f40 <_fstat_r>:
 8001f40:	b538      	push	{r3, r4, r5, lr}
 8001f42:	4d07      	ldr	r5, [pc, #28]	@ (8001f60 <_fstat_r+0x20>)
 8001f44:	2300      	movs	r3, #0
 8001f46:	4604      	mov	r4, r0
 8001f48:	4608      	mov	r0, r1
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	602b      	str	r3, [r5, #0]
 8001f4e:	f7ff f814 	bl	8000f7a <_fstat>
 8001f52:	1c43      	adds	r3, r0, #1
 8001f54:	d102      	bne.n	8001f5c <_fstat_r+0x1c>
 8001f56:	682b      	ldr	r3, [r5, #0]
 8001f58:	b103      	cbz	r3, 8001f5c <_fstat_r+0x1c>
 8001f5a:	6023      	str	r3, [r4, #0]
 8001f5c:	bd38      	pop	{r3, r4, r5, pc}
 8001f5e:	bf00      	nop
 8001f60:	200001d0 	.word	0x200001d0

08001f64 <_isatty_r>:
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4d06      	ldr	r5, [pc, #24]	@ (8001f80 <_isatty_r+0x1c>)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	602b      	str	r3, [r5, #0]
 8001f70:	f7ff f813 	bl	8000f9a <_isatty>
 8001f74:	1c43      	adds	r3, r0, #1
 8001f76:	d102      	bne.n	8001f7e <_isatty_r+0x1a>
 8001f78:	682b      	ldr	r3, [r5, #0]
 8001f7a:	b103      	cbz	r3, 8001f7e <_isatty_r+0x1a>
 8001f7c:	6023      	str	r3, [r4, #0]
 8001f7e:	bd38      	pop	{r3, r4, r5, pc}
 8001f80:	200001d0 	.word	0x200001d0

08001f84 <_sbrk_r>:
 8001f84:	b538      	push	{r3, r4, r5, lr}
 8001f86:	4d06      	ldr	r5, [pc, #24]	@ (8001fa0 <_sbrk_r+0x1c>)
 8001f88:	2300      	movs	r3, #0
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	602b      	str	r3, [r5, #0]
 8001f90:	f7ff f81c 	bl	8000fcc <_sbrk>
 8001f94:	1c43      	adds	r3, r0, #1
 8001f96:	d102      	bne.n	8001f9e <_sbrk_r+0x1a>
 8001f98:	682b      	ldr	r3, [r5, #0]
 8001f9a:	b103      	cbz	r3, 8001f9e <_sbrk_r+0x1a>
 8001f9c:	6023      	str	r3, [r4, #0]
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
 8001fa0:	200001d0 	.word	0x200001d0

08001fa4 <_init>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr

08001fb0 <_fini>:
 8001fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb2:	bf00      	nop
 8001fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fb6:	bc08      	pop	{r3}
 8001fb8:	469e      	mov	lr, r3
 8001fba:	4770      	bx	lr
