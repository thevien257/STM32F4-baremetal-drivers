
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000788  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000910  08000918  00001918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000910  08000910  00001918  2**0
                  CONTENTS
  4 .ARM          00000000  08000910  08000910  00001918  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000910  08000918  00001918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000910  08000910  00001910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000914  08000914  00001914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001918  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001918  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001918  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000095a  00000000  00000000  00001948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000026d  00000000  00000000  000022a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00002510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000072  00000000  00000000  000025b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000021ab  00000000  00000000  0000262a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000104f  00000000  00000000  000047d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000892d  00000000  00000000  00005824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000e151  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001bc  00000000  00000000  0000e194  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0000e350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080008f8 	.word	0x080008f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080008f8 	.word	0x080008f8

080001c8 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a8f      	ldr	r2, [pc, #572]	@ (8000414 <GPIO_INIT+0x24c>)
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d106      	bne.n	80001e8 <GPIO_INIT+0x20>
		GPIOA_EN();
 80001da:	4b8f      	ldr	r3, [pc, #572]	@ (8000418 <GPIO_INIT+0x250>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a8e      	ldr	r2, [pc, #568]	@ (8000418 <GPIO_INIT+0x250>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80001e6:	e05e      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a8b      	ldr	r2, [pc, #556]	@ (800041c <GPIO_INIT+0x254>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_INIT+0x38>
		GPIOB_EN();
 80001f2:	4b89      	ldr	r3, [pc, #548]	@ (8000418 <GPIO_INIT+0x250>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a88      	ldr	r2, [pc, #544]	@ (8000418 <GPIO_INIT+0x250>)
 80001f8:	f043 0302 	orr.w	r3, r3, #2
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fe:	e052      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a86      	ldr	r2, [pc, #536]	@ (8000420 <GPIO_INIT+0x258>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d106      	bne.n	8000218 <GPIO_INIT+0x50>
		GPIOC_EN();
 800020a:	4b83      	ldr	r3, [pc, #524]	@ (8000418 <GPIO_INIT+0x250>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020e:	4a82      	ldr	r2, [pc, #520]	@ (8000418 <GPIO_INIT+0x250>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6313      	str	r3, [r2, #48]	@ 0x30
 8000216:	e046      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a81      	ldr	r2, [pc, #516]	@ (8000424 <GPIO_INIT+0x25c>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_INIT+0x68>
		GPIOD_EN();
 8000222:	4b7d      	ldr	r3, [pc, #500]	@ (8000418 <GPIO_INIT+0x250>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000226:	4a7c      	ldr	r2, [pc, #496]	@ (8000418 <GPIO_INIT+0x250>)
 8000228:	f043 0308 	orr.w	r3, r3, #8
 800022c:	6313      	str	r3, [r2, #48]	@ 0x30
 800022e:	e03a      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a7c      	ldr	r2, [pc, #496]	@ (8000428 <GPIO_INIT+0x260>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_INIT+0x80>
		GPIOE_EN();
 800023a:	4b77      	ldr	r3, [pc, #476]	@ (8000418 <GPIO_INIT+0x250>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a76      	ldr	r2, [pc, #472]	@ (8000418 <GPIO_INIT+0x250>)
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
 8000246:	e02e      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a77      	ldr	r2, [pc, #476]	@ (800042c <GPIO_INIT+0x264>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d106      	bne.n	8000260 <GPIO_INIT+0x98>
		GPIOF_EN();
 8000252:	4b71      	ldr	r3, [pc, #452]	@ (8000418 <GPIO_INIT+0x250>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000256:	4a70      	ldr	r2, [pc, #448]	@ (8000418 <GPIO_INIT+0x250>)
 8000258:	f043 0320 	orr.w	r3, r3, #32
 800025c:	6313      	str	r3, [r2, #48]	@ 0x30
 800025e:	e022      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a72      	ldr	r2, [pc, #456]	@ (8000430 <GPIO_INIT+0x268>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_INIT+0xb0>
		GPIOG_EN();
 800026a:	4b6b      	ldr	r3, [pc, #428]	@ (8000418 <GPIO_INIT+0x250>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026e:	4a6a      	ldr	r2, [pc, #424]	@ (8000418 <GPIO_INIT+0x250>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000274:	6313      	str	r3, [r2, #48]	@ 0x30
 8000276:	e016      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a6d      	ldr	r2, [pc, #436]	@ (8000434 <GPIO_INIT+0x26c>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <GPIO_INIT+0xc8>
		GPIOH_EN();
 8000282:	4b65      	ldr	r3, [pc, #404]	@ (8000418 <GPIO_INIT+0x250>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000286:	4a64      	ldr	r2, [pc, #400]	@ (8000418 <GPIO_INIT+0x250>)
 8000288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028c:	6313      	str	r3, [r2, #48]	@ 0x30
 800028e:	e00a      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a68      	ldr	r2, [pc, #416]	@ (8000438 <GPIO_INIT+0x270>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d105      	bne.n	80002a6 <GPIO_INIT+0xde>
		GPIOI_EN();
 800029a:	4b5f      	ldr	r3, [pc, #380]	@ (8000418 <GPIO_INIT+0x250>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029e:	4a5e      	ldr	r2, [pc, #376]	@ (8000418 <GPIO_INIT+0x250>)
 80002a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a4:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	791b      	ldrb	r3, [r3, #4]
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	2103      	movs	r1, #3
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 80002b8:	43db      	mvns	r3, r3
 80002ba:	4619      	mov	r1, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	400a      	ands	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]
	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	791b      	ldrb	r3, [r3, #4]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	400a      	ands	r2, r1
 80002e0:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	799b      	ldrb	r3, [r3, #6]
 80002ec:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	791b      	ldrb	r3, [r3, #4]
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	fa01 f303 	lsl.w	r3, r1, r3
 80002f8:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	430a      	orrs	r2, r1
 8000300:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_OUTPUT) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	795b      	ldrb	r3, [r3, #5]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d84c      	bhi.n	80003a4 <GPIO_INIT+0x1dc>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	795b      	ldrb	r3, [r3, #5]
 8000314:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	791b      	ldrb	r3, [r3, #4]
 800031a:	005b      	lsls	r3, r3, #1
 800031c:	fa01 f303 	lsl.w	r3, r1, r3
 8000320:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	430a      	orrs	r2, r1
 8000328:	601a      	str	r2, [r3, #0]

		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	791b      	ldrb	r3, [r3, #4]
 8000334:	4619      	mov	r1, r3
 8000336:	2303      	movs	r3, #3
 8000338:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 800033a:	43db      	mvns	r3, r3
 800033c:	4619      	mov	r1, r3
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	400a      	ands	r2, r1
 8000344:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	685a      	ldr	r2, [r3, #4]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	7a1b      	ldrb	r3, [r3, #8]
 8000350:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	791b      	ldrb	r3, [r3, #4]
 8000356:	fa01 f303 	lsl.w	r3, r1, r3
 800035a:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	430a      	orrs	r2, r1
 8000362:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	791b      	ldrb	r3, [r3, #4]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	2103      	movs	r1, #3
 8000372:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000376:	43db      	mvns	r3, r3
 8000378:	4619      	mov	r1, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	400a      	ands	r2, r1
 8000380:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	689a      	ldr	r2, [r3, #8]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	79db      	ldrb	r3, [r3, #7]
 800038c:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	791b      	ldrb	r3, [r3, #4]
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	fa01 f303 	lsl.w	r3, r1, r3
 8000398:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	430a      	orrs	r2, r1
 80003a0:	609a      	str	r2, [r3, #8]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 80003a2:	e0ee      	b.n	8000582 <GPIO_INIT+0x3ba>
	} else if (gpioHandle->mode == GPIO_MODE_AF) {
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	795b      	ldrb	r3, [r3, #5]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	d147      	bne.n	800043c <GPIO_INIT+0x274>
		uint8_t ALT_low_high = (gpioHandle->pin_number / Divide_ALT_Function);
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	791b      	ldrb	r3, [r3, #4]
 80003b0:	08db      	lsrs	r3, r3, #3
 80003b2:	737b      	strb	r3, [r7, #13]
		uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	791b      	ldrb	r3, [r3, #4]
 80003b8:	f003 0307 	and.w	r3, r3, #7
 80003bc:	733b      	strb	r3, [r7, #12]
		gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	7b7a      	ldrb	r2, [r7, #13]
 80003c4:	3208      	adds	r2, #8
 80003c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				<< gpioHandle->pin_number);
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	791b      	ldrb	r3, [r3, #4]
 80003ce:	461a      	mov	r2, r3
 80003d0:	2303      	movs	r3, #3
 80003d2:	4093      	lsls	r3, r2
		gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 80003d4:	43db      	mvns	r3, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	7b7a      	ldrb	r2, [r7, #13]
 80003de:	4001      	ands	r1, r0
 80003e0:	3208      	adds	r2, #8
 80003e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	7b7a      	ldrb	r2, [r7, #13]
 80003ec:	3208      	adds	r2, #8
 80003ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
				(gpioHandle->alternate_function_select << Shift_4_pos * ALT_bit);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	7a5b      	ldrb	r3, [r3, #9]
 80003f6:	461a      	mov	r2, r3
 80003f8:	7b3b      	ldrb	r3, [r7, #12]
 80003fa:	009b      	lsls	r3, r3, #2
 80003fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000400:	4618      	mov	r0, r3
		gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	7b7a      	ldrb	r2, [r7, #13]
 8000408:	4301      	orrs	r1, r0
 800040a:	3208      	adds	r2, #8
 800040c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000410:	e0b7      	b.n	8000582 <GPIO_INIT+0x3ba>
 8000412:	bf00      	nop
 8000414:	40020000 	.word	0x40020000
 8000418:	40023800 	.word	0x40023800
 800041c:	40020400 	.word	0x40020400
 8000420:	40020800 	.word	0x40020800
 8000424:	40020c00 	.word	0x40020c00
 8000428:	40021000 	.word	0x40021000
 800042c:	40021400 	.word	0x40021400
 8000430:	40021800 	.word	0x40021800
 8000434:	40021c00 	.word	0x40021c00
 8000438:	40022000 	.word	0x40022000
		SYSCFG_EN();
 800043c:	4b54      	ldr	r3, [pc, #336]	@ (8000590 <GPIO_INIT+0x3c8>)
 800043e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000440:	4a53      	ldr	r2, [pc, #332]	@ (8000590 <GPIO_INIT+0x3c8>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000446:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	795b      	ldrb	r3, [r3, #5]
 800044c:	2b06      	cmp	r3, #6
 800044e:	d12e      	bne.n	80004ae <GPIO_INIT+0x2e6>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000450:	4b50      	ldr	r3, [pc, #320]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000452:	689b      	ldr	r3, [r3, #8]
 8000454:	687a      	ldr	r2, [r7, #4]
 8000456:	7912      	ldrb	r2, [r2, #4]
 8000458:	4611      	mov	r1, r2
 800045a:	2201      	movs	r2, #1
 800045c:	408a      	lsls	r2, r1
 800045e:	43d2      	mvns	r2, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4a4c      	ldr	r2, [pc, #304]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000464:	400b      	ands	r3, r1
 8000466:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000468:	4b4a      	ldr	r3, [pc, #296]	@ (8000594 <GPIO_INIT+0x3cc>)
 800046a:	68db      	ldr	r3, [r3, #12]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	7912      	ldrb	r2, [r2, #4]
 8000470:	4611      	mov	r1, r2
 8000472:	2201      	movs	r2, #1
 8000474:	408a      	lsls	r2, r1
 8000476:	43d2      	mvns	r2, r2
 8000478:	4611      	mov	r1, r2
 800047a:	4a46      	ldr	r2, [pc, #280]	@ (8000594 <GPIO_INIT+0x3cc>)
 800047c:	400b      	ands	r3, r1
 800047e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000480:	4b44      	ldr	r3, [pc, #272]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	7912      	ldrb	r2, [r2, #4]
 8000488:	4611      	mov	r1, r2
 800048a:	2201      	movs	r2, #1
 800048c:	408a      	lsls	r2, r1
 800048e:	4611      	mov	r1, r2
 8000490:	4a40      	ldr	r2, [pc, #256]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000492:	430b      	orrs	r3, r1
 8000494:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000496:	4b3f      	ldr	r3, [pc, #252]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000498:	68db      	ldr	r3, [r3, #12]
 800049a:	687a      	ldr	r2, [r7, #4]
 800049c:	7912      	ldrb	r2, [r2, #4]
 800049e:	4611      	mov	r1, r2
 80004a0:	2201      	movs	r2, #1
 80004a2:	408a      	lsls	r2, r1
 80004a4:	4611      	mov	r1, r2
 80004a6:	4a3b      	ldr	r2, [pc, #236]	@ (8000594 <GPIO_INIT+0x3cc>)
 80004a8:	430b      	orrs	r3, r1
 80004aa:	60d3      	str	r3, [r2, #12]
 80004ac:	e036      	b.n	800051c <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	795b      	ldrb	r3, [r3, #5]
 80004b2:	2b05      	cmp	r3, #5
 80004b4:	d117      	bne.n	80004e6 <GPIO_INIT+0x31e>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 80004b6:	4b37      	ldr	r3, [pc, #220]	@ (8000594 <GPIO_INIT+0x3cc>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	687a      	ldr	r2, [r7, #4]
 80004bc:	7912      	ldrb	r2, [r2, #4]
 80004be:	4611      	mov	r1, r2
 80004c0:	2201      	movs	r2, #1
 80004c2:	408a      	lsls	r2, r1
 80004c4:	43d2      	mvns	r2, r2
 80004c6:	4611      	mov	r1, r2
 80004c8:	4a32      	ldr	r2, [pc, #200]	@ (8000594 <GPIO_INIT+0x3cc>)
 80004ca:	400b      	ands	r3, r1
 80004cc:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 80004ce:	4b31      	ldr	r3, [pc, #196]	@ (8000594 <GPIO_INIT+0x3cc>)
 80004d0:	68db      	ldr	r3, [r3, #12]
 80004d2:	687a      	ldr	r2, [r7, #4]
 80004d4:	7912      	ldrb	r2, [r2, #4]
 80004d6:	4611      	mov	r1, r2
 80004d8:	2201      	movs	r2, #1
 80004da:	408a      	lsls	r2, r1
 80004dc:	4611      	mov	r1, r2
 80004de:	4a2d      	ldr	r2, [pc, #180]	@ (8000594 <GPIO_INIT+0x3cc>)
 80004e0:	430b      	orrs	r3, r1
 80004e2:	60d3      	str	r3, [r2, #12]
 80004e4:	e01a      	b.n	800051c <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	795b      	ldrb	r3, [r3, #5]
 80004ea:	2b04      	cmp	r3, #4
 80004ec:	d116      	bne.n	800051c <GPIO_INIT+0x354>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80004ee:	4b29      	ldr	r3, [pc, #164]	@ (8000594 <GPIO_INIT+0x3cc>)
 80004f0:	689b      	ldr	r3, [r3, #8]
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	7912      	ldrb	r2, [r2, #4]
 80004f6:	4611      	mov	r1, r2
 80004f8:	2201      	movs	r2, #1
 80004fa:	408a      	lsls	r2, r1
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	4611      	mov	r1, r2
 8000500:	4a24      	ldr	r2, [pc, #144]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000502:	400b      	ands	r3, r1
 8000504:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000506:	4b23      	ldr	r3, [pc, #140]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	7912      	ldrb	r2, [r2, #4]
 800050e:	4611      	mov	r1, r2
 8000510:	2201      	movs	r2, #1
 8000512:	408a      	lsls	r2, r1
 8000514:	4611      	mov	r1, r2
 8000516:	4a1f      	ldr	r2, [pc, #124]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000518:	430b      	orrs	r3, r1
 800051a:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	089b      	lsrs	r3, r3, #2
 8000522:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	791b      	ldrb	r3, [r3, #4]
 8000528:	f003 0303 	and.w	r3, r3, #3
 800052c:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 800052e:	4a1a      	ldr	r2, [pc, #104]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	3302      	adds	r3, #2
 8000534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	7a9b      	ldrb	r3, [r3, #10]
 800053c:	4619      	mov	r1, r3
 800053e:	7bbb      	ldrb	r3, [r7, #14]
 8000540:	009b      	lsls	r3, r3, #2
 8000542:	fa01 f303 	lsl.w	r3, r1, r3
 8000546:	4618      	mov	r0, r3
 8000548:	4913      	ldr	r1, [pc, #76]	@ (8000598 <GPIO_INIT+0x3d0>)
 800054a:	7bfb      	ldrb	r3, [r7, #15]
 800054c:	4302      	orrs	r2, r0
 800054e:	3302      	adds	r3, #2
 8000550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8000554:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	687a      	ldr	r2, [r7, #4]
 800055a:	7912      	ldrb	r2, [r2, #4]
 800055c:	4611      	mov	r1, r2
 800055e:	2201      	movs	r2, #1
 8000560:	408a      	lsls	r2, r1
 8000562:	43d2      	mvns	r2, r2
 8000564:	4611      	mov	r1, r2
 8000566:	4a0b      	ldr	r2, [pc, #44]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000568:	400b      	ands	r3, r1
 800056a:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 800056c:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <GPIO_INIT+0x3cc>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	7912      	ldrb	r2, [r2, #4]
 8000574:	4611      	mov	r1, r2
 8000576:	2201      	movs	r2, #1
 8000578:	408a      	lsls	r2, r1
 800057a:	4611      	mov	r1, r2
 800057c:	4a05      	ldr	r2, [pc, #20]	@ (8000594 <GPIO_INIT+0x3cc>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6013      	str	r3, [r2, #0]
}
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	40023800 	.word	0x40023800
 8000594:	40013c00 	.word	0x40013c00
 8000598:	40013800 	.word	0x40013800

0800059c <GPIO_TOGGLE>:
uint8_t GPIO_INPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
	uint8_t val = ((gpiox->IDR >> gpio_pins) & GPIO_BIT_1_Mask);
	return val;
}

void GPIO_TOGGLE(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	70fb      	strb	r3, [r7, #3]
	gpiox->ODR ^= (HIGH << gpio_pins);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	695b      	ldr	r3, [r3, #20]
 80005ac:	78fa      	ldrb	r2, [r7, #3]
 80005ae:	2101      	movs	r1, #1
 80005b0:	fa01 f202 	lsl.w	r2, r1, r2
 80005b4:	405a      	eors	r2, r3
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	615a      	str	r2, [r3, #20]
}
 80005ba:	bf00      	nop
 80005bc:	370c      	adds	r7, #12
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr

080005c6 <GPIO_OUTPUT>:

void GPIO_OUTPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins, uint8_t val) {
 80005c6:	b480      	push	{r7}
 80005c8:	b083      	sub	sp, #12
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	6078      	str	r0, [r7, #4]
 80005ce:	460b      	mov	r3, r1
 80005d0:	70fb      	strb	r3, [r7, #3]
 80005d2:	4613      	mov	r3, r2
 80005d4:	70bb      	strb	r3, [r7, #2]
	if (val == HIGH) {
 80005d6:	78bb      	ldrb	r3, [r7, #2]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d109      	bne.n	80005f0 <GPIO_OUTPUT+0x2a>
		gpiox->BSRR |= (HIGH << gpio_pins);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	78fa      	ldrb	r2, [r7, #3]
 80005e2:	2101      	movs	r1, #1
 80005e4:	fa01 f202 	lsl.w	r2, r1, r2
 80005e8:	431a      	orrs	r2, r3
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	619a      	str	r2, [r3, #24]
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}
 80005ee:	e009      	b.n	8000604 <GPIO_OUTPUT+0x3e>
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	699b      	ldr	r3, [r3, #24]
 80005f4:	78fa      	ldrb	r2, [r7, #3]
 80005f6:	3210      	adds	r2, #16
 80005f8:	2101      	movs	r1, #1
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	431a      	orrs	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	619a      	str	r2, [r3, #24]
}
 8000604:	bf00      	nop
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <GPIO_IRQ_Config>:

void GPIO_IRQ_Config(uint8_t IRQn, uint8_t EN) {
 8000610:	b480      	push	{r7}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	4603      	mov	r3, r0
 8000618:	460a      	mov	r2, r1
 800061a:	71fb      	strb	r3, [r7, #7]
 800061c:	4613      	mov	r3, r2
 800061e:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	095b      	lsrs	r3, r3, #5
 8000624:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 8000626:	7dfb      	ldrb	r3, [r7, #23]
 8000628:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 800062a:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800062e:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000632:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 8000634:	7dfb      	ldrb	r3, [r7, #23]
 8000636:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 8000638:	4b12      	ldr	r3, [pc, #72]	@ (8000684 <GPIO_IRQ_Config+0x74>)
 800063a:	4413      	add	r3, r2
 800063c:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 800063e:	79bb      	ldrb	r3, [r7, #6]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d10b      	bne.n	800065c <GPIO_IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	f002 021f 	and.w	r2, r2, #31
 800064e:	2101      	movs	r1, #1
 8000650:	fa01 f202 	lsl.w	r2, r1, r2
 8000654:	431a      	orrs	r2, r3
 8000656:	693b      	ldr	r3, [r7, #16]
 8000658:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 800065a:	e00d      	b.n	8000678 <GPIO_IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 800065c:	79bb      	ldrb	r3, [r7, #6]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d10a      	bne.n	8000678 <GPIO_IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	79fa      	ldrb	r2, [r7, #7]
 8000668:	f002 021f 	and.w	r2, r2, #31
 800066c:	2101      	movs	r1, #1
 800066e:	fa01 f202 	lsl.w	r2, r1, r2
 8000672:	431a      	orrs	r2, r3
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	601a      	str	r2, [r3, #0]
}
 8000678:	bf00      	nop
 800067a:	371c      	adds	r7, #28
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr
 8000684:	e000e180 	.word	0xe000e180

08000688 <GPIO_IRQ_SetPriority>:
void GPIO_IRQ_SetPriority(uint8_t IRQn, uint8_t priority) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_4_pos;
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	089b      	lsrs	r3, r3, #2
 800069c:	73fb      	strb	r3, [r7, #15]
	uint8_t cal_bit = IRQn % Shift_4_pos;
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f003 0303 	and.w	r3, r3, #3
 80006a4:	73bb      	strb	r3, [r7, #14]
	volatile uint32_t *cal_address_IPR = IPR_BASE_ADDR + cal_reg;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80006ae:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 80006b2:	60bb      	str	r3, [r7, #8]

	// Priority just use upper part of 4 bits
	// (Upper part) 0000 | 0000 (Lower part)

	*cal_address_IPR &= ~(priority
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	681b      	ldr	r3, [r3, #0]
			<< (cal_bit * Shift_8_pos + Shift_Upper_Part_4_bits));
 80006b8:	79b9      	ldrb	r1, [r7, #6]
 80006ba:	7bba      	ldrb	r2, [r7, #14]
 80006bc:	00d2      	lsls	r2, r2, #3
 80006be:	3204      	adds	r2, #4
 80006c0:	fa01 f202 	lsl.w	r2, r1, r2
	*cal_address_IPR &= ~(priority
 80006c4:	43d2      	mvns	r2, r2
 80006c6:	401a      	ands	r2, r3
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	601a      	str	r2, [r3, #0]
	*cal_address_IPR |= (priority
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	681b      	ldr	r3, [r3, #0]
			<< (cal_bit * Shift_8_pos + Shift_Upper_Part_4_bits));
 80006d0:	79b9      	ldrb	r1, [r7, #6]
 80006d2:	7bba      	ldrb	r2, [r7, #14]
 80006d4:	00d2      	lsls	r2, r2, #3
 80006d6:	3204      	adds	r2, #4
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
	*cal_address_IPR |= (priority
 80006dc:	431a      	orrs	r2, r3
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	601a      	str	r2, [r3, #0]

}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ec:	4770      	bx	lr
	...

080006f0 <GPIO_IRQHandling>:

void GPIO_IRQHandling(uint8_t pinNumber) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	if ((EXTI->PR >> pinNumber) & HIGH) {
 80006fa:	4b0c      	ldr	r3, [pc, #48]	@ (800072c <GPIO_IRQHandling+0x3c>)
 80006fc:	695a      	ldr	r2, [r3, #20]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	fa22 f303 	lsr.w	r3, r2, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	2b00      	cmp	r3, #0
 800070a:	d009      	beq.n	8000720 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (HIGH << pinNumber);
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <GPIO_IRQHandling+0x3c>)
 800070e:	695b      	ldr	r3, [r3, #20]
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f202 	lsl.w	r2, r1, r2
 8000718:	4611      	mov	r1, r2
 800071a:	4a04      	ldr	r2, [pc, #16]	@ (800072c <GPIO_IRQHandling+0x3c>)
 800071c:	430b      	orrs	r3, r1
 800071e:	6153      	str	r3, [r2, #20]
	}
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40013c00 	.word	0x40013c00

08000730 <main>:
GPIO_Handle_TypeDef gpio_handle;
uint8_t read_input = 0;

void GPIO_USER_INIT(void);

int main(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
	GPIO_USER_INIT();
 8000736:	f000 f83d 	bl	80007b4 <GPIO_USER_INIT>

	GPIO_IRQ_SetPriority(IRQ40_EXTI15_10, 15);
 800073a:	210f      	movs	r1, #15
 800073c:	2028      	movs	r0, #40	@ 0x28
 800073e:	f7ff ffa3 	bl	8000688 <GPIO_IRQ_SetPriority>
	GPIO_IRQ_Config(IRQ40_EXTI15_10, ENABLE);
 8000742:	2101      	movs	r1, #1
 8000744:	2028      	movs	r0, #40	@ 0x28
 8000746:	f7ff ff63 	bl	8000610 <GPIO_IRQ_Config>
	while (1) {
		GPIO_OUTPUT(GPIOA, GPIO_PIN_8, HIGH);
 800074a:	2201      	movs	r2, #1
 800074c:	2108      	movs	r1, #8
 800074e:	4817      	ldr	r0, [pc, #92]	@ (80007ac <main+0x7c>)
 8000750:	f7ff ff39 	bl	80005c6 <GPIO_OUTPUT>
		for (uint32_t i = 0; i < 50000; i++)
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	e002      	b.n	8000760 <main+0x30>
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000766:	4293      	cmp	r3, r2
 8000768:	d9f7      	bls.n	800075a <main+0x2a>
			;
		GPIO_OUTPUT(GPIOA, GPIO_PIN_8, LOW);
 800076a:	2200      	movs	r2, #0
 800076c:	2108      	movs	r1, #8
 800076e:	480f      	ldr	r0, [pc, #60]	@ (80007ac <main+0x7c>)
 8000770:	f7ff ff29 	bl	80005c6 <GPIO_OUTPUT>
		for (uint32_t i = 0; i < 50000; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	e002      	b.n	8000780 <main+0x50>
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	3301      	adds	r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8000786:	4293      	cmp	r3, r2
 8000788:	d9f7      	bls.n	800077a <main+0x4a>
			;
		GPIO_TOGGLE(GPIOD, GPIO_PIN_13);
 800078a:	210d      	movs	r1, #13
 800078c:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <main+0x80>)
 800078e:	f7ff ff05 	bl	800059c <GPIO_TOGGLE>
		for (uint32_t i = 0; i < 50000; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	e002      	b.n	800079e <main+0x6e>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3301      	adds	r3, #1
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d9f7      	bls.n	8000798 <main+0x68>
		GPIO_OUTPUT(GPIOA, GPIO_PIN_8, HIGH);
 80007a8:	e7cf      	b.n	800074a <main+0x1a>
 80007aa:	bf00      	nop
 80007ac:	40020000 	.word	0x40020000
 80007b0:	40020c00 	.word	0x40020c00

080007b4 <GPIO_USER_INIT>:
			;
	}
}

void GPIO_USER_INIT(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	gpio_handle.GPIOX = GPIOA;
 80007b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007ba:	4a1e      	ldr	r2, [pc, #120]	@ (8000834 <GPIO_USER_INIT+0x80>)
 80007bc:	601a      	str	r2, [r3, #0]
	gpio_handle.pin_number = GPIO_PIN_8;
 80007be:	4b1c      	ldr	r3, [pc, #112]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007c0:	2208      	movs	r2, #8
 80007c2:	711a      	strb	r2, [r3, #4]
	gpio_handle.mode = GPIO_MODE_OUTPUT;
 80007c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	715a      	strb	r2, [r3, #5]
	gpio_handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 80007ca:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007cc:	2203      	movs	r2, #3
 80007ce:	71da      	strb	r2, [r3, #7]
	gpio_handle.output_type = GPIO_OUTPUT_TYPE_PP;
 80007d0:	4b17      	ldr	r3, [pc, #92]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	721a      	strb	r2, [r3, #8]
	gpio_handle.pull_up_pull_down = GPIO_PUPD_NONE;
 80007d6:	4b16      	ldr	r3, [pc, #88]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&gpio_handle);
 80007dc:	4814      	ldr	r0, [pc, #80]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007de:	f7ff fcf3 	bl	80001c8 <GPIO_INIT>

	gpio_handle.GPIOX = GPIOE;
 80007e2:	4b13      	ldr	r3, [pc, #76]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007e4:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <GPIO_USER_INIT+0x84>)
 80007e6:	601a      	str	r2, [r3, #0]
	gpio_handle.pin_number = GPIO_PIN_1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&gpio_handle);
 80007ee:	4810      	ldr	r0, [pc, #64]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007f0:	f7ff fcea 	bl	80001c8 <GPIO_INIT>

	gpio_handle.GPIOX = GPIOD;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007f6:	4a11      	ldr	r2, [pc, #68]	@ (800083c <GPIO_USER_INIT+0x88>)
 80007f8:	601a      	str	r2, [r3, #0]
	gpio_handle.pin_number = GPIO_PIN_13;
 80007fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 80007fc:	220d      	movs	r2, #13
 80007fe:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&gpio_handle);
 8000800:	480b      	ldr	r0, [pc, #44]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 8000802:	f7ff fce1 	bl	80001c8 <GPIO_INIT>

	gpio_handle.GPIOX = GPIOA;
 8000806:	4b0a      	ldr	r3, [pc, #40]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 8000808:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <GPIO_USER_INIT+0x80>)
 800080a:	601a      	str	r2, [r3, #0]
	gpio_handle.pin_number = GPIO_PIN_15;
 800080c:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 800080e:	220f      	movs	r2, #15
 8000810:	711a      	strb	r2, [r3, #4]
	gpio_handle.mode = GPIO_MODE_INTERRUPT_FALLING;
 8000812:	4b07      	ldr	r3, [pc, #28]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 8000814:	2205      	movs	r2, #5
 8000816:	715a      	strb	r2, [r3, #5]
	gpio_handle.pull_up_pull_down = GPIO_PUPD_PU;
 8000818:	4b05      	ldr	r3, [pc, #20]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 800081a:	2201      	movs	r2, #1
 800081c:	719a      	strb	r2, [r3, #6]
	gpio_handle.exti_select = EXTI_PORT_PA;
 800081e:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 8000820:	2200      	movs	r2, #0
 8000822:	729a      	strb	r2, [r3, #10]
	GPIO_INIT(&gpio_handle);
 8000824:	4802      	ldr	r0, [pc, #8]	@ (8000830 <GPIO_USER_INIT+0x7c>)
 8000826:	f7ff fccf 	bl	80001c8 <GPIO_INIT>
}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000001c 	.word	0x2000001c
 8000834:	40020000 	.word	0x40020000
 8000838:	40021000 	.word	0x40021000
 800083c:	40020c00 	.word	0x40020c00

08000840 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void) {
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	GPIO_TOGGLE(GPIOE, GPIO_PIN_1);
 8000844:	2101      	movs	r1, #1
 8000846:	4804      	ldr	r0, [pc, #16]	@ (8000858 <EXTI15_10_IRQHandler+0x18>)
 8000848:	f7ff fea8 	bl	800059c <GPIO_TOGGLE>
	GPIO_IRQHandling(GPIO_PIN_15);
 800084c:	200f      	movs	r0, #15
 800084e:	f7ff ff4f 	bl	80006f0 <GPIO_IRQHandling>
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	@ (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000860:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088a:	f000 f811 	bl	80008b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff ff4f 	bl	8000730 <main>

08000892 <LoopForever>:

LoopForever:
  b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80008a0:	08000918 	.word	0x08000918
  ldr r2, =_sbss
 80008a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80008a8:	20000028 	.word	0x20000028

080008ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <__libc_init_array>:
 80008b0:	b570      	push	{r4, r5, r6, lr}
 80008b2:	4d0d      	ldr	r5, [pc, #52]	@ (80008e8 <__libc_init_array+0x38>)
 80008b4:	4c0d      	ldr	r4, [pc, #52]	@ (80008ec <__libc_init_array+0x3c>)
 80008b6:	1b64      	subs	r4, r4, r5
 80008b8:	10a4      	asrs	r4, r4, #2
 80008ba:	2600      	movs	r6, #0
 80008bc:	42a6      	cmp	r6, r4
 80008be:	d109      	bne.n	80008d4 <__libc_init_array+0x24>
 80008c0:	4d0b      	ldr	r5, [pc, #44]	@ (80008f0 <__libc_init_array+0x40>)
 80008c2:	4c0c      	ldr	r4, [pc, #48]	@ (80008f4 <__libc_init_array+0x44>)
 80008c4:	f000 f818 	bl	80008f8 <_init>
 80008c8:	1b64      	subs	r4, r4, r5
 80008ca:	10a4      	asrs	r4, r4, #2
 80008cc:	2600      	movs	r6, #0
 80008ce:	42a6      	cmp	r6, r4
 80008d0:	d105      	bne.n	80008de <__libc_init_array+0x2e>
 80008d2:	bd70      	pop	{r4, r5, r6, pc}
 80008d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d8:	4798      	blx	r3
 80008da:	3601      	adds	r6, #1
 80008dc:	e7ee      	b.n	80008bc <__libc_init_array+0xc>
 80008de:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e2:	4798      	blx	r3
 80008e4:	3601      	adds	r6, #1
 80008e6:	e7f2      	b.n	80008ce <__libc_init_array+0x1e>
 80008e8:	08000910 	.word	0x08000910
 80008ec:	08000910 	.word	0x08000910
 80008f0:	08000910 	.word	0x08000910
 80008f4:	08000914 	.word	0x08000914

080008f8 <_init>:
 80008f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fa:	bf00      	nop
 80008fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80008fe:	bc08      	pop	{r3}
 8000900:	469e      	mov	lr, r3
 8000902:	4770      	bx	lr

08000904 <_fini>:
 8000904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000906:	bf00      	nop
 8000908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090a:	bc08      	pop	{r3}
 800090c:	469e      	mov	lr, r3
 800090e:	4770      	bx	lr
