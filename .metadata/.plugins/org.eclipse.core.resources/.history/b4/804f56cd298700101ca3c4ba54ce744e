#include <stm32f4xx_cus_i2c.h>

void I2C_INIT(I2C_Handle_TypeDef *i2c_handle) {
	if (i2c_handle->I2Cx == I2C1) {
		I2C1_EN();
	} else if (i2c_handle->I2Cx == I2C2) {
		I2C2_EN();
	} else if (i2c_handle->I2Cx == I2C3) {
		I2C3_EN();
	}
	Get_APB1_Clock_Speed();

	// Master mode
	if (i2c_handle->MasterOrSlave == I2C_Master_Mode) {
		// Peripheral Clock Frequency (16Mhz)
		i2c_handle->I2Cx->CR2 &= ~(Five_BIT_1 << 0);
		i2c_handle->I2Cx->CR2 |= (Shift_16_pos << 0);

		// I2C Standard/Fast Mode
		i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_15_pos);
		i2c_handle->I2Cx->CCR |= (i2c_handle->mode << Shift_15_pos);

		// Tscl = Thigh + Tlow
		if (i2c_handle->mode == I2C_Standard_Mode) {
			i2c_handle->I2Cx->CCR |= ((Get_APB1_Clock_Speed()
					/ (2 * i2c_handle->scl_speed)) << 0);
			// Trise
			i2c_handle->I2Cx->TRISE |= ((Get_APB1_Clock_Speed() / 1000000)) + 1;
		} else if (i2c_handle->mode == I2C_Fast_Mode) {
			i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_14_pos);
			i2c_handle->I2Cx->CCR |= (i2c_handle->duty_cycle << Shift_14_pos);
			if (i2c_handle->duty_cycle == I2C_Duty_Cycle_2) {
				i2c_handle->I2Cx->CCR |= ((Get_APB1_Clock_Speed()
						/ (3 * i2c_handle->scl_speed)) << 0);
			} else if (i2c_handle->duty_cycle == I2C_Duty_Cycle_16_9) {
				i2c_handle->I2Cx->CCR |= ((Get_APB1_Clock_Speed()
						/ (25 * i2c_handle->scl_speed)) << 0);
			}
			// Trise
			i2c_handle->I2Cx->TRISE |= ((Get_APB1_Clock_Speed()
					* I2C_TRISE_MAX_FAST_MODE / 1000000000)) + 1;
		}

		// ACK bit En
		i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
		i2c_handle->I2Cx->CR1 |= (i2c_handle->ack_en << Shift_10_pos);

// Adress mode - 7 bit
		if (i2c_handle->address_select_bit == I2C_7_Bit_Adress) {
			i2c_handle->I2Cx->OAR1 |= (i2c_handle->address << HIGH);
		}
		i2c_handle->I2Cx->OAR1 |= (HIGH << Shift_14_pos);
	}
// Slave mode
}

void I2C_Write(I2C_Handle_TypeDef *i2c_handle, uint8_t *data, uint8_t size) {
	// Setting start_bit
}

void I2C_Read(I2C_Handle_TypeDef *i2c_handle, uint8_t *data, uint8_t size) {

}

