#include <stdint.h>
#include <main.h>

extern void initialise_monitor_handles();

#define SLAVE_ADDR 0x68
void I2C_USER_INIT(void);
void GPIO_USER_INIT(void);
I2C_Handle_TypeDef I2C_Handle;
GPIO_Handle_TypeDef GPIO_Handle;
uint8_t buffer[32] = { };
uint8_t commandCode;
uint8_t readInput;
uint8_t len;

int main(void) {
	GPIO_USER_INIT();
	IRQ_Config(I2C1_IRQ31_EV, ENABLE);
	IRQ_Config(I2C1_IRQ32_ER, ENABLE);
	I2C_USER_INIT();

	initialise_monitor_handles();

	printf("Application is running\n");
	while (1) {
		readInput = GPIO_INPUT(GPIOA, GPIO_PIN_0);
		if (readInput == HIGH) {
			// Existing I2C code here
			while (GPIO_INPUT(GPIOA, GPIO_PIN_0) == LOW)
				; // Wait for button release
			for (int i = 0; i < 100000; i++)
				; // Simple debounce delay

			commandCode = 0x51;
			while (I2C_Master_Write_IT(&I2C_Handle, SLAVE_ADDR, &commandCode, 1,
			I2C_SR_EN) != I2C_READY)
				;

			while (I2C_Master_Read_IT(&I2C_Handle, SLAVE_ADDR, &len, 1,
			I2C_SR_EN) != I2C_READY)
				;

			commandCode = 0x52;

			while (I2C_Master_Write_IT(&I2C_Handle, SLAVE_ADDR, &commandCode, 1,
			I2C_SR_EN) != I2C_READY)
				;

			while (I2C_Master_Read_IT(&I2C_Handle, SLAVE_ADDR, buffer, len,
			I2C_SR_DIS) != I2C_READY)
				;
			rx_complete = 0;
			while (rx_complete == 0)
				;
			buffer[len + 1] = '\0';   // null-terminate string properly

			printf("Data : %s", buffer);   // already ends with \n

			for (int i = 0; i < 100000; i++)
				;
		}
	}
}

void I2C_USER_INIT(void) {
	I2C_Handle.I2Cx = I2C1;
	I2C_Handle.MasterOrSlave = I2C_Master_Mode;
	I2C_Handle.ack_en = I2C_ACK_EN;
	I2C_Handle.address = 0x61;
	I2C_Handle.address_select_bit = I2C_7_Bit_Adress;
	I2C_Handle.mode = I2C_Standard_Mode;
	I2C_Handle.scl_speed = I2C_SCL_SPEED_100;
	I2C_INIT(&I2C_Handle);
}

void GPIO_USER_INIT(void) {

	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
	GPIO_Handle.mode = GPIO_MODE_INPUT;
	GPIO_Handle.pin_number = GPIO_PIN_0;
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
	GPIO_INIT(&GPIO_Handle);

	// PB6 - I2C1_SCL
	GPIO_Handle.GPIOX = GPIOB;
	GPIO_Handle.mode = GPIO_MODE_AF;
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_OD;
	GPIO_Handle.pin_number = GPIO_PIN_6;
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
	GPIO_Handle.alternate_function_select = GPIO_AF4;
	GPIO_INIT(&GPIO_Handle);

	// PB9 - I2C1_SDA
	GPIO_Handle.pin_number = GPIO_PIN_9;
	GPIO_INIT(&GPIO_Handle);
}

void I2C1_EV_IRQHandler() {
	I2C_EV_IRQ_Handling(&I2C_Handle);
}

void I2C1_ER_IRQHandler() {

}
