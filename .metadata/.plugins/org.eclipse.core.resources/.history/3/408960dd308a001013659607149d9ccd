#include <stdint.h>
#include <main.h>

extern void initialise_monitor_handles();

#define SLAVE_ADDR 0x68
void I2C_USER_INIT(void);
void GPIO_USER_INIT(void);
I2C_Handle_TypeDef I2C_Handle;
GPIO_Handle_TypeDef GPIO_Handle;
uint8_t buffer[32] = { };
uint8_t commandCode;
uint8_t readInput;
uint8_t len;
uint8_t Tx_buf[32] = "STM32 Slave mode testing..";

int main(void) {
	GPIO_USER_INIT();
	IRQ_Config(I2C1_IRQ31_EV, ENABLE);
	IRQ_Config(I2C1_IRQ32_ER, ENABLE);
	I2C_USER_INIT();

	initialise_monitor_handles();

	printf("Application is running\n");
	while (1) {

	}
}

void I2C_USER_INIT(void) {
	I2C_Handle.I2Cx = I2C1;
	I2C_Handle.MasterOrSlave = I2C_Master_Mode;
	I2C_Handle.ack_en = I2C_ACK_EN;
	I2C_Handle.address = 0x69;
	I2C_Handle.address_select_bit = I2C_7_Bit_Adress;
	I2C_Handle.mode = I2C_Standard_Mode;
	I2C_Handle.scl_speed = I2C_SCL_SPEED_100;
	I2C_INIT(&I2C_Handle);
}

void GPIO_USER_INIT(void) {

	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
	GPIO_Handle.mode = GPIO_MODE_INPUT;
	GPIO_Handle.pin_number = GPIO_PIN_0;
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
	GPIO_INIT(&GPIO_Handle);

	// PB6 - I2C1_SCL
	GPIO_Handle.GPIOX = GPIOB;
	GPIO_Handle.mode = GPIO_MODE_AF;
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_OD;
	GPIO_Handle.pin_number = GPIO_PIN_6;
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
	GPIO_Handle.alternate_function_select = GPIO_AF4;
	GPIO_INIT(&GPIO_Handle);

	// PB9 - I2C1_SDA
	GPIO_Handle.pin_number = GPIO_PIN_9;
	GPIO_INIT(&GPIO_Handle);
}

void I2C1_EV_IRQHandler() {
	I2C_EV_IRQ_Handling(&I2C_Handle);
}

void I2C1_ER_IRQHandler() {
	// Existing code
	while (1)
		;
}

void I2C_OnEvent(I2C_Handle_TypeDef *i2c_handle, uint8_t on_event) {
	static uint8_t commandCode = 0;
	static uint8_t Cnt = 0;
	if (on_event == I2C_Slave_Ev_Transmit) {
		//Master wants some data. slave has to send it
		if (commandCode == 0x51) {
			//send the length information to the master
			I2C_Slave_Write(i2c_handle->I2Cx, strlen((char*) Tx_buf));
		} else if (commandCode == 0x52) {
			//Send the contents of Tx_buf
			I2C_Slave_Write(i2c_handle->I2Cx, Tx_buf[Cnt++]);

		}
	} else if (on_event == I2C_Slave_Ev_Receive) {
		//Data is waiting for the slave to read . slave has to read it
		I2C_Slave_Read(i2c_handle->I2Cx, &commandCode);

	} else if (on_event == I2C_Slave_AF) {
		//This happens only during slave txing .
		//Master has sent the NACK. so slave should understand that master doesnt need
		//more data.
		commandCode = 0xff;
		Cnt = 0;
	} else if (on_event == I2C_Slave_STOPF) {
		//This happens only during slave reception .
		//Master has ended the I2C communication with the slave.
	}
}
