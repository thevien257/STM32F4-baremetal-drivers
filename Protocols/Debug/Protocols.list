
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ba0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000d28  08000d28  00001d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d58  08000d58  00002400  2**0
                  CONTENTS
  4 .ARM          00000008  08000d58  08000d58  00001d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d60  08000d60  00002400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d60  08000d60  00001d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d64  08000d64  00001d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000400  20000000  08000d68  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002400  2**0
                  CONTENTS
 10 .bss          00000044  20000400  20000400  00002400  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000444  20000444  00002400  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000141c  00000000  00000000  00002430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004a9  00000000  00000000  0000384c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000108  00000000  00000000  00003cf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b2  00000000  00000000  00003e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b47  00000000  00000000  00003eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002106  00000000  00000000  000069f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a20d  00000000  00000000  00008aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012d0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002c8  00000000  00000000  00012d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00013018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000400 	.word	0x20000400
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d10 	.word	0x08000d10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000404 	.word	0x20000404
 80001c4:	08000d10 	.word	0x08000d10

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 80001d8:	b4b0      	push	{r4, r5, r7}
 80001da:	b08f      	sub	sp, #60	@ 0x3c
 80001dc:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 80001de:	4b2c      	ldr	r3, [pc, #176]	@ (8000290 <Get_APB1_Clock_Speed+0xb8>)
 80001e0:	f107 0410 	add.w	r4, r7, #16
 80001e4:	461d      	mov	r5, r3
 80001e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 80001f2:	4b28      	ldr	r3, [pc, #160]	@ (8000294 <Get_APB1_Clock_Speed+0xbc>)
 80001f4:	463c      	mov	r4, r7
 80001f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 80001fc:	4b26      	ldr	r3, [pc, #152]	@ (8000298 <Get_APB1_Clock_Speed+0xc0>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	089b      	lsrs	r3, r3, #2
 8000202:	b2db      	uxtb	r3, r3
 8000204:	f003 0303 	and.w	r3, r3, #3
 8000208:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 800020c:	4b22      	ldr	r3, [pc, #136]	@ (8000298 <Get_APB1_Clock_Speed+0xc0>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	091b      	lsrs	r3, r3, #4
 8000212:	b2db      	uxtb	r3, r3
 8000214:	f003 030f 	and.w	r3, r3, #15
 8000218:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 800021c:	4b1e      	ldr	r3, [pc, #120]	@ (8000298 <Get_APB1_Clock_Speed+0xc0>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	0a9b      	lsrs	r3, r3, #10
 8000222:	b2db      	uxtb	r3, r3
 8000224:	f003 0307 	and.w	r3, r3, #7
 8000228:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 800022c:	2301      	movs	r3, #1
 800022e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 8000230:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000234:	2b07      	cmp	r3, #7
 8000236:	d908      	bls.n	800024a <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 8000238:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800023c:	3b08      	subs	r3, #8
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	3338      	adds	r3, #56	@ 0x38
 8000242:	443b      	add	r3, r7
 8000244:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000248:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 800024e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000252:	2b03      	cmp	r3, #3
 8000254:	d908      	bls.n	8000268 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 8000256:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800025a:	3b04      	subs	r3, #4
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	3338      	adds	r3, #56	@ 0x38
 8000260:	443b      	add	r3, r7
 8000262:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000266:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000268:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800026c:	2b00      	cmp	r3, #0
 800026e:	d109      	bne.n	8000284 <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000270:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <Get_APB1_Clock_Speed+0xc4>)
 8000274:	fb92 f2f3 	sdiv	r2, r2, r3
 8000278:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800027a:	fb92 f3f3 	sdiv	r3, r2, r3
 800027e:	461a      	mov	r2, r3
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <Get_APB1_Clock_Speed+0xc8>)
 8000282:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 8000284:	bf00      	nop
 8000286:	373c      	adds	r7, #60	@ 0x3c
 8000288:	46bd      	mov	sp, r7
 800028a:	bcb0      	pop	{r4, r5, r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	08000d28 	.word	0x08000d28
 8000294:	08000d48 	.word	0x08000d48
 8000298:	40023800 	.word	0x40023800
 800029c:	00f42400 	.word	0x00f42400
 80002a0:	2000041c 	.word	0x2000041c

080002a4 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a90      	ldr	r2, [pc, #576]	@ (80004f4 <GPIO_INIT+0x250>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d106      	bne.n	80002c4 <GPIO_INIT+0x20>
		GPIOA_EN();
 80002b6:	4b90      	ldr	r3, [pc, #576]	@ (80004f8 <GPIO_INIT+0x254>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ba:	4a8f      	ldr	r2, [pc, #572]	@ (80004f8 <GPIO_INIT+0x254>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002c2:	e05e      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a8c      	ldr	r2, [pc, #560]	@ (80004fc <GPIO_INIT+0x258>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_INIT+0x38>
		GPIOB_EN();
 80002ce:	4b8a      	ldr	r3, [pc, #552]	@ (80004f8 <GPIO_INIT+0x254>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d2:	4a89      	ldr	r2, [pc, #548]	@ (80004f8 <GPIO_INIT+0x254>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002da:	e052      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a87      	ldr	r2, [pc, #540]	@ (8000500 <GPIO_INIT+0x25c>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_INIT+0x50>
		GPIOC_EN();
 80002e6:	4b84      	ldr	r3, [pc, #528]	@ (80004f8 <GPIO_INIT+0x254>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ea:	4a83      	ldr	r2, [pc, #524]	@ (80004f8 <GPIO_INIT+0x254>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002f2:	e046      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a82      	ldr	r2, [pc, #520]	@ (8000504 <GPIO_INIT+0x260>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_INIT+0x68>
		GPIOD_EN();
 80002fe:	4b7e      	ldr	r3, [pc, #504]	@ (80004f8 <GPIO_INIT+0x254>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000302:	4a7d      	ldr	r2, [pc, #500]	@ (80004f8 <GPIO_INIT+0x254>)
 8000304:	f043 0308 	orr.w	r3, r3, #8
 8000308:	6313      	str	r3, [r2, #48]	@ 0x30
 800030a:	e03a      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a7d      	ldr	r2, [pc, #500]	@ (8000508 <GPIO_INIT+0x264>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_INIT+0x80>
		GPIOE_EN();
 8000316:	4b78      	ldr	r3, [pc, #480]	@ (80004f8 <GPIO_INIT+0x254>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	4a77      	ldr	r2, [pc, #476]	@ (80004f8 <GPIO_INIT+0x254>)
 800031c:	f043 0310 	orr.w	r3, r3, #16
 8000320:	6313      	str	r3, [r2, #48]	@ 0x30
 8000322:	e02e      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a78      	ldr	r2, [pc, #480]	@ (800050c <GPIO_INIT+0x268>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_INIT+0x98>
		GPIOF_EN();
 800032e:	4b72      	ldr	r3, [pc, #456]	@ (80004f8 <GPIO_INIT+0x254>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000332:	4a71      	ldr	r2, [pc, #452]	@ (80004f8 <GPIO_INIT+0x254>)
 8000334:	f043 0320 	orr.w	r3, r3, #32
 8000338:	6313      	str	r3, [r2, #48]	@ 0x30
 800033a:	e022      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a73      	ldr	r2, [pc, #460]	@ (8000510 <GPIO_INIT+0x26c>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000346:	4b6c      	ldr	r3, [pc, #432]	@ (80004f8 <GPIO_INIT+0x254>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034a:	4a6b      	ldr	r2, [pc, #428]	@ (80004f8 <GPIO_INIT+0x254>)
 800034c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000350:	6313      	str	r3, [r2, #48]	@ 0x30
 8000352:	e016      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a6e      	ldr	r2, [pc, #440]	@ (8000514 <GPIO_INIT+0x270>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_INIT+0xc8>
		GPIOH_EN();
 800035e:	4b66      	ldr	r3, [pc, #408]	@ (80004f8 <GPIO_INIT+0x254>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a65      	ldr	r2, [pc, #404]	@ (80004f8 <GPIO_INIT+0x254>)
 8000364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
 800036a:	e00a      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a69      	ldr	r2, [pc, #420]	@ (8000518 <GPIO_INIT+0x274>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d105      	bne.n	8000382 <GPIO_INIT+0xde>
		GPIOI_EN();
 8000376:	4b60      	ldr	r3, [pc, #384]	@ (80004f8 <GPIO_INIT+0x254>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a5f      	ldr	r2, [pc, #380]	@ (80004f8 <GPIO_INIT+0x254>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	791b      	ldrb	r3, [r3, #4]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000394:	43db      	mvns	r3, r3
 8000396:	4619      	mov	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	400a      	ands	r2, r1
 800039e:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	791b      	ldrb	r3, [r3, #4]
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	2103      	movs	r1, #3
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80003b2:	43db      	mvns	r3, r3
 80003b4:	4619      	mov	r1, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	400a      	ands	r2, r1
 80003bc:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	799b      	ldrb	r3, [r3, #6]
 80003c8:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	791b      	ldrb	r3, [r3, #4]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	430a      	orrs	r2, r1
 80003dc:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	795b      	ldrb	r3, [r3, #5]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	f200 809a 	bhi.w	800051c <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	795b      	ldrb	r3, [r3, #5]
 80003f2:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	fa01 f303 	lsl.w	r3, r1, r3
 80003fe:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	430a      	orrs	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	791b      	ldrb	r3, [r3, #4]
 8000412:	4619      	mov	r1, r3
 8000414:	2303      	movs	r3, #3
 8000416:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000418:	43db      	mvns	r3, r3
 800041a:	4619      	mov	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	400a      	ands	r2, r1
 8000422:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7a1b      	ldrb	r3, [r3, #8]
 800042e:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	430a      	orrs	r2, r1
 8000440:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000454:	43db      	mvns	r3, r3
 8000456:	4619      	mov	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	400a      	ands	r2, r1
 800045e:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	79db      	ldrb	r3, [r3, #7]
 800046a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	430a      	orrs	r2, r1
 800047e:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	2b02      	cmp	r3, #2
 8000486:	f040 80ec 	bne.w	8000662 <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 800048e:	08db      	lsrs	r3, r3, #3
 8000490:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	f003 0307 	and.w	r3, r3, #7
 800049a:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	7b7a      	ldrb	r2, [r7, #13]
 80004a2:	3208      	adds	r2, #8
 80004a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	009b      	lsls	r3, r3, #2
 80004ae:	2203      	movs	r2, #3
 80004b0:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 80004b4:	43db      	mvns	r3, r3
 80004b6:	4618      	mov	r0, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	7b7a      	ldrb	r2, [r7, #13]
 80004be:	4001      	ands	r1, r0
 80004c0:	3208      	adds	r2, #8
 80004c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	7b7a      	ldrb	r2, [r7, #13]
 80004cc:	3208      	adds	r2, #8
 80004ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	7a5b      	ldrb	r3, [r3, #9]
 80004d6:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 80004d8:	7b3b      	ldrb	r3, [r7, #12]
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	fa02 f303 	lsl.w	r3, r2, r3
 80004e0:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	7b7a      	ldrb	r2, [r7, #13]
 80004e8:	4301      	orrs	r1, r0
 80004ea:	3208      	adds	r2, #8
 80004ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 80004f0:	e0b7      	b.n	8000662 <GPIO_INIT+0x3be>
 80004f2:	bf00      	nop
 80004f4:	40020000 	.word	0x40020000
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40020400 	.word	0x40020400
 8000500:	40020800 	.word	0x40020800
 8000504:	40020c00 	.word	0x40020c00
 8000508:	40021000 	.word	0x40021000
 800050c:	40021400 	.word	0x40021400
 8000510:	40021800 	.word	0x40021800
 8000514:	40021c00 	.word	0x40021c00
 8000518:	40022000 	.word	0x40022000
		SYSCFG_EN();
 800051c:	4b54      	ldr	r3, [pc, #336]	@ (8000670 <GPIO_INIT+0x3cc>)
 800051e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000520:	4a53      	ldr	r2, [pc, #332]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000522:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000526:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	2b06      	cmp	r3, #6
 800052e:	d12e      	bne.n	800058e <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000530:	4b50      	ldr	r3, [pc, #320]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000532:	689b      	ldr	r3, [r3, #8]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	7912      	ldrb	r2, [r2, #4]
 8000538:	4611      	mov	r1, r2
 800053a:	2201      	movs	r2, #1
 800053c:	408a      	lsls	r2, r1
 800053e:	43d2      	mvns	r2, r2
 8000540:	4611      	mov	r1, r2
 8000542:	4a4c      	ldr	r2, [pc, #304]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000544:	400b      	ands	r3, r1
 8000546:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000548:	4b4a      	ldr	r3, [pc, #296]	@ (8000674 <GPIO_INIT+0x3d0>)
 800054a:	68db      	ldr	r3, [r3, #12]
 800054c:	687a      	ldr	r2, [r7, #4]
 800054e:	7912      	ldrb	r2, [r2, #4]
 8000550:	4611      	mov	r1, r2
 8000552:	2201      	movs	r2, #1
 8000554:	408a      	lsls	r2, r1
 8000556:	43d2      	mvns	r2, r2
 8000558:	4611      	mov	r1, r2
 800055a:	4a46      	ldr	r2, [pc, #280]	@ (8000674 <GPIO_INIT+0x3d0>)
 800055c:	400b      	ands	r3, r1
 800055e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000560:	4b44      	ldr	r3, [pc, #272]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	687a      	ldr	r2, [r7, #4]
 8000566:	7912      	ldrb	r2, [r2, #4]
 8000568:	4611      	mov	r1, r2
 800056a:	2201      	movs	r2, #1
 800056c:	408a      	lsls	r2, r1
 800056e:	4611      	mov	r1, r2
 8000570:	4a40      	ldr	r2, [pc, #256]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000572:	430b      	orrs	r3, r1
 8000574:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000576:	4b3f      	ldr	r3, [pc, #252]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000578:	68db      	ldr	r3, [r3, #12]
 800057a:	687a      	ldr	r2, [r7, #4]
 800057c:	7912      	ldrb	r2, [r2, #4]
 800057e:	4611      	mov	r1, r2
 8000580:	2201      	movs	r2, #1
 8000582:	408a      	lsls	r2, r1
 8000584:	4611      	mov	r1, r2
 8000586:	4a3b      	ldr	r2, [pc, #236]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000588:	430b      	orrs	r3, r1
 800058a:	60d3      	str	r3, [r2, #12]
 800058c:	e036      	b.n	80005fc <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	795b      	ldrb	r3, [r3, #5]
 8000592:	2b05      	cmp	r3, #5
 8000594:	d117      	bne.n	80005c6 <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000596:	4b37      	ldr	r3, [pc, #220]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000598:	68db      	ldr	r3, [r3, #12]
 800059a:	687a      	ldr	r2, [r7, #4]
 800059c:	7912      	ldrb	r2, [r2, #4]
 800059e:	4611      	mov	r1, r2
 80005a0:	2201      	movs	r2, #1
 80005a2:	408a      	lsls	r2, r1
 80005a4:	43d2      	mvns	r2, r2
 80005a6:	4611      	mov	r1, r2
 80005a8:	4a32      	ldr	r2, [pc, #200]	@ (8000674 <GPIO_INIT+0x3d0>)
 80005aa:	400b      	ands	r3, r1
 80005ac:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 80005ae:	4b31      	ldr	r3, [pc, #196]	@ (8000674 <GPIO_INIT+0x3d0>)
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	7912      	ldrb	r2, [r2, #4]
 80005b6:	4611      	mov	r1, r2
 80005b8:	2201      	movs	r2, #1
 80005ba:	408a      	lsls	r2, r1
 80005bc:	4611      	mov	r1, r2
 80005be:	4a2d      	ldr	r2, [pc, #180]	@ (8000674 <GPIO_INIT+0x3d0>)
 80005c0:	430b      	orrs	r3, r1
 80005c2:	60d3      	str	r3, [r2, #12]
 80005c4:	e01a      	b.n	80005fc <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	2b04      	cmp	r3, #4
 80005cc:	d116      	bne.n	80005fc <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80005ce:	4b29      	ldr	r3, [pc, #164]	@ (8000674 <GPIO_INIT+0x3d0>)
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	687a      	ldr	r2, [r7, #4]
 80005d4:	7912      	ldrb	r2, [r2, #4]
 80005d6:	4611      	mov	r1, r2
 80005d8:	2201      	movs	r2, #1
 80005da:	408a      	lsls	r2, r1
 80005dc:	43d2      	mvns	r2, r2
 80005de:	4611      	mov	r1, r2
 80005e0:	4a24      	ldr	r2, [pc, #144]	@ (8000674 <GPIO_INIT+0x3d0>)
 80005e2:	400b      	ands	r3, r1
 80005e4:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 80005e6:	4b23      	ldr	r3, [pc, #140]	@ (8000674 <GPIO_INIT+0x3d0>)
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	687a      	ldr	r2, [r7, #4]
 80005ec:	7912      	ldrb	r2, [r2, #4]
 80005ee:	4611      	mov	r1, r2
 80005f0:	2201      	movs	r2, #1
 80005f2:	408a      	lsls	r2, r1
 80005f4:	4611      	mov	r1, r2
 80005f6:	4a1f      	ldr	r2, [pc, #124]	@ (8000674 <GPIO_INIT+0x3d0>)
 80005f8:	430b      	orrs	r3, r1
 80005fa:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	089b      	lsrs	r3, r3, #2
 8000602:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	f003 0303 	and.w	r3, r3, #3
 800060c:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 800060e:	4a1a      	ldr	r2, [pc, #104]	@ (8000678 <GPIO_INIT+0x3d4>)
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	3302      	adds	r3, #2
 8000614:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	7a9b      	ldrb	r3, [r3, #10]
 800061c:	4619      	mov	r1, r3
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	fa01 f303 	lsl.w	r3, r1, r3
 8000626:	4618      	mov	r0, r3
 8000628:	4913      	ldr	r1, [pc, #76]	@ (8000678 <GPIO_INIT+0x3d4>)
 800062a:	7bfb      	ldrb	r3, [r7, #15]
 800062c:	4302      	orrs	r2, r0
 800062e:	3302      	adds	r3, #2
 8000630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	43d2      	mvns	r2, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a0b      	ldr	r2, [pc, #44]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000648:	400b      	ands	r3, r1
 800064a:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <GPIO_INIT+0x3d0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	7912      	ldrb	r2, [r2, #4]
 8000654:	4611      	mov	r1, r2
 8000656:	2201      	movs	r2, #1
 8000658:	408a      	lsls	r2, r1
 800065a:	4611      	mov	r1, r2
 800065c:	4a05      	ldr	r2, [pc, #20]	@ (8000674 <GPIO_INIT+0x3d0>)
 800065e:	430b      	orrs	r3, r1
 8000660:	6013      	str	r3, [r2, #0]
}
 8000662:	bf00      	nop
 8000664:	3714      	adds	r7, #20
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40013c00 	.word	0x40013c00
 8000678:	40013800 	.word	0x40013800

0800067c <GPIO_INPUT>:

uint8_t GPIO_INPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	460b      	mov	r3, r1
 8000686:	70fb      	strb	r3, [r7, #3]
	uint8_t val = ((gpiox->IDR >> gpio_pins) & GPIO_BIT_1_Mask);
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	691a      	ldr	r2, [r3, #16]
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	fa22 f303 	lsr.w	r3, r2, r3
 8000692:	b2db      	uxtb	r3, r3
 8000694:	f003 0301 	and.w	r3, r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
	return val;
 800069a:	7bfb      	ldrb	r3, [r7, #15]
}
 800069c:	4618      	mov	r0, r3
 800069e:	3714      	adds	r7, #20
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <USART_INIT>:
#include <stm32f4xx_cus_uart.h>

void USART_INIT(USART_HandleTypedef *usart_handle) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	if (usart_handle->USARTx == USART1) {
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a5b      	ldr	r2, [pc, #364]	@ (8000824 <USART_INIT+0x17c>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <USART_INIT+0x20>
		USART1_EN();
 80006ba:	4b5b      	ldr	r3, [pc, #364]	@ (8000828 <USART_INIT+0x180>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006be:	4a5a      	ldr	r2, [pc, #360]	@ (8000828 <USART_INIT+0x180>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80006c6:	e052      	b.n	800076e <USART_INIT+0xc6>
	} else if (usart_handle->USARTx == USART2) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a57      	ldr	r2, [pc, #348]	@ (800082c <USART_INIT+0x184>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d106      	bne.n	80006e0 <USART_INIT+0x38>
		USART2_EN();
 80006d2:	4b55      	ldr	r3, [pc, #340]	@ (8000828 <USART_INIT+0x180>)
 80006d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d6:	4a54      	ldr	r2, [pc, #336]	@ (8000828 <USART_INIT+0x180>)
 80006d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80006de:	e046      	b.n	800076e <USART_INIT+0xc6>
	} else if (usart_handle->USARTx == USART3) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a52      	ldr	r2, [pc, #328]	@ (8000830 <USART_INIT+0x188>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d106      	bne.n	80006f8 <USART_INIT+0x50>
		USART3_EN();
 80006ea:	4b4f      	ldr	r3, [pc, #316]	@ (8000828 <USART_INIT+0x180>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ee:	4a4e      	ldr	r2, [pc, #312]	@ (8000828 <USART_INIT+0x180>)
 80006f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f6:	e03a      	b.n	800076e <USART_INIT+0xc6>
	} else if (usart_handle->USARTx == UART4) {
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a4d      	ldr	r2, [pc, #308]	@ (8000834 <USART_INIT+0x18c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d106      	bne.n	8000710 <USART_INIT+0x68>
		UART4_EN();
 8000702:	4b49      	ldr	r3, [pc, #292]	@ (8000828 <USART_INIT+0x180>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000706:	4a48      	ldr	r2, [pc, #288]	@ (8000828 <USART_INIT+0x180>)
 8000708:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800070c:	6413      	str	r3, [r2, #64]	@ 0x40
 800070e:	e02e      	b.n	800076e <USART_INIT+0xc6>
	} else if (usart_handle->USARTx == UART5) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a48      	ldr	r2, [pc, #288]	@ (8000838 <USART_INIT+0x190>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d106      	bne.n	8000728 <USART_INIT+0x80>
		UART5_EN();
 800071a:	4b43      	ldr	r3, [pc, #268]	@ (8000828 <USART_INIT+0x180>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071e:	4a42      	ldr	r2, [pc, #264]	@ (8000828 <USART_INIT+0x180>)
 8000720:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000724:	6413      	str	r3, [r2, #64]	@ 0x40
 8000726:	e022      	b.n	800076e <USART_INIT+0xc6>
	} else if (usart_handle->USARTx == USART6) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a43      	ldr	r2, [pc, #268]	@ (800083c <USART_INIT+0x194>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <USART_INIT+0x98>
		USART6_EN();
 8000732:	4b3d      	ldr	r3, [pc, #244]	@ (8000828 <USART_INIT+0x180>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000736:	4a3c      	ldr	r2, [pc, #240]	@ (8000828 <USART_INIT+0x180>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	6453      	str	r3, [r2, #68]	@ 0x44
 800073e:	e016      	b.n	800076e <USART_INIT+0xc6>
	} else if (usart_handle->USARTx == UART7) {
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a3e      	ldr	r2, [pc, #248]	@ (8000840 <USART_INIT+0x198>)
 8000746:	4293      	cmp	r3, r2
 8000748:	d106      	bne.n	8000758 <USART_INIT+0xb0>
		UART7_EN();
 800074a:	4b37      	ldr	r3, [pc, #220]	@ (8000828 <USART_INIT+0x180>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074e:	4a36      	ldr	r2, [pc, #216]	@ (8000828 <USART_INIT+0x180>)
 8000750:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000754:	6413      	str	r3, [r2, #64]	@ 0x40
 8000756:	e00a      	b.n	800076e <USART_INIT+0xc6>
	} else if (usart_handle->USARTx == UART8) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a39      	ldr	r2, [pc, #228]	@ (8000844 <USART_INIT+0x19c>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d105      	bne.n	800076e <USART_INIT+0xc6>
		UART8_EN();
 8000762:	4b31      	ldr	r3, [pc, #196]	@ (8000828 <USART_INIT+0x180>)
 8000764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000766:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <USART_INIT+0x180>)
 8000768:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800076c:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	// Enable FPU - CRITICAL for floating point operations
	SCB->CPACR |= ((3UL << 20) | (3UL << 22)); // Set CP10 and CP11 to Full Access
 800076e:	4b36      	ldr	r3, [pc, #216]	@ (8000848 <USART_INIT+0x1a0>)
 8000770:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000774:	4a34      	ldr	r2, [pc, #208]	@ (8000848 <USART_INIT+0x1a0>)
 8000776:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800077a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	__asm volatile ("DSB");
 800077e:	f3bf 8f4f 	dsb	sy
	// Data Synchronization Barrier
	__asm volatile ("ISB");
 8000782:	f3bf 8f6f 	isb	sy
	// Instruction Synchronization Barrier

	float USARTDIV = (float) 16000000.0f
			/ (8.0f * (2 - usart_handle->oversampling_mode)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	791b      	ldrb	r3, [r3, #4]
 800078a:	f1c3 0302 	rsb	r3, r3, #2
 800078e:	ee07 3a90 	vmov	s15, r3
 8000792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000796:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800079a:	ee27 7a87 	vmul.f32	s14, s15, s14
					* usart_handle->baud_rate);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	ee07 3a90 	vmov	s15, r3
 80007a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007aa:	ee27 7a27 	vmul.f32	s14, s14, s15
	float USARTDIV = (float) 16000000.0f
 80007ae:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800084c <USART_INIT+0x1a4>
 80007b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80007b6:	edc7 7a02 	vstr	s15, [r7, #8]

	// Extract mantissa (integer part)
	uint16_t DIV_Mantissa = (uint16_t) USARTDIV;
 80007ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80007be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c2:	ee17 3a90 	vmov	r3, s15
 80007c6:	81fb      	strh	r3, [r7, #14]

	// Extract fraction and Round it to the nearest value
	// For example: 9.92 + 0.5 = 10.42 --> Round to 10;
	uint16_t DIV_Fraction = (uint16_t) ((USARTDIV - DIV_Mantissa) * 8
 80007c8:	89fb      	ldrh	r3, [r7, #14]
 80007ca:	ee07 3a90 	vmov	s15, r3
 80007ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80007d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80007da:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80007de:	ee27 7a87 	vmul.f32	s14, s15, s14
			* (2 - usart_handle->oversampling_mode) + 0.5f);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	791b      	ldrb	r3, [r3, #4]
 80007e6:	f1c3 0302 	rsb	r3, r3, #2
 80007ea:	ee07 3a90 	vmov	s15, r3
 80007ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80007f6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80007fa:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t DIV_Fraction = (uint16_t) ((USARTDIV - DIV_Mantissa) * 8
 80007fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000802:	ee17 3a90 	vmov	r3, s15
 8000806:	81bb      	strh	r3, [r7, #12]

	// // Handle fraction overflow
	if (usart_handle->oversampling_mode == USART_OVERSAMPLING_16) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	791b      	ldrb	r3, [r3, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d11f      	bne.n	8000850 <USART_INIT+0x1a8>
		if (DIV_Fraction > 15) {
 8000810:	89bb      	ldrh	r3, [r7, #12]
 8000812:	2b0f      	cmp	r3, #15
 8000814:	d924      	bls.n	8000860 <USART_INIT+0x1b8>
			DIV_Mantissa++;
 8000816:	89fb      	ldrh	r3, [r7, #14]
 8000818:	3301      	adds	r3, #1
 800081a:	81fb      	strh	r3, [r7, #14]
			DIV_Fraction = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	81bb      	strh	r3, [r7, #12]
 8000820:	e01e      	b.n	8000860 <USART_INIT+0x1b8>
 8000822:	bf00      	nop
 8000824:	40011000 	.word	0x40011000
 8000828:	40023800 	.word	0x40023800
 800082c:	40004400 	.word	0x40004400
 8000830:	40004800 	.word	0x40004800
 8000834:	40004c00 	.word	0x40004c00
 8000838:	40005000 	.word	0x40005000
 800083c:	40011400 	.word	0x40011400
 8000840:	40007800 	.word	0x40007800
 8000844:	40007c00 	.word	0x40007c00
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	4b742400 	.word	0x4b742400
		}
	} else {
		if (DIV_Fraction > 7) {
 8000850:	89bb      	ldrh	r3, [r7, #12]
 8000852:	2b07      	cmp	r3, #7
 8000854:	d904      	bls.n	8000860 <USART_INIT+0x1b8>
			DIV_Mantissa++;
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	3301      	adds	r3, #1
 800085a:	81fb      	strh	r3, [r7, #14]
			DIV_Fraction = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	81bb      	strh	r3, [r7, #12]
		}
	}

	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_15_pos);
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	68da      	ldr	r2, [r3, #12]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800086e:	60da      	str	r2, [r3, #12]
	usart_handle->USARTx->CR1 |= (usart_handle->oversampling_mode
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	68d9      	ldr	r1, [r3, #12]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	791b      	ldrb	r3, [r3, #4]
			<< Shift_15_pos);
 800087a:	03da      	lsls	r2, r3, #15
	usart_handle->USARTx->CR1 |= (usart_handle->oversampling_mode
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	430a      	orrs	r2, r1
 8000882:	60da      	str	r2, [r3, #12]

	usart_handle->USARTx->BRR = 0;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2200      	movs	r2, #0
 800088a:	609a      	str	r2, [r3, #8]
	usart_handle->USARTx->BRR |= (DIV_Fraction << Shift_0_pos);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	6899      	ldr	r1, [r3, #8]
 8000892:	89ba      	ldrh	r2, [r7, #12]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	430a      	orrs	r2, r1
 800089a:	609a      	str	r2, [r3, #8]
	usart_handle->USARTx->BRR |= (DIV_Mantissa << Shift_4_pos);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	6899      	ldr	r1, [r3, #8]
 80008a2:	89fb      	ldrh	r3, [r7, #14]
 80008a4:	011a      	lsls	r2, r3, #4
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	430a      	orrs	r2, r1
 80008ac:	609a      	str	r2, [r3, #8]

	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_12_pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	68da      	ldr	r2, [r3, #12]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80008bc:	60da      	str	r2, [r3, #12]
	usart_handle->USARTx->CR1 |= (usart_handle->data_bits << Shift_12_pos);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	68d9      	ldr	r1, [r3, #12]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	795b      	ldrb	r3, [r3, #5]
 80008c8:	031a      	lsls	r2, r3, #12
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	60da      	str	r2, [r3, #12]

	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_10_pos);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	68da      	ldr	r2, [r3, #12]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80008e0:	60da      	str	r2, [r3, #12]
	usart_handle->USARTx->CR1 |= (usart_handle->parity_control << Shift_10_pos);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	68d9      	ldr	r1, [r3, #12]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	799b      	ldrb	r3, [r3, #6]
 80008ec:	029a      	lsls	r2, r3, #10
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	60da      	str	r2, [r3, #12]

	if (usart_handle->parity_control == USART_PARITY_ENABLE) {
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	799b      	ldrb	r3, [r3, #6]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d111      	bne.n	8000922 <USART_INIT+0x27a>
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_9_pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800090c:	60da      	str	r2, [r3, #12]
		usart_handle->USARTx->CR1 |= (usart_handle->parity_selection
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	68d9      	ldr	r1, [r3, #12]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	79db      	ldrb	r3, [r3, #7]
				<< Shift_9_pos);
 8000918:	025a      	lsls	r2, r3, #9
		usart_handle->USARTx->CR1 |= (usart_handle->parity_selection
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	430a      	orrs	r2, r1
 8000920:	60da      	str	r2, [r3, #12]
	}

	usart_handle->USARTx->CR2 &= ~(GPIO_BIT_11_Mask << Shift_12_pos);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	691a      	ldr	r2, [r3, #16]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000930:	611a      	str	r2, [r3, #16]
	usart_handle->USARTx->CR2 |= (usart_handle->stop_bits << Shift_12_pos);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6919      	ldr	r1, [r3, #16]
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	7a1b      	ldrb	r3, [r3, #8]
 800093c:	031a      	lsls	r2, r3, #12
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	430a      	orrs	r2, r1
 8000944:	611a      	str	r2, [r3, #16]

	// Clock Synchronous Enable or Not
	usart_handle->USARTx->CR2 &= ~(HIGH << Shift_11_pos);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	691a      	ldr	r2, [r3, #16]
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000954:	611a      	str	r2, [r3, #16]
	usart_handle->USARTx->CR2 |= (usart_handle->usart_mode << Shift_11_pos);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	6919      	ldr	r1, [r3, #16]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	7c1b      	ldrb	r3, [r3, #16]
 8000960:	02da      	lsls	r2, r3, #11
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	430a      	orrs	r2, r1
 8000968:	611a      	str	r2, [r3, #16]

	if (usart_handle->usart_mode == USART_MODE_SYNC) {
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	7c1b      	ldrb	r3, [r3, #16]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d125      	bne.n	80009be <USART_INIT+0x316>
		usart_handle->USARTx->CR2 &= ~(BIT_111_MASK << Shift_8_pos);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	691a      	ldr	r2, [r3, #16]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000980:	611a      	str	r2, [r3, #16]
		usart_handle->USARTx->CR2 |= (usart_handle->last_bit_clock_pulse
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	6919      	ldr	r1, [r3, #16]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7cdb      	ldrb	r3, [r3, #19]
				<< Shift_8_pos);
 800098c:	021a      	lsls	r2, r3, #8
		usart_handle->USARTx->CR2 |= (usart_handle->last_bit_clock_pulse
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	430a      	orrs	r2, r1
 8000994:	611a      	str	r2, [r3, #16]
		usart_handle->USARTx->CR2 |= (usart_handle->usart_cpha << Shift_9_pos);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6919      	ldr	r1, [r3, #16]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7c9b      	ldrb	r3, [r3, #18]
 80009a0:	025a      	lsls	r2, r3, #9
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	430a      	orrs	r2, r1
 80009a8:	611a      	str	r2, [r3, #16]
		usart_handle->USARTx->CR2 |= (usart_handle->usart_cpol << Shift_10_pos);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6919      	ldr	r1, [r3, #16]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	7c5b      	ldrb	r3, [r3, #17]
 80009b4:	029a      	lsls	r2, r3, #10
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	611a      	str	r2, [r3, #16]
	}

	// Hardware control flow
	usart_handle->USARTx->CR3 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	695a      	ldr	r2, [r3, #20]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80009cc:	615a      	str	r2, [r3, #20]
	if (usart_handle->usart_hardware_flow_control != USART_HW_FLOW_CTRL_NONE) {
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	7d1b      	ldrb	r3, [r3, #20]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d009      	beq.n	80009ea <USART_INIT+0x342>
		usart_handle->USARTx->CR3 |= (usart_handle->usart_hardware_flow_control
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6959      	ldr	r1, [r3, #20]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	7d1b      	ldrb	r3, [r3, #20]
				<< 8);
 80009e0:	021a      	lsls	r2, r3, #8
		usart_handle->USARTx->CR3 |= (usart_handle->usart_hardware_flow_control
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	430a      	orrs	r2, r1
 80009e8:	615a      	str	r2, [r3, #20]
	}

	// Enable Peripheral
	USART_ENABLE(usart_handle, HIGH);
 80009ea:	2101      	movs	r1, #1
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f000 f805 	bl	80009fc <USART_ENABLE>
}
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop

080009fc <USART_ENABLE>:

void USART_ENABLE(USART_HandleTypedef *usart_handle, uint8_t EnOrDis) {
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	if (EnOrDis == HIGH) {
 8000a08:	78fb      	ldrb	r3, [r7, #3]
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d109      	bne.n	8000a22 <USART_ENABLE+0x26>
		usart_handle->USARTx->CR1 |= (EnOrDis << Shift_13_pos);
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	68d9      	ldr	r1, [r3, #12]
 8000a14:	78fb      	ldrb	r3, [r7, #3]
 8000a16:	035a      	lsls	r2, r3, #13
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	60da      	str	r2, [r3, #12]
	} else {
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_13_pos);
	}
}
 8000a20:	e007      	b.n	8000a32 <USART_ENABLE+0x36>
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_13_pos);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	68da      	ldr	r2, [r3, #12]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000a30:	60da      	str	r2, [r3, #12]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <UART_TRANSMIT_ENABLE>:

void UART_TRANSMIT_ENABLE(USART_HandleTypedef *usart_handle, uint8_t EnOrDis) {
 8000a3e:	b480      	push	{r7}
 8000a40:	b083      	sub	sp, #12
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	6078      	str	r0, [r7, #4]
 8000a46:	460b      	mov	r3, r1
 8000a48:	70fb      	strb	r3, [r7, #3]
	if (EnOrDis == HIGH) {
 8000a4a:	78fb      	ldrb	r3, [r7, #3]
 8000a4c:	2b01      	cmp	r3, #1
 8000a4e:	d109      	bne.n	8000a64 <UART_TRANSMIT_ENABLE+0x26>
		usart_handle->USARTx->CR1 |= (EnOrDis << Shift_3_pos);
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	68d9      	ldr	r1, [r3, #12]
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	00da      	lsls	r2, r3, #3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	60da      	str	r2, [r3, #12]
	} else {
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_3_pos);
	}
}
 8000a62:	e007      	b.n	8000a74 <UART_TRANSMIT_ENABLE+0x36>
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_3_pos);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68da      	ldr	r2, [r3, #12]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0208 	bic.w	r2, r2, #8
 8000a72:	60da      	str	r2, [r3, #12]
}
 8000a74:	bf00      	nop
 8000a76:	370c      	adds	r7, #12
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7e:	4770      	bx	lr

08000a80 <USART_write>:

void USART_write(USART_HandleTypedef *usart_handle, uint8_t *data,
		uint32_t size) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b086      	sub	sp, #24
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	607a      	str	r2, [r7, #4]
	uint16_t *pData;
	UART_TRANSMIT_ENABLE(usart_handle, HIGH);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	68f8      	ldr	r0, [r7, #12]
 8000a90:	f7ff ffd5 	bl	8000a3e <UART_TRANSMIT_ENABLE>
	for (uint32_t i = 0; i < size; i++) {
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e030      	b.n	8000afc <USART_write+0x7c>
		// Wait for TXE is empty
		while (!((usart_handle->USARTx->SR >> Shift_7_pos) & 0x1))
 8000a9a:	bf00      	nop
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	09db      	lsrs	r3, r3, #7
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f7      	beq.n	8000a9c <USART_write+0x1c>
			;
		// When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
		// the value written in the MSB (bit 7 or bit 8 depending on the data length)
		// has no effect because it is replaced by the parity.
		if (usart_handle->data_bits == USART_9_DATA_BITS) {
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	795b      	ldrb	r3, [r3, #5]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d118      	bne.n	8000ae6 <USART_write+0x66>
			pData = (uint16_t*) data;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	613b      	str	r3, [r7, #16]
			usart_handle->USARTx->DR = (*pData & 0x1FF); // Write 9-bit data
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	881b      	ldrh	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ac6:	605a      	str	r2, [r3, #4]
			if (usart_handle->parity_control == USART_PARITY_ENABLE) {
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	799b      	ldrb	r3, [r3, #6]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d106      	bne.n	8000ade <USART_write+0x5e>
				data++;
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60bb      	str	r3, [r7, #8]
				data++;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	e00b      	b.n	8000af6 <USART_write+0x76>
			} else {
				data++;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	e007      	b.n	8000af6 <USART_write+0x76>
			}
		} else {
			usart_handle->USARTx->DR = (*data & 0xFF); // Write 8-bit data
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
			data++;
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	3301      	adds	r3, #1
 8000af4:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 0; i < size; i++) {
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	3301      	adds	r3, #1
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d3ca      	bcc.n	8000a9a <USART_write+0x1a>
		}
	}

	// Wait for Transmission complete
	while (!((usart_handle->USARTx->SR >> Shift_6_pos) & 0x1))
 8000b04:	bf00      	nop
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	099b      	lsrs	r3, r3, #6
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f7      	beq.n	8000b06 <USART_write+0x86>
		;

	UART_TRANSMIT_ENABLE(usart_handle, LOW);
 8000b16:	2100      	movs	r1, #0
 8000b18:	68f8      	ldr	r0, [r7, #12]
 8000b1a:	f7ff ff90 	bl	8000a3e <UART_TRANSMIT_ENABLE>
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <delay>:
USART_HandleTypedef USART_Handle;
GPIO_Handle_TypeDef GPIO_Handle;

char msg[1024] = "UART Tx testing...\n\r";

void delay(void) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000 / 2; i++)
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	e002      	b.n	8000b3a <delay+0x12>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3301      	adds	r3, #1
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	@ (8000b50 <delay+0x28>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d9f8      	bls.n	8000b34 <delay+0xc>
		;
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	0003d08f 	.word	0x0003d08f

08000b54 <main>:

int main() {
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	GPIO_USER_INIT();
 8000b58:	f000 f842 	bl	8000be0 <GPIO_USER_INIT>
	Get_APB1_Clock_Speed();
 8000b5c:	f7ff fb3c 	bl	80001d8 <Get_APB1_Clock_Speed>
	USART_USER_INIT();
 8000b60:	f000 f81a 	bl	8000b98 <USART_USER_INIT>
	while (1) {
		while (!GPIO_INPUT(GPIOA, GPIO_PIN_0))
 8000b64:	bf00      	nop
 8000b66:	2100      	movs	r1, #0
 8000b68:	4808      	ldr	r0, [pc, #32]	@ (8000b8c <main+0x38>)
 8000b6a:	f7ff fd87 	bl	800067c <GPIO_INPUT>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0f8      	beq.n	8000b66 <main+0x12>
			;

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000b74:	f7ff ffd8 	bl	8000b28 <delay>

		USART_write(&USART_Handle, (uint8_t*) msg, strlen(msg));
 8000b78:	4805      	ldr	r0, [pc, #20]	@ (8000b90 <main+0x3c>)
 8000b7a:	f7ff fb25 	bl	80001c8 <strlen>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	461a      	mov	r2, r3
 8000b82:	4903      	ldr	r1, [pc, #12]	@ (8000b90 <main+0x3c>)
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <main+0x40>)
 8000b86:	f7ff ff7b 	bl	8000a80 <USART_write>
		while (!GPIO_INPUT(GPIOA, GPIO_PIN_0))
 8000b8a:	e7eb      	b.n	8000b64 <main+0x10>
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000420 	.word	0x20000420

08000b98 <USART_USER_INIT>:
	}

	return 0;
}

void USART_USER_INIT() {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	USART_Handle.USARTx = USART2;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000b9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bdc <USART_USER_INIT+0x44>)
 8000ba0:	601a      	str	r2, [r3, #0]
	USART_Handle.baud_rate = USART_BAUD_115200;
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba8:	60da      	str	r2, [r3, #12]
	USART_Handle.data_bits = USART_8_DATA_BITS;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	715a      	strb	r2, [r3, #5]
	USART_Handle.stop_bits = USART_1_STOP_BIT;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
	USART_Handle.oversampling_mode = USART_OVERSAMPLING_16;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	711a      	strb	r2, [r3, #4]
	USART_Handle.parity_control = USART_PARITY_DISABLE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	719a      	strb	r2, [r3, #6]
	USART_Handle.usart_mode = USART_MODE_ASYNC;
 8000bc2:	4b05      	ldr	r3, [pc, #20]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	741a      	strb	r2, [r3, #16]
	USART_Handle.usart_hardware_flow_control = USART_HW_FLOW_CTRL_NONE;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	751a      	strb	r2, [r3, #20]
	USART_INIT(&USART_Handle);
 8000bce:	4802      	ldr	r0, [pc, #8]	@ (8000bd8 <USART_USER_INIT+0x40>)
 8000bd0:	f7ff fd6a 	bl	80006a8 <USART_INIT>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000420 	.word	0x20000420
 8000bdc:	40004400 	.word	0x40004400

08000be0 <GPIO_USER_INIT>:
void GPIO_USER_INIT() {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	GPIO_Handle.GPIOX = GPIOA;
 8000be4:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000be6:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <GPIO_USER_INIT+0x8c>)
 8000be8:	601a      	str	r2, [r3, #0]
	GPIO_Handle.alternate_function_select = GPIO_AF7;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000bec:	2207      	movs	r2, #7
 8000bee:	725a      	strb	r2, [r3, #9]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8000bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000bf8:	2203      	movs	r2, #3
 8000bfa:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_PP;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	719a      	strb	r2, [r3, #6]

	//USART2 TX
	GPIO_Handle.pin_number = GPIO_PIN_2; //PA2
 8000c08:	4b17      	ldr	r3, [pc, #92]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000c0e:	4816      	ldr	r0, [pc, #88]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c10:	f7ff fb48 	bl	80002a4 <GPIO_INIT>

	//USART2 RX
	GPIO_Handle.pin_number = GPIO_PIN_3; //PA3
 8000c14:	4b14      	ldr	r3, [pc, #80]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c16:	2203      	movs	r2, #3
 8000c18:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000c1a:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c1c:	f7ff fb42 	bl	80002a4 <GPIO_INIT>

	// This is btn gpio configuration
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8000c20:	4b11      	ldr	r3, [pc, #68]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 8000c26:	4b10      	ldr	r3, [pc, #64]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c34:	f7ff fb36 	bl	80002a4 <GPIO_INIT>

	// This is led gpio configuration
	GPIO_Handle.GPIOX = GPIOD;
 8000c38:	4b0b      	ldr	r3, [pc, #44]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <GPIO_USER_INIT+0x90>)
 8000c3c:	601a      	str	r2, [r3, #0]
	GPIO_Handle.pin_number = GPIO_PIN_12;
 8000c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c40:	220c      	movs	r2, #12
 8000c42:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.mode = GPIO_MODE_OUTPUT;
 8000c44:	4b08      	ldr	r3, [pc, #32]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000c4a:	4b07      	ldr	r3, [pc, #28]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_OD;
 8000c50:	4b05      	ldr	r3, [pc, #20]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000c56:	4b04      	ldr	r3, [pc, #16]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <GPIO_USER_INIT+0x88>)
 8000c5e:	f7ff fb21 	bl	80002a4 <GPIO_INIT>
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20000438 	.word	0x20000438
 8000c6c:	40020000 	.word	0x40020000
 8000c70:	40020c00 	.word	0x40020c00

08000c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c74:	480d      	ldr	r0, [pc, #52]	@ (8000cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c78:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ca2:	f000 f811 	bl	8000cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff ff55 	bl	8000b54 <main>

08000caa <LoopForever>:

LoopForever:
  b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   r0, =_estack
 8000cac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000400 	.word	0x20000400
  ldr r2, =_sidata
 8000cb8:	08000d68 	.word	0x08000d68
  ldr r2, =_sbss
 8000cbc:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 8000cc0:	20000444 	.word	0x20000444

08000cc4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC_IRQHandler>
	...

08000cc8 <__libc_init_array>:
 8000cc8:	b570      	push	{r4, r5, r6, lr}
 8000cca:	4d0d      	ldr	r5, [pc, #52]	@ (8000d00 <__libc_init_array+0x38>)
 8000ccc:	4c0d      	ldr	r4, [pc, #52]	@ (8000d04 <__libc_init_array+0x3c>)
 8000cce:	1b64      	subs	r4, r4, r5
 8000cd0:	10a4      	asrs	r4, r4, #2
 8000cd2:	2600      	movs	r6, #0
 8000cd4:	42a6      	cmp	r6, r4
 8000cd6:	d109      	bne.n	8000cec <__libc_init_array+0x24>
 8000cd8:	4d0b      	ldr	r5, [pc, #44]	@ (8000d08 <__libc_init_array+0x40>)
 8000cda:	4c0c      	ldr	r4, [pc, #48]	@ (8000d0c <__libc_init_array+0x44>)
 8000cdc:	f000 f818 	bl	8000d10 <_init>
 8000ce0:	1b64      	subs	r4, r4, r5
 8000ce2:	10a4      	asrs	r4, r4, #2
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	42a6      	cmp	r6, r4
 8000ce8:	d105      	bne.n	8000cf6 <__libc_init_array+0x2e>
 8000cea:	bd70      	pop	{r4, r5, r6, pc}
 8000cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cf0:	4798      	blx	r3
 8000cf2:	3601      	adds	r6, #1
 8000cf4:	e7ee      	b.n	8000cd4 <__libc_init_array+0xc>
 8000cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cfa:	4798      	blx	r3
 8000cfc:	3601      	adds	r6, #1
 8000cfe:	e7f2      	b.n	8000ce6 <__libc_init_array+0x1e>
 8000d00:	08000d60 	.word	0x08000d60
 8000d04:	08000d60 	.word	0x08000d60
 8000d08:	08000d60 	.word	0x08000d60
 8000d0c:	08000d64 	.word	0x08000d64

08000d10 <_init>:
 8000d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d12:	bf00      	nop
 8000d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d16:	bc08      	pop	{r3}
 8000d18:	469e      	mov	lr, r3
 8000d1a:	4770      	bx	lr

08000d1c <_fini>:
 8000d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d1e:	bf00      	nop
 8000d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d22:	bc08      	pop	{r3}
 8000d24:	469e      	mov	lr, r3
 8000d26:	4770      	bx	lr
