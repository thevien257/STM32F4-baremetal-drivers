
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004714  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  080048a8  080048a8  000058a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d9c  08004d9c  000061c8  2**0
                  CONTENTS
  4 .ARM          00000008  08004d9c  08004d9c  00005d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004da4  08004da4  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004da4  08004da4  00005da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da8  08004da8  00005da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08004dac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000061c8  2**0
                  CONTENTS
 10 .bss          000001c8  200001c8  200001c8  000061c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000390  20000390  000061c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003318  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000bbf  00000000  00000000  00009510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000350  00000000  00000000  0000a0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000262  00000000  00000000  0000a420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000046c4  00000000  00000000  0000a682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005037  00000000  00000000  0000ed46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000d17f  00000000  00000000  00013d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00020efc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ca8  00000000  00000000  00020f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00022be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800488c 	.word	0x0800488c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	0800488c 	.word	0x0800488c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 8000ba8:	b4b0      	push	{r4, r5, r7}
 8000baa:	b08f      	sub	sp, #60	@ 0x3c
 8000bac:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <Get_APB1_Clock_Speed+0xb8>)
 8000bb0:	f107 0410 	add.w	r4, r7, #16
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 8000bc2:	4b28      	ldr	r3, [pc, #160]	@ (8000c64 <Get_APB1_Clock_Speed+0xbc>)
 8000bc4:	463c      	mov	r4, r7
 8000bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 8000bcc:	4b26      	ldr	r3, [pc, #152]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	0a9b      	lsrs	r3, r3, #10
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 8000c00:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d908      	bls.n	8000c1a <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 8000c08:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000c0c:	3b08      	subs	r3, #8
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	3338      	adds	r3, #56	@ 0x38
 8000c12:	443b      	add	r3, r7
 8000c14:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000c18:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 8000c1e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d908      	bls.n	8000c38 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 8000c26:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	3338      	adds	r3, #56	@ 0x38
 8000c30:	443b      	add	r3, r7
 8000c32:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000c36:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000c38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000c40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <Get_APB1_Clock_Speed+0xc4>)
 8000c44:	fb92 f2f3 	sdiv	r2, r2, r3
 8000c48:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <Get_APB1_Clock_Speed+0xc8>)
 8000c52:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 8000c54:	bf00      	nop
 8000c56:	373c      	adds	r7, #60	@ 0x3c
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bcb0      	pop	{r4, r5, r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	080048a8 	.word	0x080048a8
 8000c64:	080048c8 	.word	0x080048c8
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	00f42400 	.word	0x00f42400
 8000c70:	200001e4 	.word	0x200001e4

08000c74 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a90      	ldr	r2, [pc, #576]	@ (8000ec4 <GPIO_INIT+0x250>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d106      	bne.n	8000c94 <GPIO_INIT+0x20>
		GPIOA_EN();
 8000c86:	4b90      	ldr	r3, [pc, #576]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a8f      	ldr	r2, [pc, #572]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	e05e      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a8c      	ldr	r2, [pc, #560]	@ (8000ecc <GPIO_INIT+0x258>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d106      	bne.n	8000cac <GPIO_INIT+0x38>
		GPIOB_EN();
 8000c9e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a89      	ldr	r2, [pc, #548]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	e052      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a87      	ldr	r2, [pc, #540]	@ (8000ed0 <GPIO_INIT+0x25c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d106      	bne.n	8000cc4 <GPIO_INIT+0x50>
		GPIOC_EN();
 8000cb6:	4b84      	ldr	r3, [pc, #528]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a83      	ldr	r2, [pc, #524]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	e046      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a82      	ldr	r2, [pc, #520]	@ (8000ed4 <GPIO_INIT+0x260>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d106      	bne.n	8000cdc <GPIO_INIT+0x68>
		GPIOD_EN();
 8000cce:	4b7e      	ldr	r3, [pc, #504]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a7d      	ldr	r2, [pc, #500]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	e03a      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a7d      	ldr	r2, [pc, #500]	@ (8000ed8 <GPIO_INIT+0x264>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d106      	bne.n	8000cf4 <GPIO_INIT+0x80>
		GPIOE_EN();
 8000ce6:	4b78      	ldr	r3, [pc, #480]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a77      	ldr	r2, [pc, #476]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	e02e      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a78      	ldr	r2, [pc, #480]	@ (8000edc <GPIO_INIT+0x268>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d106      	bne.n	8000d0c <GPIO_INIT+0x98>
		GPIOF_EN();
 8000cfe:	4b72      	ldr	r3, [pc, #456]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a71      	ldr	r2, [pc, #452]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	e022      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a73      	ldr	r2, [pc, #460]	@ (8000ee0 <GPIO_INIT+0x26c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d106      	bne.n	8000d24 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000d16:	4b6c      	ldr	r3, [pc, #432]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a6b      	ldr	r2, [pc, #428]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	e016      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a6e      	ldr	r2, [pc, #440]	@ (8000ee4 <GPIO_INIT+0x270>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d106      	bne.n	8000d3c <GPIO_INIT+0xc8>
		GPIOH_EN();
 8000d2e:	4b66      	ldr	r3, [pc, #408]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a65      	ldr	r2, [pc, #404]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	e00a      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a69      	ldr	r2, [pc, #420]	@ (8000ee8 <GPIO_INIT+0x274>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d105      	bne.n	8000d52 <GPIO_INIT+0xde>
		GPIOI_EN();
 8000d46:	4b60      	ldr	r3, [pc, #384]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	791b      	ldrb	r3, [r3, #4]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2103      	movs	r1, #3
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	799b      	ldrb	r3, [r3, #6]
 8000d98:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	795b      	ldrb	r3, [r3, #5]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	f200 809a 	bhi.w	8000eec <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	795b      	ldrb	r3, [r3, #5]
 8000dc2:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	4619      	mov	r1, r3
 8000de4:	2303      	movs	r3, #3
 8000de6:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	400a      	ands	r2, r1
 8000df2:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7a1b      	ldrb	r3, [r3, #8]
 8000dfe:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	791b      	ldrb	r3, [r3, #4]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	791b      	ldrb	r3, [r3, #4]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2103      	movs	r1, #3
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000e24:	43db      	mvns	r3, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	79db      	ldrb	r3, [r3, #7]
 8000e3a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	795b      	ldrb	r3, [r3, #5]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f040 80ec 	bne.w	8001032 <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	7b7a      	ldrb	r2, [r7, #13]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	7b7a      	ldrb	r2, [r7, #13]
 8000e8e:	4001      	ands	r1, r0
 8000e90:	3208      	adds	r2, #8
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	7b7a      	ldrb	r2, [r7, #13]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7a5b      	ldrb	r3, [r3, #9]
 8000ea6:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 8000ea8:	7b3b      	ldrb	r3, [r7, #12]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	7b7a      	ldrb	r2, [r7, #13]
 8000eb8:	4301      	orrs	r1, r0
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 8000ec0:	e0b7      	b.n	8001032 <GPIO_INIT+0x3be>
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40021400 	.word	0x40021400
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40021c00 	.word	0x40021c00
 8000ee8:	40022000 	.word	0x40022000
		SYSCFG_EN();
 8000eec:	4b54      	ldr	r3, [pc, #336]	@ (8001040 <GPIO_INIT+0x3cc>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef0:	4a53      	ldr	r2, [pc, #332]	@ (8001040 <GPIO_INIT+0x3cc>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef6:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	795b      	ldrb	r3, [r3, #5]
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	d12e      	bne.n	8000f5e <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f00:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	7912      	ldrb	r2, [r2, #4]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	408a      	lsls	r2, r1
 8000f0e:	43d2      	mvns	r2, r2
 8000f10:	4611      	mov	r1, r2
 8000f12:	4a4c      	ldr	r2, [pc, #304]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f14:	400b      	ands	r3, r1
 8000f16:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f18:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	7912      	ldrb	r2, [r2, #4]
 8000f20:	4611      	mov	r1, r2
 8000f22:	2201      	movs	r2, #1
 8000f24:	408a      	lsls	r2, r1
 8000f26:	43d2      	mvns	r2, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4a46      	ldr	r2, [pc, #280]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000f30:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	7912      	ldrb	r2, [r2, #4]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	408a      	lsls	r2, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a40      	ldr	r2, [pc, #256]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f42:	430b      	orrs	r3, r1
 8000f44:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000f46:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	7912      	ldrb	r2, [r2, #4]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	2201      	movs	r2, #1
 8000f52:	408a      	lsls	r2, r1
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a3b      	ldr	r2, [pc, #236]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	60d3      	str	r3, [r2, #12]
 8000f5c:	e036      	b.n	8000fcc <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d117      	bne.n	8000f96 <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f66:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	7912      	ldrb	r2, [r2, #4]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	2201      	movs	r2, #1
 8000f72:	408a      	lsls	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	4611      	mov	r1, r2
 8000f78:	4a32      	ldr	r2, [pc, #200]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	7912      	ldrb	r2, [r2, #4]
 8000f86:	4611      	mov	r1, r2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	408a      	lsls	r2, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f90:	430b      	orrs	r3, r1
 8000f92:	60d3      	str	r3, [r2, #12]
 8000f94:	e01a      	b.n	8000fcc <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d116      	bne.n	8000fcc <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f9e:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	7912      	ldrb	r2, [r2, #4]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	2201      	movs	r2, #1
 8000faa:	408a      	lsls	r2, r1
 8000fac:	43d2      	mvns	r2, r2
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4a24      	ldr	r2, [pc, #144]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	7912      	ldrb	r2, [r2, #4]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	408a      	lsls	r2, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <GPIO_INIT+0x3d4>)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a9b      	ldrb	r3, [r3, #10]
 8000fec:	4619      	mov	r1, r3
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	4913      	ldr	r1, [pc, #76]	@ (8001048 <GPIO_INIT+0x3d4>)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4302      	orrs	r2, r0
 8000ffe:	3302      	adds	r3, #2
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <GPIO_INIT+0x3d0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7912      	ldrb	r2, [r2, #4]
 800100c:	4611      	mov	r1, r2
 800100e:	2201      	movs	r2, #1
 8001010:	408a      	lsls	r2, r1
 8001012:	43d2      	mvns	r2, r2
 8001014:	4611      	mov	r1, r2
 8001016:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <GPIO_INIT+0x3d0>)
 8001018:	400b      	ands	r3, r1
 800101a:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <GPIO_INIT+0x3d0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	7912      	ldrb	r2, [r2, #4]
 8001024:	4611      	mov	r1, r2
 8001026:	2201      	movs	r2, #1
 8001028:	408a      	lsls	r2, r1
 800102a:	4611      	mov	r1, r2
 800102c:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <GPIO_INIT+0x3d0>)
 800102e:	430b      	orrs	r3, r1
 8001030:	6013      	str	r3, [r2, #0]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40013c00 	.word	0x40013c00
 8001048:	40013800 	.word	0x40013800

0800104c <IRQ_Config>:
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 8001066:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800106a:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800106e:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <IRQ_Config+0x74>)
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10b      	bne.n	8001098 <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	f002 021f 	and.w	r2, r2, #31
 800108a:	2101      	movs	r1, #1
 800108c:	fa01 f202 	lsl.w	r2, r1, r2
 8001090:	431a      	orrs	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 8001096:	e00d      	b.n	80010b4 <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10a      	bne.n	80010b4 <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	f002 021f 	and.w	r2, r2, #31
 80010a8:	2101      	movs	r1, #1
 80010aa:	fa01 f202 	lsl.w	r2, r1, r2
 80010ae:	431a      	orrs	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e180 	.word	0xe000e180

080010c4 <I2C_INIT>:
		i2c_handle->I2Cx->CR1 |= (HIGH << Shift_10_pos);
	}

}

void I2C_INIT(I2C_Handle_TypeDef *i2c_handle) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	if (i2c_handle->I2Cx == I2C1) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a89      	ldr	r2, [pc, #548]	@ (80012f8 <I2C_INIT+0x234>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d106      	bne.n	80010e4 <I2C_INIT+0x20>
		I2C1_EN();
 80010d6:	4b89      	ldr	r3, [pc, #548]	@ (80012fc <I2C_INIT+0x238>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a88      	ldr	r2, [pc, #544]	@ (80012fc <I2C_INIT+0x238>)
 80010dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	e016      	b.n	8001112 <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C2) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a85      	ldr	r2, [pc, #532]	@ (8001300 <I2C_INIT+0x23c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d106      	bne.n	80010fc <I2C_INIT+0x38>
		I2C2_EN();
 80010ee:	4b83      	ldr	r3, [pc, #524]	@ (80012fc <I2C_INIT+0x238>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a82      	ldr	r2, [pc, #520]	@ (80012fc <I2C_INIT+0x238>)
 80010f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	e00a      	b.n	8001112 <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C3) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a80      	ldr	r2, [pc, #512]	@ (8001304 <I2C_INIT+0x240>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d105      	bne.n	8001112 <I2C_INIT+0x4e>
		I2C3_EN();
 8001106:	4b7d      	ldr	r3, [pc, #500]	@ (80012fc <I2C_INIT+0x238>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	4a7c      	ldr	r2, [pc, #496]	@ (80012fc <I2C_INIT+0x238>)
 800110c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001110:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	Get_APB1_Clock_Speed();
 8001112:	f7ff fd49 	bl	8000ba8 <Get_APB1_Clock_Speed>

	// Peripheral Clock Frequency (16Mhz)
	i2c_handle->I2Cx->CR2 &= ~(Five_BIT_1 << 0);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 021f 	bic.w	r2, r2, #31
 8001124:	605a      	str	r2, [r3, #4]
	i2c_handle->I2Cx->CR2 |= ((SystemClockSrc / Mhz) << 0);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	6859      	ldr	r1, [r3, #4]
 800112c:	4b76      	ldr	r3, [pc, #472]	@ (8001308 <I2C_INIT+0x244>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a76      	ldr	r2, [pc, #472]	@ (800130c <I2C_INIT+0x248>)
 8001132:	fba2 2303 	umull	r2, r3, r2, r3
 8001136:	0c9a      	lsrs	r2, r3, #18
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	605a      	str	r2, [r3, #4]

	// I2C Standard/Fast Mode
	i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_15_pos);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	69da      	ldr	r2, [r3, #28]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800114e:	61da      	str	r2, [r3, #28]
	i2c_handle->I2Cx->CCR |= (i2c_handle->mode << Shift_15_pos);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	69d9      	ldr	r1, [r3, #28]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	791b      	ldrb	r3, [r3, #4]
 800115a:	03da      	lsls	r2, r3, #15
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	61da      	str	r2, [r3, #28]

	// Tscl = Thigh + Tlow
	if (i2c_handle->mode == I2C_Standard_Mode) {
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	791b      	ldrb	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d120      	bne.n	80011ae <I2C_INIT+0xea>
		i2c_handle->I2Cx->CCR |= ((SystemClockSrc / (2 * i2c_handle->scl_speed))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	69d9      	ldr	r1, [r3, #28]
				<< 0);
 8001172:	4b65      	ldr	r3, [pc, #404]	@ (8001308 <I2C_INIT+0x244>)
 8001174:	681a      	ldr	r2, [r3, #0]
		i2c_handle->I2Cx->CCR |= ((SystemClockSrc / (2 * i2c_handle->scl_speed))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	005b      	lsls	r3, r3, #1
				<< 0);
 800117c:	fbb2 f2f3 	udiv	r2, r2, r3
		i2c_handle->I2Cx->CCR |= ((SystemClockSrc / (2 * i2c_handle->scl_speed))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	61da      	str	r2, [r3, #28]
		// Trise
		i2c_handle->I2Cx->TRISE = 0;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
		i2c_handle->I2Cx->TRISE |= ((SystemClockSrc / 1000000)) + 1;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a19      	ldr	r1, [r3, #32]
 8001196:	4b5c      	ldr	r3, [pc, #368]	@ (8001308 <I2C_INIT+0x244>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a5c      	ldr	r2, [pc, #368]	@ (800130c <I2C_INIT+0x248>)
 800119c:	fba2 2303 	umull	r2, r3, r2, r3
 80011a0:	0c9b      	lsrs	r3, r3, #18
 80011a2:	1c5a      	adds	r2, r3, #1
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	621a      	str	r2, [r3, #32]
 80011ac:	e053      	b.n	8001256 <I2C_INIT+0x192>
	} else if (i2c_handle->mode == I2C_Fast_Mode) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	791b      	ldrb	r3, [r3, #4]
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d14f      	bne.n	8001256 <I2C_INIT+0x192>
		i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_14_pos);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	69da      	ldr	r2, [r3, #28]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011c4:	61da      	str	r2, [r3, #28]
		i2c_handle->I2Cx->CCR |= (i2c_handle->duty_cycle << Shift_14_pos);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	69d9      	ldr	r1, [r3, #28]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7b1b      	ldrb	r3, [r3, #12]
 80011d0:	039a      	lsls	r2, r3, #14
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	430a      	orrs	r2, r1
 80011d8:	61da      	str	r2, [r3, #28]
		if (i2c_handle->duty_cycle == I2C_Duty_Cycle_2) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7b1b      	ldrb	r3, [r3, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d110      	bne.n	8001204 <I2C_INIT+0x140>
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	69d9      	ldr	r1, [r3, #28]
					/ (3 * i2c_handle->scl_speed)) << 0);
 80011e8:	4b47      	ldr	r3, [pc, #284]	@ (8001308 <I2C_INIT+0x244>)
 80011ea:	6818      	ldr	r0, [r3, #0]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	4613      	mov	r3, r2
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	4413      	add	r3, r2
 80011f6:	fbb0 f2f3 	udiv	r2, r0, r3
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	61da      	str	r2, [r3, #28]
 8001202:	e015      	b.n	8001230 <I2C_INIT+0x16c>
		} else if (i2c_handle->duty_cycle == I2C_Duty_Cycle_16_9) {
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	7b1b      	ldrb	r3, [r3, #12]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d111      	bne.n	8001230 <I2C_INIT+0x16c>
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	69d9      	ldr	r1, [r3, #28]
					/ (25 * i2c_handle->scl_speed)) << 0);
 8001212:	4b3d      	ldr	r3, [pc, #244]	@ (8001308 <I2C_INIT+0x244>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689a      	ldr	r2, [r3, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009a      	lsls	r2, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	fbb0 f2f3 	udiv	r2, r0, r3
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	430a      	orrs	r2, r1
 800122e:	61da      	str	r2, [r3, #28]
		}
		// Trise
		i2c_handle->I2Cx->TRISE |= ((SystemClockSrc * I2C_TRISE_MAX_FAST_MODE
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	6a19      	ldr	r1, [r3, #32]
 8001236:	4b34      	ldr	r3, [pc, #208]	@ (8001308 <I2C_INIT+0x244>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800123e:	fb02 f303 	mul.w	r3, r2, r3
				/ 1000000000)) + 1;
 8001242:	0a5b      	lsrs	r3, r3, #9
 8001244:	4a32      	ldr	r2, [pc, #200]	@ (8001310 <I2C_INIT+0x24c>)
 8001246:	fba2 2303 	umull	r2, r3, r2, r3
 800124a:	09db      	lsrs	r3, r3, #7
 800124c:	1c5a      	adds	r2, r3, #1
		i2c_handle->I2Cx->TRISE |= ((SystemClockSrc * I2C_TRISE_MAX_FAST_MODE
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	430a      	orrs	r2, r1
 8001254:	621a      	str	r2, [r3, #32]
	}

// Adress mode - 7 bit
	if (i2c_handle->address_select_bit == I2C_7_Bit_Adress) {
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	799b      	ldrb	r3, [r3, #6]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d109      	bne.n	8001272 <I2C_INIT+0x1ae>
		i2c_handle->I2Cx->OAR1 |= (i2c_handle->address << HIGH);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6899      	ldr	r1, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	79db      	ldrb	r3, [r3, #7]
 8001268:	005a      	lsls	r2, r3, #1
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	430a      	orrs	r2, r1
 8001270:	609a      	str	r2, [r3, #8]
	}
	i2c_handle->I2Cx->OAR1 |= (HIGH << Shift_14_pos);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001280:	609a      	str	r2, [r3, #8]

// Enable Peripheral
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_0_pos);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]

// ACK bit En
	i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80012a0:	601a      	str	r2, [r3, #0]
	i2c_handle->I2Cx->CR1 |= (i2c_handle->ack_en << Shift_10_pos);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6819      	ldr	r1, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7b5b      	ldrb	r3, [r3, #13]
 80012ac:	029a      	lsls	r2, r3, #10
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
// Slave mode
	if (i2c_handle->MasterOrSlave == I2C_Slave_Mode) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	795b      	ldrb	r3, [r3, #5]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d117      	bne.n	80012ee <I2C_INIT+0x22a>
		// Error interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_8_pos);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	685a      	ldr	r2, [r3, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80012cc:	605a      	str	r2, [r3, #4]

		// Event interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_9_pos);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80012dc:	605a      	str	r2, [r3, #4]

		// Buffer interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_10_pos);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80012ec:	605a      	str	r2, [r3, #4]
	}
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40005400 	.word	0x40005400
 80012fc:	40023800 	.word	0x40023800
 8001300:	40005800 	.word	0x40005800
 8001304:	40005c00 	.word	0x40005c00
 8001308:	200001e4 	.word	0x200001e4
 800130c:	431bde83 	.word	0x431bde83
 8001310:	00044b83 	.word	0x00044b83

08001314 <I2C_Master_Write>:

void I2C_Master_Write(I2C_Handle_TypeDef *i2c_handle, uint8_t addr,
		uint8_t *data, uint32_t size, uint8_t sr) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	460b      	mov	r3, r1
 8001322:	72fb      	strb	r3, [r7, #11]
// Setting start_bit
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_8_pos);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001332:	601a      	str	r2, [r3, #0]

	while (!((i2c_handle->I2Cx->SR1 >> Shift_0_pos) & HIGH))
 8001334:	bf00      	nop
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f003 0301 	and.w	r3, r3, #1
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f8      	beq.n	8001336 <I2C_Master_Write+0x22>
		;

// Clear Start bit by reading SR1 register
	uint32_t read;
	read = i2c_handle->I2Cx->SR1;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	613b      	str	r3, [r7, #16]
	(void) read;
	I2C_Address(i2c_handle, addr, I2C_WRITE_BIT);
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f000 f8f4 	bl	8001540 <I2C_Address>

// Check Address matched or not
	while (!((i2c_handle->I2Cx->SR1 >> Shift_1_pos) & HIGH))
 8001358:	bf00      	nop
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	695b      	ldr	r3, [r3, #20]
 8001360:	085b      	lsrs	r3, r3, #1
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f7      	beq.n	800135a <I2C_Master_Write+0x46>
		;

	read = i2c_handle->I2Cx->SR1;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
 8001370:	613b      	str	r3, [r7, #16]
	read = i2c_handle->I2Cx->SR2;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	613b      	str	r3, [r7, #16]
	(void) read;

// LSB first for example uint8_t *data = {H, E, L, L, O}
	for (uint32_t i = 0; i < size; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
 800137e:	e012      	b.n	80013a6 <I2C_Master_Write+0x92>
		// Wait for data register is empty
		while (!((i2c_handle->I2Cx->SR1 >> Shift_7_pos) & HIGH))
 8001380:	bf00      	nop
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	09db      	lsrs	r3, r3, #7
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b00      	cmp	r3, #0
 8001390:	d0f7      	beq.n	8001382 <I2C_Master_Write+0x6e>
			;
		i2c_handle->I2Cx->DR = data[i];
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	4413      	add	r3, r2
 8001398:	781a      	ldrb	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	611a      	str	r2, [r3, #16]
	for (uint32_t i = 0; i < size; i++) {
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	3301      	adds	r3, #1
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	697a      	ldr	r2, [r7, #20]
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d3e8      	bcc.n	8001380 <I2C_Master_Write+0x6c>
	}

// Wait for TXE = 1: Data register is empty
	while (!((i2c_handle->I2Cx->SR1 >> Shift_7_pos) & HIGH))
 80013ae:	bf00      	nop
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	695b      	ldr	r3, [r3, #20]
 80013b6:	09db      	lsrs	r3, r3, #7
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0f7      	beq.n	80013b0 <I2C_Master_Write+0x9c>
		;
// Wait for BTF = 1: Data byTe transfer succeeded
	while (!((i2c_handle->I2Cx->SR1 >> Shift_2_pos) & HIGH))
 80013c0:	bf00      	nop
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	089b      	lsrs	r3, r3, #2
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f7      	beq.n	80013c2 <I2C_Master_Write+0xae>
		;

// Stop request
	if (sr == I2C_SR_DIS) {
 80013d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d107      	bne.n	80013ea <I2C_Master_Write+0xd6>
		i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013e8:	601a      	str	r2, [r3, #0]
	}
}
 80013ea:	bf00      	nop
 80013ec:	3718      	adds	r7, #24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <I2C_Master_Read>:

void I2C_Master_Read(I2C_Handle_TypeDef *i2c_handle, uint8_t addr,
		uint8_t *data, uint8_t size, uint8_t sr) {
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	60f8      	str	r0, [r7, #12]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	461a      	mov	r2, r3
 80013fe:	460b      	mov	r3, r1
 8001400:	72fb      	strb	r3, [r7, #11]
 8001402:	4613      	mov	r3, r2
 8001404:	72bb      	strb	r3, [r7, #10]

// Setting start_bit
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_8_pos);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001414:	601a      	str	r2, [r3, #0]

	while (!((i2c_handle->I2Cx->SR1 >> Shift_0_pos) & HIGH))
 8001416:	bf00      	nop
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f8      	beq.n	8001418 <I2C_Master_Read+0x26>
		;

// Clear Start bit by reading SR1 register
	uint32_t read;
	read = i2c_handle->I2Cx->SR1;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	613b      	str	r3, [r7, #16]
	(void) read;
	I2C_Address(i2c_handle, addr, I2C_READ_BIT);
 800142e:	7afb      	ldrb	r3, [r7, #11]
 8001430:	2201      	movs	r2, #1
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 f883 	bl	8001540 <I2C_Address>

// Check Address matched or not
	while (!((i2c_handle->I2Cx->SR1 >> Shift_1_pos) & HIGH))
 800143a:	bf00      	nop
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0f7      	beq.n	800143c <I2C_Master_Read+0x4a>
		;

	if (size == 1) {
 800144c:	7abb      	ldrb	r3, [r7, #10]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d12b      	bne.n	80014aa <I2C_Master_Read+0xb8>

		// Set ACK LOW
		i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001460:	601a      	str	r2, [r3, #0]

		//Clear ADDR Flag
		read = i2c_handle->I2Cx->SR1;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	613b      	str	r3, [r7, #16]
		read = i2c_handle->I2Cx->SR2;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	699b      	ldr	r3, [r3, #24]
 8001470:	613b      	str	r3, [r7, #16]
		(void) read;

		// Wait for data register is not empty (Receiver)
		while (!((i2c_handle->I2Cx->SR1 >> Shift_6_pos) & HIGH))
 8001472:	bf00      	nop
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	099b      	lsrs	r3, r3, #6
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f7      	beq.n	8001474 <I2C_Master_Read+0x82>
			;

		if (sr == I2C_SR_DIS) {
 8001484:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d107      	bne.n	800149c <I2C_Master_Read+0xaa>
			// Stop request
			i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800149a:	601a      	str	r2, [r3, #0]
		}

		//Read data
		data[0] = i2c_handle->I2Cx->DR;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	691b      	ldr	r3, [r3, #16]
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	701a      	strb	r2, [r3, #0]
 80014a8:	e03e      	b.n	8001528 <I2C_Master_Read+0x136>

	} else if (size > 1) {
 80014aa:	7abb      	ldrb	r3, [r7, #10]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d93b      	bls.n	8001528 <I2C_Master_Read+0x136>
		//Clear ADDR Flag
		read = i2c_handle->I2Cx->SR1;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	613b      	str	r3, [r7, #16]
		read = i2c_handle->I2Cx->SR2;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	613b      	str	r3, [r7, #16]
		(void) read;
		for (uint32_t i = 0; i < size; i++) {
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e02c      	b.n	8001520 <I2C_Master_Read+0x12e>
			// Wait for data register is not empty (Receiver)
			while (!((i2c_handle->I2Cx->SR1 >> Shift_6_pos) & HIGH))
 80014c6:	bf00      	nop
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	099b      	lsrs	r3, r3, #6
 80014d0:	f003 0301 	and.w	r3, r3, #1
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d0f7      	beq.n	80014c8 <I2C_Master_Read+0xd6>
				;
			if ((size - i) == 1) {
 80014d8:	7aba      	ldrb	r2, [r7, #10]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d113      	bne.n	800150a <I2C_Master_Read+0x118>

				// Set ACK LOW
				i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80014f0:	601a      	str	r2, [r3, #0]

				if (sr == I2C_SR_DIS) {
 80014f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d107      	bne.n	800150a <I2C_Master_Read+0x118>
					// Stop request
					i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001508:	601a      	str	r2, [r3, #0]
				}
			}
			data[i] = i2c_handle->I2Cx->DR;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6919      	ldr	r1, [r3, #16]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	4413      	add	r3, r2
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < size; i++) {
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	7abb      	ldrb	r3, [r7, #10]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	429a      	cmp	r2, r3
 8001526:	d3ce      	bcc.n	80014c6 <I2C_Master_Read+0xd4>
		}
	}

// SET ACK again
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_10_pos);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001536:	601a      	str	r2, [r3, #0]

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <I2C_Address>:
}
void I2C_Slave_Read(I2C_TypeDef *I2Cx, uint8_t *data) {
	*data = I2Cx->DR;
}

void I2C_Address(I2C_Handle_TypeDef *i2c_handle, uint8_t addr, uint8_t rnw) {
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	70fb      	strb	r3, [r7, #3]
 800154c:	4613      	mov	r3, r2
 800154e:	70bb      	strb	r3, [r7, #2]
	uint8_t slave_addr = addr << 1;
 8001550:	78fb      	ldrb	r3, [r7, #3]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
	if (rnw == I2C_WRITE_BIT) {
 8001556:	78bb      	ldrb	r3, [r7, #2]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <I2C_Address+0x26>
		slave_addr &= ~(HIGH);
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	73fb      	strb	r3, [r7, #15]
 8001564:	e006      	b.n	8001574 <I2C_Address+0x34>
	} else if (rnw == I2C_READ_BIT) {
 8001566:	78bb      	ldrb	r3, [r7, #2]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d103      	bne.n	8001574 <I2C_Address+0x34>
		slave_addr |= (HIGH);
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	73fb      	strb	r3, [r7, #15]
	}

	i2c_handle->I2Cx->DR = slave_addr;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	7bfa      	ldrb	r2, [r7, #15]
 800157a:	611a      	str	r2, [r3, #16]

}
 800157c:	bf00      	nop
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <TIM_ENABLE>:
	default:
		return 0;
	}
}

void TIM_ENABLE(TIM_HandleTypeDef *timHandleTypeDef) {
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	// Timer enable
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_0_pos);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f042 0201 	orr.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

	/*	UG: Update generation
	 This bit can be set by software, it is automatically cleared by hardware.
	 0: No action
	 1: Re-initialize the counter and generates an update of the registers.*/
	timHandleTypeDef->TIMx->EGR |= (HIGH << Shift_0_pos);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	615a      	str	r2, [r3, #20]

	while (!((timHandleTypeDef->TIMx->SR >> Shift_0_pos) & 0x1))
 80015b0:	bf00      	nop
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0f8      	beq.n	80015b2 <TIM_ENABLE+0x2a>
		;

	// Clear the update flag that was just set
	timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	611a      	str	r2, [r3, #16]
}
 80015d0:	bf00      	nop
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <TIM_DELAY_INIT>:

void TIM_DELAY_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	if (timHandleTypeDef->TIMx == TIM2) {
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015ec:	d106      	bne.n	80015fc <TIM_DELAY_INIT+0x20>
		TIM2_EN();
 80015ee:	4b3c      	ldr	r3, [pc, #240]	@ (80016e0 <TIM_DELAY_INIT+0x104>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	4a3b      	ldr	r2, [pc, #236]	@ (80016e0 <TIM_DELAY_INIT+0x104>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fa:	e022      	b.n	8001642 <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM3) {
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a38      	ldr	r2, [pc, #224]	@ (80016e4 <TIM_DELAY_INIT+0x108>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d106      	bne.n	8001614 <TIM_DELAY_INIT+0x38>
		TIM3_EN();
 8001606:	4b36      	ldr	r3, [pc, #216]	@ (80016e0 <TIM_DELAY_INIT+0x104>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a35      	ldr	r2, [pc, #212]	@ (80016e0 <TIM_DELAY_INIT+0x104>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	e016      	b.n	8001642 <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM4) {
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a33      	ldr	r2, [pc, #204]	@ (80016e8 <TIM_DELAY_INIT+0x10c>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d106      	bne.n	800162c <TIM_DELAY_INIT+0x50>
		TIM4_EN();
 800161e:	4b30      	ldr	r3, [pc, #192]	@ (80016e0 <TIM_DELAY_INIT+0x104>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a2f      	ldr	r2, [pc, #188]	@ (80016e0 <TIM_DELAY_INIT+0x104>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	e00a      	b.n	8001642 <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM5) {
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a2e      	ldr	r2, [pc, #184]	@ (80016ec <TIM_DELAY_INIT+0x110>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d105      	bne.n	8001642 <TIM_DELAY_INIT+0x66>
		TIM5_EN();
 8001636:	4b2a      	ldr	r3, [pc, #168]	@ (80016e0 <TIM_DELAY_INIT+0x104>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a29      	ldr	r2, [pc, #164]	@ (80016e0 <TIM_DELAY_INIT+0x104>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	Get_APB1_Clock_Speed();
 8001642:	f7ff fab1 	bl	8000ba8 <Get_APB1_Clock_Speed>

	uint32_t psc = SystemClockSrc / ONE_MEGA_HERT;
 8001646:	4b2a      	ldr	r3, [pc, #168]	@ (80016f0 <TIM_DELAY_INIT+0x114>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a2a      	ldr	r2, [pc, #168]	@ (80016f4 <TIM_DELAY_INIT+0x118>)
 800164c:	fba2 2303 	umull	r2, r3, r2, r3
 8001650:	0c9b      	lsrs	r3, r3, #18
 8001652:	60fb      	str	r3, [r7, #12]

	// Ensure Counter is disable
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_0_pos);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	601a      	str	r2, [r3, #0]

	// Clock prescaler
	timHandleTypeDef->TIMx->PSC = (psc - 1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	3a01      	subs	r2, #1
 800166c:	629a      	str	r2, [r3, #40]	@ 0x28

	if (timHandleTypeDef->TIMx == TIM2 || timHandleTypeDef->TIMx == TIM5) {
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001676:	d004      	beq.n	8001682 <TIM_DELAY_INIT+0xa6>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1b      	ldr	r2, [pc, #108]	@ (80016ec <TIM_DELAY_INIT+0x110>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d105      	bne.n	800168e <TIM_DELAY_INIT+0xb2>
		timHandleTypeDef->TIMx->ARR = 0xFFFFFFFF;  // 32-bit max
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f04f 32ff 	mov.w	r2, #4294967295
 800168a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800168c:	e004      	b.n	8001698 <TIM_DELAY_INIT+0xbc>
	} else {
		timHandleTypeDef->TIMx->ARR = 0xFFFF;      // 16-bit max
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001696:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// autoReloadPreload
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_7_pos);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016a6:	601a      	str	r2, [r3, #0]

	// Count up
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_4_pos);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0210 	bic.w	r2, r2, #16
 80016b6:	601a      	str	r2, [r3, #0]

	// Enable update
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_1_pos);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f022 0202 	bic.w	r2, r2, #2
 80016c6:	601a      	str	r2, [r3, #0]

	// Update request source (Select source)
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_2_pos);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0204 	bic.w	r2, r2, #4
 80016d6:	601a      	str	r2, [r3, #0]
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40000400 	.word	0x40000400
 80016e8:	40000800 	.word	0x40000800
 80016ec:	40000c00 	.word	0x40000c00
 80016f0:	200001e4 	.word	0x200001e4
 80016f4:	431bde83 	.word	0x431bde83

080016f8 <TIM_MILLIS_INIT>:

void TIM_MILLIS_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
	TIM_DELAY_INIT(timHandleTypeDef);
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff6b 	bl	80015dc <TIM_DELAY_INIT>

	// Select Auto-reload value (This will generate interrupt every 1ms for millis, but if use delay fuction then this ARR actually don't care)
	timHandleTypeDef->TIMx->ARR = 999;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800170e:	62da      	str	r2, [r3, #44]	@ 0x2c

	timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_0_pos);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	68da      	ldr	r2, [r3, #12]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0201 	orr.w	r2, r2, #1
 800171e:	60da      	str	r2, [r3, #12]

	if (timHandleTypeDef->TIMx == TIM2) {
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001728:	d104      	bne.n	8001734 <TIM_MILLIS_INIT+0x3c>
		IRQ_Config(TIM2_IRQ28, HIGH);
 800172a:	2101      	movs	r1, #1
 800172c:	201c      	movs	r0, #28
 800172e:	f7ff fc8d 	bl	800104c <IRQ_Config>
	} else if (timHandleTypeDef->TIMx == TIM4) {
		IRQ_Config(TIM4_IRQ30, HIGH);
	} else if (timHandleTypeDef->TIMx == TIM5) {
		IRQ_Config(TIM5_IRQ50, HIGH);
	}
}
 8001732:	e01c      	b.n	800176e <TIM_MILLIS_INIT+0x76>
	} else if (timHandleTypeDef->TIMx == TIM3) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a0f      	ldr	r2, [pc, #60]	@ (8001778 <TIM_MILLIS_INIT+0x80>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d104      	bne.n	8001748 <TIM_MILLIS_INIT+0x50>
		IRQ_Config(TIM3_IRQ29, HIGH);
 800173e:	2101      	movs	r1, #1
 8001740:	201d      	movs	r0, #29
 8001742:	f7ff fc83 	bl	800104c <IRQ_Config>
}
 8001746:	e012      	b.n	800176e <TIM_MILLIS_INIT+0x76>
	} else if (timHandleTypeDef->TIMx == TIM4) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a0b      	ldr	r2, [pc, #44]	@ (800177c <TIM_MILLIS_INIT+0x84>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d104      	bne.n	800175c <TIM_MILLIS_INIT+0x64>
		IRQ_Config(TIM4_IRQ30, HIGH);
 8001752:	2101      	movs	r1, #1
 8001754:	201e      	movs	r0, #30
 8001756:	f7ff fc79 	bl	800104c <IRQ_Config>
}
 800175a:	e008      	b.n	800176e <TIM_MILLIS_INIT+0x76>
	} else if (timHandleTypeDef->TIMx == TIM5) {
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a07      	ldr	r2, [pc, #28]	@ (8001780 <TIM_MILLIS_INIT+0x88>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d103      	bne.n	800176e <TIM_MILLIS_INIT+0x76>
		IRQ_Config(TIM5_IRQ50, HIGH);
 8001766:	2101      	movs	r1, #1
 8001768:	2032      	movs	r0, #50	@ 0x32
 800176a:	f7ff fc6f 	bl	800104c <IRQ_Config>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40000400 	.word	0x40000400
 800177c:	40000800 	.word	0x40000800
 8001780:	40000c00 	.word	0x40000c00

08001784 <millis>:

	// Enable the timer
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_0_pos);
}

uint32_t millis() {
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
	return mil;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <millis+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	200001e8 	.word	0x200001e8

0800179c <TIM_Handling>:

uint32_t micros() {
	return TIM2->CNT; // Current clock is 1MHZ, so each tich (count) will take 1us --> meet the condition
}

void TIM_Handling(TIM_HandleTypeDef *timHandleTypeDef) {
 800179c:	b480      	push	{r7}
 800179e:	b083      	sub	sp, #12
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	if (((timHandleTypeDef->TIMx->SR) >> Shift_0_pos) & 0x1) {
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d00c      	beq.n	80017cc <TIM_Handling+0x30>
		// Clear the update flag that was just set
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f022 0201 	bic.w	r2, r2, #1
 80017c0:	611a      	str	r2, [r3, #16]
		mil++;
 80017c2:	4b05      	ldr	r3, [pc, #20]	@ (80017d8 <TIM_Handling+0x3c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	3301      	adds	r3, #1
 80017c8:	4a03      	ldr	r2, [pc, #12]	@ (80017d8 <TIM_Handling+0x3c>)
 80017ca:	6013      	str	r3, [r2, #0]
	}
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	200001e8 	.word	0x200001e8

080017dc <bcd_to_decimal>:
	uint8_t first = decimal % 10;
	uint8_t second = decimal / 10;
	return ((second << Shift_4_pos) | first);
}

static uint8_t bcd_to_decimal(uint8_t bcd) {
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
	uint8_t first = bcd & 0xF;
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	73fb      	strb	r3, [r7, #15]
	uint8_t second = ((bcd >> Shift_4_pos) * 10);
 80017ee:	79fb      	ldrb	r3, [r7, #7]
 80017f0:	091b      	lsrs	r3, r3, #4
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	461a      	mov	r2, r3
 80017f6:	0092      	lsls	r2, r2, #2
 80017f8:	4413      	add	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	73bb      	strb	r3, [r7, #14]
	return (second + first);
 80017fe:	7bba      	ldrb	r2, [r7, #14]
 8001800:	7bfb      	ldrb	r3, [r7, #15]
 8001802:	4413      	add	r3, r2
 8001804:	b2db      	uxtb	r3, r3
}
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <DS1307_WRITE>:

void DS1307_WRITE(I2C_Handle_TypeDef *i2c_handle, uint8_t reg_addr,
		uint8_t data) {
 8001812:	b580      	push	{r7, lr}
 8001814:	b086      	sub	sp, #24
 8001816:	af02      	add	r7, sp, #8
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	460b      	mov	r3, r1
 800181c:	70fb      	strb	r3, [r7, #3]
 800181e:	4613      	mov	r3, r2
 8001820:	70bb      	strb	r3, [r7, #2]
	uint8_t value[2];
	value[0] = reg_addr;
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	733b      	strb	r3, [r7, #12]
	value[1] = data;
 8001826:	78bb      	ldrb	r3, [r7, #2]
 8001828:	737b      	strb	r3, [r7, #13]
	I2C_Master_Write(i2c_handle, DS1307_BUS_ADDR, value, 2, I2C_SR_DIS);
 800182a:	f107 020c 	add.w	r2, r7, #12
 800182e:	2300      	movs	r3, #0
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2302      	movs	r3, #2
 8001834:	2168      	movs	r1, #104	@ 0x68
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fd6c 	bl	8001314 <I2C_Master_Write>
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <DS1307_READ>:

void DS1307_READ(I2C_Handle_TypeDef *i2c_handle, uint8_t reg_addr,
		uint8_t *data) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af02      	add	r7, sp, #8
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	460b      	mov	r3, r1
 800184e:	607a      	str	r2, [r7, #4]
 8001850:	72fb      	strb	r3, [r7, #11]
	I2C_Master_Write(i2c_handle, DS1307_BUS_ADDR, &reg_addr, 1, I2C_SR_DIS);
 8001852:	f107 020b 	add.w	r2, r7, #11
 8001856:	2300      	movs	r3, #0
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2301      	movs	r3, #1
 800185c:	2168      	movs	r1, #104	@ 0x68
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7ff fd58 	bl	8001314 <I2C_Master_Write>
	I2C_Master_Read(i2c_handle, DS1307_BUS_ADDR, data, 1, I2C_SR_DIS);
 8001864:	2300      	movs	r3, #0
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2301      	movs	r3, #1
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	2168      	movs	r1, #104	@ 0x68
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f7ff fdbf 	bl	80013f2 <I2C_Master_Read>
}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <DS1307_INIT>:

// Return 1: CH = 1 --> INIT FAILED
// Return 0: CH = 0 --> INIT SUCCESS
uint8_t DS1307_INIT(I2C_Handle_TypeDef *i2c_handle) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	uint8_t clock_state;

	// Read current seconds register
	DS1307_READ(i2c_handle, DS1307_SEC_REG, &clock_state);
 8001884:	f107 030f 	add.w	r3, r7, #15
 8001888:	461a      	mov	r2, r3
 800188a:	2100      	movs	r1, #0
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffd9 	bl	8001844 <DS1307_READ>

//	Check if clock is halted (CH bit = bit 7)
	if ((clock_state >> Shift_7_pos) & HIGH) {
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	09db      	lsrs	r3, r3, #7
 8001896:	b2db      	uxtb	r3, r3
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d015      	beq.n	80018cc <DS1307_INIT+0x50>
		// Clock is halted, clear CH bit to start it
		clock_state &= ~(HIGH << Shift_7_pos); // Clear bit 7
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	73fb      	strb	r3, [r7, #15]
		DS1307_WRITE(i2c_handle, DS1307_SEC_REG, clock_state);
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	461a      	mov	r2, r3
 80018ae:	2100      	movs	r1, #0
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffae 	bl	8001812 <DS1307_WRITE>

		// Verify it started
		DS1307_READ(i2c_handle, DS1307_SEC_REG, &clock_state);
 80018b6:	f107 030f 	add.w	r3, r7, #15
 80018ba:	461a      	mov	r2, r3
 80018bc:	2100      	movs	r1, #0
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff ffc0 	bl	8001844 <DS1307_READ>
		return ((clock_state >> Shift_7_pos) & HIGH); // Return 0 if success
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	09db      	lsrs	r3, r3, #7
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	e000      	b.n	80018ce <DS1307_INIT+0x52>
	}

	// Clock is already running
	return 0;  // Success
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <DS1307_GET_TIME>:
	DS1307_WRITE(i2c_handle, DS1307_MIN_REG, minutes);
	DS1307_WRITE(i2c_handle, DS1307_HOUR_REG, hours);

}

void DS1307_GET_TIME(I2C_Handle_TypeDef *i2c_handle, DS1307_time_t *ds1307_time) {
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
 80018de:	6039      	str	r1, [r7, #0]
	uint8_t seconds, minutes, hours;
	// Read from DS1307
	DS1307_READ(i2c_handle, DS1307_SEC_REG, &seconds);
 80018e0:	f107 030d 	add.w	r3, r7, #13
 80018e4:	461a      	mov	r2, r3
 80018e6:	2100      	movs	r1, #0
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ffab 	bl	8001844 <DS1307_READ>
	DS1307_READ(i2c_handle, DS1307_MIN_REG, &minutes);
 80018ee:	f107 030c 	add.w	r3, r7, #12
 80018f2:	461a      	mov	r2, r3
 80018f4:	2101      	movs	r1, #1
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ffa4 	bl	8001844 <DS1307_READ>
	DS1307_READ(i2c_handle, DS1307_HOUR_REG, &hours);
 80018fc:	f107 030b 	add.w	r3, r7, #11
 8001900:	461a      	mov	r2, r3
 8001902:	2102      	movs	r1, #2
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff9d 	bl	8001844 <DS1307_READ>

	// Clear CH bit from seconds
	seconds &= ~(1 << Shift_7_pos);
 800190a:	7b7b      	ldrb	r3, [r7, #13]
 800190c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001910:	b2db      	uxtb	r3, r3
 8001912:	737b      	strb	r3, [r7, #13]
	ds1307_time->seconds = bcd_to_decimal(seconds);
 8001914:	7b7b      	ldrb	r3, [r7, #13]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff60 	bl	80017dc <bcd_to_decimal>
 800191c:	4603      	mov	r3, r0
 800191e:	461a      	mov	r2, r3
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	701a      	strb	r2, [r3, #0]
	ds1307_time->minutes = bcd_to_decimal(minutes);
 8001924:	7b3b      	ldrb	r3, [r7, #12]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff58 	bl	80017dc <bcd_to_decimal>
 800192c:	4603      	mov	r3, r0
 800192e:	461a      	mov	r2, r3
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	705a      	strb	r2, [r3, #1]

	uint8_t hour_mode = ((hours >> Shift_6_pos) & 0x1);
 8001934:	7afb      	ldrb	r3, [r7, #11]
 8001936:	099b      	lsrs	r3, r3, #6
 8001938:	b2db      	uxtb	r3, r3
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
	// 12-hour mode
	if (hour_mode == HIGH) {
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d115      	bne.n	8001972 <DS1307_GET_TIME+0x9c>
		uint8_t AM_PM = ((hours >> Shift_5_pos) & 0x1);
 8001946:	7afb      	ldrb	r3, [r7, #11]
 8001948:	095b      	lsrs	r3, r3, #5
 800194a:	b2db      	uxtb	r3, r3
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	73bb      	strb	r3, [r7, #14]
		if (AM_PM == HIGH) {
 8001952:	7bbb      	ldrb	r3, [r7, #14]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d103      	bne.n	8001960 <DS1307_GET_TIME+0x8a>
			ds1307_time->time_format = DS1307_TIME_FORMAT_12HRS_PM;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2201      	movs	r2, #1
 800195c:	70da      	strb	r2, [r3, #3]
 800195e:	e002      	b.n	8001966 <DS1307_GET_TIME+0x90>
		} else {
			ds1307_time->time_format = DS1307_TIME_FORMAT_12HRS_AM;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	2200      	movs	r2, #0
 8001964:	70da      	strb	r2, [r3, #3]
		}
		// Clear mode bits and convert
		hours &= 0x1F;  // Keep only lower 5 bits
 8001966:	7afb      	ldrb	r3, [r7, #11]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	b2db      	uxtb	r3, r3
 800196e:	72fb      	strb	r3, [r7, #11]
 8001970:	e007      	b.n	8001982 <DS1307_GET_TIME+0xac>
	}
	// 24-hour mode
	else {
		ds1307_time->time_format = DS1307_TIME_FORMAT_24HRS;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	2202      	movs	r2, #2
 8001976:	70da      	strb	r2, [r3, #3]
		hours &= 0x3F;  // Keep only lower 6 bits
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800197e:	b2db      	uxtb	r3, r3
 8001980:	72fb      	strb	r3, [r7, #11]
	}
	ds1307_time->hours = bcd_to_decimal(hours);
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff29 	bl	80017dc <bcd_to_decimal>
 800198a:	4603      	mov	r3, r0
 800198c:	461a      	mov	r2, r3
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	709a      	strb	r2, [r3, #2]
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <DS1307_GET_DATE>:
	DS1307_WRITE(i2c_handle, DS1307_DATE_REG, date);
	DS1307_WRITE(i2c_handle, DS1307_MONTH_REG, month);
	DS1307_WRITE(i2c_handle, DS1307_YEAR_REG, year);
}

void DS1307_GET_DATE(I2C_Handle_TypeDef *i2c_handle, DS1307_date_t *ds1307_date) {
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
	uint8_t date, month, year, day;

	// Read from DS1307
	DS1307_READ(i2c_handle, DS1307_DAY_REG, &day);
 80019a4:	f107 030c 	add.w	r3, r7, #12
 80019a8:	461a      	mov	r2, r3
 80019aa:	2103      	movs	r1, #3
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ff49 	bl	8001844 <DS1307_READ>
	DS1307_READ(i2c_handle, DS1307_DATE_REG, &date);
 80019b2:	f107 030f 	add.w	r3, r7, #15
 80019b6:	461a      	mov	r2, r3
 80019b8:	2104      	movs	r1, #4
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff ff42 	bl	8001844 <DS1307_READ>
	DS1307_READ(i2c_handle, DS1307_MONTH_REG, &month);
 80019c0:	f107 030e 	add.w	r3, r7, #14
 80019c4:	461a      	mov	r2, r3
 80019c6:	2105      	movs	r1, #5
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f7ff ff3b 	bl	8001844 <DS1307_READ>
	DS1307_READ(i2c_handle, DS1307_YEAR_REG, &year);
 80019ce:	f107 030d 	add.w	r3, r7, #13
 80019d2:	461a      	mov	r2, r3
 80019d4:	2106      	movs	r1, #6
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f7ff ff34 	bl	8001844 <DS1307_READ>

	// Convert from BCD
	ds1307_date->day = day;
 80019dc:	7b3a      	ldrb	r2, [r7, #12]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	70da      	strb	r2, [r3, #3]
	ds1307_date->date = bcd_to_decimal(date);
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fef9 	bl	80017dc <bcd_to_decimal>
 80019ea:	4603      	mov	r3, r0
 80019ec:	461a      	mov	r2, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	701a      	strb	r2, [r3, #0]
	ds1307_date->month = bcd_to_decimal(month);
 80019f2:	7bbb      	ldrb	r3, [r7, #14]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fef1 	bl	80017dc <bcd_to_decimal>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	705a      	strb	r2, [r3, #1]
	ds1307_date->year = bcd_to_decimal(year);
 8001a02:	7b7b      	ldrb	r3, [r7, #13]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fee9 	bl	80017dc <bcd_to_decimal>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	709a      	strb	r2, [r3, #2]
}
 8001a12:	bf00      	nop
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
	...

08001a1c <main>:
void I2C_USER_INIT(void);
void GPIO_USER_INIT(void);
void TIMER_USER_INIT(void);
const char* get_day_name(uint8_t day);

int main(void) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af02      	add	r7, sp, #8
	GPIO_USER_INIT();
 8001a22:	f000 f8d9 	bl	8001bd8 <GPIO_USER_INIT>
	I2C_USER_INIT();
 8001a26:	f000 f8b5 	bl	8001b94 <I2C_USER_INIT>
	TIMER_USER_INIT();
 8001a2a:	f000 f90d 	bl	8001c48 <TIMER_USER_INIT>

	printf("Starting DS1307 initialization...\r\n");
 8001a2e:	4830      	ldr	r0, [pc, #192]	@ (8001af0 <main+0xd4>)
 8001a30:	f000 ffba 	bl	80029a8 <puts>

	// Initialize DS1307
	if (DS1307_INIT(&I2C_Handle) == 0) {
 8001a34:	482f      	ldr	r0, [pc, #188]	@ (8001af4 <main+0xd8>)
 8001a36:	f7ff ff21 	bl	800187c <DS1307_INIT>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d10b      	bne.n	8001a58 <main+0x3c>
		printf("DS1307 initialized successfully!\r\n");
 8001a40:	482d      	ldr	r0, [pc, #180]	@ (8001af8 <main+0xdc>)
 8001a42:	f000 ffb1 	bl	80029a8 <puts>
//	printf("Date set to: %s, %02d/%02d/20%02d\r\n", get_day_name(set_date.day),
//			set_date.date, set_date.month, set_date.year);
//
//	delay_ms(&TIM_Handle, 2000); // Wait 2 seconds

	printf("\r\n--- Reading Time and Date ---\r\n");
 8001a46:	482d      	ldr	r0, [pc, #180]	@ (8001afc <main+0xe0>)
 8001a48:	f000 ffae 	bl	80029a8 <puts>

	uint32_t previousMillis = 0;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
	const uint32_t interval = 1000; // 1 second in milliseconds
 8001a50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e004      	b.n	8001a62 <main+0x46>
		printf("DS1307 initialization FAILED!\r\n");
 8001a58:	4829      	ldr	r0, [pc, #164]	@ (8001b00 <main+0xe4>)
 8001a5a:	f000 ffa5 	bl	80029a8 <puts>
		while (1)
 8001a5e:	bf00      	nop
 8001a60:	e7fd      	b.n	8001a5e <main+0x42>

	// Read back the time and date continuously
	while (1) {
		uint32_t currentMillis = millis();
 8001a62:	f7ff fe8f 	bl	8001784 <millis>
 8001a66:	60f8      	str	r0, [r7, #12]

		// Non-blocking time display using millis()
		if (currentMillis - previousMillis >= interval) {
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f6      	bhi.n	8001a62 <main+0x46>
			previousMillis = currentMillis;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	617b      	str	r3, [r7, #20]

			DS1307_time_t current_time;
			DS1307_date_t current_date;

			DS1307_GET_TIME(&I2C_Handle, &current_time);
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481d      	ldr	r0, [pc, #116]	@ (8001af4 <main+0xd8>)
 8001a80:	f7ff ff29 	bl	80018d6 <DS1307_GET_TIME>
			DS1307_GET_DATE(&I2C_Handle, &current_date);
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	4619      	mov	r1, r3
 8001a88:	481a      	ldr	r0, [pc, #104]	@ (8001af4 <main+0xd8>)
 8001a8a:	f7ff ff86 	bl	800199a <DS1307_GET_DATE>

			// Display date
			printf("Date: %s, %02d/%02d/20%02d | ",
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f83f 	bl	8001b14 <get_day_name>
 8001a96:	4601      	mov	r1, r0
					get_day_name(current_date.day), current_date.date,
 8001a98:	793b      	ldrb	r3, [r7, #4]
			printf("Date: %s, %02d/%02d/20%02d | ",
 8001a9a:	461a      	mov	r2, r3
					current_date.month, current_date.year);
 8001a9c:	797b      	ldrb	r3, [r7, #5]
			printf("Date: %s, %02d/%02d/20%02d | ",
 8001a9e:	4618      	mov	r0, r3
					current_date.month, current_date.year);
 8001aa0:	79bb      	ldrb	r3, [r7, #6]
			printf("Date: %s, %02d/%02d/20%02d | ",
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	4817      	ldr	r0, [pc, #92]	@ (8001b04 <main+0xe8>)
 8001aa8:	f000 ff16 	bl	80028d8 <iprintf>

			// Display time based on format
			if (current_time.time_format == DS1307_TIME_FORMAT_12HRS_AM) {
 8001aac:	7afb      	ldrb	r3, [r7, #11]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d108      	bne.n	8001ac4 <main+0xa8>
				printf("Time: %02d:%02d:%02d AM\r\n", current_time.hours,
 8001ab2:	7abb      	ldrb	r3, [r7, #10]
 8001ab4:	4619      	mov	r1, r3
						current_time.minutes, current_time.seconds);
 8001ab6:	7a7b      	ldrb	r3, [r7, #9]
				printf("Time: %02d:%02d:%02d AM\r\n", current_time.hours,
 8001ab8:	461a      	mov	r2, r3
						current_time.minutes, current_time.seconds);
 8001aba:	7a3b      	ldrb	r3, [r7, #8]
				printf("Time: %02d:%02d:%02d AM\r\n", current_time.hours,
 8001abc:	4812      	ldr	r0, [pc, #72]	@ (8001b08 <main+0xec>)
 8001abe:	f000 ff0b 	bl	80028d8 <iprintf>
 8001ac2:	e7ce      	b.n	8001a62 <main+0x46>
			} else if (current_time.time_format == DS1307_TIME_FORMAT_12HRS_PM) {
 8001ac4:	7afb      	ldrb	r3, [r7, #11]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d108      	bne.n	8001adc <main+0xc0>
				printf("Time: %02d:%02d:%02d PM\r\n", current_time.hours,
 8001aca:	7abb      	ldrb	r3, [r7, #10]
 8001acc:	4619      	mov	r1, r3
						current_time.minutes, current_time.seconds);
 8001ace:	7a7b      	ldrb	r3, [r7, #9]
				printf("Time: %02d:%02d:%02d PM\r\n", current_time.hours,
 8001ad0:	461a      	mov	r2, r3
						current_time.minutes, current_time.seconds);
 8001ad2:	7a3b      	ldrb	r3, [r7, #8]
				printf("Time: %02d:%02d:%02d PM\r\n", current_time.hours,
 8001ad4:	480d      	ldr	r0, [pc, #52]	@ (8001b0c <main+0xf0>)
 8001ad6:	f000 feff 	bl	80028d8 <iprintf>
 8001ada:	e7c2      	b.n	8001a62 <main+0x46>
			} else {
				printf("Time: %02d:%02d:%02d (24H)\r\n", current_time.hours,
 8001adc:	7abb      	ldrb	r3, [r7, #10]
 8001ade:	4619      	mov	r1, r3
						current_time.minutes, current_time.seconds);
 8001ae0:	7a7b      	ldrb	r3, [r7, #9]
				printf("Time: %02d:%02d:%02d (24H)\r\n", current_time.hours,
 8001ae2:	461a      	mov	r2, r3
						current_time.minutes, current_time.seconds);
 8001ae4:	7a3b      	ldrb	r3, [r7, #8]
				printf("Time: %02d:%02d:%02d (24H)\r\n", current_time.hours,
 8001ae6:	480a      	ldr	r0, [pc, #40]	@ (8001b10 <main+0xf4>)
 8001ae8:	f000 fef6 	bl	80028d8 <iprintf>
	while (1) {
 8001aec:	e7b9      	b.n	8001a62 <main+0x46>
 8001aee:	bf00      	nop
 8001af0:	080048d8 	.word	0x080048d8
 8001af4:	200001ec 	.word	0x200001ec
 8001af8:	080048fc 	.word	0x080048fc
 8001afc:	08004940 	.word	0x08004940
 8001b00:	08004920 	.word	0x08004920
 8001b04:	08004964 	.word	0x08004964
 8001b08:	08004984 	.word	0x08004984
 8001b0c:	080049a0 	.word	0x080049a0
 8001b10:	080049bc 	.word	0x080049bc

08001b14 <get_day_name>:

		// Your other code can run here without blocking!
	}
}

const char* get_day_name(uint8_t day) {
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	switch (day) {
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	2b06      	cmp	r3, #6
 8001b24:	d81e      	bhi.n	8001b64 <get_day_name+0x50>
 8001b26:	a201      	add	r2, pc, #4	@ (adr r2, 8001b2c <get_day_name+0x18>)
 8001b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b2c:	08001b49 	.word	0x08001b49
 8001b30:	08001b4d 	.word	0x08001b4d
 8001b34:	08001b51 	.word	0x08001b51
 8001b38:	08001b55 	.word	0x08001b55
 8001b3c:	08001b59 	.word	0x08001b59
 8001b40:	08001b5d 	.word	0x08001b5d
 8001b44:	08001b61 	.word	0x08001b61
	case SUNDAY:
		return "Sunday";
 8001b48:	4b0a      	ldr	r3, [pc, #40]	@ (8001b74 <get_day_name+0x60>)
 8001b4a:	e00c      	b.n	8001b66 <get_day_name+0x52>
	case MONDAY:
		return "Monday";
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b78 <get_day_name+0x64>)
 8001b4e:	e00a      	b.n	8001b66 <get_day_name+0x52>
	case TUESDAY:
		return "Tuesday";
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <get_day_name+0x68>)
 8001b52:	e008      	b.n	8001b66 <get_day_name+0x52>
	case WEDNESDAY:
		return "Wednesday";
 8001b54:	4b0a      	ldr	r3, [pc, #40]	@ (8001b80 <get_day_name+0x6c>)
 8001b56:	e006      	b.n	8001b66 <get_day_name+0x52>
	case THURSDAY:
		return "Thursday";
 8001b58:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <get_day_name+0x70>)
 8001b5a:	e004      	b.n	8001b66 <get_day_name+0x52>
	case FRIDAY:
		return "Friday";
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001b88 <get_day_name+0x74>)
 8001b5e:	e002      	b.n	8001b66 <get_day_name+0x52>
	case SATURDAY:
		return "Saturday";
 8001b60:	4b0a      	ldr	r3, [pc, #40]	@ (8001b8c <get_day_name+0x78>)
 8001b62:	e000      	b.n	8001b66 <get_day_name+0x52>
	default:
		return "Unknown";
 8001b64:	4b0a      	ldr	r3, [pc, #40]	@ (8001b90 <get_day_name+0x7c>)
	}
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	080049dc 	.word	0x080049dc
 8001b78:	080049e4 	.word	0x080049e4
 8001b7c:	080049ec 	.word	0x080049ec
 8001b80:	080049f4 	.word	0x080049f4
 8001b84:	08004a00 	.word	0x08004a00
 8001b88:	08004a0c 	.word	0x08004a0c
 8001b8c:	08004a14 	.word	0x08004a14
 8001b90:	08004a20 	.word	0x08004a20

08001b94 <I2C_USER_INIT>:

void I2C_USER_INIT(void) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	I2C_Handle.I2Cx = I2C1;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	@ (8001bcc <I2C_USER_INIT+0x38>)
 8001b9a:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <I2C_USER_INIT+0x3c>)
 8001b9c:	601a      	str	r2, [r3, #0]
	I2C_Handle.MasterOrSlave = I2C_Master_Mode;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001bcc <I2C_USER_INIT+0x38>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	715a      	strb	r2, [r3, #5]
	I2C_Handle.ack_en = I2C_ACK_EN;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	@ (8001bcc <I2C_USER_INIT+0x38>)
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	735a      	strb	r2, [r3, #13]
	I2C_Handle.address = 0x61;
 8001baa:	4b08      	ldr	r3, [pc, #32]	@ (8001bcc <I2C_USER_INIT+0x38>)
 8001bac:	2261      	movs	r2, #97	@ 0x61
 8001bae:	71da      	strb	r2, [r3, #7]
	I2C_Handle.address_select_bit = I2C_7_Bit_Adress;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	@ (8001bcc <I2C_USER_INIT+0x38>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	719a      	strb	r2, [r3, #6]
	I2C_Handle.mode = I2C_Standard_Mode;
 8001bb6:	4b05      	ldr	r3, [pc, #20]	@ (8001bcc <I2C_USER_INIT+0x38>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	711a      	strb	r2, [r3, #4]
	I2C_Handle.scl_speed = I2C_SCL_SPEED_100;
 8001bbc:	4b03      	ldr	r3, [pc, #12]	@ (8001bcc <I2C_USER_INIT+0x38>)
 8001bbe:	4a05      	ldr	r2, [pc, #20]	@ (8001bd4 <I2C_USER_INIT+0x40>)
 8001bc0:	609a      	str	r2, [r3, #8]
	I2C_INIT(&I2C_Handle);
 8001bc2:	4802      	ldr	r0, [pc, #8]	@ (8001bcc <I2C_USER_INIT+0x38>)
 8001bc4:	f7ff fa7e 	bl	80010c4 <I2C_INIT>
}
 8001bc8:	bf00      	nop
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	200001ec 	.word	0x200001ec
 8001bd0:	40005400 	.word	0x40005400
 8001bd4:	000186a0 	.word	0x000186a0

08001bd8 <GPIO_USER_INIT>:

void GPIO_USER_INIT(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001bde:	4a18      	ldr	r2, [pc, #96]	@ (8001c40 <GPIO_USER_INIT+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8001bf4:	4811      	ldr	r0, [pc, #68]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001bf6:	f7ff f83d 	bl	8000c74 <GPIO_INIT>

	// PB6 - I2C1_SCL
	GPIO_Handle.GPIOX = GPIOB;
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001bfc:	4a11      	ldr	r2, [pc, #68]	@ (8001c44 <GPIO_USER_INIT+0x6c>)
 8001bfe:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c02:	2202      	movs	r2, #2
 8001c04:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c08:	2203      	movs	r2, #3
 8001c0a:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_OD;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pin_number = GPIO_PIN_6;
 8001c12:	4b0a      	ldr	r3, [pc, #40]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c14:	2206      	movs	r2, #6
 8001c16:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	719a      	strb	r2, [r3, #6]
	GPIO_Handle.alternate_function_select = GPIO_AF4;
 8001c1e:	4b07      	ldr	r3, [pc, #28]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c20:	2204      	movs	r2, #4
 8001c22:	725a      	strb	r2, [r3, #9]
	GPIO_INIT(&GPIO_Handle);
 8001c24:	4805      	ldr	r0, [pc, #20]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c26:	f7ff f825 	bl	8000c74 <GPIO_INIT>

	// PB9 - I2C1_SDA
	GPIO_Handle.pin_number = GPIO_PIN_9;
 8001c2a:	4b04      	ldr	r3, [pc, #16]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c2c:	2209      	movs	r2, #9
 8001c2e:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <GPIO_USER_INIT+0x64>)
 8001c32:	f7ff f81f 	bl	8000c74 <GPIO_INIT>
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	200001fc 	.word	0x200001fc
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020400 	.word	0x40020400

08001c48 <TIMER_USER_INIT>:

void TIMER_USER_INIT(void) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	TIM_Handle.TIMx = TIM2;
 8001c4c:	4b05      	ldr	r3, [pc, #20]	@ (8001c64 <TIMER_USER_INIT+0x1c>)
 8001c4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c52:	601a      	str	r2, [r3, #0]
	TIM_MILLIS_INIT(&TIM_Handle);
 8001c54:	4803      	ldr	r0, [pc, #12]	@ (8001c64 <TIMER_USER_INIT+0x1c>)
 8001c56:	f7ff fd4f 	bl	80016f8 <TIM_MILLIS_INIT>
	TIM_ENABLE(&TIM_Handle);
 8001c5a:	4802      	ldr	r0, [pc, #8]	@ (8001c64 <TIMER_USER_INIT+0x1c>)
 8001c5c:	f7ff fc94 	bl	8001588 <TIM_ENABLE>
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000208 	.word	0x20000208

08001c68 <TIM2_IRQHandler>:

// Interrupt handler
void TIM2_IRQHandler(void) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	TIM_Handling(&TIM_Handle);
 8001c6c:	4802      	ldr	r0, [pc, #8]	@ (8001c78 <TIM2_IRQHandler+0x10>)
 8001c6e:	f7ff fd95 	bl	800179c <TIM_Handling>
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000208 	.word	0x20000208

08001c7c <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 8001c86:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <ITM_SendChar+0x48>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001cc4 <ITM_SendChar+0x48>)
 8001c8c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c90:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 8001c92:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc8 <ITM_SendChar+0x4c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a0c      	ldr	r2, [pc, #48]	@ (8001cc8 <ITM_SendChar+0x4c>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 8001c9e:	bf00      	nop
 8001ca0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0f8      	beq.n	8001ca0 <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001cae:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	6013      	str	r3, [r2, #0]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000edfc 	.word	0xe000edfc
 8001cc8:	e0000e00 	.word	0xe0000e00

08001ccc <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	return 1;
 8001cd0:	2301      	movs	r3, #1
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_kill>:

int _kill(int pid, int sig) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001ce6:	f000 ff91 	bl	8002c0c <__errno>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2216      	movs	r2, #22
 8001cee:	601a      	str	r2, [r3, #0]
	return -1;
 8001cf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <_exit>:

void _exit(int status) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d04:	f04f 31ff 	mov.w	r1, #4294967295
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f7ff ffe7 	bl	8001cdc <_kill>
	while (1) {
 8001d0e:	bf00      	nop
 8001d10:	e7fd      	b.n	8001d0e <_exit+0x12>

08001d12 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b086      	sub	sp, #24
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
 8001d22:	e00a      	b.n	8001d3a <_read+0x28>
		*ptr++ = __io_getchar();
 8001d24:	f3af 8000 	nop.w
 8001d28:	4601      	mov	r1, r0
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	60ba      	str	r2, [r7, #8]
 8001d30:	b2ca      	uxtb	r2, r1
 8001d32:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	dbf0      	blt.n	8001d24 <_read+0x12>
	}

	return len;
 8001d42:	687b      	ldr	r3, [r7, #4]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	e009      	b.n	8001d72 <_write+0x26>
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	60ba      	str	r2, [r7, #8]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff88 	bl	8001c7c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	617b      	str	r3, [r7, #20]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	dbf1      	blt.n	8001d5e <_write+0x12>
	}
	return len;
 8001d7a:	687b      	ldr	r3, [r7, #4]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_close>:

int _close(int file) {
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001d8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <_fstat>:

int _fstat(int file, struct stat *st) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001dac:	605a      	str	r2, [r3, #4]
	return 0;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <_isatty>:

int _isatty(int file) {
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001dc4:	2301      	movs	r3, #1
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	60f8      	str	r0, [r7, #12]
 8001dda:	60b9      	str	r1, [r7, #8]
 8001ddc:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df4:	4a14      	ldr	r2, [pc, #80]	@ (8001e48 <_sbrk+0x5c>)
 8001df6:	4b15      	ldr	r3, [pc, #84]	@ (8001e4c <_sbrk+0x60>)
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e00:	4b13      	ldr	r3, [pc, #76]	@ (8001e50 <_sbrk+0x64>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d102      	bne.n	8001e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e08:	4b11      	ldr	r3, [pc, #68]	@ (8001e50 <_sbrk+0x64>)
 8001e0a:	4a12      	ldr	r2, [pc, #72]	@ (8001e54 <_sbrk+0x68>)
 8001e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0e:	4b10      	ldr	r3, [pc, #64]	@ (8001e50 <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d207      	bcs.n	8001e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e1c:	f000 fef6 	bl	8002c0c <__errno>
 8001e20:	4603      	mov	r3, r0
 8001e22:	220c      	movs	r2, #12
 8001e24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e26:	f04f 33ff 	mov.w	r3, #4294967295
 8001e2a:	e009      	b.n	8001e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	@ (8001e50 <_sbrk+0x64>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e32:	4b07      	ldr	r3, [pc, #28]	@ (8001e50 <_sbrk+0x64>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	4a05      	ldr	r2, [pc, #20]	@ (8001e50 <_sbrk+0x64>)
 8001e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20020000 	.word	0x20020000
 8001e4c:	00000400 	.word	0x00000400
 8001e50:	20000240 	.word	0x20000240
 8001e54:	20000390 	.word	0x20000390

08001e58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e58:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e5c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e60:	480c      	ldr	r0, [pc, #48]	@ (8001e94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e62:	490d      	ldr	r1, [pc, #52]	@ (8001e98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e64:	4a0d      	ldr	r2, [pc, #52]	@ (8001e9c <LoopForever+0xe>)
  movs r3, #0
 8001e66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e68:	e002      	b.n	8001e70 <LoopCopyDataInit>

08001e6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e6e:	3304      	adds	r3, #4

08001e70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e74:	d3f9      	bcc.n	8001e6a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ea4 <LoopForever+0x16>)
  movs r3, #0
 8001e7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e7c:	e001      	b.n	8001e82 <LoopFillZerobss>

08001e7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e80:	3204      	adds	r2, #4

08001e82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e84:	d3fb      	bcc.n	8001e7e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e86:	f000 fec7 	bl	8002c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e8a:	f7ff fdc7 	bl	8001a1c <main>

08001e8e <LoopForever>:

LoopForever:
  b LoopForever
 8001e8e:	e7fe      	b.n	8001e8e <LoopForever>
  ldr   r0, =_estack
 8001e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e98:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8001e9c:	08004dac 	.word	0x08004dac
  ldr r2, =_sbss
 8001ea0:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001ea4:	20000390 	.word	0x20000390

08001ea8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ea8:	e7fe      	b.n	8001ea8 <ADC_IRQHandler>

08001eaa <__cvt>:
 8001eaa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001eae:	ec57 6b10 	vmov	r6, r7, d0
 8001eb2:	2f00      	cmp	r7, #0
 8001eb4:	460c      	mov	r4, r1
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	463b      	mov	r3, r7
 8001eba:	bfbb      	ittet	lt
 8001ebc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001ec0:	461f      	movlt	r7, r3
 8001ec2:	2300      	movge	r3, #0
 8001ec4:	232d      	movlt	r3, #45	@ 0x2d
 8001ec6:	700b      	strb	r3, [r1, #0]
 8001ec8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001eca:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001ece:	4691      	mov	r9, r2
 8001ed0:	f023 0820 	bic.w	r8, r3, #32
 8001ed4:	bfbc      	itt	lt
 8001ed6:	4632      	movlt	r2, r6
 8001ed8:	4616      	movlt	r6, r2
 8001eda:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001ede:	d005      	beq.n	8001eec <__cvt+0x42>
 8001ee0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001ee4:	d100      	bne.n	8001ee8 <__cvt+0x3e>
 8001ee6:	3401      	adds	r4, #1
 8001ee8:	2102      	movs	r1, #2
 8001eea:	e000      	b.n	8001eee <__cvt+0x44>
 8001eec:	2103      	movs	r1, #3
 8001eee:	ab03      	add	r3, sp, #12
 8001ef0:	9301      	str	r3, [sp, #4]
 8001ef2:	ab02      	add	r3, sp, #8
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	ec47 6b10 	vmov	d0, r6, r7
 8001efa:	4653      	mov	r3, sl
 8001efc:	4622      	mov	r2, r4
 8001efe:	f000 ff3b 	bl	8002d78 <_dtoa_r>
 8001f02:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001f06:	4605      	mov	r5, r0
 8001f08:	d119      	bne.n	8001f3e <__cvt+0x94>
 8001f0a:	f019 0f01 	tst.w	r9, #1
 8001f0e:	d00e      	beq.n	8001f2e <__cvt+0x84>
 8001f10:	eb00 0904 	add.w	r9, r0, r4
 8001f14:	2200      	movs	r2, #0
 8001f16:	2300      	movs	r3, #0
 8001f18:	4630      	mov	r0, r6
 8001f1a:	4639      	mov	r1, r7
 8001f1c:	f7fe fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f20:	b108      	cbz	r0, 8001f26 <__cvt+0x7c>
 8001f22:	f8cd 900c 	str.w	r9, [sp, #12]
 8001f26:	2230      	movs	r2, #48	@ 0x30
 8001f28:	9b03      	ldr	r3, [sp, #12]
 8001f2a:	454b      	cmp	r3, r9
 8001f2c:	d31e      	bcc.n	8001f6c <__cvt+0xc2>
 8001f2e:	9b03      	ldr	r3, [sp, #12]
 8001f30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001f32:	1b5b      	subs	r3, r3, r5
 8001f34:	4628      	mov	r0, r5
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	b004      	add	sp, #16
 8001f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f3e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001f42:	eb00 0904 	add.w	r9, r0, r4
 8001f46:	d1e5      	bne.n	8001f14 <__cvt+0x6a>
 8001f48:	7803      	ldrb	r3, [r0, #0]
 8001f4a:	2b30      	cmp	r3, #48	@ 0x30
 8001f4c:	d10a      	bne.n	8001f64 <__cvt+0xba>
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2300      	movs	r3, #0
 8001f52:	4630      	mov	r0, r6
 8001f54:	4639      	mov	r1, r7
 8001f56:	f7fe fdb7 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f5a:	b918      	cbnz	r0, 8001f64 <__cvt+0xba>
 8001f5c:	f1c4 0401 	rsb	r4, r4, #1
 8001f60:	f8ca 4000 	str.w	r4, [sl]
 8001f64:	f8da 3000 	ldr.w	r3, [sl]
 8001f68:	4499      	add	r9, r3
 8001f6a:	e7d3      	b.n	8001f14 <__cvt+0x6a>
 8001f6c:	1c59      	adds	r1, r3, #1
 8001f6e:	9103      	str	r1, [sp, #12]
 8001f70:	701a      	strb	r2, [r3, #0]
 8001f72:	e7d9      	b.n	8001f28 <__cvt+0x7e>

08001f74 <__exponent>:
 8001f74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f76:	2900      	cmp	r1, #0
 8001f78:	bfba      	itte	lt
 8001f7a:	4249      	neglt	r1, r1
 8001f7c:	232d      	movlt	r3, #45	@ 0x2d
 8001f7e:	232b      	movge	r3, #43	@ 0x2b
 8001f80:	2909      	cmp	r1, #9
 8001f82:	7002      	strb	r2, [r0, #0]
 8001f84:	7043      	strb	r3, [r0, #1]
 8001f86:	dd29      	ble.n	8001fdc <__exponent+0x68>
 8001f88:	f10d 0307 	add.w	r3, sp, #7
 8001f8c:	461d      	mov	r5, r3
 8001f8e:	270a      	movs	r7, #10
 8001f90:	461a      	mov	r2, r3
 8001f92:	fbb1 f6f7 	udiv	r6, r1, r7
 8001f96:	fb07 1416 	mls	r4, r7, r6, r1
 8001f9a:	3430      	adds	r4, #48	@ 0x30
 8001f9c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	2c63      	cmp	r4, #99	@ 0x63
 8001fa4:	f103 33ff 	add.w	r3, r3, #4294967295
 8001fa8:	4631      	mov	r1, r6
 8001faa:	dcf1      	bgt.n	8001f90 <__exponent+0x1c>
 8001fac:	3130      	adds	r1, #48	@ 0x30
 8001fae:	1e94      	subs	r4, r2, #2
 8001fb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001fb4:	1c41      	adds	r1, r0, #1
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	42ab      	cmp	r3, r5
 8001fba:	d30a      	bcc.n	8001fd2 <__exponent+0x5e>
 8001fbc:	f10d 0309 	add.w	r3, sp, #9
 8001fc0:	1a9b      	subs	r3, r3, r2
 8001fc2:	42ac      	cmp	r4, r5
 8001fc4:	bf88      	it	hi
 8001fc6:	2300      	movhi	r3, #0
 8001fc8:	3302      	adds	r3, #2
 8001fca:	4403      	add	r3, r0
 8001fcc:	1a18      	subs	r0, r3, r0
 8001fce:	b003      	add	sp, #12
 8001fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fd2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001fd6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001fda:	e7ed      	b.n	8001fb8 <__exponent+0x44>
 8001fdc:	2330      	movs	r3, #48	@ 0x30
 8001fde:	3130      	adds	r1, #48	@ 0x30
 8001fe0:	7083      	strb	r3, [r0, #2]
 8001fe2:	70c1      	strb	r1, [r0, #3]
 8001fe4:	1d03      	adds	r3, r0, #4
 8001fe6:	e7f1      	b.n	8001fcc <__exponent+0x58>

08001fe8 <_printf_float>:
 8001fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fec:	b08d      	sub	sp, #52	@ 0x34
 8001fee:	460c      	mov	r4, r1
 8001ff0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001ff4:	4616      	mov	r6, r2
 8001ff6:	461f      	mov	r7, r3
 8001ff8:	4605      	mov	r5, r0
 8001ffa:	f000 fdbd 	bl	8002b78 <_localeconv_r>
 8001ffe:	6803      	ldr	r3, [r0, #0]
 8002000:	9304      	str	r3, [sp, #16]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe f934 	bl	8000270 <strlen>
 8002008:	2300      	movs	r3, #0
 800200a:	930a      	str	r3, [sp, #40]	@ 0x28
 800200c:	f8d8 3000 	ldr.w	r3, [r8]
 8002010:	9005      	str	r0, [sp, #20]
 8002012:	3307      	adds	r3, #7
 8002014:	f023 0307 	bic.w	r3, r3, #7
 8002018:	f103 0208 	add.w	r2, r3, #8
 800201c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002020:	f8d4 b000 	ldr.w	fp, [r4]
 8002024:	f8c8 2000 	str.w	r2, [r8]
 8002028:	e9d3 8900 	ldrd	r8, r9, [r3]
 800202c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002030:	9307      	str	r3, [sp, #28]
 8002032:	f8cd 8018 	str.w	r8, [sp, #24]
 8002036:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800203a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800203e:	4b9c      	ldr	r3, [pc, #624]	@ (80022b0 <_printf_float+0x2c8>)
 8002040:	f04f 32ff 	mov.w	r2, #4294967295
 8002044:	f7fe fd72 	bl	8000b2c <__aeabi_dcmpun>
 8002048:	bb70      	cbnz	r0, 80020a8 <_printf_float+0xc0>
 800204a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800204e:	4b98      	ldr	r3, [pc, #608]	@ (80022b0 <_printf_float+0x2c8>)
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	f7fe fd4c 	bl	8000af0 <__aeabi_dcmple>
 8002058:	bb30      	cbnz	r0, 80020a8 <_printf_float+0xc0>
 800205a:	2200      	movs	r2, #0
 800205c:	2300      	movs	r3, #0
 800205e:	4640      	mov	r0, r8
 8002060:	4649      	mov	r1, r9
 8002062:	f7fe fd3b 	bl	8000adc <__aeabi_dcmplt>
 8002066:	b110      	cbz	r0, 800206e <_printf_float+0x86>
 8002068:	232d      	movs	r3, #45	@ 0x2d
 800206a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800206e:	4a91      	ldr	r2, [pc, #580]	@ (80022b4 <_printf_float+0x2cc>)
 8002070:	4b91      	ldr	r3, [pc, #580]	@ (80022b8 <_printf_float+0x2d0>)
 8002072:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002076:	bf8c      	ite	hi
 8002078:	4690      	movhi	r8, r2
 800207a:	4698      	movls	r8, r3
 800207c:	2303      	movs	r3, #3
 800207e:	6123      	str	r3, [r4, #16]
 8002080:	f02b 0304 	bic.w	r3, fp, #4
 8002084:	6023      	str	r3, [r4, #0]
 8002086:	f04f 0900 	mov.w	r9, #0
 800208a:	9700      	str	r7, [sp, #0]
 800208c:	4633      	mov	r3, r6
 800208e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002090:	4621      	mov	r1, r4
 8002092:	4628      	mov	r0, r5
 8002094:	f000 f9d2 	bl	800243c <_printf_common>
 8002098:	3001      	adds	r0, #1
 800209a:	f040 808d 	bne.w	80021b8 <_printf_float+0x1d0>
 800209e:	f04f 30ff 	mov.w	r0, #4294967295
 80020a2:	b00d      	add	sp, #52	@ 0x34
 80020a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020a8:	4642      	mov	r2, r8
 80020aa:	464b      	mov	r3, r9
 80020ac:	4640      	mov	r0, r8
 80020ae:	4649      	mov	r1, r9
 80020b0:	f7fe fd3c 	bl	8000b2c <__aeabi_dcmpun>
 80020b4:	b140      	cbz	r0, 80020c8 <_printf_float+0xe0>
 80020b6:	464b      	mov	r3, r9
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bfbc      	itt	lt
 80020bc:	232d      	movlt	r3, #45	@ 0x2d
 80020be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80020c2:	4a7e      	ldr	r2, [pc, #504]	@ (80022bc <_printf_float+0x2d4>)
 80020c4:	4b7e      	ldr	r3, [pc, #504]	@ (80022c0 <_printf_float+0x2d8>)
 80020c6:	e7d4      	b.n	8002072 <_printf_float+0x8a>
 80020c8:	6863      	ldr	r3, [r4, #4]
 80020ca:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80020ce:	9206      	str	r2, [sp, #24]
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	d13b      	bne.n	800214c <_printf_float+0x164>
 80020d4:	2306      	movs	r3, #6
 80020d6:	6063      	str	r3, [r4, #4]
 80020d8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80020dc:	2300      	movs	r3, #0
 80020de:	6022      	str	r2, [r4, #0]
 80020e0:	9303      	str	r3, [sp, #12]
 80020e2:	ab0a      	add	r3, sp, #40	@ 0x28
 80020e4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80020e8:	ab09      	add	r3, sp, #36	@ 0x24
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	6861      	ldr	r1, [r4, #4]
 80020ee:	ec49 8b10 	vmov	d0, r8, r9
 80020f2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80020f6:	4628      	mov	r0, r5
 80020f8:	f7ff fed7 	bl	8001eaa <__cvt>
 80020fc:	9b06      	ldr	r3, [sp, #24]
 80020fe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002100:	2b47      	cmp	r3, #71	@ 0x47
 8002102:	4680      	mov	r8, r0
 8002104:	d129      	bne.n	800215a <_printf_float+0x172>
 8002106:	1cc8      	adds	r0, r1, #3
 8002108:	db02      	blt.n	8002110 <_printf_float+0x128>
 800210a:	6863      	ldr	r3, [r4, #4]
 800210c:	4299      	cmp	r1, r3
 800210e:	dd41      	ble.n	8002194 <_printf_float+0x1ac>
 8002110:	f1aa 0a02 	sub.w	sl, sl, #2
 8002114:	fa5f fa8a 	uxtb.w	sl, sl
 8002118:	3901      	subs	r1, #1
 800211a:	4652      	mov	r2, sl
 800211c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002120:	9109      	str	r1, [sp, #36]	@ 0x24
 8002122:	f7ff ff27 	bl	8001f74 <__exponent>
 8002126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002128:	1813      	adds	r3, r2, r0
 800212a:	2a01      	cmp	r2, #1
 800212c:	4681      	mov	r9, r0
 800212e:	6123      	str	r3, [r4, #16]
 8002130:	dc02      	bgt.n	8002138 <_printf_float+0x150>
 8002132:	6822      	ldr	r2, [r4, #0]
 8002134:	07d2      	lsls	r2, r2, #31
 8002136:	d501      	bpl.n	800213c <_printf_float+0x154>
 8002138:	3301      	adds	r3, #1
 800213a:	6123      	str	r3, [r4, #16]
 800213c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0a2      	beq.n	800208a <_printf_float+0xa2>
 8002144:	232d      	movs	r3, #45	@ 0x2d
 8002146:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800214a:	e79e      	b.n	800208a <_printf_float+0xa2>
 800214c:	9a06      	ldr	r2, [sp, #24]
 800214e:	2a47      	cmp	r2, #71	@ 0x47
 8002150:	d1c2      	bne.n	80020d8 <_printf_float+0xf0>
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1c0      	bne.n	80020d8 <_printf_float+0xf0>
 8002156:	2301      	movs	r3, #1
 8002158:	e7bd      	b.n	80020d6 <_printf_float+0xee>
 800215a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800215e:	d9db      	bls.n	8002118 <_printf_float+0x130>
 8002160:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002164:	d118      	bne.n	8002198 <_printf_float+0x1b0>
 8002166:	2900      	cmp	r1, #0
 8002168:	6863      	ldr	r3, [r4, #4]
 800216a:	dd0b      	ble.n	8002184 <_printf_float+0x19c>
 800216c:	6121      	str	r1, [r4, #16]
 800216e:	b913      	cbnz	r3, 8002176 <_printf_float+0x18e>
 8002170:	6822      	ldr	r2, [r4, #0]
 8002172:	07d0      	lsls	r0, r2, #31
 8002174:	d502      	bpl.n	800217c <_printf_float+0x194>
 8002176:	3301      	adds	r3, #1
 8002178:	440b      	add	r3, r1
 800217a:	6123      	str	r3, [r4, #16]
 800217c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800217e:	f04f 0900 	mov.w	r9, #0
 8002182:	e7db      	b.n	800213c <_printf_float+0x154>
 8002184:	b913      	cbnz	r3, 800218c <_printf_float+0x1a4>
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	07d2      	lsls	r2, r2, #31
 800218a:	d501      	bpl.n	8002190 <_printf_float+0x1a8>
 800218c:	3302      	adds	r3, #2
 800218e:	e7f4      	b.n	800217a <_printf_float+0x192>
 8002190:	2301      	movs	r3, #1
 8002192:	e7f2      	b.n	800217a <_printf_float+0x192>
 8002194:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800219a:	4299      	cmp	r1, r3
 800219c:	db05      	blt.n	80021aa <_printf_float+0x1c2>
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	6121      	str	r1, [r4, #16]
 80021a2:	07d8      	lsls	r0, r3, #31
 80021a4:	d5ea      	bpl.n	800217c <_printf_float+0x194>
 80021a6:	1c4b      	adds	r3, r1, #1
 80021a8:	e7e7      	b.n	800217a <_printf_float+0x192>
 80021aa:	2900      	cmp	r1, #0
 80021ac:	bfd4      	ite	le
 80021ae:	f1c1 0202 	rsble	r2, r1, #2
 80021b2:	2201      	movgt	r2, #1
 80021b4:	4413      	add	r3, r2
 80021b6:	e7e0      	b.n	800217a <_printf_float+0x192>
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	055a      	lsls	r2, r3, #21
 80021bc:	d407      	bmi.n	80021ce <_printf_float+0x1e6>
 80021be:	6923      	ldr	r3, [r4, #16]
 80021c0:	4642      	mov	r2, r8
 80021c2:	4631      	mov	r1, r6
 80021c4:	4628      	mov	r0, r5
 80021c6:	47b8      	blx	r7
 80021c8:	3001      	adds	r0, #1
 80021ca:	d12b      	bne.n	8002224 <_printf_float+0x23c>
 80021cc:	e767      	b.n	800209e <_printf_float+0xb6>
 80021ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80021d2:	f240 80dd 	bls.w	8002390 <_printf_float+0x3a8>
 80021d6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80021da:	2200      	movs	r2, #0
 80021dc:	2300      	movs	r3, #0
 80021de:	f7fe fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d033      	beq.n	800224e <_printf_float+0x266>
 80021e6:	4a37      	ldr	r2, [pc, #220]	@ (80022c4 <_printf_float+0x2dc>)
 80021e8:	2301      	movs	r3, #1
 80021ea:	4631      	mov	r1, r6
 80021ec:	4628      	mov	r0, r5
 80021ee:	47b8      	blx	r7
 80021f0:	3001      	adds	r0, #1
 80021f2:	f43f af54 	beq.w	800209e <_printf_float+0xb6>
 80021f6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80021fa:	4543      	cmp	r3, r8
 80021fc:	db02      	blt.n	8002204 <_printf_float+0x21c>
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	07d8      	lsls	r0, r3, #31
 8002202:	d50f      	bpl.n	8002224 <_printf_float+0x23c>
 8002204:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002208:	4631      	mov	r1, r6
 800220a:	4628      	mov	r0, r5
 800220c:	47b8      	blx	r7
 800220e:	3001      	adds	r0, #1
 8002210:	f43f af45 	beq.w	800209e <_printf_float+0xb6>
 8002214:	f04f 0900 	mov.w	r9, #0
 8002218:	f108 38ff 	add.w	r8, r8, #4294967295
 800221c:	f104 0a1a 	add.w	sl, r4, #26
 8002220:	45c8      	cmp	r8, r9
 8002222:	dc09      	bgt.n	8002238 <_printf_float+0x250>
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	079b      	lsls	r3, r3, #30
 8002228:	f100 8103 	bmi.w	8002432 <_printf_float+0x44a>
 800222c:	68e0      	ldr	r0, [r4, #12]
 800222e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002230:	4298      	cmp	r0, r3
 8002232:	bfb8      	it	lt
 8002234:	4618      	movlt	r0, r3
 8002236:	e734      	b.n	80020a2 <_printf_float+0xba>
 8002238:	2301      	movs	r3, #1
 800223a:	4652      	mov	r2, sl
 800223c:	4631      	mov	r1, r6
 800223e:	4628      	mov	r0, r5
 8002240:	47b8      	blx	r7
 8002242:	3001      	adds	r0, #1
 8002244:	f43f af2b 	beq.w	800209e <_printf_float+0xb6>
 8002248:	f109 0901 	add.w	r9, r9, #1
 800224c:	e7e8      	b.n	8002220 <_printf_float+0x238>
 800224e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002250:	2b00      	cmp	r3, #0
 8002252:	dc39      	bgt.n	80022c8 <_printf_float+0x2e0>
 8002254:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <_printf_float+0x2dc>)
 8002256:	2301      	movs	r3, #1
 8002258:	4631      	mov	r1, r6
 800225a:	4628      	mov	r0, r5
 800225c:	47b8      	blx	r7
 800225e:	3001      	adds	r0, #1
 8002260:	f43f af1d 	beq.w	800209e <_printf_float+0xb6>
 8002264:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002268:	ea59 0303 	orrs.w	r3, r9, r3
 800226c:	d102      	bne.n	8002274 <_printf_float+0x28c>
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	07d9      	lsls	r1, r3, #31
 8002272:	d5d7      	bpl.n	8002224 <_printf_float+0x23c>
 8002274:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002278:	4631      	mov	r1, r6
 800227a:	4628      	mov	r0, r5
 800227c:	47b8      	blx	r7
 800227e:	3001      	adds	r0, #1
 8002280:	f43f af0d 	beq.w	800209e <_printf_float+0xb6>
 8002284:	f04f 0a00 	mov.w	sl, #0
 8002288:	f104 0b1a 	add.w	fp, r4, #26
 800228c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800228e:	425b      	negs	r3, r3
 8002290:	4553      	cmp	r3, sl
 8002292:	dc01      	bgt.n	8002298 <_printf_float+0x2b0>
 8002294:	464b      	mov	r3, r9
 8002296:	e793      	b.n	80021c0 <_printf_float+0x1d8>
 8002298:	2301      	movs	r3, #1
 800229a:	465a      	mov	r2, fp
 800229c:	4631      	mov	r1, r6
 800229e:	4628      	mov	r0, r5
 80022a0:	47b8      	blx	r7
 80022a2:	3001      	adds	r0, #1
 80022a4:	f43f aefb 	beq.w	800209e <_printf_float+0xb6>
 80022a8:	f10a 0a01 	add.w	sl, sl, #1
 80022ac:	e7ee      	b.n	800228c <_printf_float+0x2a4>
 80022ae:	bf00      	nop
 80022b0:	7fefffff 	.word	0x7fefffff
 80022b4:	08004a2c 	.word	0x08004a2c
 80022b8:	08004a28 	.word	0x08004a28
 80022bc:	08004a34 	.word	0x08004a34
 80022c0:	08004a30 	.word	0x08004a30
 80022c4:	08004a38 	.word	0x08004a38
 80022c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80022ca:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80022ce:	4553      	cmp	r3, sl
 80022d0:	bfa8      	it	ge
 80022d2:	4653      	movge	r3, sl
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	4699      	mov	r9, r3
 80022d8:	dc36      	bgt.n	8002348 <_printf_float+0x360>
 80022da:	f04f 0b00 	mov.w	fp, #0
 80022de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022e2:	f104 021a 	add.w	r2, r4, #26
 80022e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80022e8:	9306      	str	r3, [sp, #24]
 80022ea:	eba3 0309 	sub.w	r3, r3, r9
 80022ee:	455b      	cmp	r3, fp
 80022f0:	dc31      	bgt.n	8002356 <_printf_float+0x36e>
 80022f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022f4:	459a      	cmp	sl, r3
 80022f6:	dc3a      	bgt.n	800236e <_printf_float+0x386>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	07da      	lsls	r2, r3, #31
 80022fc:	d437      	bmi.n	800236e <_printf_float+0x386>
 80022fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002300:	ebaa 0903 	sub.w	r9, sl, r3
 8002304:	9b06      	ldr	r3, [sp, #24]
 8002306:	ebaa 0303 	sub.w	r3, sl, r3
 800230a:	4599      	cmp	r9, r3
 800230c:	bfa8      	it	ge
 800230e:	4699      	movge	r9, r3
 8002310:	f1b9 0f00 	cmp.w	r9, #0
 8002314:	dc33      	bgt.n	800237e <_printf_float+0x396>
 8002316:	f04f 0800 	mov.w	r8, #0
 800231a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800231e:	f104 0b1a 	add.w	fp, r4, #26
 8002322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002324:	ebaa 0303 	sub.w	r3, sl, r3
 8002328:	eba3 0309 	sub.w	r3, r3, r9
 800232c:	4543      	cmp	r3, r8
 800232e:	f77f af79 	ble.w	8002224 <_printf_float+0x23c>
 8002332:	2301      	movs	r3, #1
 8002334:	465a      	mov	r2, fp
 8002336:	4631      	mov	r1, r6
 8002338:	4628      	mov	r0, r5
 800233a:	47b8      	blx	r7
 800233c:	3001      	adds	r0, #1
 800233e:	f43f aeae 	beq.w	800209e <_printf_float+0xb6>
 8002342:	f108 0801 	add.w	r8, r8, #1
 8002346:	e7ec      	b.n	8002322 <_printf_float+0x33a>
 8002348:	4642      	mov	r2, r8
 800234a:	4631      	mov	r1, r6
 800234c:	4628      	mov	r0, r5
 800234e:	47b8      	blx	r7
 8002350:	3001      	adds	r0, #1
 8002352:	d1c2      	bne.n	80022da <_printf_float+0x2f2>
 8002354:	e6a3      	b.n	800209e <_printf_float+0xb6>
 8002356:	2301      	movs	r3, #1
 8002358:	4631      	mov	r1, r6
 800235a:	4628      	mov	r0, r5
 800235c:	9206      	str	r2, [sp, #24]
 800235e:	47b8      	blx	r7
 8002360:	3001      	adds	r0, #1
 8002362:	f43f ae9c 	beq.w	800209e <_printf_float+0xb6>
 8002366:	9a06      	ldr	r2, [sp, #24]
 8002368:	f10b 0b01 	add.w	fp, fp, #1
 800236c:	e7bb      	b.n	80022e6 <_printf_float+0x2fe>
 800236e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002372:	4631      	mov	r1, r6
 8002374:	4628      	mov	r0, r5
 8002376:	47b8      	blx	r7
 8002378:	3001      	adds	r0, #1
 800237a:	d1c0      	bne.n	80022fe <_printf_float+0x316>
 800237c:	e68f      	b.n	800209e <_printf_float+0xb6>
 800237e:	9a06      	ldr	r2, [sp, #24]
 8002380:	464b      	mov	r3, r9
 8002382:	4442      	add	r2, r8
 8002384:	4631      	mov	r1, r6
 8002386:	4628      	mov	r0, r5
 8002388:	47b8      	blx	r7
 800238a:	3001      	adds	r0, #1
 800238c:	d1c3      	bne.n	8002316 <_printf_float+0x32e>
 800238e:	e686      	b.n	800209e <_printf_float+0xb6>
 8002390:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002394:	f1ba 0f01 	cmp.w	sl, #1
 8002398:	dc01      	bgt.n	800239e <_printf_float+0x3b6>
 800239a:	07db      	lsls	r3, r3, #31
 800239c:	d536      	bpl.n	800240c <_printf_float+0x424>
 800239e:	2301      	movs	r3, #1
 80023a0:	4642      	mov	r2, r8
 80023a2:	4631      	mov	r1, r6
 80023a4:	4628      	mov	r0, r5
 80023a6:	47b8      	blx	r7
 80023a8:	3001      	adds	r0, #1
 80023aa:	f43f ae78 	beq.w	800209e <_printf_float+0xb6>
 80023ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80023b2:	4631      	mov	r1, r6
 80023b4:	4628      	mov	r0, r5
 80023b6:	47b8      	blx	r7
 80023b8:	3001      	adds	r0, #1
 80023ba:	f43f ae70 	beq.w	800209e <_printf_float+0xb6>
 80023be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80023c2:	2200      	movs	r2, #0
 80023c4:	2300      	movs	r3, #0
 80023c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80023ca:	f7fe fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80023ce:	b9c0      	cbnz	r0, 8002402 <_printf_float+0x41a>
 80023d0:	4653      	mov	r3, sl
 80023d2:	f108 0201 	add.w	r2, r8, #1
 80023d6:	4631      	mov	r1, r6
 80023d8:	4628      	mov	r0, r5
 80023da:	47b8      	blx	r7
 80023dc:	3001      	adds	r0, #1
 80023de:	d10c      	bne.n	80023fa <_printf_float+0x412>
 80023e0:	e65d      	b.n	800209e <_printf_float+0xb6>
 80023e2:	2301      	movs	r3, #1
 80023e4:	465a      	mov	r2, fp
 80023e6:	4631      	mov	r1, r6
 80023e8:	4628      	mov	r0, r5
 80023ea:	47b8      	blx	r7
 80023ec:	3001      	adds	r0, #1
 80023ee:	f43f ae56 	beq.w	800209e <_printf_float+0xb6>
 80023f2:	f108 0801 	add.w	r8, r8, #1
 80023f6:	45d0      	cmp	r8, sl
 80023f8:	dbf3      	blt.n	80023e2 <_printf_float+0x3fa>
 80023fa:	464b      	mov	r3, r9
 80023fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002400:	e6df      	b.n	80021c2 <_printf_float+0x1da>
 8002402:	f04f 0800 	mov.w	r8, #0
 8002406:	f104 0b1a 	add.w	fp, r4, #26
 800240a:	e7f4      	b.n	80023f6 <_printf_float+0x40e>
 800240c:	2301      	movs	r3, #1
 800240e:	4642      	mov	r2, r8
 8002410:	e7e1      	b.n	80023d6 <_printf_float+0x3ee>
 8002412:	2301      	movs	r3, #1
 8002414:	464a      	mov	r2, r9
 8002416:	4631      	mov	r1, r6
 8002418:	4628      	mov	r0, r5
 800241a:	47b8      	blx	r7
 800241c:	3001      	adds	r0, #1
 800241e:	f43f ae3e 	beq.w	800209e <_printf_float+0xb6>
 8002422:	f108 0801 	add.w	r8, r8, #1
 8002426:	68e3      	ldr	r3, [r4, #12]
 8002428:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800242a:	1a5b      	subs	r3, r3, r1
 800242c:	4543      	cmp	r3, r8
 800242e:	dcf0      	bgt.n	8002412 <_printf_float+0x42a>
 8002430:	e6fc      	b.n	800222c <_printf_float+0x244>
 8002432:	f04f 0800 	mov.w	r8, #0
 8002436:	f104 0919 	add.w	r9, r4, #25
 800243a:	e7f4      	b.n	8002426 <_printf_float+0x43e>

0800243c <_printf_common>:
 800243c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002440:	4616      	mov	r6, r2
 8002442:	4698      	mov	r8, r3
 8002444:	688a      	ldr	r2, [r1, #8]
 8002446:	690b      	ldr	r3, [r1, #16]
 8002448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800244c:	4293      	cmp	r3, r2
 800244e:	bfb8      	it	lt
 8002450:	4613      	movlt	r3, r2
 8002452:	6033      	str	r3, [r6, #0]
 8002454:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002458:	4607      	mov	r7, r0
 800245a:	460c      	mov	r4, r1
 800245c:	b10a      	cbz	r2, 8002462 <_printf_common+0x26>
 800245e:	3301      	adds	r3, #1
 8002460:	6033      	str	r3, [r6, #0]
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	0699      	lsls	r1, r3, #26
 8002466:	bf42      	ittt	mi
 8002468:	6833      	ldrmi	r3, [r6, #0]
 800246a:	3302      	addmi	r3, #2
 800246c:	6033      	strmi	r3, [r6, #0]
 800246e:	6825      	ldr	r5, [r4, #0]
 8002470:	f015 0506 	ands.w	r5, r5, #6
 8002474:	d106      	bne.n	8002484 <_printf_common+0x48>
 8002476:	f104 0a19 	add.w	sl, r4, #25
 800247a:	68e3      	ldr	r3, [r4, #12]
 800247c:	6832      	ldr	r2, [r6, #0]
 800247e:	1a9b      	subs	r3, r3, r2
 8002480:	42ab      	cmp	r3, r5
 8002482:	dc26      	bgt.n	80024d2 <_printf_common+0x96>
 8002484:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002488:	6822      	ldr	r2, [r4, #0]
 800248a:	3b00      	subs	r3, #0
 800248c:	bf18      	it	ne
 800248e:	2301      	movne	r3, #1
 8002490:	0692      	lsls	r2, r2, #26
 8002492:	d42b      	bmi.n	80024ec <_printf_common+0xb0>
 8002494:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002498:	4641      	mov	r1, r8
 800249a:	4638      	mov	r0, r7
 800249c:	47c8      	blx	r9
 800249e:	3001      	adds	r0, #1
 80024a0:	d01e      	beq.n	80024e0 <_printf_common+0xa4>
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	6922      	ldr	r2, [r4, #16]
 80024a6:	f003 0306 	and.w	r3, r3, #6
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf02      	ittt	eq
 80024ae:	68e5      	ldreq	r5, [r4, #12]
 80024b0:	6833      	ldreq	r3, [r6, #0]
 80024b2:	1aed      	subeq	r5, r5, r3
 80024b4:	68a3      	ldr	r3, [r4, #8]
 80024b6:	bf0c      	ite	eq
 80024b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024bc:	2500      	movne	r5, #0
 80024be:	4293      	cmp	r3, r2
 80024c0:	bfc4      	itt	gt
 80024c2:	1a9b      	subgt	r3, r3, r2
 80024c4:	18ed      	addgt	r5, r5, r3
 80024c6:	2600      	movs	r6, #0
 80024c8:	341a      	adds	r4, #26
 80024ca:	42b5      	cmp	r5, r6
 80024cc:	d11a      	bne.n	8002504 <_printf_common+0xc8>
 80024ce:	2000      	movs	r0, #0
 80024d0:	e008      	b.n	80024e4 <_printf_common+0xa8>
 80024d2:	2301      	movs	r3, #1
 80024d4:	4652      	mov	r2, sl
 80024d6:	4641      	mov	r1, r8
 80024d8:	4638      	mov	r0, r7
 80024da:	47c8      	blx	r9
 80024dc:	3001      	adds	r0, #1
 80024de:	d103      	bne.n	80024e8 <_printf_common+0xac>
 80024e0:	f04f 30ff 	mov.w	r0, #4294967295
 80024e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024e8:	3501      	adds	r5, #1
 80024ea:	e7c6      	b.n	800247a <_printf_common+0x3e>
 80024ec:	18e1      	adds	r1, r4, r3
 80024ee:	1c5a      	adds	r2, r3, #1
 80024f0:	2030      	movs	r0, #48	@ 0x30
 80024f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80024f6:	4422      	add	r2, r4
 80024f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80024fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002500:	3302      	adds	r3, #2
 8002502:	e7c7      	b.n	8002494 <_printf_common+0x58>
 8002504:	2301      	movs	r3, #1
 8002506:	4622      	mov	r2, r4
 8002508:	4641      	mov	r1, r8
 800250a:	4638      	mov	r0, r7
 800250c:	47c8      	blx	r9
 800250e:	3001      	adds	r0, #1
 8002510:	d0e6      	beq.n	80024e0 <_printf_common+0xa4>
 8002512:	3601      	adds	r6, #1
 8002514:	e7d9      	b.n	80024ca <_printf_common+0x8e>
	...

08002518 <_printf_i>:
 8002518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800251c:	7e0f      	ldrb	r7, [r1, #24]
 800251e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002520:	2f78      	cmp	r7, #120	@ 0x78
 8002522:	4691      	mov	r9, r2
 8002524:	4680      	mov	r8, r0
 8002526:	460c      	mov	r4, r1
 8002528:	469a      	mov	sl, r3
 800252a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800252e:	d807      	bhi.n	8002540 <_printf_i+0x28>
 8002530:	2f62      	cmp	r7, #98	@ 0x62
 8002532:	d80a      	bhi.n	800254a <_printf_i+0x32>
 8002534:	2f00      	cmp	r7, #0
 8002536:	f000 80d1 	beq.w	80026dc <_printf_i+0x1c4>
 800253a:	2f58      	cmp	r7, #88	@ 0x58
 800253c:	f000 80b8 	beq.w	80026b0 <_printf_i+0x198>
 8002540:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002544:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002548:	e03a      	b.n	80025c0 <_printf_i+0xa8>
 800254a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800254e:	2b15      	cmp	r3, #21
 8002550:	d8f6      	bhi.n	8002540 <_printf_i+0x28>
 8002552:	a101      	add	r1, pc, #4	@ (adr r1, 8002558 <_printf_i+0x40>)
 8002554:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002558:	080025b1 	.word	0x080025b1
 800255c:	080025c5 	.word	0x080025c5
 8002560:	08002541 	.word	0x08002541
 8002564:	08002541 	.word	0x08002541
 8002568:	08002541 	.word	0x08002541
 800256c:	08002541 	.word	0x08002541
 8002570:	080025c5 	.word	0x080025c5
 8002574:	08002541 	.word	0x08002541
 8002578:	08002541 	.word	0x08002541
 800257c:	08002541 	.word	0x08002541
 8002580:	08002541 	.word	0x08002541
 8002584:	080026c3 	.word	0x080026c3
 8002588:	080025ef 	.word	0x080025ef
 800258c:	0800267d 	.word	0x0800267d
 8002590:	08002541 	.word	0x08002541
 8002594:	08002541 	.word	0x08002541
 8002598:	080026e5 	.word	0x080026e5
 800259c:	08002541 	.word	0x08002541
 80025a0:	080025ef 	.word	0x080025ef
 80025a4:	08002541 	.word	0x08002541
 80025a8:	08002541 	.word	0x08002541
 80025ac:	08002685 	.word	0x08002685
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	1d1a      	adds	r2, r3, #4
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6032      	str	r2, [r6, #0]
 80025b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80025bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80025c0:	2301      	movs	r3, #1
 80025c2:	e09c      	b.n	80026fe <_printf_i+0x1e6>
 80025c4:	6833      	ldr	r3, [r6, #0]
 80025c6:	6820      	ldr	r0, [r4, #0]
 80025c8:	1d19      	adds	r1, r3, #4
 80025ca:	6031      	str	r1, [r6, #0]
 80025cc:	0606      	lsls	r6, r0, #24
 80025ce:	d501      	bpl.n	80025d4 <_printf_i+0xbc>
 80025d0:	681d      	ldr	r5, [r3, #0]
 80025d2:	e003      	b.n	80025dc <_printf_i+0xc4>
 80025d4:	0645      	lsls	r5, r0, #25
 80025d6:	d5fb      	bpl.n	80025d0 <_printf_i+0xb8>
 80025d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80025dc:	2d00      	cmp	r5, #0
 80025de:	da03      	bge.n	80025e8 <_printf_i+0xd0>
 80025e0:	232d      	movs	r3, #45	@ 0x2d
 80025e2:	426d      	negs	r5, r5
 80025e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025e8:	4858      	ldr	r0, [pc, #352]	@ (800274c <_printf_i+0x234>)
 80025ea:	230a      	movs	r3, #10
 80025ec:	e011      	b.n	8002612 <_printf_i+0xfa>
 80025ee:	6821      	ldr	r1, [r4, #0]
 80025f0:	6833      	ldr	r3, [r6, #0]
 80025f2:	0608      	lsls	r0, r1, #24
 80025f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80025f8:	d402      	bmi.n	8002600 <_printf_i+0xe8>
 80025fa:	0649      	lsls	r1, r1, #25
 80025fc:	bf48      	it	mi
 80025fe:	b2ad      	uxthmi	r5, r5
 8002600:	2f6f      	cmp	r7, #111	@ 0x6f
 8002602:	4852      	ldr	r0, [pc, #328]	@ (800274c <_printf_i+0x234>)
 8002604:	6033      	str	r3, [r6, #0]
 8002606:	bf14      	ite	ne
 8002608:	230a      	movne	r3, #10
 800260a:	2308      	moveq	r3, #8
 800260c:	2100      	movs	r1, #0
 800260e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002612:	6866      	ldr	r6, [r4, #4]
 8002614:	60a6      	str	r6, [r4, #8]
 8002616:	2e00      	cmp	r6, #0
 8002618:	db05      	blt.n	8002626 <_printf_i+0x10e>
 800261a:	6821      	ldr	r1, [r4, #0]
 800261c:	432e      	orrs	r6, r5
 800261e:	f021 0104 	bic.w	r1, r1, #4
 8002622:	6021      	str	r1, [r4, #0]
 8002624:	d04b      	beq.n	80026be <_printf_i+0x1a6>
 8002626:	4616      	mov	r6, r2
 8002628:	fbb5 f1f3 	udiv	r1, r5, r3
 800262c:	fb03 5711 	mls	r7, r3, r1, r5
 8002630:	5dc7      	ldrb	r7, [r0, r7]
 8002632:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002636:	462f      	mov	r7, r5
 8002638:	42bb      	cmp	r3, r7
 800263a:	460d      	mov	r5, r1
 800263c:	d9f4      	bls.n	8002628 <_printf_i+0x110>
 800263e:	2b08      	cmp	r3, #8
 8002640:	d10b      	bne.n	800265a <_printf_i+0x142>
 8002642:	6823      	ldr	r3, [r4, #0]
 8002644:	07df      	lsls	r7, r3, #31
 8002646:	d508      	bpl.n	800265a <_printf_i+0x142>
 8002648:	6923      	ldr	r3, [r4, #16]
 800264a:	6861      	ldr	r1, [r4, #4]
 800264c:	4299      	cmp	r1, r3
 800264e:	bfde      	ittt	le
 8002650:	2330      	movle	r3, #48	@ 0x30
 8002652:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002656:	f106 36ff 	addle.w	r6, r6, #4294967295
 800265a:	1b92      	subs	r2, r2, r6
 800265c:	6122      	str	r2, [r4, #16]
 800265e:	f8cd a000 	str.w	sl, [sp]
 8002662:	464b      	mov	r3, r9
 8002664:	aa03      	add	r2, sp, #12
 8002666:	4621      	mov	r1, r4
 8002668:	4640      	mov	r0, r8
 800266a:	f7ff fee7 	bl	800243c <_printf_common>
 800266e:	3001      	adds	r0, #1
 8002670:	d14a      	bne.n	8002708 <_printf_i+0x1f0>
 8002672:	f04f 30ff 	mov.w	r0, #4294967295
 8002676:	b004      	add	sp, #16
 8002678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800267c:	6823      	ldr	r3, [r4, #0]
 800267e:	f043 0320 	orr.w	r3, r3, #32
 8002682:	6023      	str	r3, [r4, #0]
 8002684:	4832      	ldr	r0, [pc, #200]	@ (8002750 <_printf_i+0x238>)
 8002686:	2778      	movs	r7, #120	@ 0x78
 8002688:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	6831      	ldr	r1, [r6, #0]
 8002690:	061f      	lsls	r7, r3, #24
 8002692:	f851 5b04 	ldr.w	r5, [r1], #4
 8002696:	d402      	bmi.n	800269e <_printf_i+0x186>
 8002698:	065f      	lsls	r7, r3, #25
 800269a:	bf48      	it	mi
 800269c:	b2ad      	uxthmi	r5, r5
 800269e:	6031      	str	r1, [r6, #0]
 80026a0:	07d9      	lsls	r1, r3, #31
 80026a2:	bf44      	itt	mi
 80026a4:	f043 0320 	orrmi.w	r3, r3, #32
 80026a8:	6023      	strmi	r3, [r4, #0]
 80026aa:	b11d      	cbz	r5, 80026b4 <_printf_i+0x19c>
 80026ac:	2310      	movs	r3, #16
 80026ae:	e7ad      	b.n	800260c <_printf_i+0xf4>
 80026b0:	4826      	ldr	r0, [pc, #152]	@ (800274c <_printf_i+0x234>)
 80026b2:	e7e9      	b.n	8002688 <_printf_i+0x170>
 80026b4:	6823      	ldr	r3, [r4, #0]
 80026b6:	f023 0320 	bic.w	r3, r3, #32
 80026ba:	6023      	str	r3, [r4, #0]
 80026bc:	e7f6      	b.n	80026ac <_printf_i+0x194>
 80026be:	4616      	mov	r6, r2
 80026c0:	e7bd      	b.n	800263e <_printf_i+0x126>
 80026c2:	6833      	ldr	r3, [r6, #0]
 80026c4:	6825      	ldr	r5, [r4, #0]
 80026c6:	6961      	ldr	r1, [r4, #20]
 80026c8:	1d18      	adds	r0, r3, #4
 80026ca:	6030      	str	r0, [r6, #0]
 80026cc:	062e      	lsls	r6, r5, #24
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	d501      	bpl.n	80026d6 <_printf_i+0x1be>
 80026d2:	6019      	str	r1, [r3, #0]
 80026d4:	e002      	b.n	80026dc <_printf_i+0x1c4>
 80026d6:	0668      	lsls	r0, r5, #25
 80026d8:	d5fb      	bpl.n	80026d2 <_printf_i+0x1ba>
 80026da:	8019      	strh	r1, [r3, #0]
 80026dc:	2300      	movs	r3, #0
 80026de:	6123      	str	r3, [r4, #16]
 80026e0:	4616      	mov	r6, r2
 80026e2:	e7bc      	b.n	800265e <_printf_i+0x146>
 80026e4:	6833      	ldr	r3, [r6, #0]
 80026e6:	1d1a      	adds	r2, r3, #4
 80026e8:	6032      	str	r2, [r6, #0]
 80026ea:	681e      	ldr	r6, [r3, #0]
 80026ec:	6862      	ldr	r2, [r4, #4]
 80026ee:	2100      	movs	r1, #0
 80026f0:	4630      	mov	r0, r6
 80026f2:	f7fd fd6d 	bl	80001d0 <memchr>
 80026f6:	b108      	cbz	r0, 80026fc <_printf_i+0x1e4>
 80026f8:	1b80      	subs	r0, r0, r6
 80026fa:	6060      	str	r0, [r4, #4]
 80026fc:	6863      	ldr	r3, [r4, #4]
 80026fe:	6123      	str	r3, [r4, #16]
 8002700:	2300      	movs	r3, #0
 8002702:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002706:	e7aa      	b.n	800265e <_printf_i+0x146>
 8002708:	6923      	ldr	r3, [r4, #16]
 800270a:	4632      	mov	r2, r6
 800270c:	4649      	mov	r1, r9
 800270e:	4640      	mov	r0, r8
 8002710:	47d0      	blx	sl
 8002712:	3001      	adds	r0, #1
 8002714:	d0ad      	beq.n	8002672 <_printf_i+0x15a>
 8002716:	6823      	ldr	r3, [r4, #0]
 8002718:	079b      	lsls	r3, r3, #30
 800271a:	d413      	bmi.n	8002744 <_printf_i+0x22c>
 800271c:	68e0      	ldr	r0, [r4, #12]
 800271e:	9b03      	ldr	r3, [sp, #12]
 8002720:	4298      	cmp	r0, r3
 8002722:	bfb8      	it	lt
 8002724:	4618      	movlt	r0, r3
 8002726:	e7a6      	b.n	8002676 <_printf_i+0x15e>
 8002728:	2301      	movs	r3, #1
 800272a:	4632      	mov	r2, r6
 800272c:	4649      	mov	r1, r9
 800272e:	4640      	mov	r0, r8
 8002730:	47d0      	blx	sl
 8002732:	3001      	adds	r0, #1
 8002734:	d09d      	beq.n	8002672 <_printf_i+0x15a>
 8002736:	3501      	adds	r5, #1
 8002738:	68e3      	ldr	r3, [r4, #12]
 800273a:	9903      	ldr	r1, [sp, #12]
 800273c:	1a5b      	subs	r3, r3, r1
 800273e:	42ab      	cmp	r3, r5
 8002740:	dcf2      	bgt.n	8002728 <_printf_i+0x210>
 8002742:	e7eb      	b.n	800271c <_printf_i+0x204>
 8002744:	2500      	movs	r5, #0
 8002746:	f104 0619 	add.w	r6, r4, #25
 800274a:	e7f5      	b.n	8002738 <_printf_i+0x220>
 800274c:	08004a3a 	.word	0x08004a3a
 8002750:	08004a4b 	.word	0x08004a4b

08002754 <std>:
 8002754:	2300      	movs	r3, #0
 8002756:	b510      	push	{r4, lr}
 8002758:	4604      	mov	r4, r0
 800275a:	e9c0 3300 	strd	r3, r3, [r0]
 800275e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002762:	6083      	str	r3, [r0, #8]
 8002764:	8181      	strh	r1, [r0, #12]
 8002766:	6643      	str	r3, [r0, #100]	@ 0x64
 8002768:	81c2      	strh	r2, [r0, #14]
 800276a:	6183      	str	r3, [r0, #24]
 800276c:	4619      	mov	r1, r3
 800276e:	2208      	movs	r2, #8
 8002770:	305c      	adds	r0, #92	@ 0x5c
 8002772:	f000 f9f9 	bl	8002b68 <memset>
 8002776:	4b0d      	ldr	r3, [pc, #52]	@ (80027ac <std+0x58>)
 8002778:	6263      	str	r3, [r4, #36]	@ 0x24
 800277a:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <std+0x5c>)
 800277c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800277e:	4b0d      	ldr	r3, [pc, #52]	@ (80027b4 <std+0x60>)
 8002780:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <std+0x64>)
 8002784:	6323      	str	r3, [r4, #48]	@ 0x30
 8002786:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <std+0x68>)
 8002788:	6224      	str	r4, [r4, #32]
 800278a:	429c      	cmp	r4, r3
 800278c:	d006      	beq.n	800279c <std+0x48>
 800278e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002792:	4294      	cmp	r4, r2
 8002794:	d002      	beq.n	800279c <std+0x48>
 8002796:	33d0      	adds	r3, #208	@ 0xd0
 8002798:	429c      	cmp	r4, r3
 800279a:	d105      	bne.n	80027a8 <std+0x54>
 800279c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80027a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027a4:	f000 ba5c 	b.w	8002c60 <__retarget_lock_init_recursive>
 80027a8:	bd10      	pop	{r4, pc}
 80027aa:	bf00      	nop
 80027ac:	080029b9 	.word	0x080029b9
 80027b0:	080029db 	.word	0x080029db
 80027b4:	08002a13 	.word	0x08002a13
 80027b8:	08002a37 	.word	0x08002a37
 80027bc:	20000244 	.word	0x20000244

080027c0 <stdio_exit_handler>:
 80027c0:	4a02      	ldr	r2, [pc, #8]	@ (80027cc <stdio_exit_handler+0xc>)
 80027c2:	4903      	ldr	r1, [pc, #12]	@ (80027d0 <stdio_exit_handler+0x10>)
 80027c4:	4803      	ldr	r0, [pc, #12]	@ (80027d4 <stdio_exit_handler+0x14>)
 80027c6:	f000 b869 	b.w	800289c <_fwalk_sglue>
 80027ca:	bf00      	nop
 80027cc:	20000000 	.word	0x20000000
 80027d0:	08004599 	.word	0x08004599
 80027d4:	20000010 	.word	0x20000010

080027d8 <cleanup_stdio>:
 80027d8:	6841      	ldr	r1, [r0, #4]
 80027da:	4b0c      	ldr	r3, [pc, #48]	@ (800280c <cleanup_stdio+0x34>)
 80027dc:	4299      	cmp	r1, r3
 80027de:	b510      	push	{r4, lr}
 80027e0:	4604      	mov	r4, r0
 80027e2:	d001      	beq.n	80027e8 <cleanup_stdio+0x10>
 80027e4:	f001 fed8 	bl	8004598 <_fflush_r>
 80027e8:	68a1      	ldr	r1, [r4, #8]
 80027ea:	4b09      	ldr	r3, [pc, #36]	@ (8002810 <cleanup_stdio+0x38>)
 80027ec:	4299      	cmp	r1, r3
 80027ee:	d002      	beq.n	80027f6 <cleanup_stdio+0x1e>
 80027f0:	4620      	mov	r0, r4
 80027f2:	f001 fed1 	bl	8004598 <_fflush_r>
 80027f6:	68e1      	ldr	r1, [r4, #12]
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <cleanup_stdio+0x3c>)
 80027fa:	4299      	cmp	r1, r3
 80027fc:	d004      	beq.n	8002808 <cleanup_stdio+0x30>
 80027fe:	4620      	mov	r0, r4
 8002800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002804:	f001 bec8 	b.w	8004598 <_fflush_r>
 8002808:	bd10      	pop	{r4, pc}
 800280a:	bf00      	nop
 800280c:	20000244 	.word	0x20000244
 8002810:	200002ac 	.word	0x200002ac
 8002814:	20000314 	.word	0x20000314

08002818 <global_stdio_init.part.0>:
 8002818:	b510      	push	{r4, lr}
 800281a:	4b0b      	ldr	r3, [pc, #44]	@ (8002848 <global_stdio_init.part.0+0x30>)
 800281c:	4c0b      	ldr	r4, [pc, #44]	@ (800284c <global_stdio_init.part.0+0x34>)
 800281e:	4a0c      	ldr	r2, [pc, #48]	@ (8002850 <global_stdio_init.part.0+0x38>)
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	4620      	mov	r0, r4
 8002824:	2200      	movs	r2, #0
 8002826:	2104      	movs	r1, #4
 8002828:	f7ff ff94 	bl	8002754 <std>
 800282c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002830:	2201      	movs	r2, #1
 8002832:	2109      	movs	r1, #9
 8002834:	f7ff ff8e 	bl	8002754 <std>
 8002838:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800283c:	2202      	movs	r2, #2
 800283e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002842:	2112      	movs	r1, #18
 8002844:	f7ff bf86 	b.w	8002754 <std>
 8002848:	2000037c 	.word	0x2000037c
 800284c:	20000244 	.word	0x20000244
 8002850:	080027c1 	.word	0x080027c1

08002854 <__sfp_lock_acquire>:
 8002854:	4801      	ldr	r0, [pc, #4]	@ (800285c <__sfp_lock_acquire+0x8>)
 8002856:	f000 ba04 	b.w	8002c62 <__retarget_lock_acquire_recursive>
 800285a:	bf00      	nop
 800285c:	20000385 	.word	0x20000385

08002860 <__sfp_lock_release>:
 8002860:	4801      	ldr	r0, [pc, #4]	@ (8002868 <__sfp_lock_release+0x8>)
 8002862:	f000 b9ff 	b.w	8002c64 <__retarget_lock_release_recursive>
 8002866:	bf00      	nop
 8002868:	20000385 	.word	0x20000385

0800286c <__sinit>:
 800286c:	b510      	push	{r4, lr}
 800286e:	4604      	mov	r4, r0
 8002870:	f7ff fff0 	bl	8002854 <__sfp_lock_acquire>
 8002874:	6a23      	ldr	r3, [r4, #32]
 8002876:	b11b      	cbz	r3, 8002880 <__sinit+0x14>
 8002878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800287c:	f7ff bff0 	b.w	8002860 <__sfp_lock_release>
 8002880:	4b04      	ldr	r3, [pc, #16]	@ (8002894 <__sinit+0x28>)
 8002882:	6223      	str	r3, [r4, #32]
 8002884:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <__sinit+0x2c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f5      	bne.n	8002878 <__sinit+0xc>
 800288c:	f7ff ffc4 	bl	8002818 <global_stdio_init.part.0>
 8002890:	e7f2      	b.n	8002878 <__sinit+0xc>
 8002892:	bf00      	nop
 8002894:	080027d9 	.word	0x080027d9
 8002898:	2000037c 	.word	0x2000037c

0800289c <_fwalk_sglue>:
 800289c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028a0:	4607      	mov	r7, r0
 80028a2:	4688      	mov	r8, r1
 80028a4:	4614      	mov	r4, r2
 80028a6:	2600      	movs	r6, #0
 80028a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028ac:	f1b9 0901 	subs.w	r9, r9, #1
 80028b0:	d505      	bpl.n	80028be <_fwalk_sglue+0x22>
 80028b2:	6824      	ldr	r4, [r4, #0]
 80028b4:	2c00      	cmp	r4, #0
 80028b6:	d1f7      	bne.n	80028a8 <_fwalk_sglue+0xc>
 80028b8:	4630      	mov	r0, r6
 80028ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028be:	89ab      	ldrh	r3, [r5, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d907      	bls.n	80028d4 <_fwalk_sglue+0x38>
 80028c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028c8:	3301      	adds	r3, #1
 80028ca:	d003      	beq.n	80028d4 <_fwalk_sglue+0x38>
 80028cc:	4629      	mov	r1, r5
 80028ce:	4638      	mov	r0, r7
 80028d0:	47c0      	blx	r8
 80028d2:	4306      	orrs	r6, r0
 80028d4:	3568      	adds	r5, #104	@ 0x68
 80028d6:	e7e9      	b.n	80028ac <_fwalk_sglue+0x10>

080028d8 <iprintf>:
 80028d8:	b40f      	push	{r0, r1, r2, r3}
 80028da:	b507      	push	{r0, r1, r2, lr}
 80028dc:	4906      	ldr	r1, [pc, #24]	@ (80028f8 <iprintf+0x20>)
 80028de:	ab04      	add	r3, sp, #16
 80028e0:	6808      	ldr	r0, [r1, #0]
 80028e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80028e6:	6881      	ldr	r1, [r0, #8]
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	f001 fcb9 	bl	8004260 <_vfiprintf_r>
 80028ee:	b003      	add	sp, #12
 80028f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80028f4:	b004      	add	sp, #16
 80028f6:	4770      	bx	lr
 80028f8:	2000000c 	.word	0x2000000c

080028fc <_puts_r>:
 80028fc:	6a03      	ldr	r3, [r0, #32]
 80028fe:	b570      	push	{r4, r5, r6, lr}
 8002900:	6884      	ldr	r4, [r0, #8]
 8002902:	4605      	mov	r5, r0
 8002904:	460e      	mov	r6, r1
 8002906:	b90b      	cbnz	r3, 800290c <_puts_r+0x10>
 8002908:	f7ff ffb0 	bl	800286c <__sinit>
 800290c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800290e:	07db      	lsls	r3, r3, #31
 8002910:	d405      	bmi.n	800291e <_puts_r+0x22>
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	0598      	lsls	r0, r3, #22
 8002916:	d402      	bmi.n	800291e <_puts_r+0x22>
 8002918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800291a:	f000 f9a2 	bl	8002c62 <__retarget_lock_acquire_recursive>
 800291e:	89a3      	ldrh	r3, [r4, #12]
 8002920:	0719      	lsls	r1, r3, #28
 8002922:	d502      	bpl.n	800292a <_puts_r+0x2e>
 8002924:	6923      	ldr	r3, [r4, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d135      	bne.n	8002996 <_puts_r+0x9a>
 800292a:	4621      	mov	r1, r4
 800292c:	4628      	mov	r0, r5
 800292e:	f000 f8c5 	bl	8002abc <__swsetup_r>
 8002932:	b380      	cbz	r0, 8002996 <_puts_r+0x9a>
 8002934:	f04f 35ff 	mov.w	r5, #4294967295
 8002938:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800293a:	07da      	lsls	r2, r3, #31
 800293c:	d405      	bmi.n	800294a <_puts_r+0x4e>
 800293e:	89a3      	ldrh	r3, [r4, #12]
 8002940:	059b      	lsls	r3, r3, #22
 8002942:	d402      	bmi.n	800294a <_puts_r+0x4e>
 8002944:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002946:	f000 f98d 	bl	8002c64 <__retarget_lock_release_recursive>
 800294a:	4628      	mov	r0, r5
 800294c:	bd70      	pop	{r4, r5, r6, pc}
 800294e:	2b00      	cmp	r3, #0
 8002950:	da04      	bge.n	800295c <_puts_r+0x60>
 8002952:	69a2      	ldr	r2, [r4, #24]
 8002954:	429a      	cmp	r2, r3
 8002956:	dc17      	bgt.n	8002988 <_puts_r+0x8c>
 8002958:	290a      	cmp	r1, #10
 800295a:	d015      	beq.n	8002988 <_puts_r+0x8c>
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	1c5a      	adds	r2, r3, #1
 8002960:	6022      	str	r2, [r4, #0]
 8002962:	7019      	strb	r1, [r3, #0]
 8002964:	68a3      	ldr	r3, [r4, #8]
 8002966:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800296a:	3b01      	subs	r3, #1
 800296c:	60a3      	str	r3, [r4, #8]
 800296e:	2900      	cmp	r1, #0
 8002970:	d1ed      	bne.n	800294e <_puts_r+0x52>
 8002972:	2b00      	cmp	r3, #0
 8002974:	da11      	bge.n	800299a <_puts_r+0x9e>
 8002976:	4622      	mov	r2, r4
 8002978:	210a      	movs	r1, #10
 800297a:	4628      	mov	r0, r5
 800297c:	f000 f85f 	bl	8002a3e <__swbuf_r>
 8002980:	3001      	adds	r0, #1
 8002982:	d0d7      	beq.n	8002934 <_puts_r+0x38>
 8002984:	250a      	movs	r5, #10
 8002986:	e7d7      	b.n	8002938 <_puts_r+0x3c>
 8002988:	4622      	mov	r2, r4
 800298a:	4628      	mov	r0, r5
 800298c:	f000 f857 	bl	8002a3e <__swbuf_r>
 8002990:	3001      	adds	r0, #1
 8002992:	d1e7      	bne.n	8002964 <_puts_r+0x68>
 8002994:	e7ce      	b.n	8002934 <_puts_r+0x38>
 8002996:	3e01      	subs	r6, #1
 8002998:	e7e4      	b.n	8002964 <_puts_r+0x68>
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	6022      	str	r2, [r4, #0]
 80029a0:	220a      	movs	r2, #10
 80029a2:	701a      	strb	r2, [r3, #0]
 80029a4:	e7ee      	b.n	8002984 <_puts_r+0x88>
	...

080029a8 <puts>:
 80029a8:	4b02      	ldr	r3, [pc, #8]	@ (80029b4 <puts+0xc>)
 80029aa:	4601      	mov	r1, r0
 80029ac:	6818      	ldr	r0, [r3, #0]
 80029ae:	f7ff bfa5 	b.w	80028fc <_puts_r>
 80029b2:	bf00      	nop
 80029b4:	2000000c 	.word	0x2000000c

080029b8 <__sread>:
 80029b8:	b510      	push	{r4, lr}
 80029ba:	460c      	mov	r4, r1
 80029bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029c0:	f000 f900 	bl	8002bc4 <_read_r>
 80029c4:	2800      	cmp	r0, #0
 80029c6:	bfab      	itete	ge
 80029c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80029ca:	89a3      	ldrhlt	r3, [r4, #12]
 80029cc:	181b      	addge	r3, r3, r0
 80029ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80029d2:	bfac      	ite	ge
 80029d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80029d6:	81a3      	strhlt	r3, [r4, #12]
 80029d8:	bd10      	pop	{r4, pc}

080029da <__swrite>:
 80029da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029de:	461f      	mov	r7, r3
 80029e0:	898b      	ldrh	r3, [r1, #12]
 80029e2:	05db      	lsls	r3, r3, #23
 80029e4:	4605      	mov	r5, r0
 80029e6:	460c      	mov	r4, r1
 80029e8:	4616      	mov	r6, r2
 80029ea:	d505      	bpl.n	80029f8 <__swrite+0x1e>
 80029ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029f0:	2302      	movs	r3, #2
 80029f2:	2200      	movs	r2, #0
 80029f4:	f000 f8d4 	bl	8002ba0 <_lseek_r>
 80029f8:	89a3      	ldrh	r3, [r4, #12]
 80029fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a02:	81a3      	strh	r3, [r4, #12]
 8002a04:	4632      	mov	r2, r6
 8002a06:	463b      	mov	r3, r7
 8002a08:	4628      	mov	r0, r5
 8002a0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a0e:	f000 b8eb 	b.w	8002be8 <_write_r>

08002a12 <__sseek>:
 8002a12:	b510      	push	{r4, lr}
 8002a14:	460c      	mov	r4, r1
 8002a16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a1a:	f000 f8c1 	bl	8002ba0 <_lseek_r>
 8002a1e:	1c43      	adds	r3, r0, #1
 8002a20:	89a3      	ldrh	r3, [r4, #12]
 8002a22:	bf15      	itete	ne
 8002a24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a2e:	81a3      	strheq	r3, [r4, #12]
 8002a30:	bf18      	it	ne
 8002a32:	81a3      	strhne	r3, [r4, #12]
 8002a34:	bd10      	pop	{r4, pc}

08002a36 <__sclose>:
 8002a36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a3a:	f000 b8a1 	b.w	8002b80 <_close_r>

08002a3e <__swbuf_r>:
 8002a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a40:	460e      	mov	r6, r1
 8002a42:	4614      	mov	r4, r2
 8002a44:	4605      	mov	r5, r0
 8002a46:	b118      	cbz	r0, 8002a50 <__swbuf_r+0x12>
 8002a48:	6a03      	ldr	r3, [r0, #32]
 8002a4a:	b90b      	cbnz	r3, 8002a50 <__swbuf_r+0x12>
 8002a4c:	f7ff ff0e 	bl	800286c <__sinit>
 8002a50:	69a3      	ldr	r3, [r4, #24]
 8002a52:	60a3      	str	r3, [r4, #8]
 8002a54:	89a3      	ldrh	r3, [r4, #12]
 8002a56:	071a      	lsls	r2, r3, #28
 8002a58:	d501      	bpl.n	8002a5e <__swbuf_r+0x20>
 8002a5a:	6923      	ldr	r3, [r4, #16]
 8002a5c:	b943      	cbnz	r3, 8002a70 <__swbuf_r+0x32>
 8002a5e:	4621      	mov	r1, r4
 8002a60:	4628      	mov	r0, r5
 8002a62:	f000 f82b 	bl	8002abc <__swsetup_r>
 8002a66:	b118      	cbz	r0, 8002a70 <__swbuf_r+0x32>
 8002a68:	f04f 37ff 	mov.w	r7, #4294967295
 8002a6c:	4638      	mov	r0, r7
 8002a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a70:	6823      	ldr	r3, [r4, #0]
 8002a72:	6922      	ldr	r2, [r4, #16]
 8002a74:	1a98      	subs	r0, r3, r2
 8002a76:	6963      	ldr	r3, [r4, #20]
 8002a78:	b2f6      	uxtb	r6, r6
 8002a7a:	4283      	cmp	r3, r0
 8002a7c:	4637      	mov	r7, r6
 8002a7e:	dc05      	bgt.n	8002a8c <__swbuf_r+0x4e>
 8002a80:	4621      	mov	r1, r4
 8002a82:	4628      	mov	r0, r5
 8002a84:	f001 fd88 	bl	8004598 <_fflush_r>
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d1ed      	bne.n	8002a68 <__swbuf_r+0x2a>
 8002a8c:	68a3      	ldr	r3, [r4, #8]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	60a3      	str	r3, [r4, #8]
 8002a92:	6823      	ldr	r3, [r4, #0]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	6022      	str	r2, [r4, #0]
 8002a98:	701e      	strb	r6, [r3, #0]
 8002a9a:	6962      	ldr	r2, [r4, #20]
 8002a9c:	1c43      	adds	r3, r0, #1
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d004      	beq.n	8002aac <__swbuf_r+0x6e>
 8002aa2:	89a3      	ldrh	r3, [r4, #12]
 8002aa4:	07db      	lsls	r3, r3, #31
 8002aa6:	d5e1      	bpl.n	8002a6c <__swbuf_r+0x2e>
 8002aa8:	2e0a      	cmp	r6, #10
 8002aaa:	d1df      	bne.n	8002a6c <__swbuf_r+0x2e>
 8002aac:	4621      	mov	r1, r4
 8002aae:	4628      	mov	r0, r5
 8002ab0:	f001 fd72 	bl	8004598 <_fflush_r>
 8002ab4:	2800      	cmp	r0, #0
 8002ab6:	d0d9      	beq.n	8002a6c <__swbuf_r+0x2e>
 8002ab8:	e7d6      	b.n	8002a68 <__swbuf_r+0x2a>
	...

08002abc <__swsetup_r>:
 8002abc:	b538      	push	{r3, r4, r5, lr}
 8002abe:	4b29      	ldr	r3, [pc, #164]	@ (8002b64 <__swsetup_r+0xa8>)
 8002ac0:	4605      	mov	r5, r0
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	b118      	cbz	r0, 8002ad0 <__swsetup_r+0x14>
 8002ac8:	6a03      	ldr	r3, [r0, #32]
 8002aca:	b90b      	cbnz	r3, 8002ad0 <__swsetup_r+0x14>
 8002acc:	f7ff fece 	bl	800286c <__sinit>
 8002ad0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ad4:	0719      	lsls	r1, r3, #28
 8002ad6:	d422      	bmi.n	8002b1e <__swsetup_r+0x62>
 8002ad8:	06da      	lsls	r2, r3, #27
 8002ada:	d407      	bmi.n	8002aec <__swsetup_r+0x30>
 8002adc:	2209      	movs	r2, #9
 8002ade:	602a      	str	r2, [r5, #0]
 8002ae0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ae4:	81a3      	strh	r3, [r4, #12]
 8002ae6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aea:	e033      	b.n	8002b54 <__swsetup_r+0x98>
 8002aec:	0758      	lsls	r0, r3, #29
 8002aee:	d512      	bpl.n	8002b16 <__swsetup_r+0x5a>
 8002af0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002af2:	b141      	cbz	r1, 8002b06 <__swsetup_r+0x4a>
 8002af4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002af8:	4299      	cmp	r1, r3
 8002afa:	d002      	beq.n	8002b02 <__swsetup_r+0x46>
 8002afc:	4628      	mov	r0, r5
 8002afe:	f000 ff0b 	bl	8003918 <_free_r>
 8002b02:	2300      	movs	r3, #0
 8002b04:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b06:	89a3      	ldrh	r3, [r4, #12]
 8002b08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b0c:	81a3      	strh	r3, [r4, #12]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	6063      	str	r3, [r4, #4]
 8002b12:	6923      	ldr	r3, [r4, #16]
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	f043 0308 	orr.w	r3, r3, #8
 8002b1c:	81a3      	strh	r3, [r4, #12]
 8002b1e:	6923      	ldr	r3, [r4, #16]
 8002b20:	b94b      	cbnz	r3, 8002b36 <__swsetup_r+0x7a>
 8002b22:	89a3      	ldrh	r3, [r4, #12]
 8002b24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b2c:	d003      	beq.n	8002b36 <__swsetup_r+0x7a>
 8002b2e:	4621      	mov	r1, r4
 8002b30:	4628      	mov	r0, r5
 8002b32:	f001 fd7f 	bl	8004634 <__smakebuf_r>
 8002b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b3a:	f013 0201 	ands.w	r2, r3, #1
 8002b3e:	d00a      	beq.n	8002b56 <__swsetup_r+0x9a>
 8002b40:	2200      	movs	r2, #0
 8002b42:	60a2      	str	r2, [r4, #8]
 8002b44:	6962      	ldr	r2, [r4, #20]
 8002b46:	4252      	negs	r2, r2
 8002b48:	61a2      	str	r2, [r4, #24]
 8002b4a:	6922      	ldr	r2, [r4, #16]
 8002b4c:	b942      	cbnz	r2, 8002b60 <__swsetup_r+0xa4>
 8002b4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002b52:	d1c5      	bne.n	8002ae0 <__swsetup_r+0x24>
 8002b54:	bd38      	pop	{r3, r4, r5, pc}
 8002b56:	0799      	lsls	r1, r3, #30
 8002b58:	bf58      	it	pl
 8002b5a:	6962      	ldrpl	r2, [r4, #20]
 8002b5c:	60a2      	str	r2, [r4, #8]
 8002b5e:	e7f4      	b.n	8002b4a <__swsetup_r+0x8e>
 8002b60:	2000      	movs	r0, #0
 8002b62:	e7f7      	b.n	8002b54 <__swsetup_r+0x98>
 8002b64:	2000000c 	.word	0x2000000c

08002b68 <memset>:
 8002b68:	4402      	add	r2, r0
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d100      	bne.n	8002b72 <memset+0xa>
 8002b70:	4770      	bx	lr
 8002b72:	f803 1b01 	strb.w	r1, [r3], #1
 8002b76:	e7f9      	b.n	8002b6c <memset+0x4>

08002b78 <_localeconv_r>:
 8002b78:	4800      	ldr	r0, [pc, #0]	@ (8002b7c <_localeconv_r+0x4>)
 8002b7a:	4770      	bx	lr
 8002b7c:	2000014c 	.word	0x2000014c

08002b80 <_close_r>:
 8002b80:	b538      	push	{r3, r4, r5, lr}
 8002b82:	4d06      	ldr	r5, [pc, #24]	@ (8002b9c <_close_r+0x1c>)
 8002b84:	2300      	movs	r3, #0
 8002b86:	4604      	mov	r4, r0
 8002b88:	4608      	mov	r0, r1
 8002b8a:	602b      	str	r3, [r5, #0]
 8002b8c:	f7ff f8fa 	bl	8001d84 <_close>
 8002b90:	1c43      	adds	r3, r0, #1
 8002b92:	d102      	bne.n	8002b9a <_close_r+0x1a>
 8002b94:	682b      	ldr	r3, [r5, #0]
 8002b96:	b103      	cbz	r3, 8002b9a <_close_r+0x1a>
 8002b98:	6023      	str	r3, [r4, #0]
 8002b9a:	bd38      	pop	{r3, r4, r5, pc}
 8002b9c:	20000380 	.word	0x20000380

08002ba0 <_lseek_r>:
 8002ba0:	b538      	push	{r3, r4, r5, lr}
 8002ba2:	4d07      	ldr	r5, [pc, #28]	@ (8002bc0 <_lseek_r+0x20>)
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	4608      	mov	r0, r1
 8002ba8:	4611      	mov	r1, r2
 8002baa:	2200      	movs	r2, #0
 8002bac:	602a      	str	r2, [r5, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	f7ff f90f 	bl	8001dd2 <_lseek>
 8002bb4:	1c43      	adds	r3, r0, #1
 8002bb6:	d102      	bne.n	8002bbe <_lseek_r+0x1e>
 8002bb8:	682b      	ldr	r3, [r5, #0]
 8002bba:	b103      	cbz	r3, 8002bbe <_lseek_r+0x1e>
 8002bbc:	6023      	str	r3, [r4, #0]
 8002bbe:	bd38      	pop	{r3, r4, r5, pc}
 8002bc0:	20000380 	.word	0x20000380

08002bc4 <_read_r>:
 8002bc4:	b538      	push	{r3, r4, r5, lr}
 8002bc6:	4d07      	ldr	r5, [pc, #28]	@ (8002be4 <_read_r+0x20>)
 8002bc8:	4604      	mov	r4, r0
 8002bca:	4608      	mov	r0, r1
 8002bcc:	4611      	mov	r1, r2
 8002bce:	2200      	movs	r2, #0
 8002bd0:	602a      	str	r2, [r5, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f7ff f89d 	bl	8001d12 <_read>
 8002bd8:	1c43      	adds	r3, r0, #1
 8002bda:	d102      	bne.n	8002be2 <_read_r+0x1e>
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	b103      	cbz	r3, 8002be2 <_read_r+0x1e>
 8002be0:	6023      	str	r3, [r4, #0]
 8002be2:	bd38      	pop	{r3, r4, r5, pc}
 8002be4:	20000380 	.word	0x20000380

08002be8 <_write_r>:
 8002be8:	b538      	push	{r3, r4, r5, lr}
 8002bea:	4d07      	ldr	r5, [pc, #28]	@ (8002c08 <_write_r+0x20>)
 8002bec:	4604      	mov	r4, r0
 8002bee:	4608      	mov	r0, r1
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	602a      	str	r2, [r5, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f7ff f8a8 	bl	8001d4c <_write>
 8002bfc:	1c43      	adds	r3, r0, #1
 8002bfe:	d102      	bne.n	8002c06 <_write_r+0x1e>
 8002c00:	682b      	ldr	r3, [r5, #0]
 8002c02:	b103      	cbz	r3, 8002c06 <_write_r+0x1e>
 8002c04:	6023      	str	r3, [r4, #0]
 8002c06:	bd38      	pop	{r3, r4, r5, pc}
 8002c08:	20000380 	.word	0x20000380

08002c0c <__errno>:
 8002c0c:	4b01      	ldr	r3, [pc, #4]	@ (8002c14 <__errno+0x8>)
 8002c0e:	6818      	ldr	r0, [r3, #0]
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	2000000c 	.word	0x2000000c

08002c18 <__libc_init_array>:
 8002c18:	b570      	push	{r4, r5, r6, lr}
 8002c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8002c50 <__libc_init_array+0x38>)
 8002c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8002c54 <__libc_init_array+0x3c>)
 8002c1e:	1b64      	subs	r4, r4, r5
 8002c20:	10a4      	asrs	r4, r4, #2
 8002c22:	2600      	movs	r6, #0
 8002c24:	42a6      	cmp	r6, r4
 8002c26:	d109      	bne.n	8002c3c <__libc_init_array+0x24>
 8002c28:	4d0b      	ldr	r5, [pc, #44]	@ (8002c58 <__libc_init_array+0x40>)
 8002c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8002c5c <__libc_init_array+0x44>)
 8002c2c:	f001 fe2e 	bl	800488c <_init>
 8002c30:	1b64      	subs	r4, r4, r5
 8002c32:	10a4      	asrs	r4, r4, #2
 8002c34:	2600      	movs	r6, #0
 8002c36:	42a6      	cmp	r6, r4
 8002c38:	d105      	bne.n	8002c46 <__libc_init_array+0x2e>
 8002c3a:	bd70      	pop	{r4, r5, r6, pc}
 8002c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c40:	4798      	blx	r3
 8002c42:	3601      	adds	r6, #1
 8002c44:	e7ee      	b.n	8002c24 <__libc_init_array+0xc>
 8002c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c4a:	4798      	blx	r3
 8002c4c:	3601      	adds	r6, #1
 8002c4e:	e7f2      	b.n	8002c36 <__libc_init_array+0x1e>
 8002c50:	08004da4 	.word	0x08004da4
 8002c54:	08004da4 	.word	0x08004da4
 8002c58:	08004da4 	.word	0x08004da4
 8002c5c:	08004da8 	.word	0x08004da8

08002c60 <__retarget_lock_init_recursive>:
 8002c60:	4770      	bx	lr

08002c62 <__retarget_lock_acquire_recursive>:
 8002c62:	4770      	bx	lr

08002c64 <__retarget_lock_release_recursive>:
 8002c64:	4770      	bx	lr

08002c66 <quorem>:
 8002c66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c6a:	6903      	ldr	r3, [r0, #16]
 8002c6c:	690c      	ldr	r4, [r1, #16]
 8002c6e:	42a3      	cmp	r3, r4
 8002c70:	4607      	mov	r7, r0
 8002c72:	db7e      	blt.n	8002d72 <quorem+0x10c>
 8002c74:	3c01      	subs	r4, #1
 8002c76:	f101 0814 	add.w	r8, r1, #20
 8002c7a:	00a3      	lsls	r3, r4, #2
 8002c7c:	f100 0514 	add.w	r5, r0, #20
 8002c80:	9300      	str	r3, [sp, #0]
 8002c82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002c8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002c90:	3301      	adds	r3, #1
 8002c92:	429a      	cmp	r2, r3
 8002c94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002c98:	fbb2 f6f3 	udiv	r6, r2, r3
 8002c9c:	d32e      	bcc.n	8002cfc <quorem+0x96>
 8002c9e:	f04f 0a00 	mov.w	sl, #0
 8002ca2:	46c4      	mov	ip, r8
 8002ca4:	46ae      	mov	lr, r5
 8002ca6:	46d3      	mov	fp, sl
 8002ca8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002cac:	b298      	uxth	r0, r3
 8002cae:	fb06 a000 	mla	r0, r6, r0, sl
 8002cb2:	0c02      	lsrs	r2, r0, #16
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	fb06 2303 	mla	r3, r6, r3, r2
 8002cba:	f8de 2000 	ldr.w	r2, [lr]
 8002cbe:	b280      	uxth	r0, r0
 8002cc0:	b292      	uxth	r2, r2
 8002cc2:	1a12      	subs	r2, r2, r0
 8002cc4:	445a      	add	r2, fp
 8002cc6:	f8de 0000 	ldr.w	r0, [lr]
 8002cca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002cce:	b29b      	uxth	r3, r3
 8002cd0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002cd4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002cd8:	b292      	uxth	r2, r2
 8002cda:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002cde:	45e1      	cmp	r9, ip
 8002ce0:	f84e 2b04 	str.w	r2, [lr], #4
 8002ce4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002ce8:	d2de      	bcs.n	8002ca8 <quorem+0x42>
 8002cea:	9b00      	ldr	r3, [sp, #0]
 8002cec:	58eb      	ldr	r3, [r5, r3]
 8002cee:	b92b      	cbnz	r3, 8002cfc <quorem+0x96>
 8002cf0:	9b01      	ldr	r3, [sp, #4]
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	429d      	cmp	r5, r3
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	d32f      	bcc.n	8002d5a <quorem+0xf4>
 8002cfa:	613c      	str	r4, [r7, #16]
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	f001 f97d 	bl	8003ffc <__mcmp>
 8002d02:	2800      	cmp	r0, #0
 8002d04:	db25      	blt.n	8002d52 <quorem+0xec>
 8002d06:	4629      	mov	r1, r5
 8002d08:	2000      	movs	r0, #0
 8002d0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8002d0e:	f8d1 c000 	ldr.w	ip, [r1]
 8002d12:	fa1f fe82 	uxth.w	lr, r2
 8002d16:	fa1f f38c 	uxth.w	r3, ip
 8002d1a:	eba3 030e 	sub.w	r3, r3, lr
 8002d1e:	4403      	add	r3, r0
 8002d20:	0c12      	lsrs	r2, r2, #16
 8002d22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002d26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d30:	45c1      	cmp	r9, r8
 8002d32:	f841 3b04 	str.w	r3, [r1], #4
 8002d36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002d3a:	d2e6      	bcs.n	8002d0a <quorem+0xa4>
 8002d3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d44:	b922      	cbnz	r2, 8002d50 <quorem+0xea>
 8002d46:	3b04      	subs	r3, #4
 8002d48:	429d      	cmp	r5, r3
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	d30b      	bcc.n	8002d66 <quorem+0x100>
 8002d4e:	613c      	str	r4, [r7, #16]
 8002d50:	3601      	adds	r6, #1
 8002d52:	4630      	mov	r0, r6
 8002d54:	b003      	add	sp, #12
 8002d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	3b04      	subs	r3, #4
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d1cb      	bne.n	8002cfa <quorem+0x94>
 8002d62:	3c01      	subs	r4, #1
 8002d64:	e7c6      	b.n	8002cf4 <quorem+0x8e>
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	3b04      	subs	r3, #4
 8002d6a:	2a00      	cmp	r2, #0
 8002d6c:	d1ef      	bne.n	8002d4e <quorem+0xe8>
 8002d6e:	3c01      	subs	r4, #1
 8002d70:	e7ea      	b.n	8002d48 <quorem+0xe2>
 8002d72:	2000      	movs	r0, #0
 8002d74:	e7ee      	b.n	8002d54 <quorem+0xee>
	...

08002d78 <_dtoa_r>:
 8002d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7c:	69c7      	ldr	r7, [r0, #28]
 8002d7e:	b097      	sub	sp, #92	@ 0x5c
 8002d80:	ed8d 0b04 	vstr	d0, [sp, #16]
 8002d84:	ec55 4b10 	vmov	r4, r5, d0
 8002d88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8002d8a:	9107      	str	r1, [sp, #28]
 8002d8c:	4681      	mov	r9, r0
 8002d8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8002d90:	9311      	str	r3, [sp, #68]	@ 0x44
 8002d92:	b97f      	cbnz	r7, 8002db4 <_dtoa_r+0x3c>
 8002d94:	2010      	movs	r0, #16
 8002d96:	f000 fe09 	bl	80039ac <malloc>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	f8c9 001c 	str.w	r0, [r9, #28]
 8002da0:	b920      	cbnz	r0, 8002dac <_dtoa_r+0x34>
 8002da2:	4ba9      	ldr	r3, [pc, #676]	@ (8003048 <_dtoa_r+0x2d0>)
 8002da4:	21ef      	movs	r1, #239	@ 0xef
 8002da6:	48a9      	ldr	r0, [pc, #676]	@ (800304c <_dtoa_r+0x2d4>)
 8002da8:	f001 fcc0 	bl	800472c <__assert_func>
 8002dac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002db0:	6007      	str	r7, [r0, #0]
 8002db2:	60c7      	str	r7, [r0, #12]
 8002db4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002db8:	6819      	ldr	r1, [r3, #0]
 8002dba:	b159      	cbz	r1, 8002dd4 <_dtoa_r+0x5c>
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	604a      	str	r2, [r1, #4]
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	4093      	lsls	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
 8002dc6:	4648      	mov	r0, r9
 8002dc8:	f000 fee6 	bl	8003b98 <_Bfree>
 8002dcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	1e2b      	subs	r3, r5, #0
 8002dd6:	bfb9      	ittee	lt
 8002dd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002ddc:	9305      	strlt	r3, [sp, #20]
 8002dde:	2300      	movge	r3, #0
 8002de0:	6033      	strge	r3, [r6, #0]
 8002de2:	9f05      	ldr	r7, [sp, #20]
 8002de4:	4b9a      	ldr	r3, [pc, #616]	@ (8003050 <_dtoa_r+0x2d8>)
 8002de6:	bfbc      	itt	lt
 8002de8:	2201      	movlt	r2, #1
 8002dea:	6032      	strlt	r2, [r6, #0]
 8002dec:	43bb      	bics	r3, r7
 8002dee:	d112      	bne.n	8002e16 <_dtoa_r+0x9e>
 8002df0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002df2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002dfc:	4323      	orrs	r3, r4
 8002dfe:	f000 855a 	beq.w	80038b6 <_dtoa_r+0xb3e>
 8002e02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002e04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003064 <_dtoa_r+0x2ec>
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 855c 	beq.w	80038c6 <_dtoa_r+0xb4e>
 8002e0e:	f10a 0303 	add.w	r3, sl, #3
 8002e12:	f000 bd56 	b.w	80038c2 <_dtoa_r+0xb4a>
 8002e16:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	ec51 0b17 	vmov	r0, r1, d7
 8002e20:	2300      	movs	r3, #0
 8002e22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002e26:	f7fd fe4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e2a:	4680      	mov	r8, r0
 8002e2c:	b158      	cbz	r0, 8002e46 <_dtoa_r+0xce>
 8002e2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002e30:	2301      	movs	r3, #1
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002e36:	b113      	cbz	r3, 8002e3e <_dtoa_r+0xc6>
 8002e38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8002e3a:	4b86      	ldr	r3, [pc, #536]	@ (8003054 <_dtoa_r+0x2dc>)
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003068 <_dtoa_r+0x2f0>
 8002e42:	f000 bd40 	b.w	80038c6 <_dtoa_r+0xb4e>
 8002e46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8002e4a:	aa14      	add	r2, sp, #80	@ 0x50
 8002e4c:	a915      	add	r1, sp, #84	@ 0x54
 8002e4e:	4648      	mov	r0, r9
 8002e50:	f001 f984 	bl	800415c <__d2b>
 8002e54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002e58:	9002      	str	r0, [sp, #8]
 8002e5a:	2e00      	cmp	r6, #0
 8002e5c:	d078      	beq.n	8002f50 <_dtoa_r+0x1d8>
 8002e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8002e64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002e6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002e70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002e74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002e78:	4619      	mov	r1, r3
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	4b76      	ldr	r3, [pc, #472]	@ (8003058 <_dtoa_r+0x2e0>)
 8002e7e:	f7fd fa03 	bl	8000288 <__aeabi_dsub>
 8002e82:	a36b      	add	r3, pc, #428	@ (adr r3, 8003030 <_dtoa_r+0x2b8>)
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	f7fd fbb6 	bl	80005f8 <__aeabi_dmul>
 8002e8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8003038 <_dtoa_r+0x2c0>)
 8002e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e92:	f7fd f9fb 	bl	800028c <__adddf3>
 8002e96:	4604      	mov	r4, r0
 8002e98:	4630      	mov	r0, r6
 8002e9a:	460d      	mov	r5, r1
 8002e9c:	f7fd fb42 	bl	8000524 <__aeabi_i2d>
 8002ea0:	a367      	add	r3, pc, #412	@ (adr r3, 8003040 <_dtoa_r+0x2c8>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fba7 	bl	80005f8 <__aeabi_dmul>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4620      	mov	r0, r4
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	f7fd f9eb 	bl	800028c <__adddf3>
 8002eb6:	4604      	mov	r4, r0
 8002eb8:	460d      	mov	r5, r1
 8002eba:	f7fd fe4d 	bl	8000b58 <__aeabi_d2iz>
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	4607      	mov	r7, r0
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	4620      	mov	r0, r4
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f7fd fe08 	bl	8000adc <__aeabi_dcmplt>
 8002ecc:	b140      	cbz	r0, 8002ee0 <_dtoa_r+0x168>
 8002ece:	4638      	mov	r0, r7
 8002ed0:	f7fd fb28 	bl	8000524 <__aeabi_i2d>
 8002ed4:	4622      	mov	r2, r4
 8002ed6:	462b      	mov	r3, r5
 8002ed8:	f7fd fdf6 	bl	8000ac8 <__aeabi_dcmpeq>
 8002edc:	b900      	cbnz	r0, 8002ee0 <_dtoa_r+0x168>
 8002ede:	3f01      	subs	r7, #1
 8002ee0:	2f16      	cmp	r7, #22
 8002ee2:	d852      	bhi.n	8002f8a <_dtoa_r+0x212>
 8002ee4:	4b5d      	ldr	r3, [pc, #372]	@ (800305c <_dtoa_r+0x2e4>)
 8002ee6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002ef2:	f7fd fdf3 	bl	8000adc <__aeabi_dcmplt>
 8002ef6:	2800      	cmp	r0, #0
 8002ef8:	d049      	beq.n	8002f8e <_dtoa_r+0x216>
 8002efa:	3f01      	subs	r7, #1
 8002efc:	2300      	movs	r3, #0
 8002efe:	9310      	str	r3, [sp, #64]	@ 0x40
 8002f00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002f02:	1b9b      	subs	r3, r3, r6
 8002f04:	1e5a      	subs	r2, r3, #1
 8002f06:	bf45      	ittet	mi
 8002f08:	f1c3 0301 	rsbmi	r3, r3, #1
 8002f0c:	9300      	strmi	r3, [sp, #0]
 8002f0e:	2300      	movpl	r3, #0
 8002f10:	2300      	movmi	r3, #0
 8002f12:	9206      	str	r2, [sp, #24]
 8002f14:	bf54      	ite	pl
 8002f16:	9300      	strpl	r3, [sp, #0]
 8002f18:	9306      	strmi	r3, [sp, #24]
 8002f1a:	2f00      	cmp	r7, #0
 8002f1c:	db39      	blt.n	8002f92 <_dtoa_r+0x21a>
 8002f1e:	9b06      	ldr	r3, [sp, #24]
 8002f20:	970d      	str	r7, [sp, #52]	@ 0x34
 8002f22:	443b      	add	r3, r7
 8002f24:	9306      	str	r3, [sp, #24]
 8002f26:	2300      	movs	r3, #0
 8002f28:	9308      	str	r3, [sp, #32]
 8002f2a:	9b07      	ldr	r3, [sp, #28]
 8002f2c:	2b09      	cmp	r3, #9
 8002f2e:	d863      	bhi.n	8002ff8 <_dtoa_r+0x280>
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	bfc4      	itt	gt
 8002f34:	3b04      	subgt	r3, #4
 8002f36:	9307      	strgt	r3, [sp, #28]
 8002f38:	9b07      	ldr	r3, [sp, #28]
 8002f3a:	f1a3 0302 	sub.w	r3, r3, #2
 8002f3e:	bfcc      	ite	gt
 8002f40:	2400      	movgt	r4, #0
 8002f42:	2401      	movle	r4, #1
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d863      	bhi.n	8003010 <_dtoa_r+0x298>
 8002f48:	e8df f003 	tbb	[pc, r3]
 8002f4c:	2b375452 	.word	0x2b375452
 8002f50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8002f54:	441e      	add	r6, r3
 8002f56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002f5a:	2b20      	cmp	r3, #32
 8002f5c:	bfc1      	itttt	gt
 8002f5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002f62:	409f      	lslgt	r7, r3
 8002f64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002f68:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002f6c:	bfd6      	itet	le
 8002f6e:	f1c3 0320 	rsble	r3, r3, #32
 8002f72:	ea47 0003 	orrgt.w	r0, r7, r3
 8002f76:	fa04 f003 	lslle.w	r0, r4, r3
 8002f7a:	f7fd fac3 	bl	8000504 <__aeabi_ui2d>
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002f84:	3e01      	subs	r6, #1
 8002f86:	9212      	str	r2, [sp, #72]	@ 0x48
 8002f88:	e776      	b.n	8002e78 <_dtoa_r+0x100>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e7b7      	b.n	8002efe <_dtoa_r+0x186>
 8002f8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8002f90:	e7b6      	b.n	8002f00 <_dtoa_r+0x188>
 8002f92:	9b00      	ldr	r3, [sp, #0]
 8002f94:	1bdb      	subs	r3, r3, r7
 8002f96:	9300      	str	r3, [sp, #0]
 8002f98:	427b      	negs	r3, r7
 8002f9a:	9308      	str	r3, [sp, #32]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002fa0:	e7c3      	b.n	8002f2a <_dtoa_r+0x1b2>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fa6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002fa8:	eb07 0b03 	add.w	fp, r7, r3
 8002fac:	f10b 0301 	add.w	r3, fp, #1
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	9303      	str	r3, [sp, #12]
 8002fb4:	bfb8      	it	lt
 8002fb6:	2301      	movlt	r3, #1
 8002fb8:	e006      	b.n	8002fc8 <_dtoa_r+0x250>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	dd28      	ble.n	8003016 <_dtoa_r+0x29e>
 8002fc4:	469b      	mov	fp, r3
 8002fc6:	9303      	str	r3, [sp, #12]
 8002fc8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8002fcc:	2100      	movs	r1, #0
 8002fce:	2204      	movs	r2, #4
 8002fd0:	f102 0514 	add.w	r5, r2, #20
 8002fd4:	429d      	cmp	r5, r3
 8002fd6:	d926      	bls.n	8003026 <_dtoa_r+0x2ae>
 8002fd8:	6041      	str	r1, [r0, #4]
 8002fda:	4648      	mov	r0, r9
 8002fdc:	f000 fd9c 	bl	8003b18 <_Balloc>
 8002fe0:	4682      	mov	sl, r0
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d142      	bne.n	800306c <_dtoa_r+0x2f4>
 8002fe6:	4b1e      	ldr	r3, [pc, #120]	@ (8003060 <_dtoa_r+0x2e8>)
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f240 11af 	movw	r1, #431	@ 0x1af
 8002fee:	e6da      	b.n	8002da6 <_dtoa_r+0x2e>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	e7e3      	b.n	8002fbc <_dtoa_r+0x244>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e7d5      	b.n	8002fa4 <_dtoa_r+0x22c>
 8002ff8:	2401      	movs	r4, #1
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	9307      	str	r3, [sp, #28]
 8002ffe:	9409      	str	r4, [sp, #36]	@ 0x24
 8003000:	f04f 3bff 	mov.w	fp, #4294967295
 8003004:	2200      	movs	r2, #0
 8003006:	f8cd b00c 	str.w	fp, [sp, #12]
 800300a:	2312      	movs	r3, #18
 800300c:	920c      	str	r2, [sp, #48]	@ 0x30
 800300e:	e7db      	b.n	8002fc8 <_dtoa_r+0x250>
 8003010:	2301      	movs	r3, #1
 8003012:	9309      	str	r3, [sp, #36]	@ 0x24
 8003014:	e7f4      	b.n	8003000 <_dtoa_r+0x288>
 8003016:	f04f 0b01 	mov.w	fp, #1
 800301a:	f8cd b00c 	str.w	fp, [sp, #12]
 800301e:	465b      	mov	r3, fp
 8003020:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003024:	e7d0      	b.n	8002fc8 <_dtoa_r+0x250>
 8003026:	3101      	adds	r1, #1
 8003028:	0052      	lsls	r2, r2, #1
 800302a:	e7d1      	b.n	8002fd0 <_dtoa_r+0x258>
 800302c:	f3af 8000 	nop.w
 8003030:	636f4361 	.word	0x636f4361
 8003034:	3fd287a7 	.word	0x3fd287a7
 8003038:	8b60c8b3 	.word	0x8b60c8b3
 800303c:	3fc68a28 	.word	0x3fc68a28
 8003040:	509f79fb 	.word	0x509f79fb
 8003044:	3fd34413 	.word	0x3fd34413
 8003048:	08004a69 	.word	0x08004a69
 800304c:	08004a80 	.word	0x08004a80
 8003050:	7ff00000 	.word	0x7ff00000
 8003054:	08004a39 	.word	0x08004a39
 8003058:	3ff80000 	.word	0x3ff80000
 800305c:	08004bd0 	.word	0x08004bd0
 8003060:	08004ad8 	.word	0x08004ad8
 8003064:	08004a65 	.word	0x08004a65
 8003068:	08004a38 	.word	0x08004a38
 800306c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003070:	6018      	str	r0, [r3, #0]
 8003072:	9b03      	ldr	r3, [sp, #12]
 8003074:	2b0e      	cmp	r3, #14
 8003076:	f200 80a1 	bhi.w	80031bc <_dtoa_r+0x444>
 800307a:	2c00      	cmp	r4, #0
 800307c:	f000 809e 	beq.w	80031bc <_dtoa_r+0x444>
 8003080:	2f00      	cmp	r7, #0
 8003082:	dd33      	ble.n	80030ec <_dtoa_r+0x374>
 8003084:	4b9c      	ldr	r3, [pc, #624]	@ (80032f8 <_dtoa_r+0x580>)
 8003086:	f007 020f 	and.w	r2, r7, #15
 800308a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800308e:	ed93 7b00 	vldr	d7, [r3]
 8003092:	05f8      	lsls	r0, r7, #23
 8003094:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8003098:	ea4f 1427 	mov.w	r4, r7, asr #4
 800309c:	d516      	bpl.n	80030cc <_dtoa_r+0x354>
 800309e:	4b97      	ldr	r3, [pc, #604]	@ (80032fc <_dtoa_r+0x584>)
 80030a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80030a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80030a8:	f7fd fbd0 	bl	800084c <__aeabi_ddiv>
 80030ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030b0:	f004 040f 	and.w	r4, r4, #15
 80030b4:	2603      	movs	r6, #3
 80030b6:	4d91      	ldr	r5, [pc, #580]	@ (80032fc <_dtoa_r+0x584>)
 80030b8:	b954      	cbnz	r4, 80030d0 <_dtoa_r+0x358>
 80030ba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80030be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030c2:	f7fd fbc3 	bl	800084c <__aeabi_ddiv>
 80030c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030ca:	e028      	b.n	800311e <_dtoa_r+0x3a6>
 80030cc:	2602      	movs	r6, #2
 80030ce:	e7f2      	b.n	80030b6 <_dtoa_r+0x33e>
 80030d0:	07e1      	lsls	r1, r4, #31
 80030d2:	d508      	bpl.n	80030e6 <_dtoa_r+0x36e>
 80030d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80030d8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80030dc:	f7fd fa8c 	bl	80005f8 <__aeabi_dmul>
 80030e0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80030e4:	3601      	adds	r6, #1
 80030e6:	1064      	asrs	r4, r4, #1
 80030e8:	3508      	adds	r5, #8
 80030ea:	e7e5      	b.n	80030b8 <_dtoa_r+0x340>
 80030ec:	f000 80af 	beq.w	800324e <_dtoa_r+0x4d6>
 80030f0:	427c      	negs	r4, r7
 80030f2:	4b81      	ldr	r3, [pc, #516]	@ (80032f8 <_dtoa_r+0x580>)
 80030f4:	4d81      	ldr	r5, [pc, #516]	@ (80032fc <_dtoa_r+0x584>)
 80030f6:	f004 020f 	and.w	r2, r4, #15
 80030fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003106:	f7fd fa77 	bl	80005f8 <__aeabi_dmul>
 800310a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800310e:	1124      	asrs	r4, r4, #4
 8003110:	2300      	movs	r3, #0
 8003112:	2602      	movs	r6, #2
 8003114:	2c00      	cmp	r4, #0
 8003116:	f040 808f 	bne.w	8003238 <_dtoa_r+0x4c0>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d1d3      	bne.n	80030c6 <_dtoa_r+0x34e>
 800311e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003120:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8094 	beq.w	8003252 <_dtoa_r+0x4da>
 800312a:	4b75      	ldr	r3, [pc, #468]	@ (8003300 <_dtoa_r+0x588>)
 800312c:	2200      	movs	r2, #0
 800312e:	4620      	mov	r0, r4
 8003130:	4629      	mov	r1, r5
 8003132:	f7fd fcd3 	bl	8000adc <__aeabi_dcmplt>
 8003136:	2800      	cmp	r0, #0
 8003138:	f000 808b 	beq.w	8003252 <_dtoa_r+0x4da>
 800313c:	9b03      	ldr	r3, [sp, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 8087 	beq.w	8003252 <_dtoa_r+0x4da>
 8003144:	f1bb 0f00 	cmp.w	fp, #0
 8003148:	dd34      	ble.n	80031b4 <_dtoa_r+0x43c>
 800314a:	4620      	mov	r0, r4
 800314c:	4b6d      	ldr	r3, [pc, #436]	@ (8003304 <_dtoa_r+0x58c>)
 800314e:	2200      	movs	r2, #0
 8003150:	4629      	mov	r1, r5
 8003152:	f7fd fa51 	bl	80005f8 <__aeabi_dmul>
 8003156:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800315a:	f107 38ff 	add.w	r8, r7, #4294967295
 800315e:	3601      	adds	r6, #1
 8003160:	465c      	mov	r4, fp
 8003162:	4630      	mov	r0, r6
 8003164:	f7fd f9de 	bl	8000524 <__aeabi_i2d>
 8003168:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800316c:	f7fd fa44 	bl	80005f8 <__aeabi_dmul>
 8003170:	4b65      	ldr	r3, [pc, #404]	@ (8003308 <_dtoa_r+0x590>)
 8003172:	2200      	movs	r2, #0
 8003174:	f7fd f88a 	bl	800028c <__adddf3>
 8003178:	4605      	mov	r5, r0
 800317a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800317e:	2c00      	cmp	r4, #0
 8003180:	d16a      	bne.n	8003258 <_dtoa_r+0x4e0>
 8003182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003186:	4b61      	ldr	r3, [pc, #388]	@ (800330c <_dtoa_r+0x594>)
 8003188:	2200      	movs	r2, #0
 800318a:	f7fd f87d 	bl	8000288 <__aeabi_dsub>
 800318e:	4602      	mov	r2, r0
 8003190:	460b      	mov	r3, r1
 8003192:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003196:	462a      	mov	r2, r5
 8003198:	4633      	mov	r3, r6
 800319a:	f7fd fcbd 	bl	8000b18 <__aeabi_dcmpgt>
 800319e:	2800      	cmp	r0, #0
 80031a0:	f040 8298 	bne.w	80036d4 <_dtoa_r+0x95c>
 80031a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031a8:	462a      	mov	r2, r5
 80031aa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80031ae:	f7fd fc95 	bl	8000adc <__aeabi_dcmplt>
 80031b2:	bb38      	cbnz	r0, 8003204 <_dtoa_r+0x48c>
 80031b4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80031b8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80031bc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f2c0 8157 	blt.w	8003472 <_dtoa_r+0x6fa>
 80031c4:	2f0e      	cmp	r7, #14
 80031c6:	f300 8154 	bgt.w	8003472 <_dtoa_r+0x6fa>
 80031ca:	4b4b      	ldr	r3, [pc, #300]	@ (80032f8 <_dtoa_r+0x580>)
 80031cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80031d0:	ed93 7b00 	vldr	d7, [r3]
 80031d4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	ed8d 7b00 	vstr	d7, [sp]
 80031dc:	f280 80e5 	bge.w	80033aa <_dtoa_r+0x632>
 80031e0:	9b03      	ldr	r3, [sp, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f300 80e1 	bgt.w	80033aa <_dtoa_r+0x632>
 80031e8:	d10c      	bne.n	8003204 <_dtoa_r+0x48c>
 80031ea:	4b48      	ldr	r3, [pc, #288]	@ (800330c <_dtoa_r+0x594>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	ec51 0b17 	vmov	r0, r1, d7
 80031f2:	f7fd fa01 	bl	80005f8 <__aeabi_dmul>
 80031f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031fa:	f7fd fc83 	bl	8000b04 <__aeabi_dcmpge>
 80031fe:	2800      	cmp	r0, #0
 8003200:	f000 8266 	beq.w	80036d0 <_dtoa_r+0x958>
 8003204:	2400      	movs	r4, #0
 8003206:	4625      	mov	r5, r4
 8003208:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800320a:	4656      	mov	r6, sl
 800320c:	ea6f 0803 	mvn.w	r8, r3
 8003210:	2700      	movs	r7, #0
 8003212:	4621      	mov	r1, r4
 8003214:	4648      	mov	r0, r9
 8003216:	f000 fcbf 	bl	8003b98 <_Bfree>
 800321a:	2d00      	cmp	r5, #0
 800321c:	f000 80bd 	beq.w	800339a <_dtoa_r+0x622>
 8003220:	b12f      	cbz	r7, 800322e <_dtoa_r+0x4b6>
 8003222:	42af      	cmp	r7, r5
 8003224:	d003      	beq.n	800322e <_dtoa_r+0x4b6>
 8003226:	4639      	mov	r1, r7
 8003228:	4648      	mov	r0, r9
 800322a:	f000 fcb5 	bl	8003b98 <_Bfree>
 800322e:	4629      	mov	r1, r5
 8003230:	4648      	mov	r0, r9
 8003232:	f000 fcb1 	bl	8003b98 <_Bfree>
 8003236:	e0b0      	b.n	800339a <_dtoa_r+0x622>
 8003238:	07e2      	lsls	r2, r4, #31
 800323a:	d505      	bpl.n	8003248 <_dtoa_r+0x4d0>
 800323c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003240:	f7fd f9da 	bl	80005f8 <__aeabi_dmul>
 8003244:	3601      	adds	r6, #1
 8003246:	2301      	movs	r3, #1
 8003248:	1064      	asrs	r4, r4, #1
 800324a:	3508      	adds	r5, #8
 800324c:	e762      	b.n	8003114 <_dtoa_r+0x39c>
 800324e:	2602      	movs	r6, #2
 8003250:	e765      	b.n	800311e <_dtoa_r+0x3a6>
 8003252:	9c03      	ldr	r4, [sp, #12]
 8003254:	46b8      	mov	r8, r7
 8003256:	e784      	b.n	8003162 <_dtoa_r+0x3ea>
 8003258:	4b27      	ldr	r3, [pc, #156]	@ (80032f8 <_dtoa_r+0x580>)
 800325a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800325c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003260:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003264:	4454      	add	r4, sl
 8003266:	2900      	cmp	r1, #0
 8003268:	d054      	beq.n	8003314 <_dtoa_r+0x59c>
 800326a:	4929      	ldr	r1, [pc, #164]	@ (8003310 <_dtoa_r+0x598>)
 800326c:	2000      	movs	r0, #0
 800326e:	f7fd faed 	bl	800084c <__aeabi_ddiv>
 8003272:	4633      	mov	r3, r6
 8003274:	462a      	mov	r2, r5
 8003276:	f7fd f807 	bl	8000288 <__aeabi_dsub>
 800327a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800327e:	4656      	mov	r6, sl
 8003280:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003284:	f7fd fc68 	bl	8000b58 <__aeabi_d2iz>
 8003288:	4605      	mov	r5, r0
 800328a:	f7fd f94b 	bl	8000524 <__aeabi_i2d>
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003296:	f7fc fff7 	bl	8000288 <__aeabi_dsub>
 800329a:	3530      	adds	r5, #48	@ 0x30
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032a4:	f806 5b01 	strb.w	r5, [r6], #1
 80032a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80032ac:	f7fd fc16 	bl	8000adc <__aeabi_dcmplt>
 80032b0:	2800      	cmp	r0, #0
 80032b2:	d172      	bne.n	800339a <_dtoa_r+0x622>
 80032b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032b8:	4911      	ldr	r1, [pc, #68]	@ (8003300 <_dtoa_r+0x588>)
 80032ba:	2000      	movs	r0, #0
 80032bc:	f7fc ffe4 	bl	8000288 <__aeabi_dsub>
 80032c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80032c4:	f7fd fc0a 	bl	8000adc <__aeabi_dcmplt>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	f040 80b4 	bne.w	8003436 <_dtoa_r+0x6be>
 80032ce:	42a6      	cmp	r6, r4
 80032d0:	f43f af70 	beq.w	80031b4 <_dtoa_r+0x43c>
 80032d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80032d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003304 <_dtoa_r+0x58c>)
 80032da:	2200      	movs	r2, #0
 80032dc:	f7fd f98c 	bl	80005f8 <__aeabi_dmul>
 80032e0:	4b08      	ldr	r3, [pc, #32]	@ (8003304 <_dtoa_r+0x58c>)
 80032e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80032e6:	2200      	movs	r2, #0
 80032e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032ec:	f7fd f984 	bl	80005f8 <__aeabi_dmul>
 80032f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80032f4:	e7c4      	b.n	8003280 <_dtoa_r+0x508>
 80032f6:	bf00      	nop
 80032f8:	08004bd0 	.word	0x08004bd0
 80032fc:	08004ba8 	.word	0x08004ba8
 8003300:	3ff00000 	.word	0x3ff00000
 8003304:	40240000 	.word	0x40240000
 8003308:	401c0000 	.word	0x401c0000
 800330c:	40140000 	.word	0x40140000
 8003310:	3fe00000 	.word	0x3fe00000
 8003314:	4631      	mov	r1, r6
 8003316:	4628      	mov	r0, r5
 8003318:	f7fd f96e 	bl	80005f8 <__aeabi_dmul>
 800331c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003320:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003322:	4656      	mov	r6, sl
 8003324:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003328:	f7fd fc16 	bl	8000b58 <__aeabi_d2iz>
 800332c:	4605      	mov	r5, r0
 800332e:	f7fd f8f9 	bl	8000524 <__aeabi_i2d>
 8003332:	4602      	mov	r2, r0
 8003334:	460b      	mov	r3, r1
 8003336:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800333a:	f7fc ffa5 	bl	8000288 <__aeabi_dsub>
 800333e:	3530      	adds	r5, #48	@ 0x30
 8003340:	f806 5b01 	strb.w	r5, [r6], #1
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	42a6      	cmp	r6, r4
 800334a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800334e:	f04f 0200 	mov.w	r2, #0
 8003352:	d124      	bne.n	800339e <_dtoa_r+0x626>
 8003354:	4baf      	ldr	r3, [pc, #700]	@ (8003614 <_dtoa_r+0x89c>)
 8003356:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800335a:	f7fc ff97 	bl	800028c <__adddf3>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003366:	f7fd fbd7 	bl	8000b18 <__aeabi_dcmpgt>
 800336a:	2800      	cmp	r0, #0
 800336c:	d163      	bne.n	8003436 <_dtoa_r+0x6be>
 800336e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003372:	49a8      	ldr	r1, [pc, #672]	@ (8003614 <_dtoa_r+0x89c>)
 8003374:	2000      	movs	r0, #0
 8003376:	f7fc ff87 	bl	8000288 <__aeabi_dsub>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003382:	f7fd fbab 	bl	8000adc <__aeabi_dcmplt>
 8003386:	2800      	cmp	r0, #0
 8003388:	f43f af14 	beq.w	80031b4 <_dtoa_r+0x43c>
 800338c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800338e:	1e73      	subs	r3, r6, #1
 8003390:	9313      	str	r3, [sp, #76]	@ 0x4c
 8003392:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003396:	2b30      	cmp	r3, #48	@ 0x30
 8003398:	d0f8      	beq.n	800338c <_dtoa_r+0x614>
 800339a:	4647      	mov	r7, r8
 800339c:	e03b      	b.n	8003416 <_dtoa_r+0x69e>
 800339e:	4b9e      	ldr	r3, [pc, #632]	@ (8003618 <_dtoa_r+0x8a0>)
 80033a0:	f7fd f92a 	bl	80005f8 <__aeabi_dmul>
 80033a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033a8:	e7bc      	b.n	8003324 <_dtoa_r+0x5ac>
 80033aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80033ae:	4656      	mov	r6, sl
 80033b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fd fa48 	bl	800084c <__aeabi_ddiv>
 80033bc:	f7fd fbcc 	bl	8000b58 <__aeabi_d2iz>
 80033c0:	4680      	mov	r8, r0
 80033c2:	f7fd f8af 	bl	8000524 <__aeabi_i2d>
 80033c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033ca:	f7fd f915 	bl	80005f8 <__aeabi_dmul>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4620      	mov	r0, r4
 80033d4:	4629      	mov	r1, r5
 80033d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80033da:	f7fc ff55 	bl	8000288 <__aeabi_dsub>
 80033de:	f806 4b01 	strb.w	r4, [r6], #1
 80033e2:	9d03      	ldr	r5, [sp, #12]
 80033e4:	eba6 040a 	sub.w	r4, r6, sl
 80033e8:	42a5      	cmp	r5, r4
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	d133      	bne.n	8003458 <_dtoa_r+0x6e0>
 80033f0:	f7fc ff4c 	bl	800028c <__adddf3>
 80033f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033f8:	4604      	mov	r4, r0
 80033fa:	460d      	mov	r5, r1
 80033fc:	f7fd fb8c 	bl	8000b18 <__aeabi_dcmpgt>
 8003400:	b9c0      	cbnz	r0, 8003434 <_dtoa_r+0x6bc>
 8003402:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003406:	4620      	mov	r0, r4
 8003408:	4629      	mov	r1, r5
 800340a:	f7fd fb5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800340e:	b110      	cbz	r0, 8003416 <_dtoa_r+0x69e>
 8003410:	f018 0f01 	tst.w	r8, #1
 8003414:	d10e      	bne.n	8003434 <_dtoa_r+0x6bc>
 8003416:	9902      	ldr	r1, [sp, #8]
 8003418:	4648      	mov	r0, r9
 800341a:	f000 fbbd 	bl	8003b98 <_Bfree>
 800341e:	2300      	movs	r3, #0
 8003420:	7033      	strb	r3, [r6, #0]
 8003422:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003424:	3701      	adds	r7, #1
 8003426:	601f      	str	r7, [r3, #0]
 8003428:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800342a:	2b00      	cmp	r3, #0
 800342c:	f000 824b 	beq.w	80038c6 <_dtoa_r+0xb4e>
 8003430:	601e      	str	r6, [r3, #0]
 8003432:	e248      	b.n	80038c6 <_dtoa_r+0xb4e>
 8003434:	46b8      	mov	r8, r7
 8003436:	4633      	mov	r3, r6
 8003438:	461e      	mov	r6, r3
 800343a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800343e:	2a39      	cmp	r2, #57	@ 0x39
 8003440:	d106      	bne.n	8003450 <_dtoa_r+0x6d8>
 8003442:	459a      	cmp	sl, r3
 8003444:	d1f8      	bne.n	8003438 <_dtoa_r+0x6c0>
 8003446:	2230      	movs	r2, #48	@ 0x30
 8003448:	f108 0801 	add.w	r8, r8, #1
 800344c:	f88a 2000 	strb.w	r2, [sl]
 8003450:	781a      	ldrb	r2, [r3, #0]
 8003452:	3201      	adds	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e7a0      	b.n	800339a <_dtoa_r+0x622>
 8003458:	4b6f      	ldr	r3, [pc, #444]	@ (8003618 <_dtoa_r+0x8a0>)
 800345a:	2200      	movs	r2, #0
 800345c:	f7fd f8cc 	bl	80005f8 <__aeabi_dmul>
 8003460:	2200      	movs	r2, #0
 8003462:	2300      	movs	r3, #0
 8003464:	4604      	mov	r4, r0
 8003466:	460d      	mov	r5, r1
 8003468:	f7fd fb2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800346c:	2800      	cmp	r0, #0
 800346e:	d09f      	beq.n	80033b0 <_dtoa_r+0x638>
 8003470:	e7d1      	b.n	8003416 <_dtoa_r+0x69e>
 8003472:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003474:	2a00      	cmp	r2, #0
 8003476:	f000 80ea 	beq.w	800364e <_dtoa_r+0x8d6>
 800347a:	9a07      	ldr	r2, [sp, #28]
 800347c:	2a01      	cmp	r2, #1
 800347e:	f300 80cd 	bgt.w	800361c <_dtoa_r+0x8a4>
 8003482:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003484:	2a00      	cmp	r2, #0
 8003486:	f000 80c1 	beq.w	800360c <_dtoa_r+0x894>
 800348a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800348e:	9c08      	ldr	r4, [sp, #32]
 8003490:	9e00      	ldr	r6, [sp, #0]
 8003492:	9a00      	ldr	r2, [sp, #0]
 8003494:	441a      	add	r2, r3
 8003496:	9200      	str	r2, [sp, #0]
 8003498:	9a06      	ldr	r2, [sp, #24]
 800349a:	2101      	movs	r1, #1
 800349c:	441a      	add	r2, r3
 800349e:	4648      	mov	r0, r9
 80034a0:	9206      	str	r2, [sp, #24]
 80034a2:	f000 fc2d 	bl	8003d00 <__i2b>
 80034a6:	4605      	mov	r5, r0
 80034a8:	b166      	cbz	r6, 80034c4 <_dtoa_r+0x74c>
 80034aa:	9b06      	ldr	r3, [sp, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	dd09      	ble.n	80034c4 <_dtoa_r+0x74c>
 80034b0:	42b3      	cmp	r3, r6
 80034b2:	9a00      	ldr	r2, [sp, #0]
 80034b4:	bfa8      	it	ge
 80034b6:	4633      	movge	r3, r6
 80034b8:	1ad2      	subs	r2, r2, r3
 80034ba:	9200      	str	r2, [sp, #0]
 80034bc:	9a06      	ldr	r2, [sp, #24]
 80034be:	1af6      	subs	r6, r6, r3
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	9306      	str	r3, [sp, #24]
 80034c4:	9b08      	ldr	r3, [sp, #32]
 80034c6:	b30b      	cbz	r3, 800350c <_dtoa_r+0x794>
 80034c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 80c6 	beq.w	800365c <_dtoa_r+0x8e4>
 80034d0:	2c00      	cmp	r4, #0
 80034d2:	f000 80c0 	beq.w	8003656 <_dtoa_r+0x8de>
 80034d6:	4629      	mov	r1, r5
 80034d8:	4622      	mov	r2, r4
 80034da:	4648      	mov	r0, r9
 80034dc:	f000 fcc8 	bl	8003e70 <__pow5mult>
 80034e0:	9a02      	ldr	r2, [sp, #8]
 80034e2:	4601      	mov	r1, r0
 80034e4:	4605      	mov	r5, r0
 80034e6:	4648      	mov	r0, r9
 80034e8:	f000 fc20 	bl	8003d2c <__multiply>
 80034ec:	9902      	ldr	r1, [sp, #8]
 80034ee:	4680      	mov	r8, r0
 80034f0:	4648      	mov	r0, r9
 80034f2:	f000 fb51 	bl	8003b98 <_Bfree>
 80034f6:	9b08      	ldr	r3, [sp, #32]
 80034f8:	1b1b      	subs	r3, r3, r4
 80034fa:	9308      	str	r3, [sp, #32]
 80034fc:	f000 80b1 	beq.w	8003662 <_dtoa_r+0x8ea>
 8003500:	9a08      	ldr	r2, [sp, #32]
 8003502:	4641      	mov	r1, r8
 8003504:	4648      	mov	r0, r9
 8003506:	f000 fcb3 	bl	8003e70 <__pow5mult>
 800350a:	9002      	str	r0, [sp, #8]
 800350c:	2101      	movs	r1, #1
 800350e:	4648      	mov	r0, r9
 8003510:	f000 fbf6 	bl	8003d00 <__i2b>
 8003514:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003516:	4604      	mov	r4, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 81d8 	beq.w	80038ce <_dtoa_r+0xb56>
 800351e:	461a      	mov	r2, r3
 8003520:	4601      	mov	r1, r0
 8003522:	4648      	mov	r0, r9
 8003524:	f000 fca4 	bl	8003e70 <__pow5mult>
 8003528:	9b07      	ldr	r3, [sp, #28]
 800352a:	2b01      	cmp	r3, #1
 800352c:	4604      	mov	r4, r0
 800352e:	f300 809f 	bgt.w	8003670 <_dtoa_r+0x8f8>
 8003532:	9b04      	ldr	r3, [sp, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	f040 8097 	bne.w	8003668 <_dtoa_r+0x8f0>
 800353a:	9b05      	ldr	r3, [sp, #20]
 800353c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003540:	2b00      	cmp	r3, #0
 8003542:	f040 8093 	bne.w	800366c <_dtoa_r+0x8f4>
 8003546:	9b05      	ldr	r3, [sp, #20]
 8003548:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800354c:	0d1b      	lsrs	r3, r3, #20
 800354e:	051b      	lsls	r3, r3, #20
 8003550:	b133      	cbz	r3, 8003560 <_dtoa_r+0x7e8>
 8003552:	9b00      	ldr	r3, [sp, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	9300      	str	r3, [sp, #0]
 8003558:	9b06      	ldr	r3, [sp, #24]
 800355a:	3301      	adds	r3, #1
 800355c:	9306      	str	r3, [sp, #24]
 800355e:	2301      	movs	r3, #1
 8003560:	9308      	str	r3, [sp, #32]
 8003562:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 81b8 	beq.w	80038da <_dtoa_r+0xb62>
 800356a:	6923      	ldr	r3, [r4, #16]
 800356c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003570:	6918      	ldr	r0, [r3, #16]
 8003572:	f000 fb79 	bl	8003c68 <__hi0bits>
 8003576:	f1c0 0020 	rsb	r0, r0, #32
 800357a:	9b06      	ldr	r3, [sp, #24]
 800357c:	4418      	add	r0, r3
 800357e:	f010 001f 	ands.w	r0, r0, #31
 8003582:	f000 8082 	beq.w	800368a <_dtoa_r+0x912>
 8003586:	f1c0 0320 	rsb	r3, r0, #32
 800358a:	2b04      	cmp	r3, #4
 800358c:	dd73      	ble.n	8003676 <_dtoa_r+0x8fe>
 800358e:	9b00      	ldr	r3, [sp, #0]
 8003590:	f1c0 001c 	rsb	r0, r0, #28
 8003594:	4403      	add	r3, r0
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	9b06      	ldr	r3, [sp, #24]
 800359a:	4403      	add	r3, r0
 800359c:	4406      	add	r6, r0
 800359e:	9306      	str	r3, [sp, #24]
 80035a0:	9b00      	ldr	r3, [sp, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	dd05      	ble.n	80035b2 <_dtoa_r+0x83a>
 80035a6:	9902      	ldr	r1, [sp, #8]
 80035a8:	461a      	mov	r2, r3
 80035aa:	4648      	mov	r0, r9
 80035ac:	f000 fcba 	bl	8003f24 <__lshift>
 80035b0:	9002      	str	r0, [sp, #8]
 80035b2:	9b06      	ldr	r3, [sp, #24]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	dd05      	ble.n	80035c4 <_dtoa_r+0x84c>
 80035b8:	4621      	mov	r1, r4
 80035ba:	461a      	mov	r2, r3
 80035bc:	4648      	mov	r0, r9
 80035be:	f000 fcb1 	bl	8003f24 <__lshift>
 80035c2:	4604      	mov	r4, r0
 80035c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d061      	beq.n	800368e <_dtoa_r+0x916>
 80035ca:	9802      	ldr	r0, [sp, #8]
 80035cc:	4621      	mov	r1, r4
 80035ce:	f000 fd15 	bl	8003ffc <__mcmp>
 80035d2:	2800      	cmp	r0, #0
 80035d4:	da5b      	bge.n	800368e <_dtoa_r+0x916>
 80035d6:	2300      	movs	r3, #0
 80035d8:	9902      	ldr	r1, [sp, #8]
 80035da:	220a      	movs	r2, #10
 80035dc:	4648      	mov	r0, r9
 80035de:	f000 fafd 	bl	8003bdc <__multadd>
 80035e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035e4:	9002      	str	r0, [sp, #8]
 80035e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 8177 	beq.w	80038de <_dtoa_r+0xb66>
 80035f0:	4629      	mov	r1, r5
 80035f2:	2300      	movs	r3, #0
 80035f4:	220a      	movs	r2, #10
 80035f6:	4648      	mov	r0, r9
 80035f8:	f000 faf0 	bl	8003bdc <__multadd>
 80035fc:	f1bb 0f00 	cmp.w	fp, #0
 8003600:	4605      	mov	r5, r0
 8003602:	dc6f      	bgt.n	80036e4 <_dtoa_r+0x96c>
 8003604:	9b07      	ldr	r3, [sp, #28]
 8003606:	2b02      	cmp	r3, #2
 8003608:	dc49      	bgt.n	800369e <_dtoa_r+0x926>
 800360a:	e06b      	b.n	80036e4 <_dtoa_r+0x96c>
 800360c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800360e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003612:	e73c      	b.n	800348e <_dtoa_r+0x716>
 8003614:	3fe00000 	.word	0x3fe00000
 8003618:	40240000 	.word	0x40240000
 800361c:	9b03      	ldr	r3, [sp, #12]
 800361e:	1e5c      	subs	r4, r3, #1
 8003620:	9b08      	ldr	r3, [sp, #32]
 8003622:	42a3      	cmp	r3, r4
 8003624:	db09      	blt.n	800363a <_dtoa_r+0x8c2>
 8003626:	1b1c      	subs	r4, r3, r4
 8003628:	9b03      	ldr	r3, [sp, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	f6bf af30 	bge.w	8003490 <_dtoa_r+0x718>
 8003630:	9b00      	ldr	r3, [sp, #0]
 8003632:	9a03      	ldr	r2, [sp, #12]
 8003634:	1a9e      	subs	r6, r3, r2
 8003636:	2300      	movs	r3, #0
 8003638:	e72b      	b.n	8003492 <_dtoa_r+0x71a>
 800363a:	9b08      	ldr	r3, [sp, #32]
 800363c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800363e:	9408      	str	r4, [sp, #32]
 8003640:	1ae3      	subs	r3, r4, r3
 8003642:	441a      	add	r2, r3
 8003644:	9e00      	ldr	r6, [sp, #0]
 8003646:	9b03      	ldr	r3, [sp, #12]
 8003648:	920d      	str	r2, [sp, #52]	@ 0x34
 800364a:	2400      	movs	r4, #0
 800364c:	e721      	b.n	8003492 <_dtoa_r+0x71a>
 800364e:	9c08      	ldr	r4, [sp, #32]
 8003650:	9e00      	ldr	r6, [sp, #0]
 8003652:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003654:	e728      	b.n	80034a8 <_dtoa_r+0x730>
 8003656:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800365a:	e751      	b.n	8003500 <_dtoa_r+0x788>
 800365c:	9a08      	ldr	r2, [sp, #32]
 800365e:	9902      	ldr	r1, [sp, #8]
 8003660:	e750      	b.n	8003504 <_dtoa_r+0x78c>
 8003662:	f8cd 8008 	str.w	r8, [sp, #8]
 8003666:	e751      	b.n	800350c <_dtoa_r+0x794>
 8003668:	2300      	movs	r3, #0
 800366a:	e779      	b.n	8003560 <_dtoa_r+0x7e8>
 800366c:	9b04      	ldr	r3, [sp, #16]
 800366e:	e777      	b.n	8003560 <_dtoa_r+0x7e8>
 8003670:	2300      	movs	r3, #0
 8003672:	9308      	str	r3, [sp, #32]
 8003674:	e779      	b.n	800356a <_dtoa_r+0x7f2>
 8003676:	d093      	beq.n	80035a0 <_dtoa_r+0x828>
 8003678:	9a00      	ldr	r2, [sp, #0]
 800367a:	331c      	adds	r3, #28
 800367c:	441a      	add	r2, r3
 800367e:	9200      	str	r2, [sp, #0]
 8003680:	9a06      	ldr	r2, [sp, #24]
 8003682:	441a      	add	r2, r3
 8003684:	441e      	add	r6, r3
 8003686:	9206      	str	r2, [sp, #24]
 8003688:	e78a      	b.n	80035a0 <_dtoa_r+0x828>
 800368a:	4603      	mov	r3, r0
 800368c:	e7f4      	b.n	8003678 <_dtoa_r+0x900>
 800368e:	9b03      	ldr	r3, [sp, #12]
 8003690:	2b00      	cmp	r3, #0
 8003692:	46b8      	mov	r8, r7
 8003694:	dc20      	bgt.n	80036d8 <_dtoa_r+0x960>
 8003696:	469b      	mov	fp, r3
 8003698:	9b07      	ldr	r3, [sp, #28]
 800369a:	2b02      	cmp	r3, #2
 800369c:	dd1e      	ble.n	80036dc <_dtoa_r+0x964>
 800369e:	f1bb 0f00 	cmp.w	fp, #0
 80036a2:	f47f adb1 	bne.w	8003208 <_dtoa_r+0x490>
 80036a6:	4621      	mov	r1, r4
 80036a8:	465b      	mov	r3, fp
 80036aa:	2205      	movs	r2, #5
 80036ac:	4648      	mov	r0, r9
 80036ae:	f000 fa95 	bl	8003bdc <__multadd>
 80036b2:	4601      	mov	r1, r0
 80036b4:	4604      	mov	r4, r0
 80036b6:	9802      	ldr	r0, [sp, #8]
 80036b8:	f000 fca0 	bl	8003ffc <__mcmp>
 80036bc:	2800      	cmp	r0, #0
 80036be:	f77f ada3 	ble.w	8003208 <_dtoa_r+0x490>
 80036c2:	4656      	mov	r6, sl
 80036c4:	2331      	movs	r3, #49	@ 0x31
 80036c6:	f806 3b01 	strb.w	r3, [r6], #1
 80036ca:	f108 0801 	add.w	r8, r8, #1
 80036ce:	e59f      	b.n	8003210 <_dtoa_r+0x498>
 80036d0:	9c03      	ldr	r4, [sp, #12]
 80036d2:	46b8      	mov	r8, r7
 80036d4:	4625      	mov	r5, r4
 80036d6:	e7f4      	b.n	80036c2 <_dtoa_r+0x94a>
 80036d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80036dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f000 8101 	beq.w	80038e6 <_dtoa_r+0xb6e>
 80036e4:	2e00      	cmp	r6, #0
 80036e6:	dd05      	ble.n	80036f4 <_dtoa_r+0x97c>
 80036e8:	4629      	mov	r1, r5
 80036ea:	4632      	mov	r2, r6
 80036ec:	4648      	mov	r0, r9
 80036ee:	f000 fc19 	bl	8003f24 <__lshift>
 80036f2:	4605      	mov	r5, r0
 80036f4:	9b08      	ldr	r3, [sp, #32]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d05c      	beq.n	80037b4 <_dtoa_r+0xa3c>
 80036fa:	6869      	ldr	r1, [r5, #4]
 80036fc:	4648      	mov	r0, r9
 80036fe:	f000 fa0b 	bl	8003b18 <_Balloc>
 8003702:	4606      	mov	r6, r0
 8003704:	b928      	cbnz	r0, 8003712 <_dtoa_r+0x99a>
 8003706:	4b82      	ldr	r3, [pc, #520]	@ (8003910 <_dtoa_r+0xb98>)
 8003708:	4602      	mov	r2, r0
 800370a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800370e:	f7ff bb4a 	b.w	8002da6 <_dtoa_r+0x2e>
 8003712:	692a      	ldr	r2, [r5, #16]
 8003714:	3202      	adds	r2, #2
 8003716:	0092      	lsls	r2, r2, #2
 8003718:	f105 010c 	add.w	r1, r5, #12
 800371c:	300c      	adds	r0, #12
 800371e:	f000 fff7 	bl	8004710 <memcpy>
 8003722:	2201      	movs	r2, #1
 8003724:	4631      	mov	r1, r6
 8003726:	4648      	mov	r0, r9
 8003728:	f000 fbfc 	bl	8003f24 <__lshift>
 800372c:	f10a 0301 	add.w	r3, sl, #1
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	eb0a 030b 	add.w	r3, sl, fp
 8003736:	9308      	str	r3, [sp, #32]
 8003738:	9b04      	ldr	r3, [sp, #16]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	462f      	mov	r7, r5
 8003740:	9306      	str	r3, [sp, #24]
 8003742:	4605      	mov	r5, r0
 8003744:	9b00      	ldr	r3, [sp, #0]
 8003746:	9802      	ldr	r0, [sp, #8]
 8003748:	4621      	mov	r1, r4
 800374a:	f103 3bff 	add.w	fp, r3, #4294967295
 800374e:	f7ff fa8a 	bl	8002c66 <quorem>
 8003752:	4603      	mov	r3, r0
 8003754:	3330      	adds	r3, #48	@ 0x30
 8003756:	9003      	str	r0, [sp, #12]
 8003758:	4639      	mov	r1, r7
 800375a:	9802      	ldr	r0, [sp, #8]
 800375c:	9309      	str	r3, [sp, #36]	@ 0x24
 800375e:	f000 fc4d 	bl	8003ffc <__mcmp>
 8003762:	462a      	mov	r2, r5
 8003764:	9004      	str	r0, [sp, #16]
 8003766:	4621      	mov	r1, r4
 8003768:	4648      	mov	r0, r9
 800376a:	f000 fc63 	bl	8004034 <__mdiff>
 800376e:	68c2      	ldr	r2, [r0, #12]
 8003770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003772:	4606      	mov	r6, r0
 8003774:	bb02      	cbnz	r2, 80037b8 <_dtoa_r+0xa40>
 8003776:	4601      	mov	r1, r0
 8003778:	9802      	ldr	r0, [sp, #8]
 800377a:	f000 fc3f 	bl	8003ffc <__mcmp>
 800377e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003780:	4602      	mov	r2, r0
 8003782:	4631      	mov	r1, r6
 8003784:	4648      	mov	r0, r9
 8003786:	920c      	str	r2, [sp, #48]	@ 0x30
 8003788:	9309      	str	r3, [sp, #36]	@ 0x24
 800378a:	f000 fa05 	bl	8003b98 <_Bfree>
 800378e:	9b07      	ldr	r3, [sp, #28]
 8003790:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003792:	9e00      	ldr	r6, [sp, #0]
 8003794:	ea42 0103 	orr.w	r1, r2, r3
 8003798:	9b06      	ldr	r3, [sp, #24]
 800379a:	4319      	orrs	r1, r3
 800379c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800379e:	d10d      	bne.n	80037bc <_dtoa_r+0xa44>
 80037a0:	2b39      	cmp	r3, #57	@ 0x39
 80037a2:	d027      	beq.n	80037f4 <_dtoa_r+0xa7c>
 80037a4:	9a04      	ldr	r2, [sp, #16]
 80037a6:	2a00      	cmp	r2, #0
 80037a8:	dd01      	ble.n	80037ae <_dtoa_r+0xa36>
 80037aa:	9b03      	ldr	r3, [sp, #12]
 80037ac:	3331      	adds	r3, #49	@ 0x31
 80037ae:	f88b 3000 	strb.w	r3, [fp]
 80037b2:	e52e      	b.n	8003212 <_dtoa_r+0x49a>
 80037b4:	4628      	mov	r0, r5
 80037b6:	e7b9      	b.n	800372c <_dtoa_r+0x9b4>
 80037b8:	2201      	movs	r2, #1
 80037ba:	e7e2      	b.n	8003782 <_dtoa_r+0xa0a>
 80037bc:	9904      	ldr	r1, [sp, #16]
 80037be:	2900      	cmp	r1, #0
 80037c0:	db04      	blt.n	80037cc <_dtoa_r+0xa54>
 80037c2:	9807      	ldr	r0, [sp, #28]
 80037c4:	4301      	orrs	r1, r0
 80037c6:	9806      	ldr	r0, [sp, #24]
 80037c8:	4301      	orrs	r1, r0
 80037ca:	d120      	bne.n	800380e <_dtoa_r+0xa96>
 80037cc:	2a00      	cmp	r2, #0
 80037ce:	ddee      	ble.n	80037ae <_dtoa_r+0xa36>
 80037d0:	9902      	ldr	r1, [sp, #8]
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	2201      	movs	r2, #1
 80037d6:	4648      	mov	r0, r9
 80037d8:	f000 fba4 	bl	8003f24 <__lshift>
 80037dc:	4621      	mov	r1, r4
 80037de:	9002      	str	r0, [sp, #8]
 80037e0:	f000 fc0c 	bl	8003ffc <__mcmp>
 80037e4:	2800      	cmp	r0, #0
 80037e6:	9b00      	ldr	r3, [sp, #0]
 80037e8:	dc02      	bgt.n	80037f0 <_dtoa_r+0xa78>
 80037ea:	d1e0      	bne.n	80037ae <_dtoa_r+0xa36>
 80037ec:	07da      	lsls	r2, r3, #31
 80037ee:	d5de      	bpl.n	80037ae <_dtoa_r+0xa36>
 80037f0:	2b39      	cmp	r3, #57	@ 0x39
 80037f2:	d1da      	bne.n	80037aa <_dtoa_r+0xa32>
 80037f4:	2339      	movs	r3, #57	@ 0x39
 80037f6:	f88b 3000 	strb.w	r3, [fp]
 80037fa:	4633      	mov	r3, r6
 80037fc:	461e      	mov	r6, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003804:	2a39      	cmp	r2, #57	@ 0x39
 8003806:	d04e      	beq.n	80038a6 <_dtoa_r+0xb2e>
 8003808:	3201      	adds	r2, #1
 800380a:	701a      	strb	r2, [r3, #0]
 800380c:	e501      	b.n	8003212 <_dtoa_r+0x49a>
 800380e:	2a00      	cmp	r2, #0
 8003810:	dd03      	ble.n	800381a <_dtoa_r+0xaa2>
 8003812:	2b39      	cmp	r3, #57	@ 0x39
 8003814:	d0ee      	beq.n	80037f4 <_dtoa_r+0xa7c>
 8003816:	3301      	adds	r3, #1
 8003818:	e7c9      	b.n	80037ae <_dtoa_r+0xa36>
 800381a:	9a00      	ldr	r2, [sp, #0]
 800381c:	9908      	ldr	r1, [sp, #32]
 800381e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003822:	428a      	cmp	r2, r1
 8003824:	d028      	beq.n	8003878 <_dtoa_r+0xb00>
 8003826:	9902      	ldr	r1, [sp, #8]
 8003828:	2300      	movs	r3, #0
 800382a:	220a      	movs	r2, #10
 800382c:	4648      	mov	r0, r9
 800382e:	f000 f9d5 	bl	8003bdc <__multadd>
 8003832:	42af      	cmp	r7, r5
 8003834:	9002      	str	r0, [sp, #8]
 8003836:	f04f 0300 	mov.w	r3, #0
 800383a:	f04f 020a 	mov.w	r2, #10
 800383e:	4639      	mov	r1, r7
 8003840:	4648      	mov	r0, r9
 8003842:	d107      	bne.n	8003854 <_dtoa_r+0xadc>
 8003844:	f000 f9ca 	bl	8003bdc <__multadd>
 8003848:	4607      	mov	r7, r0
 800384a:	4605      	mov	r5, r0
 800384c:	9b00      	ldr	r3, [sp, #0]
 800384e:	3301      	adds	r3, #1
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	e777      	b.n	8003744 <_dtoa_r+0x9cc>
 8003854:	f000 f9c2 	bl	8003bdc <__multadd>
 8003858:	4629      	mov	r1, r5
 800385a:	4607      	mov	r7, r0
 800385c:	2300      	movs	r3, #0
 800385e:	220a      	movs	r2, #10
 8003860:	4648      	mov	r0, r9
 8003862:	f000 f9bb 	bl	8003bdc <__multadd>
 8003866:	4605      	mov	r5, r0
 8003868:	e7f0      	b.n	800384c <_dtoa_r+0xad4>
 800386a:	f1bb 0f00 	cmp.w	fp, #0
 800386e:	bfcc      	ite	gt
 8003870:	465e      	movgt	r6, fp
 8003872:	2601      	movle	r6, #1
 8003874:	4456      	add	r6, sl
 8003876:	2700      	movs	r7, #0
 8003878:	9902      	ldr	r1, [sp, #8]
 800387a:	9300      	str	r3, [sp, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	4648      	mov	r0, r9
 8003880:	f000 fb50 	bl	8003f24 <__lshift>
 8003884:	4621      	mov	r1, r4
 8003886:	9002      	str	r0, [sp, #8]
 8003888:	f000 fbb8 	bl	8003ffc <__mcmp>
 800388c:	2800      	cmp	r0, #0
 800388e:	dcb4      	bgt.n	80037fa <_dtoa_r+0xa82>
 8003890:	d102      	bne.n	8003898 <_dtoa_r+0xb20>
 8003892:	9b00      	ldr	r3, [sp, #0]
 8003894:	07db      	lsls	r3, r3, #31
 8003896:	d4b0      	bmi.n	80037fa <_dtoa_r+0xa82>
 8003898:	4633      	mov	r3, r6
 800389a:	461e      	mov	r6, r3
 800389c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038a0:	2a30      	cmp	r2, #48	@ 0x30
 80038a2:	d0fa      	beq.n	800389a <_dtoa_r+0xb22>
 80038a4:	e4b5      	b.n	8003212 <_dtoa_r+0x49a>
 80038a6:	459a      	cmp	sl, r3
 80038a8:	d1a8      	bne.n	80037fc <_dtoa_r+0xa84>
 80038aa:	2331      	movs	r3, #49	@ 0x31
 80038ac:	f108 0801 	add.w	r8, r8, #1
 80038b0:	f88a 3000 	strb.w	r3, [sl]
 80038b4:	e4ad      	b.n	8003212 <_dtoa_r+0x49a>
 80038b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003914 <_dtoa_r+0xb9c>
 80038bc:	b11b      	cbz	r3, 80038c6 <_dtoa_r+0xb4e>
 80038be:	f10a 0308 	add.w	r3, sl, #8
 80038c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	4650      	mov	r0, sl
 80038c8:	b017      	add	sp, #92	@ 0x5c
 80038ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ce:	9b07      	ldr	r3, [sp, #28]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	f77f ae2e 	ble.w	8003532 <_dtoa_r+0x7ba>
 80038d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038d8:	9308      	str	r3, [sp, #32]
 80038da:	2001      	movs	r0, #1
 80038dc:	e64d      	b.n	800357a <_dtoa_r+0x802>
 80038de:	f1bb 0f00 	cmp.w	fp, #0
 80038e2:	f77f aed9 	ble.w	8003698 <_dtoa_r+0x920>
 80038e6:	4656      	mov	r6, sl
 80038e8:	9802      	ldr	r0, [sp, #8]
 80038ea:	4621      	mov	r1, r4
 80038ec:	f7ff f9bb 	bl	8002c66 <quorem>
 80038f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80038f4:	f806 3b01 	strb.w	r3, [r6], #1
 80038f8:	eba6 020a 	sub.w	r2, r6, sl
 80038fc:	4593      	cmp	fp, r2
 80038fe:	ddb4      	ble.n	800386a <_dtoa_r+0xaf2>
 8003900:	9902      	ldr	r1, [sp, #8]
 8003902:	2300      	movs	r3, #0
 8003904:	220a      	movs	r2, #10
 8003906:	4648      	mov	r0, r9
 8003908:	f000 f968 	bl	8003bdc <__multadd>
 800390c:	9002      	str	r0, [sp, #8]
 800390e:	e7eb      	b.n	80038e8 <_dtoa_r+0xb70>
 8003910:	08004ad8 	.word	0x08004ad8
 8003914:	08004a5c 	.word	0x08004a5c

08003918 <_free_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4605      	mov	r5, r0
 800391c:	2900      	cmp	r1, #0
 800391e:	d041      	beq.n	80039a4 <_free_r+0x8c>
 8003920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003924:	1f0c      	subs	r4, r1, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfb8      	it	lt
 800392a:	18e4      	addlt	r4, r4, r3
 800392c:	f000 f8e8 	bl	8003b00 <__malloc_lock>
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <_free_r+0x90>)
 8003932:	6813      	ldr	r3, [r2, #0]
 8003934:	b933      	cbnz	r3, 8003944 <_free_r+0x2c>
 8003936:	6063      	str	r3, [r4, #4]
 8003938:	6014      	str	r4, [r2, #0]
 800393a:	4628      	mov	r0, r5
 800393c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003940:	f000 b8e4 	b.w	8003b0c <__malloc_unlock>
 8003944:	42a3      	cmp	r3, r4
 8003946:	d908      	bls.n	800395a <_free_r+0x42>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	1821      	adds	r1, r4, r0
 800394c:	428b      	cmp	r3, r1
 800394e:	bf01      	itttt	eq
 8003950:	6819      	ldreq	r1, [r3, #0]
 8003952:	685b      	ldreq	r3, [r3, #4]
 8003954:	1809      	addeq	r1, r1, r0
 8003956:	6021      	streq	r1, [r4, #0]
 8003958:	e7ed      	b.n	8003936 <_free_r+0x1e>
 800395a:	461a      	mov	r2, r3
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b10b      	cbz	r3, 8003964 <_free_r+0x4c>
 8003960:	42a3      	cmp	r3, r4
 8003962:	d9fa      	bls.n	800395a <_free_r+0x42>
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	1850      	adds	r0, r2, r1
 8003968:	42a0      	cmp	r0, r4
 800396a:	d10b      	bne.n	8003984 <_free_r+0x6c>
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	4401      	add	r1, r0
 8003970:	1850      	adds	r0, r2, r1
 8003972:	4283      	cmp	r3, r0
 8003974:	6011      	str	r1, [r2, #0]
 8003976:	d1e0      	bne.n	800393a <_free_r+0x22>
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	6053      	str	r3, [r2, #4]
 800397e:	4408      	add	r0, r1
 8003980:	6010      	str	r0, [r2, #0]
 8003982:	e7da      	b.n	800393a <_free_r+0x22>
 8003984:	d902      	bls.n	800398c <_free_r+0x74>
 8003986:	230c      	movs	r3, #12
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	e7d6      	b.n	800393a <_free_r+0x22>
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	1821      	adds	r1, r4, r0
 8003990:	428b      	cmp	r3, r1
 8003992:	bf04      	itt	eq
 8003994:	6819      	ldreq	r1, [r3, #0]
 8003996:	685b      	ldreq	r3, [r3, #4]
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	bf04      	itt	eq
 800399c:	1809      	addeq	r1, r1, r0
 800399e:	6021      	streq	r1, [r4, #0]
 80039a0:	6054      	str	r4, [r2, #4]
 80039a2:	e7ca      	b.n	800393a <_free_r+0x22>
 80039a4:	bd38      	pop	{r3, r4, r5, pc}
 80039a6:	bf00      	nop
 80039a8:	2000038c 	.word	0x2000038c

080039ac <malloc>:
 80039ac:	4b02      	ldr	r3, [pc, #8]	@ (80039b8 <malloc+0xc>)
 80039ae:	4601      	mov	r1, r0
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	f000 b825 	b.w	8003a00 <_malloc_r>
 80039b6:	bf00      	nop
 80039b8:	2000000c 	.word	0x2000000c

080039bc <sbrk_aligned>:
 80039bc:	b570      	push	{r4, r5, r6, lr}
 80039be:	4e0f      	ldr	r6, [pc, #60]	@ (80039fc <sbrk_aligned+0x40>)
 80039c0:	460c      	mov	r4, r1
 80039c2:	6831      	ldr	r1, [r6, #0]
 80039c4:	4605      	mov	r5, r0
 80039c6:	b911      	cbnz	r1, 80039ce <sbrk_aligned+0x12>
 80039c8:	f000 fe92 	bl	80046f0 <_sbrk_r>
 80039cc:	6030      	str	r0, [r6, #0]
 80039ce:	4621      	mov	r1, r4
 80039d0:	4628      	mov	r0, r5
 80039d2:	f000 fe8d 	bl	80046f0 <_sbrk_r>
 80039d6:	1c43      	adds	r3, r0, #1
 80039d8:	d103      	bne.n	80039e2 <sbrk_aligned+0x26>
 80039da:	f04f 34ff 	mov.w	r4, #4294967295
 80039de:	4620      	mov	r0, r4
 80039e0:	bd70      	pop	{r4, r5, r6, pc}
 80039e2:	1cc4      	adds	r4, r0, #3
 80039e4:	f024 0403 	bic.w	r4, r4, #3
 80039e8:	42a0      	cmp	r0, r4
 80039ea:	d0f8      	beq.n	80039de <sbrk_aligned+0x22>
 80039ec:	1a21      	subs	r1, r4, r0
 80039ee:	4628      	mov	r0, r5
 80039f0:	f000 fe7e 	bl	80046f0 <_sbrk_r>
 80039f4:	3001      	adds	r0, #1
 80039f6:	d1f2      	bne.n	80039de <sbrk_aligned+0x22>
 80039f8:	e7ef      	b.n	80039da <sbrk_aligned+0x1e>
 80039fa:	bf00      	nop
 80039fc:	20000388 	.word	0x20000388

08003a00 <_malloc_r>:
 8003a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a04:	1ccd      	adds	r5, r1, #3
 8003a06:	f025 0503 	bic.w	r5, r5, #3
 8003a0a:	3508      	adds	r5, #8
 8003a0c:	2d0c      	cmp	r5, #12
 8003a0e:	bf38      	it	cc
 8003a10:	250c      	movcc	r5, #12
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	4606      	mov	r6, r0
 8003a16:	db01      	blt.n	8003a1c <_malloc_r+0x1c>
 8003a18:	42a9      	cmp	r1, r5
 8003a1a:	d904      	bls.n	8003a26 <_malloc_r+0x26>
 8003a1c:	230c      	movs	r3, #12
 8003a1e:	6033      	str	r3, [r6, #0]
 8003a20:	2000      	movs	r0, #0
 8003a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003afc <_malloc_r+0xfc>
 8003a2a:	f000 f869 	bl	8003b00 <__malloc_lock>
 8003a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a32:	461c      	mov	r4, r3
 8003a34:	bb44      	cbnz	r4, 8003a88 <_malloc_r+0x88>
 8003a36:	4629      	mov	r1, r5
 8003a38:	4630      	mov	r0, r6
 8003a3a:	f7ff ffbf 	bl	80039bc <sbrk_aligned>
 8003a3e:	1c43      	adds	r3, r0, #1
 8003a40:	4604      	mov	r4, r0
 8003a42:	d158      	bne.n	8003af6 <_malloc_r+0xf6>
 8003a44:	f8d8 4000 	ldr.w	r4, [r8]
 8003a48:	4627      	mov	r7, r4
 8003a4a:	2f00      	cmp	r7, #0
 8003a4c:	d143      	bne.n	8003ad6 <_malloc_r+0xd6>
 8003a4e:	2c00      	cmp	r4, #0
 8003a50:	d04b      	beq.n	8003aea <_malloc_r+0xea>
 8003a52:	6823      	ldr	r3, [r4, #0]
 8003a54:	4639      	mov	r1, r7
 8003a56:	4630      	mov	r0, r6
 8003a58:	eb04 0903 	add.w	r9, r4, r3
 8003a5c:	f000 fe48 	bl	80046f0 <_sbrk_r>
 8003a60:	4581      	cmp	r9, r0
 8003a62:	d142      	bne.n	8003aea <_malloc_r+0xea>
 8003a64:	6821      	ldr	r1, [r4, #0]
 8003a66:	1a6d      	subs	r5, r5, r1
 8003a68:	4629      	mov	r1, r5
 8003a6a:	4630      	mov	r0, r6
 8003a6c:	f7ff ffa6 	bl	80039bc <sbrk_aligned>
 8003a70:	3001      	adds	r0, #1
 8003a72:	d03a      	beq.n	8003aea <_malloc_r+0xea>
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	442b      	add	r3, r5
 8003a78:	6023      	str	r3, [r4, #0]
 8003a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	bb62      	cbnz	r2, 8003adc <_malloc_r+0xdc>
 8003a82:	f8c8 7000 	str.w	r7, [r8]
 8003a86:	e00f      	b.n	8003aa8 <_malloc_r+0xa8>
 8003a88:	6822      	ldr	r2, [r4, #0]
 8003a8a:	1b52      	subs	r2, r2, r5
 8003a8c:	d420      	bmi.n	8003ad0 <_malloc_r+0xd0>
 8003a8e:	2a0b      	cmp	r2, #11
 8003a90:	d917      	bls.n	8003ac2 <_malloc_r+0xc2>
 8003a92:	1961      	adds	r1, r4, r5
 8003a94:	42a3      	cmp	r3, r4
 8003a96:	6025      	str	r5, [r4, #0]
 8003a98:	bf18      	it	ne
 8003a9a:	6059      	strne	r1, [r3, #4]
 8003a9c:	6863      	ldr	r3, [r4, #4]
 8003a9e:	bf08      	it	eq
 8003aa0:	f8c8 1000 	streq.w	r1, [r8]
 8003aa4:	5162      	str	r2, [r4, r5]
 8003aa6:	604b      	str	r3, [r1, #4]
 8003aa8:	4630      	mov	r0, r6
 8003aaa:	f000 f82f 	bl	8003b0c <__malloc_unlock>
 8003aae:	f104 000b 	add.w	r0, r4, #11
 8003ab2:	1d23      	adds	r3, r4, #4
 8003ab4:	f020 0007 	bic.w	r0, r0, #7
 8003ab8:	1ac2      	subs	r2, r0, r3
 8003aba:	bf1c      	itt	ne
 8003abc:	1a1b      	subne	r3, r3, r0
 8003abe:	50a3      	strne	r3, [r4, r2]
 8003ac0:	e7af      	b.n	8003a22 <_malloc_r+0x22>
 8003ac2:	6862      	ldr	r2, [r4, #4]
 8003ac4:	42a3      	cmp	r3, r4
 8003ac6:	bf0c      	ite	eq
 8003ac8:	f8c8 2000 	streq.w	r2, [r8]
 8003acc:	605a      	strne	r2, [r3, #4]
 8003ace:	e7eb      	b.n	8003aa8 <_malloc_r+0xa8>
 8003ad0:	4623      	mov	r3, r4
 8003ad2:	6864      	ldr	r4, [r4, #4]
 8003ad4:	e7ae      	b.n	8003a34 <_malloc_r+0x34>
 8003ad6:	463c      	mov	r4, r7
 8003ad8:	687f      	ldr	r7, [r7, #4]
 8003ada:	e7b6      	b.n	8003a4a <_malloc_r+0x4a>
 8003adc:	461a      	mov	r2, r3
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	42a3      	cmp	r3, r4
 8003ae2:	d1fb      	bne.n	8003adc <_malloc_r+0xdc>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	6053      	str	r3, [r2, #4]
 8003ae8:	e7de      	b.n	8003aa8 <_malloc_r+0xa8>
 8003aea:	230c      	movs	r3, #12
 8003aec:	6033      	str	r3, [r6, #0]
 8003aee:	4630      	mov	r0, r6
 8003af0:	f000 f80c 	bl	8003b0c <__malloc_unlock>
 8003af4:	e794      	b.n	8003a20 <_malloc_r+0x20>
 8003af6:	6005      	str	r5, [r0, #0]
 8003af8:	e7d6      	b.n	8003aa8 <_malloc_r+0xa8>
 8003afa:	bf00      	nop
 8003afc:	2000038c 	.word	0x2000038c

08003b00 <__malloc_lock>:
 8003b00:	4801      	ldr	r0, [pc, #4]	@ (8003b08 <__malloc_lock+0x8>)
 8003b02:	f7ff b8ae 	b.w	8002c62 <__retarget_lock_acquire_recursive>
 8003b06:	bf00      	nop
 8003b08:	20000384 	.word	0x20000384

08003b0c <__malloc_unlock>:
 8003b0c:	4801      	ldr	r0, [pc, #4]	@ (8003b14 <__malloc_unlock+0x8>)
 8003b0e:	f7ff b8a9 	b.w	8002c64 <__retarget_lock_release_recursive>
 8003b12:	bf00      	nop
 8003b14:	20000384 	.word	0x20000384

08003b18 <_Balloc>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	69c6      	ldr	r6, [r0, #28]
 8003b1c:	4604      	mov	r4, r0
 8003b1e:	460d      	mov	r5, r1
 8003b20:	b976      	cbnz	r6, 8003b40 <_Balloc+0x28>
 8003b22:	2010      	movs	r0, #16
 8003b24:	f7ff ff42 	bl	80039ac <malloc>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	61e0      	str	r0, [r4, #28]
 8003b2c:	b920      	cbnz	r0, 8003b38 <_Balloc+0x20>
 8003b2e:	4b18      	ldr	r3, [pc, #96]	@ (8003b90 <_Balloc+0x78>)
 8003b30:	4818      	ldr	r0, [pc, #96]	@ (8003b94 <_Balloc+0x7c>)
 8003b32:	216b      	movs	r1, #107	@ 0x6b
 8003b34:	f000 fdfa 	bl	800472c <__assert_func>
 8003b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b3c:	6006      	str	r6, [r0, #0]
 8003b3e:	60c6      	str	r6, [r0, #12]
 8003b40:	69e6      	ldr	r6, [r4, #28]
 8003b42:	68f3      	ldr	r3, [r6, #12]
 8003b44:	b183      	cbz	r3, 8003b68 <_Balloc+0x50>
 8003b46:	69e3      	ldr	r3, [r4, #28]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b4e:	b9b8      	cbnz	r0, 8003b80 <_Balloc+0x68>
 8003b50:	2101      	movs	r1, #1
 8003b52:	fa01 f605 	lsl.w	r6, r1, r5
 8003b56:	1d72      	adds	r2, r6, #5
 8003b58:	0092      	lsls	r2, r2, #2
 8003b5a:	4620      	mov	r0, r4
 8003b5c:	f000 fe04 	bl	8004768 <_calloc_r>
 8003b60:	b160      	cbz	r0, 8003b7c <_Balloc+0x64>
 8003b62:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003b66:	e00e      	b.n	8003b86 <_Balloc+0x6e>
 8003b68:	2221      	movs	r2, #33	@ 0x21
 8003b6a:	2104      	movs	r1, #4
 8003b6c:	4620      	mov	r0, r4
 8003b6e:	f000 fdfb 	bl	8004768 <_calloc_r>
 8003b72:	69e3      	ldr	r3, [r4, #28]
 8003b74:	60f0      	str	r0, [r6, #12]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1e4      	bne.n	8003b46 <_Balloc+0x2e>
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	bd70      	pop	{r4, r5, r6, pc}
 8003b80:	6802      	ldr	r2, [r0, #0]
 8003b82:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b86:	2300      	movs	r3, #0
 8003b88:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003b8c:	e7f7      	b.n	8003b7e <_Balloc+0x66>
 8003b8e:	bf00      	nop
 8003b90:	08004a69 	.word	0x08004a69
 8003b94:	08004ae9 	.word	0x08004ae9

08003b98 <_Bfree>:
 8003b98:	b570      	push	{r4, r5, r6, lr}
 8003b9a:	69c6      	ldr	r6, [r0, #28]
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	b976      	cbnz	r6, 8003bc0 <_Bfree+0x28>
 8003ba2:	2010      	movs	r0, #16
 8003ba4:	f7ff ff02 	bl	80039ac <malloc>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	61e8      	str	r0, [r5, #28]
 8003bac:	b920      	cbnz	r0, 8003bb8 <_Bfree+0x20>
 8003bae:	4b09      	ldr	r3, [pc, #36]	@ (8003bd4 <_Bfree+0x3c>)
 8003bb0:	4809      	ldr	r0, [pc, #36]	@ (8003bd8 <_Bfree+0x40>)
 8003bb2:	218f      	movs	r1, #143	@ 0x8f
 8003bb4:	f000 fdba 	bl	800472c <__assert_func>
 8003bb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bbc:	6006      	str	r6, [r0, #0]
 8003bbe:	60c6      	str	r6, [r0, #12]
 8003bc0:	b13c      	cbz	r4, 8003bd2 <_Bfree+0x3a>
 8003bc2:	69eb      	ldr	r3, [r5, #28]
 8003bc4:	6862      	ldr	r2, [r4, #4]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bcc:	6021      	str	r1, [r4, #0]
 8003bce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003bd2:	bd70      	pop	{r4, r5, r6, pc}
 8003bd4:	08004a69 	.word	0x08004a69
 8003bd8:	08004ae9 	.word	0x08004ae9

08003bdc <__multadd>:
 8003bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be0:	690d      	ldr	r5, [r1, #16]
 8003be2:	4607      	mov	r7, r0
 8003be4:	460c      	mov	r4, r1
 8003be6:	461e      	mov	r6, r3
 8003be8:	f101 0c14 	add.w	ip, r1, #20
 8003bec:	2000      	movs	r0, #0
 8003bee:	f8dc 3000 	ldr.w	r3, [ip]
 8003bf2:	b299      	uxth	r1, r3
 8003bf4:	fb02 6101 	mla	r1, r2, r1, r6
 8003bf8:	0c1e      	lsrs	r6, r3, #16
 8003bfa:	0c0b      	lsrs	r3, r1, #16
 8003bfc:	fb02 3306 	mla	r3, r2, r6, r3
 8003c00:	b289      	uxth	r1, r1
 8003c02:	3001      	adds	r0, #1
 8003c04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003c08:	4285      	cmp	r5, r0
 8003c0a:	f84c 1b04 	str.w	r1, [ip], #4
 8003c0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003c12:	dcec      	bgt.n	8003bee <__multadd+0x12>
 8003c14:	b30e      	cbz	r6, 8003c5a <__multadd+0x7e>
 8003c16:	68a3      	ldr	r3, [r4, #8]
 8003c18:	42ab      	cmp	r3, r5
 8003c1a:	dc19      	bgt.n	8003c50 <__multadd+0x74>
 8003c1c:	6861      	ldr	r1, [r4, #4]
 8003c1e:	4638      	mov	r0, r7
 8003c20:	3101      	adds	r1, #1
 8003c22:	f7ff ff79 	bl	8003b18 <_Balloc>
 8003c26:	4680      	mov	r8, r0
 8003c28:	b928      	cbnz	r0, 8003c36 <__multadd+0x5a>
 8003c2a:	4602      	mov	r2, r0
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c60 <__multadd+0x84>)
 8003c2e:	480d      	ldr	r0, [pc, #52]	@ (8003c64 <__multadd+0x88>)
 8003c30:	21ba      	movs	r1, #186	@ 0xba
 8003c32:	f000 fd7b 	bl	800472c <__assert_func>
 8003c36:	6922      	ldr	r2, [r4, #16]
 8003c38:	3202      	adds	r2, #2
 8003c3a:	f104 010c 	add.w	r1, r4, #12
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	300c      	adds	r0, #12
 8003c42:	f000 fd65 	bl	8004710 <memcpy>
 8003c46:	4621      	mov	r1, r4
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f7ff ffa5 	bl	8003b98 <_Bfree>
 8003c4e:	4644      	mov	r4, r8
 8003c50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c54:	3501      	adds	r5, #1
 8003c56:	615e      	str	r6, [r3, #20]
 8003c58:	6125      	str	r5, [r4, #16]
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c60:	08004ad8 	.word	0x08004ad8
 8003c64:	08004ae9 	.word	0x08004ae9

08003c68 <__hi0bits>:
 8003c68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	bf36      	itet	cc
 8003c70:	0403      	lslcc	r3, r0, #16
 8003c72:	2000      	movcs	r0, #0
 8003c74:	2010      	movcc	r0, #16
 8003c76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c7a:	bf3c      	itt	cc
 8003c7c:	021b      	lslcc	r3, r3, #8
 8003c7e:	3008      	addcc	r0, #8
 8003c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c84:	bf3c      	itt	cc
 8003c86:	011b      	lslcc	r3, r3, #4
 8003c88:	3004      	addcc	r0, #4
 8003c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8e:	bf3c      	itt	cc
 8003c90:	009b      	lslcc	r3, r3, #2
 8003c92:	3002      	addcc	r0, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	db05      	blt.n	8003ca4 <__hi0bits+0x3c>
 8003c98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003c9c:	f100 0001 	add.w	r0, r0, #1
 8003ca0:	bf08      	it	eq
 8003ca2:	2020      	moveq	r0, #32
 8003ca4:	4770      	bx	lr

08003ca6 <__lo0bits>:
 8003ca6:	6803      	ldr	r3, [r0, #0]
 8003ca8:	4602      	mov	r2, r0
 8003caa:	f013 0007 	ands.w	r0, r3, #7
 8003cae:	d00b      	beq.n	8003cc8 <__lo0bits+0x22>
 8003cb0:	07d9      	lsls	r1, r3, #31
 8003cb2:	d421      	bmi.n	8003cf8 <__lo0bits+0x52>
 8003cb4:	0798      	lsls	r0, r3, #30
 8003cb6:	bf49      	itett	mi
 8003cb8:	085b      	lsrmi	r3, r3, #1
 8003cba:	089b      	lsrpl	r3, r3, #2
 8003cbc:	2001      	movmi	r0, #1
 8003cbe:	6013      	strmi	r3, [r2, #0]
 8003cc0:	bf5c      	itt	pl
 8003cc2:	6013      	strpl	r3, [r2, #0]
 8003cc4:	2002      	movpl	r0, #2
 8003cc6:	4770      	bx	lr
 8003cc8:	b299      	uxth	r1, r3
 8003cca:	b909      	cbnz	r1, 8003cd0 <__lo0bits+0x2a>
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	2010      	movs	r0, #16
 8003cd0:	b2d9      	uxtb	r1, r3
 8003cd2:	b909      	cbnz	r1, 8003cd8 <__lo0bits+0x32>
 8003cd4:	3008      	adds	r0, #8
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	0719      	lsls	r1, r3, #28
 8003cda:	bf04      	itt	eq
 8003cdc:	091b      	lsreq	r3, r3, #4
 8003cde:	3004      	addeq	r0, #4
 8003ce0:	0799      	lsls	r1, r3, #30
 8003ce2:	bf04      	itt	eq
 8003ce4:	089b      	lsreq	r3, r3, #2
 8003ce6:	3002      	addeq	r0, #2
 8003ce8:	07d9      	lsls	r1, r3, #31
 8003cea:	d403      	bmi.n	8003cf4 <__lo0bits+0x4e>
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	f100 0001 	add.w	r0, r0, #1
 8003cf2:	d003      	beq.n	8003cfc <__lo0bits+0x56>
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	4770      	bx	lr
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	4770      	bx	lr
 8003cfc:	2020      	movs	r0, #32
 8003cfe:	4770      	bx	lr

08003d00 <__i2b>:
 8003d00:	b510      	push	{r4, lr}
 8003d02:	460c      	mov	r4, r1
 8003d04:	2101      	movs	r1, #1
 8003d06:	f7ff ff07 	bl	8003b18 <_Balloc>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	b928      	cbnz	r0, 8003d1a <__i2b+0x1a>
 8003d0e:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <__i2b+0x24>)
 8003d10:	4805      	ldr	r0, [pc, #20]	@ (8003d28 <__i2b+0x28>)
 8003d12:	f240 1145 	movw	r1, #325	@ 0x145
 8003d16:	f000 fd09 	bl	800472c <__assert_func>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	6144      	str	r4, [r0, #20]
 8003d1e:	6103      	str	r3, [r0, #16]
 8003d20:	bd10      	pop	{r4, pc}
 8003d22:	bf00      	nop
 8003d24:	08004ad8 	.word	0x08004ad8
 8003d28:	08004ae9 	.word	0x08004ae9

08003d2c <__multiply>:
 8003d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d30:	4617      	mov	r7, r2
 8003d32:	690a      	ldr	r2, [r1, #16]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	bfa8      	it	ge
 8003d3a:	463b      	movge	r3, r7
 8003d3c:	4689      	mov	r9, r1
 8003d3e:	bfa4      	itt	ge
 8003d40:	460f      	movge	r7, r1
 8003d42:	4699      	movge	r9, r3
 8003d44:	693d      	ldr	r5, [r7, #16]
 8003d46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	6879      	ldr	r1, [r7, #4]
 8003d4e:	eb05 060a 	add.w	r6, r5, sl
 8003d52:	42b3      	cmp	r3, r6
 8003d54:	b085      	sub	sp, #20
 8003d56:	bfb8      	it	lt
 8003d58:	3101      	addlt	r1, #1
 8003d5a:	f7ff fedd 	bl	8003b18 <_Balloc>
 8003d5e:	b930      	cbnz	r0, 8003d6e <__multiply+0x42>
 8003d60:	4602      	mov	r2, r0
 8003d62:	4b41      	ldr	r3, [pc, #260]	@ (8003e68 <__multiply+0x13c>)
 8003d64:	4841      	ldr	r0, [pc, #260]	@ (8003e6c <__multiply+0x140>)
 8003d66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003d6a:	f000 fcdf 	bl	800472c <__assert_func>
 8003d6e:	f100 0414 	add.w	r4, r0, #20
 8003d72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8003d76:	4623      	mov	r3, r4
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4573      	cmp	r3, lr
 8003d7c:	d320      	bcc.n	8003dc0 <__multiply+0x94>
 8003d7e:	f107 0814 	add.w	r8, r7, #20
 8003d82:	f109 0114 	add.w	r1, r9, #20
 8003d86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8003d8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8003d8e:	9302      	str	r3, [sp, #8]
 8003d90:	1beb      	subs	r3, r5, r7
 8003d92:	3b15      	subs	r3, #21
 8003d94:	f023 0303 	bic.w	r3, r3, #3
 8003d98:	3304      	adds	r3, #4
 8003d9a:	3715      	adds	r7, #21
 8003d9c:	42bd      	cmp	r5, r7
 8003d9e:	bf38      	it	cc
 8003da0:	2304      	movcc	r3, #4
 8003da2:	9301      	str	r3, [sp, #4]
 8003da4:	9b02      	ldr	r3, [sp, #8]
 8003da6:	9103      	str	r1, [sp, #12]
 8003da8:	428b      	cmp	r3, r1
 8003daa:	d80c      	bhi.n	8003dc6 <__multiply+0x9a>
 8003dac:	2e00      	cmp	r6, #0
 8003dae:	dd03      	ble.n	8003db8 <__multiply+0x8c>
 8003db0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d055      	beq.n	8003e64 <__multiply+0x138>
 8003db8:	6106      	str	r6, [r0, #16]
 8003dba:	b005      	add	sp, #20
 8003dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc0:	f843 2b04 	str.w	r2, [r3], #4
 8003dc4:	e7d9      	b.n	8003d7a <__multiply+0x4e>
 8003dc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8003dca:	f1ba 0f00 	cmp.w	sl, #0
 8003dce:	d01f      	beq.n	8003e10 <__multiply+0xe4>
 8003dd0:	46c4      	mov	ip, r8
 8003dd2:	46a1      	mov	r9, r4
 8003dd4:	2700      	movs	r7, #0
 8003dd6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003dda:	f8d9 3000 	ldr.w	r3, [r9]
 8003dde:	fa1f fb82 	uxth.w	fp, r2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	fb0a 330b 	mla	r3, sl, fp, r3
 8003de8:	443b      	add	r3, r7
 8003dea:	f8d9 7000 	ldr.w	r7, [r9]
 8003dee:	0c12      	lsrs	r2, r2, #16
 8003df0:	0c3f      	lsrs	r7, r7, #16
 8003df2:	fb0a 7202 	mla	r2, sl, r2, r7
 8003df6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e00:	4565      	cmp	r5, ip
 8003e02:	f849 3b04 	str.w	r3, [r9], #4
 8003e06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8003e0a:	d8e4      	bhi.n	8003dd6 <__multiply+0xaa>
 8003e0c:	9b01      	ldr	r3, [sp, #4]
 8003e0e:	50e7      	str	r7, [r4, r3]
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003e16:	3104      	adds	r1, #4
 8003e18:	f1b9 0f00 	cmp.w	r9, #0
 8003e1c:	d020      	beq.n	8003e60 <__multiply+0x134>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	4647      	mov	r7, r8
 8003e22:	46a4      	mov	ip, r4
 8003e24:	f04f 0a00 	mov.w	sl, #0
 8003e28:	f8b7 b000 	ldrh.w	fp, [r7]
 8003e2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8003e30:	fb09 220b 	mla	r2, r9, fp, r2
 8003e34:	4452      	add	r2, sl
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e3c:	f84c 3b04 	str.w	r3, [ip], #4
 8003e40:	f857 3b04 	ldr.w	r3, [r7], #4
 8003e44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e48:	f8bc 3000 	ldrh.w	r3, [ip]
 8003e4c:	fb09 330a 	mla	r3, r9, sl, r3
 8003e50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8003e54:	42bd      	cmp	r5, r7
 8003e56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e5a:	d8e5      	bhi.n	8003e28 <__multiply+0xfc>
 8003e5c:	9a01      	ldr	r2, [sp, #4]
 8003e5e:	50a3      	str	r3, [r4, r2]
 8003e60:	3404      	adds	r4, #4
 8003e62:	e79f      	b.n	8003da4 <__multiply+0x78>
 8003e64:	3e01      	subs	r6, #1
 8003e66:	e7a1      	b.n	8003dac <__multiply+0x80>
 8003e68:	08004ad8 	.word	0x08004ad8
 8003e6c:	08004ae9 	.word	0x08004ae9

08003e70 <__pow5mult>:
 8003e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e74:	4615      	mov	r5, r2
 8003e76:	f012 0203 	ands.w	r2, r2, #3
 8003e7a:	4607      	mov	r7, r0
 8003e7c:	460e      	mov	r6, r1
 8003e7e:	d007      	beq.n	8003e90 <__pow5mult+0x20>
 8003e80:	4c25      	ldr	r4, [pc, #148]	@ (8003f18 <__pow5mult+0xa8>)
 8003e82:	3a01      	subs	r2, #1
 8003e84:	2300      	movs	r3, #0
 8003e86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e8a:	f7ff fea7 	bl	8003bdc <__multadd>
 8003e8e:	4606      	mov	r6, r0
 8003e90:	10ad      	asrs	r5, r5, #2
 8003e92:	d03d      	beq.n	8003f10 <__pow5mult+0xa0>
 8003e94:	69fc      	ldr	r4, [r7, #28]
 8003e96:	b97c      	cbnz	r4, 8003eb8 <__pow5mult+0x48>
 8003e98:	2010      	movs	r0, #16
 8003e9a:	f7ff fd87 	bl	80039ac <malloc>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	61f8      	str	r0, [r7, #28]
 8003ea2:	b928      	cbnz	r0, 8003eb0 <__pow5mult+0x40>
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f1c <__pow5mult+0xac>)
 8003ea6:	481e      	ldr	r0, [pc, #120]	@ (8003f20 <__pow5mult+0xb0>)
 8003ea8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003eac:	f000 fc3e 	bl	800472c <__assert_func>
 8003eb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003eb4:	6004      	str	r4, [r0, #0]
 8003eb6:	60c4      	str	r4, [r0, #12]
 8003eb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003ebc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ec0:	b94c      	cbnz	r4, 8003ed6 <__pow5mult+0x66>
 8003ec2:	f240 2171 	movw	r1, #625	@ 0x271
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	f7ff ff1a 	bl	8003d00 <__i2b>
 8003ecc:	2300      	movs	r3, #0
 8003ece:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	6003      	str	r3, [r0, #0]
 8003ed6:	f04f 0900 	mov.w	r9, #0
 8003eda:	07eb      	lsls	r3, r5, #31
 8003edc:	d50a      	bpl.n	8003ef4 <__pow5mult+0x84>
 8003ede:	4631      	mov	r1, r6
 8003ee0:	4622      	mov	r2, r4
 8003ee2:	4638      	mov	r0, r7
 8003ee4:	f7ff ff22 	bl	8003d2c <__multiply>
 8003ee8:	4631      	mov	r1, r6
 8003eea:	4680      	mov	r8, r0
 8003eec:	4638      	mov	r0, r7
 8003eee:	f7ff fe53 	bl	8003b98 <_Bfree>
 8003ef2:	4646      	mov	r6, r8
 8003ef4:	106d      	asrs	r5, r5, #1
 8003ef6:	d00b      	beq.n	8003f10 <__pow5mult+0xa0>
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	b938      	cbnz	r0, 8003f0c <__pow5mult+0x9c>
 8003efc:	4622      	mov	r2, r4
 8003efe:	4621      	mov	r1, r4
 8003f00:	4638      	mov	r0, r7
 8003f02:	f7ff ff13 	bl	8003d2c <__multiply>
 8003f06:	6020      	str	r0, [r4, #0]
 8003f08:	f8c0 9000 	str.w	r9, [r0]
 8003f0c:	4604      	mov	r4, r0
 8003f0e:	e7e4      	b.n	8003eda <__pow5mult+0x6a>
 8003f10:	4630      	mov	r0, r6
 8003f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f16:	bf00      	nop
 8003f18:	08004b9c 	.word	0x08004b9c
 8003f1c:	08004a69 	.word	0x08004a69
 8003f20:	08004ae9 	.word	0x08004ae9

08003f24 <__lshift>:
 8003f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f28:	460c      	mov	r4, r1
 8003f2a:	6849      	ldr	r1, [r1, #4]
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f32:	68a3      	ldr	r3, [r4, #8]
 8003f34:	4607      	mov	r7, r0
 8003f36:	4691      	mov	r9, r2
 8003f38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f3c:	f108 0601 	add.w	r6, r8, #1
 8003f40:	42b3      	cmp	r3, r6
 8003f42:	db0b      	blt.n	8003f5c <__lshift+0x38>
 8003f44:	4638      	mov	r0, r7
 8003f46:	f7ff fde7 	bl	8003b18 <_Balloc>
 8003f4a:	4605      	mov	r5, r0
 8003f4c:	b948      	cbnz	r0, 8003f62 <__lshift+0x3e>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	4b28      	ldr	r3, [pc, #160]	@ (8003ff4 <__lshift+0xd0>)
 8003f52:	4829      	ldr	r0, [pc, #164]	@ (8003ff8 <__lshift+0xd4>)
 8003f54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003f58:	f000 fbe8 	bl	800472c <__assert_func>
 8003f5c:	3101      	adds	r1, #1
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	e7ee      	b.n	8003f40 <__lshift+0x1c>
 8003f62:	2300      	movs	r3, #0
 8003f64:	f100 0114 	add.w	r1, r0, #20
 8003f68:	f100 0210 	add.w	r2, r0, #16
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	4553      	cmp	r3, sl
 8003f70:	db33      	blt.n	8003fda <__lshift+0xb6>
 8003f72:	6920      	ldr	r0, [r4, #16]
 8003f74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f78:	f104 0314 	add.w	r3, r4, #20
 8003f7c:	f019 091f 	ands.w	r9, r9, #31
 8003f80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f88:	d02b      	beq.n	8003fe2 <__lshift+0xbe>
 8003f8a:	f1c9 0e20 	rsb	lr, r9, #32
 8003f8e:	468a      	mov	sl, r1
 8003f90:	2200      	movs	r2, #0
 8003f92:	6818      	ldr	r0, [r3, #0]
 8003f94:	fa00 f009 	lsl.w	r0, r0, r9
 8003f98:	4310      	orrs	r0, r2
 8003f9a:	f84a 0b04 	str.w	r0, [sl], #4
 8003f9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fa2:	459c      	cmp	ip, r3
 8003fa4:	fa22 f20e 	lsr.w	r2, r2, lr
 8003fa8:	d8f3      	bhi.n	8003f92 <__lshift+0x6e>
 8003faa:	ebac 0304 	sub.w	r3, ip, r4
 8003fae:	3b15      	subs	r3, #21
 8003fb0:	f023 0303 	bic.w	r3, r3, #3
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	f104 0015 	add.w	r0, r4, #21
 8003fba:	4560      	cmp	r0, ip
 8003fbc:	bf88      	it	hi
 8003fbe:	2304      	movhi	r3, #4
 8003fc0:	50ca      	str	r2, [r1, r3]
 8003fc2:	b10a      	cbz	r2, 8003fc8 <__lshift+0xa4>
 8003fc4:	f108 0602 	add.w	r6, r8, #2
 8003fc8:	3e01      	subs	r6, #1
 8003fca:	4638      	mov	r0, r7
 8003fcc:	612e      	str	r6, [r5, #16]
 8003fce:	4621      	mov	r1, r4
 8003fd0:	f7ff fde2 	bl	8003b98 <_Bfree>
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fda:	f842 0f04 	str.w	r0, [r2, #4]!
 8003fde:	3301      	adds	r3, #1
 8003fe0:	e7c5      	b.n	8003f6e <__lshift+0x4a>
 8003fe2:	3904      	subs	r1, #4
 8003fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003fec:	459c      	cmp	ip, r3
 8003fee:	d8f9      	bhi.n	8003fe4 <__lshift+0xc0>
 8003ff0:	e7ea      	b.n	8003fc8 <__lshift+0xa4>
 8003ff2:	bf00      	nop
 8003ff4:	08004ad8 	.word	0x08004ad8
 8003ff8:	08004ae9 	.word	0x08004ae9

08003ffc <__mcmp>:
 8003ffc:	690a      	ldr	r2, [r1, #16]
 8003ffe:	4603      	mov	r3, r0
 8004000:	6900      	ldr	r0, [r0, #16]
 8004002:	1a80      	subs	r0, r0, r2
 8004004:	b530      	push	{r4, r5, lr}
 8004006:	d10e      	bne.n	8004026 <__mcmp+0x2a>
 8004008:	3314      	adds	r3, #20
 800400a:	3114      	adds	r1, #20
 800400c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004010:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004014:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004018:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800401c:	4295      	cmp	r5, r2
 800401e:	d003      	beq.n	8004028 <__mcmp+0x2c>
 8004020:	d205      	bcs.n	800402e <__mcmp+0x32>
 8004022:	f04f 30ff 	mov.w	r0, #4294967295
 8004026:	bd30      	pop	{r4, r5, pc}
 8004028:	42a3      	cmp	r3, r4
 800402a:	d3f3      	bcc.n	8004014 <__mcmp+0x18>
 800402c:	e7fb      	b.n	8004026 <__mcmp+0x2a>
 800402e:	2001      	movs	r0, #1
 8004030:	e7f9      	b.n	8004026 <__mcmp+0x2a>
	...

08004034 <__mdiff>:
 8004034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004038:	4689      	mov	r9, r1
 800403a:	4606      	mov	r6, r0
 800403c:	4611      	mov	r1, r2
 800403e:	4648      	mov	r0, r9
 8004040:	4614      	mov	r4, r2
 8004042:	f7ff ffdb 	bl	8003ffc <__mcmp>
 8004046:	1e05      	subs	r5, r0, #0
 8004048:	d112      	bne.n	8004070 <__mdiff+0x3c>
 800404a:	4629      	mov	r1, r5
 800404c:	4630      	mov	r0, r6
 800404e:	f7ff fd63 	bl	8003b18 <_Balloc>
 8004052:	4602      	mov	r2, r0
 8004054:	b928      	cbnz	r0, 8004062 <__mdiff+0x2e>
 8004056:	4b3f      	ldr	r3, [pc, #252]	@ (8004154 <__mdiff+0x120>)
 8004058:	f240 2137 	movw	r1, #567	@ 0x237
 800405c:	483e      	ldr	r0, [pc, #248]	@ (8004158 <__mdiff+0x124>)
 800405e:	f000 fb65 	bl	800472c <__assert_func>
 8004062:	2301      	movs	r3, #1
 8004064:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004068:	4610      	mov	r0, r2
 800406a:	b003      	add	sp, #12
 800406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004070:	bfbc      	itt	lt
 8004072:	464b      	movlt	r3, r9
 8004074:	46a1      	movlt	r9, r4
 8004076:	4630      	mov	r0, r6
 8004078:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800407c:	bfba      	itte	lt
 800407e:	461c      	movlt	r4, r3
 8004080:	2501      	movlt	r5, #1
 8004082:	2500      	movge	r5, #0
 8004084:	f7ff fd48 	bl	8003b18 <_Balloc>
 8004088:	4602      	mov	r2, r0
 800408a:	b918      	cbnz	r0, 8004094 <__mdiff+0x60>
 800408c:	4b31      	ldr	r3, [pc, #196]	@ (8004154 <__mdiff+0x120>)
 800408e:	f240 2145 	movw	r1, #581	@ 0x245
 8004092:	e7e3      	b.n	800405c <__mdiff+0x28>
 8004094:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004098:	6926      	ldr	r6, [r4, #16]
 800409a:	60c5      	str	r5, [r0, #12]
 800409c:	f109 0310 	add.w	r3, r9, #16
 80040a0:	f109 0514 	add.w	r5, r9, #20
 80040a4:	f104 0e14 	add.w	lr, r4, #20
 80040a8:	f100 0b14 	add.w	fp, r0, #20
 80040ac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80040b0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80040b4:	9301      	str	r3, [sp, #4]
 80040b6:	46d9      	mov	r9, fp
 80040b8:	f04f 0c00 	mov.w	ip, #0
 80040bc:	9b01      	ldr	r3, [sp, #4]
 80040be:	f85e 0b04 	ldr.w	r0, [lr], #4
 80040c2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80040c6:	9301      	str	r3, [sp, #4]
 80040c8:	fa1f f38a 	uxth.w	r3, sl
 80040cc:	4619      	mov	r1, r3
 80040ce:	b283      	uxth	r3, r0
 80040d0:	1acb      	subs	r3, r1, r3
 80040d2:	0c00      	lsrs	r0, r0, #16
 80040d4:	4463      	add	r3, ip
 80040d6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80040da:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80040de:	b29b      	uxth	r3, r3
 80040e0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040e4:	4576      	cmp	r6, lr
 80040e6:	f849 3b04 	str.w	r3, [r9], #4
 80040ea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80040ee:	d8e5      	bhi.n	80040bc <__mdiff+0x88>
 80040f0:	1b33      	subs	r3, r6, r4
 80040f2:	3b15      	subs	r3, #21
 80040f4:	f023 0303 	bic.w	r3, r3, #3
 80040f8:	3415      	adds	r4, #21
 80040fa:	3304      	adds	r3, #4
 80040fc:	42a6      	cmp	r6, r4
 80040fe:	bf38      	it	cc
 8004100:	2304      	movcc	r3, #4
 8004102:	441d      	add	r5, r3
 8004104:	445b      	add	r3, fp
 8004106:	461e      	mov	r6, r3
 8004108:	462c      	mov	r4, r5
 800410a:	4544      	cmp	r4, r8
 800410c:	d30e      	bcc.n	800412c <__mdiff+0xf8>
 800410e:	f108 0103 	add.w	r1, r8, #3
 8004112:	1b49      	subs	r1, r1, r5
 8004114:	f021 0103 	bic.w	r1, r1, #3
 8004118:	3d03      	subs	r5, #3
 800411a:	45a8      	cmp	r8, r5
 800411c:	bf38      	it	cc
 800411e:	2100      	movcc	r1, #0
 8004120:	440b      	add	r3, r1
 8004122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004126:	b191      	cbz	r1, 800414e <__mdiff+0x11a>
 8004128:	6117      	str	r7, [r2, #16]
 800412a:	e79d      	b.n	8004068 <__mdiff+0x34>
 800412c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004130:	46e6      	mov	lr, ip
 8004132:	0c08      	lsrs	r0, r1, #16
 8004134:	fa1c fc81 	uxtah	ip, ip, r1
 8004138:	4471      	add	r1, lr
 800413a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800413e:	b289      	uxth	r1, r1
 8004140:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004144:	f846 1b04 	str.w	r1, [r6], #4
 8004148:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800414c:	e7dd      	b.n	800410a <__mdiff+0xd6>
 800414e:	3f01      	subs	r7, #1
 8004150:	e7e7      	b.n	8004122 <__mdiff+0xee>
 8004152:	bf00      	nop
 8004154:	08004ad8 	.word	0x08004ad8
 8004158:	08004ae9 	.word	0x08004ae9

0800415c <__d2b>:
 800415c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004160:	460f      	mov	r7, r1
 8004162:	2101      	movs	r1, #1
 8004164:	ec59 8b10 	vmov	r8, r9, d0
 8004168:	4616      	mov	r6, r2
 800416a:	f7ff fcd5 	bl	8003b18 <_Balloc>
 800416e:	4604      	mov	r4, r0
 8004170:	b930      	cbnz	r0, 8004180 <__d2b+0x24>
 8004172:	4602      	mov	r2, r0
 8004174:	4b23      	ldr	r3, [pc, #140]	@ (8004204 <__d2b+0xa8>)
 8004176:	4824      	ldr	r0, [pc, #144]	@ (8004208 <__d2b+0xac>)
 8004178:	f240 310f 	movw	r1, #783	@ 0x30f
 800417c:	f000 fad6 	bl	800472c <__assert_func>
 8004180:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004184:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004188:	b10d      	cbz	r5, 800418e <__d2b+0x32>
 800418a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	f1b8 0300 	subs.w	r3, r8, #0
 8004194:	d023      	beq.n	80041de <__d2b+0x82>
 8004196:	4668      	mov	r0, sp
 8004198:	9300      	str	r3, [sp, #0]
 800419a:	f7ff fd84 	bl	8003ca6 <__lo0bits>
 800419e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80041a2:	b1d0      	cbz	r0, 80041da <__d2b+0x7e>
 80041a4:	f1c0 0320 	rsb	r3, r0, #32
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	430b      	orrs	r3, r1
 80041ae:	40c2      	lsrs	r2, r0
 80041b0:	6163      	str	r3, [r4, #20]
 80041b2:	9201      	str	r2, [sp, #4]
 80041b4:	9b01      	ldr	r3, [sp, #4]
 80041b6:	61a3      	str	r3, [r4, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2201      	moveq	r2, #1
 80041be:	2202      	movne	r2, #2
 80041c0:	6122      	str	r2, [r4, #16]
 80041c2:	b1a5      	cbz	r5, 80041ee <__d2b+0x92>
 80041c4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80041c8:	4405      	add	r5, r0
 80041ca:	603d      	str	r5, [r7, #0]
 80041cc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80041d0:	6030      	str	r0, [r6, #0]
 80041d2:	4620      	mov	r0, r4
 80041d4:	b003      	add	sp, #12
 80041d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041da:	6161      	str	r1, [r4, #20]
 80041dc:	e7ea      	b.n	80041b4 <__d2b+0x58>
 80041de:	a801      	add	r0, sp, #4
 80041e0:	f7ff fd61 	bl	8003ca6 <__lo0bits>
 80041e4:	9b01      	ldr	r3, [sp, #4]
 80041e6:	6163      	str	r3, [r4, #20]
 80041e8:	3020      	adds	r0, #32
 80041ea:	2201      	movs	r2, #1
 80041ec:	e7e8      	b.n	80041c0 <__d2b+0x64>
 80041ee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80041f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80041f6:	6038      	str	r0, [r7, #0]
 80041f8:	6918      	ldr	r0, [r3, #16]
 80041fa:	f7ff fd35 	bl	8003c68 <__hi0bits>
 80041fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004202:	e7e5      	b.n	80041d0 <__d2b+0x74>
 8004204:	08004ad8 	.word	0x08004ad8
 8004208:	08004ae9 	.word	0x08004ae9

0800420c <__sfputc_r>:
 800420c:	6893      	ldr	r3, [r2, #8]
 800420e:	3b01      	subs	r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	b410      	push	{r4}
 8004214:	6093      	str	r3, [r2, #8]
 8004216:	da08      	bge.n	800422a <__sfputc_r+0x1e>
 8004218:	6994      	ldr	r4, [r2, #24]
 800421a:	42a3      	cmp	r3, r4
 800421c:	db01      	blt.n	8004222 <__sfputc_r+0x16>
 800421e:	290a      	cmp	r1, #10
 8004220:	d103      	bne.n	800422a <__sfputc_r+0x1e>
 8004222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004226:	f7fe bc0a 	b.w	8002a3e <__swbuf_r>
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	1c58      	adds	r0, r3, #1
 800422e:	6010      	str	r0, [r2, #0]
 8004230:	7019      	strb	r1, [r3, #0]
 8004232:	4608      	mov	r0, r1
 8004234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004238:	4770      	bx	lr

0800423a <__sfputs_r>:
 800423a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423c:	4606      	mov	r6, r0
 800423e:	460f      	mov	r7, r1
 8004240:	4614      	mov	r4, r2
 8004242:	18d5      	adds	r5, r2, r3
 8004244:	42ac      	cmp	r4, r5
 8004246:	d101      	bne.n	800424c <__sfputs_r+0x12>
 8004248:	2000      	movs	r0, #0
 800424a:	e007      	b.n	800425c <__sfputs_r+0x22>
 800424c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004250:	463a      	mov	r2, r7
 8004252:	4630      	mov	r0, r6
 8004254:	f7ff ffda 	bl	800420c <__sfputc_r>
 8004258:	1c43      	adds	r3, r0, #1
 800425a:	d1f3      	bne.n	8004244 <__sfputs_r+0xa>
 800425c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004260 <_vfiprintf_r>:
 8004260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004264:	460d      	mov	r5, r1
 8004266:	b09d      	sub	sp, #116	@ 0x74
 8004268:	4614      	mov	r4, r2
 800426a:	4698      	mov	r8, r3
 800426c:	4606      	mov	r6, r0
 800426e:	b118      	cbz	r0, 8004278 <_vfiprintf_r+0x18>
 8004270:	6a03      	ldr	r3, [r0, #32]
 8004272:	b90b      	cbnz	r3, 8004278 <_vfiprintf_r+0x18>
 8004274:	f7fe fafa 	bl	800286c <__sinit>
 8004278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800427a:	07d9      	lsls	r1, r3, #31
 800427c:	d405      	bmi.n	800428a <_vfiprintf_r+0x2a>
 800427e:	89ab      	ldrh	r3, [r5, #12]
 8004280:	059a      	lsls	r2, r3, #22
 8004282:	d402      	bmi.n	800428a <_vfiprintf_r+0x2a>
 8004284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004286:	f7fe fcec 	bl	8002c62 <__retarget_lock_acquire_recursive>
 800428a:	89ab      	ldrh	r3, [r5, #12]
 800428c:	071b      	lsls	r3, r3, #28
 800428e:	d501      	bpl.n	8004294 <_vfiprintf_r+0x34>
 8004290:	692b      	ldr	r3, [r5, #16]
 8004292:	b99b      	cbnz	r3, 80042bc <_vfiprintf_r+0x5c>
 8004294:	4629      	mov	r1, r5
 8004296:	4630      	mov	r0, r6
 8004298:	f7fe fc10 	bl	8002abc <__swsetup_r>
 800429c:	b170      	cbz	r0, 80042bc <_vfiprintf_r+0x5c>
 800429e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042a0:	07dc      	lsls	r4, r3, #31
 80042a2:	d504      	bpl.n	80042ae <_vfiprintf_r+0x4e>
 80042a4:	f04f 30ff 	mov.w	r0, #4294967295
 80042a8:	b01d      	add	sp, #116	@ 0x74
 80042aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042ae:	89ab      	ldrh	r3, [r5, #12]
 80042b0:	0598      	lsls	r0, r3, #22
 80042b2:	d4f7      	bmi.n	80042a4 <_vfiprintf_r+0x44>
 80042b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042b6:	f7fe fcd5 	bl	8002c64 <__retarget_lock_release_recursive>
 80042ba:	e7f3      	b.n	80042a4 <_vfiprintf_r+0x44>
 80042bc:	2300      	movs	r3, #0
 80042be:	9309      	str	r3, [sp, #36]	@ 0x24
 80042c0:	2320      	movs	r3, #32
 80042c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042ca:	2330      	movs	r3, #48	@ 0x30
 80042cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800447c <_vfiprintf_r+0x21c>
 80042d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042d4:	f04f 0901 	mov.w	r9, #1
 80042d8:	4623      	mov	r3, r4
 80042da:	469a      	mov	sl, r3
 80042dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042e0:	b10a      	cbz	r2, 80042e6 <_vfiprintf_r+0x86>
 80042e2:	2a25      	cmp	r2, #37	@ 0x25
 80042e4:	d1f9      	bne.n	80042da <_vfiprintf_r+0x7a>
 80042e6:	ebba 0b04 	subs.w	fp, sl, r4
 80042ea:	d00b      	beq.n	8004304 <_vfiprintf_r+0xa4>
 80042ec:	465b      	mov	r3, fp
 80042ee:	4622      	mov	r2, r4
 80042f0:	4629      	mov	r1, r5
 80042f2:	4630      	mov	r0, r6
 80042f4:	f7ff ffa1 	bl	800423a <__sfputs_r>
 80042f8:	3001      	adds	r0, #1
 80042fa:	f000 80a7 	beq.w	800444c <_vfiprintf_r+0x1ec>
 80042fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004300:	445a      	add	r2, fp
 8004302:	9209      	str	r2, [sp, #36]	@ 0x24
 8004304:	f89a 3000 	ldrb.w	r3, [sl]
 8004308:	2b00      	cmp	r3, #0
 800430a:	f000 809f 	beq.w	800444c <_vfiprintf_r+0x1ec>
 800430e:	2300      	movs	r3, #0
 8004310:	f04f 32ff 	mov.w	r2, #4294967295
 8004314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004318:	f10a 0a01 	add.w	sl, sl, #1
 800431c:	9304      	str	r3, [sp, #16]
 800431e:	9307      	str	r3, [sp, #28]
 8004320:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004324:	931a      	str	r3, [sp, #104]	@ 0x68
 8004326:	4654      	mov	r4, sl
 8004328:	2205      	movs	r2, #5
 800432a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800432e:	4853      	ldr	r0, [pc, #332]	@ (800447c <_vfiprintf_r+0x21c>)
 8004330:	f7fb ff4e 	bl	80001d0 <memchr>
 8004334:	9a04      	ldr	r2, [sp, #16]
 8004336:	b9d8      	cbnz	r0, 8004370 <_vfiprintf_r+0x110>
 8004338:	06d1      	lsls	r1, r2, #27
 800433a:	bf44      	itt	mi
 800433c:	2320      	movmi	r3, #32
 800433e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004342:	0713      	lsls	r3, r2, #28
 8004344:	bf44      	itt	mi
 8004346:	232b      	movmi	r3, #43	@ 0x2b
 8004348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800434c:	f89a 3000 	ldrb.w	r3, [sl]
 8004350:	2b2a      	cmp	r3, #42	@ 0x2a
 8004352:	d015      	beq.n	8004380 <_vfiprintf_r+0x120>
 8004354:	9a07      	ldr	r2, [sp, #28]
 8004356:	4654      	mov	r4, sl
 8004358:	2000      	movs	r0, #0
 800435a:	f04f 0c0a 	mov.w	ip, #10
 800435e:	4621      	mov	r1, r4
 8004360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004364:	3b30      	subs	r3, #48	@ 0x30
 8004366:	2b09      	cmp	r3, #9
 8004368:	d94b      	bls.n	8004402 <_vfiprintf_r+0x1a2>
 800436a:	b1b0      	cbz	r0, 800439a <_vfiprintf_r+0x13a>
 800436c:	9207      	str	r2, [sp, #28]
 800436e:	e014      	b.n	800439a <_vfiprintf_r+0x13a>
 8004370:	eba0 0308 	sub.w	r3, r0, r8
 8004374:	fa09 f303 	lsl.w	r3, r9, r3
 8004378:	4313      	orrs	r3, r2
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	46a2      	mov	sl, r4
 800437e:	e7d2      	b.n	8004326 <_vfiprintf_r+0xc6>
 8004380:	9b03      	ldr	r3, [sp, #12]
 8004382:	1d19      	adds	r1, r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	9103      	str	r1, [sp, #12]
 8004388:	2b00      	cmp	r3, #0
 800438a:	bfbb      	ittet	lt
 800438c:	425b      	neglt	r3, r3
 800438e:	f042 0202 	orrlt.w	r2, r2, #2
 8004392:	9307      	strge	r3, [sp, #28]
 8004394:	9307      	strlt	r3, [sp, #28]
 8004396:	bfb8      	it	lt
 8004398:	9204      	strlt	r2, [sp, #16]
 800439a:	7823      	ldrb	r3, [r4, #0]
 800439c:	2b2e      	cmp	r3, #46	@ 0x2e
 800439e:	d10a      	bne.n	80043b6 <_vfiprintf_r+0x156>
 80043a0:	7863      	ldrb	r3, [r4, #1]
 80043a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043a4:	d132      	bne.n	800440c <_vfiprintf_r+0x1ac>
 80043a6:	9b03      	ldr	r3, [sp, #12]
 80043a8:	1d1a      	adds	r2, r3, #4
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	9203      	str	r2, [sp, #12]
 80043ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043b2:	3402      	adds	r4, #2
 80043b4:	9305      	str	r3, [sp, #20]
 80043b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800448c <_vfiprintf_r+0x22c>
 80043ba:	7821      	ldrb	r1, [r4, #0]
 80043bc:	2203      	movs	r2, #3
 80043be:	4650      	mov	r0, sl
 80043c0:	f7fb ff06 	bl	80001d0 <memchr>
 80043c4:	b138      	cbz	r0, 80043d6 <_vfiprintf_r+0x176>
 80043c6:	9b04      	ldr	r3, [sp, #16]
 80043c8:	eba0 000a 	sub.w	r0, r0, sl
 80043cc:	2240      	movs	r2, #64	@ 0x40
 80043ce:	4082      	lsls	r2, r0
 80043d0:	4313      	orrs	r3, r2
 80043d2:	3401      	adds	r4, #1
 80043d4:	9304      	str	r3, [sp, #16]
 80043d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043da:	4829      	ldr	r0, [pc, #164]	@ (8004480 <_vfiprintf_r+0x220>)
 80043dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043e0:	2206      	movs	r2, #6
 80043e2:	f7fb fef5 	bl	80001d0 <memchr>
 80043e6:	2800      	cmp	r0, #0
 80043e8:	d03f      	beq.n	800446a <_vfiprintf_r+0x20a>
 80043ea:	4b26      	ldr	r3, [pc, #152]	@ (8004484 <_vfiprintf_r+0x224>)
 80043ec:	bb1b      	cbnz	r3, 8004436 <_vfiprintf_r+0x1d6>
 80043ee:	9b03      	ldr	r3, [sp, #12]
 80043f0:	3307      	adds	r3, #7
 80043f2:	f023 0307 	bic.w	r3, r3, #7
 80043f6:	3308      	adds	r3, #8
 80043f8:	9303      	str	r3, [sp, #12]
 80043fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043fc:	443b      	add	r3, r7
 80043fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8004400:	e76a      	b.n	80042d8 <_vfiprintf_r+0x78>
 8004402:	fb0c 3202 	mla	r2, ip, r2, r3
 8004406:	460c      	mov	r4, r1
 8004408:	2001      	movs	r0, #1
 800440a:	e7a8      	b.n	800435e <_vfiprintf_r+0xfe>
 800440c:	2300      	movs	r3, #0
 800440e:	3401      	adds	r4, #1
 8004410:	9305      	str	r3, [sp, #20]
 8004412:	4619      	mov	r1, r3
 8004414:	f04f 0c0a 	mov.w	ip, #10
 8004418:	4620      	mov	r0, r4
 800441a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800441e:	3a30      	subs	r2, #48	@ 0x30
 8004420:	2a09      	cmp	r2, #9
 8004422:	d903      	bls.n	800442c <_vfiprintf_r+0x1cc>
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0c6      	beq.n	80043b6 <_vfiprintf_r+0x156>
 8004428:	9105      	str	r1, [sp, #20]
 800442a:	e7c4      	b.n	80043b6 <_vfiprintf_r+0x156>
 800442c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004430:	4604      	mov	r4, r0
 8004432:	2301      	movs	r3, #1
 8004434:	e7f0      	b.n	8004418 <_vfiprintf_r+0x1b8>
 8004436:	ab03      	add	r3, sp, #12
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	462a      	mov	r2, r5
 800443c:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <_vfiprintf_r+0x228>)
 800443e:	a904      	add	r1, sp, #16
 8004440:	4630      	mov	r0, r6
 8004442:	f7fd fdd1 	bl	8001fe8 <_printf_float>
 8004446:	4607      	mov	r7, r0
 8004448:	1c78      	adds	r0, r7, #1
 800444a:	d1d6      	bne.n	80043fa <_vfiprintf_r+0x19a>
 800444c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800444e:	07d9      	lsls	r1, r3, #31
 8004450:	d405      	bmi.n	800445e <_vfiprintf_r+0x1fe>
 8004452:	89ab      	ldrh	r3, [r5, #12]
 8004454:	059a      	lsls	r2, r3, #22
 8004456:	d402      	bmi.n	800445e <_vfiprintf_r+0x1fe>
 8004458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800445a:	f7fe fc03 	bl	8002c64 <__retarget_lock_release_recursive>
 800445e:	89ab      	ldrh	r3, [r5, #12]
 8004460:	065b      	lsls	r3, r3, #25
 8004462:	f53f af1f 	bmi.w	80042a4 <_vfiprintf_r+0x44>
 8004466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004468:	e71e      	b.n	80042a8 <_vfiprintf_r+0x48>
 800446a:	ab03      	add	r3, sp, #12
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	462a      	mov	r2, r5
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <_vfiprintf_r+0x228>)
 8004472:	a904      	add	r1, sp, #16
 8004474:	4630      	mov	r0, r6
 8004476:	f7fe f84f 	bl	8002518 <_printf_i>
 800447a:	e7e4      	b.n	8004446 <_vfiprintf_r+0x1e6>
 800447c:	08004b42 	.word	0x08004b42
 8004480:	08004b4c 	.word	0x08004b4c
 8004484:	08001fe9 	.word	0x08001fe9
 8004488:	0800423b 	.word	0x0800423b
 800448c:	08004b48 	.word	0x08004b48

08004490 <__sflush_r>:
 8004490:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004498:	0716      	lsls	r6, r2, #28
 800449a:	4605      	mov	r5, r0
 800449c:	460c      	mov	r4, r1
 800449e:	d454      	bmi.n	800454a <__sflush_r+0xba>
 80044a0:	684b      	ldr	r3, [r1, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	dc02      	bgt.n	80044ac <__sflush_r+0x1c>
 80044a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	dd48      	ble.n	800453e <__sflush_r+0xae>
 80044ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044ae:	2e00      	cmp	r6, #0
 80044b0:	d045      	beq.n	800453e <__sflush_r+0xae>
 80044b2:	2300      	movs	r3, #0
 80044b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044b8:	682f      	ldr	r7, [r5, #0]
 80044ba:	6a21      	ldr	r1, [r4, #32]
 80044bc:	602b      	str	r3, [r5, #0]
 80044be:	d030      	beq.n	8004522 <__sflush_r+0x92>
 80044c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	0759      	lsls	r1, r3, #29
 80044c6:	d505      	bpl.n	80044d4 <__sflush_r+0x44>
 80044c8:	6863      	ldr	r3, [r4, #4]
 80044ca:	1ad2      	subs	r2, r2, r3
 80044cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044ce:	b10b      	cbz	r3, 80044d4 <__sflush_r+0x44>
 80044d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044d2:	1ad2      	subs	r2, r2, r3
 80044d4:	2300      	movs	r3, #0
 80044d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044d8:	6a21      	ldr	r1, [r4, #32]
 80044da:	4628      	mov	r0, r5
 80044dc:	47b0      	blx	r6
 80044de:	1c43      	adds	r3, r0, #1
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	d106      	bne.n	80044f2 <__sflush_r+0x62>
 80044e4:	6829      	ldr	r1, [r5, #0]
 80044e6:	291d      	cmp	r1, #29
 80044e8:	d82b      	bhi.n	8004542 <__sflush_r+0xb2>
 80044ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004594 <__sflush_r+0x104>)
 80044ec:	40ca      	lsrs	r2, r1
 80044ee:	07d6      	lsls	r6, r2, #31
 80044f0:	d527      	bpl.n	8004542 <__sflush_r+0xb2>
 80044f2:	2200      	movs	r2, #0
 80044f4:	6062      	str	r2, [r4, #4]
 80044f6:	04d9      	lsls	r1, r3, #19
 80044f8:	6922      	ldr	r2, [r4, #16]
 80044fa:	6022      	str	r2, [r4, #0]
 80044fc:	d504      	bpl.n	8004508 <__sflush_r+0x78>
 80044fe:	1c42      	adds	r2, r0, #1
 8004500:	d101      	bne.n	8004506 <__sflush_r+0x76>
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	b903      	cbnz	r3, 8004508 <__sflush_r+0x78>
 8004506:	6560      	str	r0, [r4, #84]	@ 0x54
 8004508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800450a:	602f      	str	r7, [r5, #0]
 800450c:	b1b9      	cbz	r1, 800453e <__sflush_r+0xae>
 800450e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004512:	4299      	cmp	r1, r3
 8004514:	d002      	beq.n	800451c <__sflush_r+0x8c>
 8004516:	4628      	mov	r0, r5
 8004518:	f7ff f9fe 	bl	8003918 <_free_r>
 800451c:	2300      	movs	r3, #0
 800451e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004520:	e00d      	b.n	800453e <__sflush_r+0xae>
 8004522:	2301      	movs	r3, #1
 8004524:	4628      	mov	r0, r5
 8004526:	47b0      	blx	r6
 8004528:	4602      	mov	r2, r0
 800452a:	1c50      	adds	r0, r2, #1
 800452c:	d1c9      	bne.n	80044c2 <__sflush_r+0x32>
 800452e:	682b      	ldr	r3, [r5, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0c6      	beq.n	80044c2 <__sflush_r+0x32>
 8004534:	2b1d      	cmp	r3, #29
 8004536:	d001      	beq.n	800453c <__sflush_r+0xac>
 8004538:	2b16      	cmp	r3, #22
 800453a:	d11e      	bne.n	800457a <__sflush_r+0xea>
 800453c:	602f      	str	r7, [r5, #0]
 800453e:	2000      	movs	r0, #0
 8004540:	e022      	b.n	8004588 <__sflush_r+0xf8>
 8004542:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004546:	b21b      	sxth	r3, r3
 8004548:	e01b      	b.n	8004582 <__sflush_r+0xf2>
 800454a:	690f      	ldr	r7, [r1, #16]
 800454c:	2f00      	cmp	r7, #0
 800454e:	d0f6      	beq.n	800453e <__sflush_r+0xae>
 8004550:	0793      	lsls	r3, r2, #30
 8004552:	680e      	ldr	r6, [r1, #0]
 8004554:	bf08      	it	eq
 8004556:	694b      	ldreq	r3, [r1, #20]
 8004558:	600f      	str	r7, [r1, #0]
 800455a:	bf18      	it	ne
 800455c:	2300      	movne	r3, #0
 800455e:	eba6 0807 	sub.w	r8, r6, r7
 8004562:	608b      	str	r3, [r1, #8]
 8004564:	f1b8 0f00 	cmp.w	r8, #0
 8004568:	dde9      	ble.n	800453e <__sflush_r+0xae>
 800456a:	6a21      	ldr	r1, [r4, #32]
 800456c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800456e:	4643      	mov	r3, r8
 8004570:	463a      	mov	r2, r7
 8004572:	4628      	mov	r0, r5
 8004574:	47b0      	blx	r6
 8004576:	2800      	cmp	r0, #0
 8004578:	dc08      	bgt.n	800458c <__sflush_r+0xfc>
 800457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004582:	81a3      	strh	r3, [r4, #12]
 8004584:	f04f 30ff 	mov.w	r0, #4294967295
 8004588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800458c:	4407      	add	r7, r0
 800458e:	eba8 0800 	sub.w	r8, r8, r0
 8004592:	e7e7      	b.n	8004564 <__sflush_r+0xd4>
 8004594:	20400001 	.word	0x20400001

08004598 <_fflush_r>:
 8004598:	b538      	push	{r3, r4, r5, lr}
 800459a:	690b      	ldr	r3, [r1, #16]
 800459c:	4605      	mov	r5, r0
 800459e:	460c      	mov	r4, r1
 80045a0:	b913      	cbnz	r3, 80045a8 <_fflush_r+0x10>
 80045a2:	2500      	movs	r5, #0
 80045a4:	4628      	mov	r0, r5
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	b118      	cbz	r0, 80045b2 <_fflush_r+0x1a>
 80045aa:	6a03      	ldr	r3, [r0, #32]
 80045ac:	b90b      	cbnz	r3, 80045b2 <_fflush_r+0x1a>
 80045ae:	f7fe f95d 	bl	800286c <__sinit>
 80045b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d0f3      	beq.n	80045a2 <_fflush_r+0xa>
 80045ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045bc:	07d0      	lsls	r0, r2, #31
 80045be:	d404      	bmi.n	80045ca <_fflush_r+0x32>
 80045c0:	0599      	lsls	r1, r3, #22
 80045c2:	d402      	bmi.n	80045ca <_fflush_r+0x32>
 80045c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045c6:	f7fe fb4c 	bl	8002c62 <__retarget_lock_acquire_recursive>
 80045ca:	4628      	mov	r0, r5
 80045cc:	4621      	mov	r1, r4
 80045ce:	f7ff ff5f 	bl	8004490 <__sflush_r>
 80045d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045d4:	07da      	lsls	r2, r3, #31
 80045d6:	4605      	mov	r5, r0
 80045d8:	d4e4      	bmi.n	80045a4 <_fflush_r+0xc>
 80045da:	89a3      	ldrh	r3, [r4, #12]
 80045dc:	059b      	lsls	r3, r3, #22
 80045de:	d4e1      	bmi.n	80045a4 <_fflush_r+0xc>
 80045e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045e2:	f7fe fb3f 	bl	8002c64 <__retarget_lock_release_recursive>
 80045e6:	e7dd      	b.n	80045a4 <_fflush_r+0xc>

080045e8 <__swhatbuf_r>:
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	460c      	mov	r4, r1
 80045ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f0:	2900      	cmp	r1, #0
 80045f2:	b096      	sub	sp, #88	@ 0x58
 80045f4:	4615      	mov	r5, r2
 80045f6:	461e      	mov	r6, r3
 80045f8:	da0d      	bge.n	8004616 <__swhatbuf_r+0x2e>
 80045fa:	89a3      	ldrh	r3, [r4, #12]
 80045fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	bf14      	ite	ne
 8004606:	2340      	movne	r3, #64	@ 0x40
 8004608:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800460c:	2000      	movs	r0, #0
 800460e:	6031      	str	r1, [r6, #0]
 8004610:	602b      	str	r3, [r5, #0]
 8004612:	b016      	add	sp, #88	@ 0x58
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	466a      	mov	r2, sp
 8004618:	f000 f848 	bl	80046ac <_fstat_r>
 800461c:	2800      	cmp	r0, #0
 800461e:	dbec      	blt.n	80045fa <__swhatbuf_r+0x12>
 8004620:	9901      	ldr	r1, [sp, #4]
 8004622:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004626:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800462a:	4259      	negs	r1, r3
 800462c:	4159      	adcs	r1, r3
 800462e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004632:	e7eb      	b.n	800460c <__swhatbuf_r+0x24>

08004634 <__smakebuf_r>:
 8004634:	898b      	ldrh	r3, [r1, #12]
 8004636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004638:	079d      	lsls	r5, r3, #30
 800463a:	4606      	mov	r6, r0
 800463c:	460c      	mov	r4, r1
 800463e:	d507      	bpl.n	8004650 <__smakebuf_r+0x1c>
 8004640:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	2301      	movs	r3, #1
 800464a:	6163      	str	r3, [r4, #20]
 800464c:	b003      	add	sp, #12
 800464e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004650:	ab01      	add	r3, sp, #4
 8004652:	466a      	mov	r2, sp
 8004654:	f7ff ffc8 	bl	80045e8 <__swhatbuf_r>
 8004658:	9f00      	ldr	r7, [sp, #0]
 800465a:	4605      	mov	r5, r0
 800465c:	4639      	mov	r1, r7
 800465e:	4630      	mov	r0, r6
 8004660:	f7ff f9ce 	bl	8003a00 <_malloc_r>
 8004664:	b948      	cbnz	r0, 800467a <__smakebuf_r+0x46>
 8004666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800466a:	059a      	lsls	r2, r3, #22
 800466c:	d4ee      	bmi.n	800464c <__smakebuf_r+0x18>
 800466e:	f023 0303 	bic.w	r3, r3, #3
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	e7e2      	b.n	8004640 <__smakebuf_r+0xc>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	6020      	str	r0, [r4, #0]
 800467e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004682:	81a3      	strh	r3, [r4, #12]
 8004684:	9b01      	ldr	r3, [sp, #4]
 8004686:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800468a:	b15b      	cbz	r3, 80046a4 <__smakebuf_r+0x70>
 800468c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004690:	4630      	mov	r0, r6
 8004692:	f000 f81d 	bl	80046d0 <_isatty_r>
 8004696:	b128      	cbz	r0, 80046a4 <__smakebuf_r+0x70>
 8004698:	89a3      	ldrh	r3, [r4, #12]
 800469a:	f023 0303 	bic.w	r3, r3, #3
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	81a3      	strh	r3, [r4, #12]
 80046a4:	89a3      	ldrh	r3, [r4, #12]
 80046a6:	431d      	orrs	r5, r3
 80046a8:	81a5      	strh	r5, [r4, #12]
 80046aa:	e7cf      	b.n	800464c <__smakebuf_r+0x18>

080046ac <_fstat_r>:
 80046ac:	b538      	push	{r3, r4, r5, lr}
 80046ae:	4d07      	ldr	r5, [pc, #28]	@ (80046cc <_fstat_r+0x20>)
 80046b0:	2300      	movs	r3, #0
 80046b2:	4604      	mov	r4, r0
 80046b4:	4608      	mov	r0, r1
 80046b6:	4611      	mov	r1, r2
 80046b8:	602b      	str	r3, [r5, #0]
 80046ba:	f7fd fb6f 	bl	8001d9c <_fstat>
 80046be:	1c43      	adds	r3, r0, #1
 80046c0:	d102      	bne.n	80046c8 <_fstat_r+0x1c>
 80046c2:	682b      	ldr	r3, [r5, #0]
 80046c4:	b103      	cbz	r3, 80046c8 <_fstat_r+0x1c>
 80046c6:	6023      	str	r3, [r4, #0]
 80046c8:	bd38      	pop	{r3, r4, r5, pc}
 80046ca:	bf00      	nop
 80046cc:	20000380 	.word	0x20000380

080046d0 <_isatty_r>:
 80046d0:	b538      	push	{r3, r4, r5, lr}
 80046d2:	4d06      	ldr	r5, [pc, #24]	@ (80046ec <_isatty_r+0x1c>)
 80046d4:	2300      	movs	r3, #0
 80046d6:	4604      	mov	r4, r0
 80046d8:	4608      	mov	r0, r1
 80046da:	602b      	str	r3, [r5, #0]
 80046dc:	f7fd fb6e 	bl	8001dbc <_isatty>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	d102      	bne.n	80046ea <_isatty_r+0x1a>
 80046e4:	682b      	ldr	r3, [r5, #0]
 80046e6:	b103      	cbz	r3, 80046ea <_isatty_r+0x1a>
 80046e8:	6023      	str	r3, [r4, #0]
 80046ea:	bd38      	pop	{r3, r4, r5, pc}
 80046ec:	20000380 	.word	0x20000380

080046f0 <_sbrk_r>:
 80046f0:	b538      	push	{r3, r4, r5, lr}
 80046f2:	4d06      	ldr	r5, [pc, #24]	@ (800470c <_sbrk_r+0x1c>)
 80046f4:	2300      	movs	r3, #0
 80046f6:	4604      	mov	r4, r0
 80046f8:	4608      	mov	r0, r1
 80046fa:	602b      	str	r3, [r5, #0]
 80046fc:	f7fd fb76 	bl	8001dec <_sbrk>
 8004700:	1c43      	adds	r3, r0, #1
 8004702:	d102      	bne.n	800470a <_sbrk_r+0x1a>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	b103      	cbz	r3, 800470a <_sbrk_r+0x1a>
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	20000380 	.word	0x20000380

08004710 <memcpy>:
 8004710:	440a      	add	r2, r1
 8004712:	4291      	cmp	r1, r2
 8004714:	f100 33ff 	add.w	r3, r0, #4294967295
 8004718:	d100      	bne.n	800471c <memcpy+0xc>
 800471a:	4770      	bx	lr
 800471c:	b510      	push	{r4, lr}
 800471e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004726:	4291      	cmp	r1, r2
 8004728:	d1f9      	bne.n	800471e <memcpy+0xe>
 800472a:	bd10      	pop	{r4, pc}

0800472c <__assert_func>:
 800472c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800472e:	4614      	mov	r4, r2
 8004730:	461a      	mov	r2, r3
 8004732:	4b09      	ldr	r3, [pc, #36]	@ (8004758 <__assert_func+0x2c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4605      	mov	r5, r0
 8004738:	68d8      	ldr	r0, [r3, #12]
 800473a:	b14c      	cbz	r4, 8004750 <__assert_func+0x24>
 800473c:	4b07      	ldr	r3, [pc, #28]	@ (800475c <__assert_func+0x30>)
 800473e:	9100      	str	r1, [sp, #0]
 8004740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004744:	4906      	ldr	r1, [pc, #24]	@ (8004760 <__assert_func+0x34>)
 8004746:	462b      	mov	r3, r5
 8004748:	f000 f842 	bl	80047d0 <fiprintf>
 800474c:	f000 f852 	bl	80047f4 <abort>
 8004750:	4b04      	ldr	r3, [pc, #16]	@ (8004764 <__assert_func+0x38>)
 8004752:	461c      	mov	r4, r3
 8004754:	e7f3      	b.n	800473e <__assert_func+0x12>
 8004756:	bf00      	nop
 8004758:	2000000c 	.word	0x2000000c
 800475c:	08004b5d 	.word	0x08004b5d
 8004760:	08004b6a 	.word	0x08004b6a
 8004764:	08004b98 	.word	0x08004b98

08004768 <_calloc_r>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	fba1 5402 	umull	r5, r4, r1, r2
 800476e:	b934      	cbnz	r4, 800477e <_calloc_r+0x16>
 8004770:	4629      	mov	r1, r5
 8004772:	f7ff f945 	bl	8003a00 <_malloc_r>
 8004776:	4606      	mov	r6, r0
 8004778:	b928      	cbnz	r0, 8004786 <_calloc_r+0x1e>
 800477a:	4630      	mov	r0, r6
 800477c:	bd70      	pop	{r4, r5, r6, pc}
 800477e:	220c      	movs	r2, #12
 8004780:	6002      	str	r2, [r0, #0]
 8004782:	2600      	movs	r6, #0
 8004784:	e7f9      	b.n	800477a <_calloc_r+0x12>
 8004786:	462a      	mov	r2, r5
 8004788:	4621      	mov	r1, r4
 800478a:	f7fe f9ed 	bl	8002b68 <memset>
 800478e:	e7f4      	b.n	800477a <_calloc_r+0x12>

08004790 <__ascii_mbtowc>:
 8004790:	b082      	sub	sp, #8
 8004792:	b901      	cbnz	r1, 8004796 <__ascii_mbtowc+0x6>
 8004794:	a901      	add	r1, sp, #4
 8004796:	b142      	cbz	r2, 80047aa <__ascii_mbtowc+0x1a>
 8004798:	b14b      	cbz	r3, 80047ae <__ascii_mbtowc+0x1e>
 800479a:	7813      	ldrb	r3, [r2, #0]
 800479c:	600b      	str	r3, [r1, #0]
 800479e:	7812      	ldrb	r2, [r2, #0]
 80047a0:	1e10      	subs	r0, r2, #0
 80047a2:	bf18      	it	ne
 80047a4:	2001      	movne	r0, #1
 80047a6:	b002      	add	sp, #8
 80047a8:	4770      	bx	lr
 80047aa:	4610      	mov	r0, r2
 80047ac:	e7fb      	b.n	80047a6 <__ascii_mbtowc+0x16>
 80047ae:	f06f 0001 	mvn.w	r0, #1
 80047b2:	e7f8      	b.n	80047a6 <__ascii_mbtowc+0x16>

080047b4 <__ascii_wctomb>:
 80047b4:	4603      	mov	r3, r0
 80047b6:	4608      	mov	r0, r1
 80047b8:	b141      	cbz	r1, 80047cc <__ascii_wctomb+0x18>
 80047ba:	2aff      	cmp	r2, #255	@ 0xff
 80047bc:	d904      	bls.n	80047c8 <__ascii_wctomb+0x14>
 80047be:	228a      	movs	r2, #138	@ 0x8a
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	f04f 30ff 	mov.w	r0, #4294967295
 80047c6:	4770      	bx	lr
 80047c8:	700a      	strb	r2, [r1, #0]
 80047ca:	2001      	movs	r0, #1
 80047cc:	4770      	bx	lr
	...

080047d0 <fiprintf>:
 80047d0:	b40e      	push	{r1, r2, r3}
 80047d2:	b503      	push	{r0, r1, lr}
 80047d4:	4601      	mov	r1, r0
 80047d6:	ab03      	add	r3, sp, #12
 80047d8:	4805      	ldr	r0, [pc, #20]	@ (80047f0 <fiprintf+0x20>)
 80047da:	f853 2b04 	ldr.w	r2, [r3], #4
 80047de:	6800      	ldr	r0, [r0, #0]
 80047e0:	9301      	str	r3, [sp, #4]
 80047e2:	f7ff fd3d 	bl	8004260 <_vfiprintf_r>
 80047e6:	b002      	add	sp, #8
 80047e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047ec:	b003      	add	sp, #12
 80047ee:	4770      	bx	lr
 80047f0:	2000000c 	.word	0x2000000c

080047f4 <abort>:
 80047f4:	b508      	push	{r3, lr}
 80047f6:	2006      	movs	r0, #6
 80047f8:	f000 f82c 	bl	8004854 <raise>
 80047fc:	2001      	movs	r0, #1
 80047fe:	f7fd fa7d 	bl	8001cfc <_exit>

08004802 <_raise_r>:
 8004802:	291f      	cmp	r1, #31
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4605      	mov	r5, r0
 8004808:	460c      	mov	r4, r1
 800480a:	d904      	bls.n	8004816 <_raise_r+0x14>
 800480c:	2316      	movs	r3, #22
 800480e:	6003      	str	r3, [r0, #0]
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	bd38      	pop	{r3, r4, r5, pc}
 8004816:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004818:	b112      	cbz	r2, 8004820 <_raise_r+0x1e>
 800481a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800481e:	b94b      	cbnz	r3, 8004834 <_raise_r+0x32>
 8004820:	4628      	mov	r0, r5
 8004822:	f000 f831 	bl	8004888 <_getpid_r>
 8004826:	4622      	mov	r2, r4
 8004828:	4601      	mov	r1, r0
 800482a:	4628      	mov	r0, r5
 800482c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004830:	f000 b818 	b.w	8004864 <_kill_r>
 8004834:	2b01      	cmp	r3, #1
 8004836:	d00a      	beq.n	800484e <_raise_r+0x4c>
 8004838:	1c59      	adds	r1, r3, #1
 800483a:	d103      	bne.n	8004844 <_raise_r+0x42>
 800483c:	2316      	movs	r3, #22
 800483e:	6003      	str	r3, [r0, #0]
 8004840:	2001      	movs	r0, #1
 8004842:	e7e7      	b.n	8004814 <_raise_r+0x12>
 8004844:	2100      	movs	r1, #0
 8004846:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800484a:	4620      	mov	r0, r4
 800484c:	4798      	blx	r3
 800484e:	2000      	movs	r0, #0
 8004850:	e7e0      	b.n	8004814 <_raise_r+0x12>
	...

08004854 <raise>:
 8004854:	4b02      	ldr	r3, [pc, #8]	@ (8004860 <raise+0xc>)
 8004856:	4601      	mov	r1, r0
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	f7ff bfd2 	b.w	8004802 <_raise_r>
 800485e:	bf00      	nop
 8004860:	2000000c 	.word	0x2000000c

08004864 <_kill_r>:
 8004864:	b538      	push	{r3, r4, r5, lr}
 8004866:	4d07      	ldr	r5, [pc, #28]	@ (8004884 <_kill_r+0x20>)
 8004868:	2300      	movs	r3, #0
 800486a:	4604      	mov	r4, r0
 800486c:	4608      	mov	r0, r1
 800486e:	4611      	mov	r1, r2
 8004870:	602b      	str	r3, [r5, #0]
 8004872:	f7fd fa33 	bl	8001cdc <_kill>
 8004876:	1c43      	adds	r3, r0, #1
 8004878:	d102      	bne.n	8004880 <_kill_r+0x1c>
 800487a:	682b      	ldr	r3, [r5, #0]
 800487c:	b103      	cbz	r3, 8004880 <_kill_r+0x1c>
 800487e:	6023      	str	r3, [r4, #0]
 8004880:	bd38      	pop	{r3, r4, r5, pc}
 8004882:	bf00      	nop
 8004884:	20000380 	.word	0x20000380

08004888 <_getpid_r>:
 8004888:	f7fd ba20 	b.w	8001ccc <_getpid>

0800488c <_init>:
 800488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800488e:	bf00      	nop
 8004890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004892:	bc08      	pop	{r3}
 8004894:	469e      	mov	lr, r3
 8004896:	4770      	bx	lr

08004898 <_fini>:
 8004898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489a:	bf00      	nop
 800489c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489e:	bc08      	pop	{r3}
 80048a0:	469e      	mov	lr, r3
 80048a2:	4770      	bx	lr
