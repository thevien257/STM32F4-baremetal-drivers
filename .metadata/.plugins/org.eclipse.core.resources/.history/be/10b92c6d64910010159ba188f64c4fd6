#include "stm32f4xx_cus.h"
#include <string.h>

void SPI_USER_INIT();
void GPIO_USER_INIT();

SPI_HandleTypedef SPI_Handle;
GPIO_Handle_TypeDef GPIO_Handle;
char user_data[] = "Hello World\n";

uint8_t readInput;
/*
 * PB14 --> SPI2_MISO
 * PB15 --> SPI2_MOSI
 * PB13 -> SPI2_SCLK
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

/* SPI Slave Demo Arduino

 *
 * SPI pin numbers:
 * SCK   13  // Serial Clock.
 * MISO  12  // Master In Slave Out.
 * MOSI  11  // Master Out Slave In.
 * SS    10  // Slave Select . Arduino SPI pins respond only if SS pulled low by the master
 *

 */

int main() {
	GPIO_USER_INIT();
	SPI_USER_INIT();
	// strlen: excluding the null terminator itself (\0);
	// sizeof: including the null terminator (\0) and any unused space
	SPI_SSOE_CONFIG(&SPI_Handle, HIGH);
	while (1) {
		while (!GPIO_INPUT(GPIOA, GPIO_PIN_0))
			;
		for (uint32_t i = 0; i < 500000; i++)
			;
		// Enable SPI
		SPI_PERIPHERAL_ENABLE(&SPI_Handle, HIGH);
		SPI_SEND(&SPI_Handle, (uint8_t*) user_data, strlen(user_data));
		while (SPI_GetFlagStatus(&SPI_Handle, Shift_7_pos))
			;

		// Disable SPI
		SPI_PERIPHERAL_ENABLE(&SPI_Handle, LOW);
	}

	while (1) {
		readInput = GPIO_INPUT(GPIOA, GPIO_PIN_0);
		if (readInput == HIGH) {
			for (uint32_t i = 0; i < 500000; i++)
				;
			// Enable SPI
			SPI_PERIPHERAL_ENABLE(&SPI_Handle, HIGH);
			// Send data len of user_data
			uint8_t data_len = strlen(user_data);
			SPI_SEND(&SPI_Handle, &data_len, 1);

			// Then send the user_data
			SPI_SEND(&SPI_Handle, (uint8_t*) user_data, strlen(user_data));
			// Enable SPI
			SPI_PERIPHERAL_ENABLE(&SPI_Handle, LOW);
		}
	}
	return 0;
}

void GPIO_USER_INIT(void) {
	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
	GPIO_Handle.mode = GPIO_MODE_INPUT;
	GPIO_Handle.pin_number = GPIO_PIN_0;
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
	GPIO_INIT(&GPIO_Handle);

	// PB12 - SPI2_NSS
	GPIO_Handle.GPIOX = GPIOB;
	GPIO_Handle.mode = GPIO_MODE_AF;
	GPIO_Handle.alternate_function_select = GPIO_AF5;
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_PP;
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
	GPIO_Handle.pin_number = GPIO_PIN_12;
	GPIO_INIT(&GPIO_Handle);

	// PB13 - SPI2_SCLK
	GPIO_Handle.pin_number = GPIO_PIN_13;
	GPIO_INIT(&GPIO_Handle);

	// PB14 - SPI2_MISO
	GPIO_Handle.pin_number = GPIO_PIN_14;
	GPIO_INIT(&GPIO_Handle);

	// PB15 - SPI2_MOSI
	GPIO_Handle.pin_number = GPIO_PIN_15;
	GPIO_INIT(&GPIO_Handle);
}

void SPI_USER_INIT() {
	SPI_Handle.SPIx = SPI2;
	SPI_Handle.spi_clock_phase = SPI_DATA_CAPTURED_FIRST_CLOCK;
	SPI_Handle.spi_clock_polarity = SPI_IDLE_LOW;
	SPI_Handle.spi_data_direction = SPI_FULL_DUPLEX_MODE;
	SPI_Handle.spi_frame_format = SPI_8_BIT_FRAME_FORMAT;
	SPI_Handle.spi_master_slave = SPI_MASTER_MODE;
	SPI_Handle.spi_sclk_prescaler = SPI_PRES_8;
	SPI_Handle.spi_ssm = SPI_SOFTWARE_SLAVE_DIS;
	SPI_INIT(&SPI_Handle);
}

