
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009cc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000b54  08000b54  00001b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b74  08000b74  00001b7c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b74  08000b74  00001b7c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b74  08000b7c  00001b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b74  08000b74  00001b74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b78  08000b78  00001b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001b7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b7c  2**0
                  CONTENTS
 10 .bss          00000028  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000028  20000028  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001b7c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000011f9  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000045e  00000000  00000000  00002da5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  00003208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000de  00000000  00000000  00003340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000074a  00000000  00000000  0000341e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ee4  00000000  00000000  00003b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a55a  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0000ffa6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000434  00000000  00000000  0000ffec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00010420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b3c 	.word	0x08000b3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000b3c 	.word	0x08000b3c

080001c8 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a90      	ldr	r2, [pc, #576]	@ (8000418 <GPIO_INIT+0x250>)
 80001d6:	4293      	cmp	r3, r2
 80001d8:	d106      	bne.n	80001e8 <GPIO_INIT+0x20>
		GPIOA_EN();
 80001da:	4b90      	ldr	r3, [pc, #576]	@ (800041c <GPIO_INIT+0x254>)
 80001dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001de:	4a8f      	ldr	r2, [pc, #572]	@ (800041c <GPIO_INIT+0x254>)
 80001e0:	f043 0301 	orr.w	r3, r3, #1
 80001e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80001e6:	e05e      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a8c      	ldr	r2, [pc, #560]	@ (8000420 <GPIO_INIT+0x258>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d106      	bne.n	8000200 <GPIO_INIT+0x38>
		GPIOB_EN();
 80001f2:	4b8a      	ldr	r3, [pc, #552]	@ (800041c <GPIO_INIT+0x254>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f6:	4a89      	ldr	r2, [pc, #548]	@ (800041c <GPIO_INIT+0x254>)
 80001f8:	f043 0302 	orr.w	r3, r3, #2
 80001fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80001fe:	e052      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a87      	ldr	r2, [pc, #540]	@ (8000424 <GPIO_INIT+0x25c>)
 8000206:	4293      	cmp	r3, r2
 8000208:	d106      	bne.n	8000218 <GPIO_INIT+0x50>
		GPIOC_EN();
 800020a:	4b84      	ldr	r3, [pc, #528]	@ (800041c <GPIO_INIT+0x254>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800020e:	4a83      	ldr	r2, [pc, #524]	@ (800041c <GPIO_INIT+0x254>)
 8000210:	f043 0304 	orr.w	r3, r3, #4
 8000214:	6313      	str	r3, [r2, #48]	@ 0x30
 8000216:	e046      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a82      	ldr	r2, [pc, #520]	@ (8000428 <GPIO_INIT+0x260>)
 800021e:	4293      	cmp	r3, r2
 8000220:	d106      	bne.n	8000230 <GPIO_INIT+0x68>
		GPIOD_EN();
 8000222:	4b7e      	ldr	r3, [pc, #504]	@ (800041c <GPIO_INIT+0x254>)
 8000224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000226:	4a7d      	ldr	r2, [pc, #500]	@ (800041c <GPIO_INIT+0x254>)
 8000228:	f043 0308 	orr.w	r3, r3, #8
 800022c:	6313      	str	r3, [r2, #48]	@ 0x30
 800022e:	e03a      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a7d      	ldr	r2, [pc, #500]	@ (800042c <GPIO_INIT+0x264>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_INIT+0x80>
		GPIOE_EN();
 800023a:	4b78      	ldr	r3, [pc, #480]	@ (800041c <GPIO_INIT+0x254>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a77      	ldr	r2, [pc, #476]	@ (800041c <GPIO_INIT+0x254>)
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
 8000246:	e02e      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a78      	ldr	r2, [pc, #480]	@ (8000430 <GPIO_INIT+0x268>)
 800024e:	4293      	cmp	r3, r2
 8000250:	d106      	bne.n	8000260 <GPIO_INIT+0x98>
		GPIOF_EN();
 8000252:	4b72      	ldr	r3, [pc, #456]	@ (800041c <GPIO_INIT+0x254>)
 8000254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000256:	4a71      	ldr	r2, [pc, #452]	@ (800041c <GPIO_INIT+0x254>)
 8000258:	f043 0320 	orr.w	r3, r3, #32
 800025c:	6313      	str	r3, [r2, #48]	@ 0x30
 800025e:	e022      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a73      	ldr	r2, [pc, #460]	@ (8000434 <GPIO_INIT+0x26c>)
 8000266:	4293      	cmp	r3, r2
 8000268:	d106      	bne.n	8000278 <GPIO_INIT+0xb0>
		GPIOG_EN();
 800026a:	4b6c      	ldr	r3, [pc, #432]	@ (800041c <GPIO_INIT+0x254>)
 800026c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026e:	4a6b      	ldr	r2, [pc, #428]	@ (800041c <GPIO_INIT+0x254>)
 8000270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000274:	6313      	str	r3, [r2, #48]	@ 0x30
 8000276:	e016      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a6e      	ldr	r2, [pc, #440]	@ (8000438 <GPIO_INIT+0x270>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <GPIO_INIT+0xc8>
		GPIOH_EN();
 8000282:	4b66      	ldr	r3, [pc, #408]	@ (800041c <GPIO_INIT+0x254>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000286:	4a65      	ldr	r2, [pc, #404]	@ (800041c <GPIO_INIT+0x254>)
 8000288:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800028c:	6313      	str	r3, [r2, #48]	@ 0x30
 800028e:	e00a      	b.n	80002a6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a69      	ldr	r2, [pc, #420]	@ (800043c <GPIO_INIT+0x274>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d105      	bne.n	80002a6 <GPIO_INIT+0xde>
		GPIOI_EN();
 800029a:	4b60      	ldr	r3, [pc, #384]	@ (800041c <GPIO_INIT+0x254>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029e:	4a5f      	ldr	r2, [pc, #380]	@ (800041c <GPIO_INIT+0x254>)
 80002a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002a4:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	791b      	ldrb	r3, [r3, #4]
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	2103      	movs	r1, #3
 80002b4:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 80002b8:	43db      	mvns	r3, r3
 80002ba:	4619      	mov	r1, r3
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	400a      	ands	r2, r1
 80002c2:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	791b      	ldrb	r3, [r3, #4]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	400a      	ands	r2, r1
 80002e0:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	799b      	ldrb	r3, [r3, #6]
 80002ec:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	791b      	ldrb	r3, [r3, #4]
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	fa01 f303 	lsl.w	r3, r1, r3
 80002f8:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	430a      	orrs	r2, r1
 8000300:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	795b      	ldrb	r3, [r3, #5]
 8000306:	2b02      	cmp	r3, #2
 8000308:	f200 809a 	bhi.w	8000440 <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	795b      	ldrb	r3, [r3, #5]
 8000316:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	791b      	ldrb	r3, [r3, #4]
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	fa01 f303 	lsl.w	r3, r1, r3
 8000322:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	430a      	orrs	r2, r1
 800032a:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	791b      	ldrb	r3, [r3, #4]
 8000336:	4619      	mov	r1, r3
 8000338:	2303      	movs	r3, #3
 800033a:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 800033c:	43db      	mvns	r3, r3
 800033e:	4619      	mov	r1, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	400a      	ands	r2, r1
 8000346:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	685a      	ldr	r2, [r3, #4]
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	7a1b      	ldrb	r3, [r3, #8]
 8000352:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	791b      	ldrb	r3, [r3, #4]
 8000358:	fa01 f303 	lsl.w	r3, r1, r3
 800035c:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	430a      	orrs	r2, r1
 8000364:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	791b      	ldrb	r3, [r3, #4]
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	2103      	movs	r1, #3
 8000374:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000378:	43db      	mvns	r3, r3
 800037a:	4619      	mov	r1, r3
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	400a      	ands	r2, r1
 8000382:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	689a      	ldr	r2, [r3, #8]
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	79db      	ldrb	r3, [r3, #7]
 800038e:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	791b      	ldrb	r3, [r3, #4]
 8000394:	005b      	lsls	r3, r3, #1
 8000396:	fa01 f303 	lsl.w	r3, r1, r3
 800039a:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	430a      	orrs	r2, r1
 80003a2:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	795b      	ldrb	r3, [r3, #5]
 80003a8:	2b02      	cmp	r3, #2
 80003aa:	f040 80ec 	bne.w	8000586 <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 80003b2:	08db      	lsrs	r3, r3, #3
 80003b4:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	791b      	ldrb	r3, [r3, #4]
 80003ba:	f003 0307 	and.w	r3, r3, #7
 80003be:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	7b7a      	ldrb	r2, [r7, #13]
 80003c6:	3208      	adds	r2, #8
 80003c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	791b      	ldrb	r3, [r3, #4]
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	2203      	movs	r2, #3
 80003d4:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 80003d8:	43db      	mvns	r3, r3
 80003da:	4618      	mov	r0, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	7b7a      	ldrb	r2, [r7, #13]
 80003e2:	4001      	ands	r1, r0
 80003e4:	3208      	adds	r2, #8
 80003e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	7b7a      	ldrb	r2, [r7, #13]
 80003f0:	3208      	adds	r2, #8
 80003f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	7a5b      	ldrb	r3, [r3, #9]
 80003fa:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 80003fc:	7b3b      	ldrb	r3, [r7, #12]
 80003fe:	009b      	lsls	r3, r3, #2
 8000400:	fa02 f303 	lsl.w	r3, r2, r3
 8000404:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	7b7a      	ldrb	r2, [r7, #13]
 800040c:	4301      	orrs	r1, r0
 800040e:	3208      	adds	r2, #8
 8000410:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 8000414:	e0b7      	b.n	8000586 <GPIO_INIT+0x3be>
 8000416:	bf00      	nop
 8000418:	40020000 	.word	0x40020000
 800041c:	40023800 	.word	0x40023800
 8000420:	40020400 	.word	0x40020400
 8000424:	40020800 	.word	0x40020800
 8000428:	40020c00 	.word	0x40020c00
 800042c:	40021000 	.word	0x40021000
 8000430:	40021400 	.word	0x40021400
 8000434:	40021800 	.word	0x40021800
 8000438:	40021c00 	.word	0x40021c00
 800043c:	40022000 	.word	0x40022000
		SYSCFG_EN();
 8000440:	4b54      	ldr	r3, [pc, #336]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000444:	4a53      	ldr	r2, [pc, #332]	@ (8000594 <GPIO_INIT+0x3cc>)
 8000446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800044a:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	795b      	ldrb	r3, [r3, #5]
 8000450:	2b06      	cmp	r3, #6
 8000452:	d12e      	bne.n	80004b2 <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000454:	4b50      	ldr	r3, [pc, #320]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	687a      	ldr	r2, [r7, #4]
 800045a:	7912      	ldrb	r2, [r2, #4]
 800045c:	4611      	mov	r1, r2
 800045e:	2201      	movs	r2, #1
 8000460:	408a      	lsls	r2, r1
 8000462:	43d2      	mvns	r2, r2
 8000464:	4611      	mov	r1, r2
 8000466:	4a4c      	ldr	r2, [pc, #304]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000468:	400b      	ands	r3, r1
 800046a:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 800046c:	4b4a      	ldr	r3, [pc, #296]	@ (8000598 <GPIO_INIT+0x3d0>)
 800046e:	68db      	ldr	r3, [r3, #12]
 8000470:	687a      	ldr	r2, [r7, #4]
 8000472:	7912      	ldrb	r2, [r2, #4]
 8000474:	4611      	mov	r1, r2
 8000476:	2201      	movs	r2, #1
 8000478:	408a      	lsls	r2, r1
 800047a:	43d2      	mvns	r2, r2
 800047c:	4611      	mov	r1, r2
 800047e:	4a46      	ldr	r2, [pc, #280]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000480:	400b      	ands	r3, r1
 8000482:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000484:	4b44      	ldr	r3, [pc, #272]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000486:	689b      	ldr	r3, [r3, #8]
 8000488:	687a      	ldr	r2, [r7, #4]
 800048a:	7912      	ldrb	r2, [r2, #4]
 800048c:	4611      	mov	r1, r2
 800048e:	2201      	movs	r2, #1
 8000490:	408a      	lsls	r2, r1
 8000492:	4611      	mov	r1, r2
 8000494:	4a40      	ldr	r2, [pc, #256]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000496:	430b      	orrs	r3, r1
 8000498:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 800049a:	4b3f      	ldr	r3, [pc, #252]	@ (8000598 <GPIO_INIT+0x3d0>)
 800049c:	68db      	ldr	r3, [r3, #12]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	7912      	ldrb	r2, [r2, #4]
 80004a2:	4611      	mov	r1, r2
 80004a4:	2201      	movs	r2, #1
 80004a6:	408a      	lsls	r2, r1
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a3b      	ldr	r2, [pc, #236]	@ (8000598 <GPIO_INIT+0x3d0>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	60d3      	str	r3, [r2, #12]
 80004b0:	e036      	b.n	8000520 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	795b      	ldrb	r3, [r3, #5]
 80004b6:	2b05      	cmp	r3, #5
 80004b8:	d117      	bne.n	80004ea <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 80004ba:	4b37      	ldr	r3, [pc, #220]	@ (8000598 <GPIO_INIT+0x3d0>)
 80004bc:	68db      	ldr	r3, [r3, #12]
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	7912      	ldrb	r2, [r2, #4]
 80004c2:	4611      	mov	r1, r2
 80004c4:	2201      	movs	r2, #1
 80004c6:	408a      	lsls	r2, r1
 80004c8:	43d2      	mvns	r2, r2
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a32      	ldr	r2, [pc, #200]	@ (8000598 <GPIO_INIT+0x3d0>)
 80004ce:	400b      	ands	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 80004d2:	4b31      	ldr	r3, [pc, #196]	@ (8000598 <GPIO_INIT+0x3d0>)
 80004d4:	68db      	ldr	r3, [r3, #12]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	4611      	mov	r1, r2
 80004e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000598 <GPIO_INIT+0x3d0>)
 80004e4:	430b      	orrs	r3, r1
 80004e6:	60d3      	str	r3, [r2, #12]
 80004e8:	e01a      	b.n	8000520 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2b04      	cmp	r3, #4
 80004f0:	d116      	bne.n	8000520 <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80004f2:	4b29      	ldr	r3, [pc, #164]	@ (8000598 <GPIO_INIT+0x3d0>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7912      	ldrb	r2, [r2, #4]
 80004fa:	4611      	mov	r1, r2
 80004fc:	2201      	movs	r2, #1
 80004fe:	408a      	lsls	r2, r1
 8000500:	43d2      	mvns	r2, r2
 8000502:	4611      	mov	r1, r2
 8000504:	4a24      	ldr	r2, [pc, #144]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000506:	400b      	ands	r3, r1
 8000508:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 800050a:	4b23      	ldr	r3, [pc, #140]	@ (8000598 <GPIO_INIT+0x3d0>)
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	7912      	ldrb	r2, [r2, #4]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	4611      	mov	r1, r2
 800051a:	4a1f      	ldr	r2, [pc, #124]	@ (8000598 <GPIO_INIT+0x3d0>)
 800051c:	430b      	orrs	r3, r1
 800051e:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	791b      	ldrb	r3, [r3, #4]
 8000524:	089b      	lsrs	r3, r3, #2
 8000526:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	f003 0303 	and.w	r3, r3, #3
 8000530:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 8000532:	4a1a      	ldr	r2, [pc, #104]	@ (800059c <GPIO_INIT+0x3d4>)
 8000534:	7bfb      	ldrb	r3, [r7, #15]
 8000536:	3302      	adds	r3, #2
 8000538:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	7a9b      	ldrb	r3, [r3, #10]
 8000540:	4619      	mov	r1, r3
 8000542:	7bbb      	ldrb	r3, [r7, #14]
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	4618      	mov	r0, r3
 800054c:	4913      	ldr	r1, [pc, #76]	@ (800059c <GPIO_INIT+0x3d4>)
 800054e:	7bfb      	ldrb	r3, [r7, #15]
 8000550:	4302      	orrs	r2, r0
 8000552:	3302      	adds	r3, #2
 8000554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8000558:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <GPIO_INIT+0x3d0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	43d2      	mvns	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <GPIO_INIT+0x3d0>)
 800056c:	400b      	ands	r3, r1
 800056e:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	687a      	ldr	r2, [r7, #4]
 8000576:	7912      	ldrb	r2, [r2, #4]
 8000578:	4611      	mov	r1, r2
 800057a:	2201      	movs	r2, #1
 800057c:	408a      	lsls	r2, r1
 800057e:	4611      	mov	r1, r2
 8000580:	4a05      	ldr	r2, [pc, #20]	@ (8000598 <GPIO_INIT+0x3d0>)
 8000582:	430b      	orrs	r3, r1
 8000584:	6013      	str	r3, [r2, #0]
}
 8000586:	bf00      	nop
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800
 8000598:	40013c00 	.word	0x40013c00
 800059c:	40013800 	.word	0x40013800

080005a0 <SPI_PERIPHERAL_ENABLE>:
		return HIGH;
	}
	return LOW;
}

void SPI_PERIPHERAL_ENABLE(SPI_HandleTypedef *spi_handle, uint8_t EN) {
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
	if (EN == HIGH) {
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d108      	bne.n	80005c4 <SPI_PERIPHERAL_ENABLE+0x24>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_6_pos);
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80005c0:	601a      	str	r2, [r3, #0]
	} else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_6_pos);
	}
}
 80005c2:	e007      	b.n	80005d4 <SPI_PERIPHERAL_ENABLE+0x34>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_6_pos);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <SPI_SSI_CONFIG>:

void SPI_SSI_CONFIG(SPI_HandleTypedef *spi_handle, uint8_t EN) {
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	460b      	mov	r3, r1
 80005ea:	70fb      	strb	r3, [r7, #3]
	if (EN == HIGH) {
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d108      	bne.n	8000604 <SPI_SSI_CONFIG+0x24>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_8_pos);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000600:	601a      	str	r2, [r3, #0]
	} else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_8_pos);
	}
}
 8000602:	e007      	b.n	8000614 <SPI_SSI_CONFIG+0x34>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_8_pos);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000612:	601a      	str	r2, [r3, #0]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr

08000620 <SPI_INIT>:

void SPI_INIT(SPI_HandleTypedef *spi_handle) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if (spi_handle->SPIx == SPI1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a8a      	ldr	r2, [pc, #552]	@ (8000858 <SPI_INIT+0x238>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d106      	bne.n	8000640 <SPI_INIT+0x20>
		SPI1_EN();
 8000632:	4b8a      	ldr	r3, [pc, #552]	@ (800085c <SPI_INIT+0x23c>)
 8000634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000636:	4a89      	ldr	r2, [pc, #548]	@ (800085c <SPI_INIT+0x23c>)
 8000638:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800063c:	6453      	str	r3, [r2, #68]	@ 0x44
 800063e:	e03a      	b.n	80006b6 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI2) {
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a86      	ldr	r2, [pc, #536]	@ (8000860 <SPI_INIT+0x240>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d106      	bne.n	8000658 <SPI_INIT+0x38>
		SPI2_EN();
 800064a:	4b84      	ldr	r3, [pc, #528]	@ (800085c <SPI_INIT+0x23c>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064e:	4a83      	ldr	r2, [pc, #524]	@ (800085c <SPI_INIT+0x23c>)
 8000650:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000654:	6413      	str	r3, [r2, #64]	@ 0x40
 8000656:	e02e      	b.n	80006b6 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI3) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a81      	ldr	r2, [pc, #516]	@ (8000864 <SPI_INIT+0x244>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <SPI_INIT+0x50>
		SPI3_EN();
 8000662:	4b7e      	ldr	r3, [pc, #504]	@ (800085c <SPI_INIT+0x23c>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000666:	4a7d      	ldr	r2, [pc, #500]	@ (800085c <SPI_INIT+0x23c>)
 8000668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800066c:	6413      	str	r3, [r2, #64]	@ 0x40
 800066e:	e022      	b.n	80006b6 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI4) {
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a7c      	ldr	r2, [pc, #496]	@ (8000868 <SPI_INIT+0x248>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d106      	bne.n	8000688 <SPI_INIT+0x68>
		SPI4_EN();
 800067a:	4b78      	ldr	r3, [pc, #480]	@ (800085c <SPI_INIT+0x23c>)
 800067c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800067e:	4a77      	ldr	r2, [pc, #476]	@ (800085c <SPI_INIT+0x23c>)
 8000680:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000684:	6453      	str	r3, [r2, #68]	@ 0x44
 8000686:	e016      	b.n	80006b6 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI5) {
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a77      	ldr	r2, [pc, #476]	@ (800086c <SPI_INIT+0x24c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d106      	bne.n	80006a0 <SPI_INIT+0x80>
		SPI5_EN();
 8000692:	4b72      	ldr	r3, [pc, #456]	@ (800085c <SPI_INIT+0x23c>)
 8000694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000696:	4a71      	ldr	r2, [pc, #452]	@ (800085c <SPI_INIT+0x23c>)
 8000698:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800069c:	6453      	str	r3, [r2, #68]	@ 0x44
 800069e:	e00a      	b.n	80006b6 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI6) {
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a72      	ldr	r2, [pc, #456]	@ (8000870 <SPI_INIT+0x250>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d105      	bne.n	80006b6 <SPI_INIT+0x96>
		SPI6_EN();
 80006aa:	4b6c      	ldr	r3, [pc, #432]	@ (800085c <SPI_INIT+0x23c>)
 80006ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006ae:	4a6b      	ldr	r2, [pc, #428]	@ (800085c <SPI_INIT+0x23c>)
 80006b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006b4:	6453      	str	r3, [r2, #68]	@ 0x44
	}

	// Master/Slave
	spi_handle->SPIx->CR1 &= ~(HIGH << Shift_2_pos);
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681a      	ldr	r2, [r3, #0]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f022 0204 	bic.w	r2, r2, #4
 80006c4:	601a      	str	r2, [r3, #0]
	if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799b      	ldrb	r3, [r3, #6]
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d107      	bne.n	80006de <SPI_INIT+0xbe>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_2_pos); // Set MSTR bit for master
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f042 0204 	orr.w	r2, r2, #4
 80006dc:	601a      	str	r2, [r3, #0]
	}

	// Simplex mode RX: we need to configure this because the communication happens only when master produces the clock, the clock happens when MOSI line has the data
	if (spi_handle->spi_data_direction == SPI_SIMPLEX_MODE_RX) {
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	791b      	ldrb	r3, [r3, #4]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d110      	bne.n	8000708 <SPI_INIT+0xe8>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	681a      	ldr	r2, [r3, #0]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80006f4:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_10_pos);
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	e024      	b.n	8000752 <SPI_INIT+0x132>
	}
	// Simplex mode TX: just remove the MISO line in full duplex mode

	// Half duplex mode:
	// In master mode, the MOSI pin is used while the MISO pin is used in slave mode.
	else if (spi_handle->spi_data_direction == SPI_HALF_DUPLEX_MODE) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	2b02      	cmp	r3, #2
 800070e:	d110      	bne.n	8000732 <SPI_INIT+0x112>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	681a      	ldr	r2, [r3, #0]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800071e:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_15_pos);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	681a      	ldr	r2, [r3, #0]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e00f      	b.n	8000752 <SPI_INIT+0x132>
	}
	// Full duplex mode or Simplex mode TX
	else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000740:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_10_pos);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000750:	601a      	str	r2, [r3, #0]
	}

	// Configure baud rate
	spi_handle->SPIx->CR1 &= ~(BIT_111_MASK << Shift_3_pos);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000760:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_sclk_prescaler << Shift_3_pos);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	6819      	ldr	r1, [r3, #0]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	7a9b      	ldrb	r3, [r3, #10]
 800076c:	00da      	lsls	r2, r3, #3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	430a      	orrs	r2, r1
 8000774:	601a      	str	r2, [r3, #0]

	// Select data frame
	spi_handle->SPIx->CR1 &= ~(HIGH << Shift_11_pos);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000784:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_frame_format << Shift_11_pos);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6819      	ldr	r1, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	795b      	ldrb	r3, [r3, #5]
 8000790:	02da      	lsls	r2, r3, #11
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	430a      	orrs	r2, r1
 8000798:	601a      	str	r2, [r3, #0]

	// Configure CPOL and CPHA
	// CPHA
	spi_handle->SPIx->CR1 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f022 0203 	bic.w	r2, r2, #3
 80007a8:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_clock_phase << Shift_0_pos);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7a1b      	ldrb	r3, [r3, #8]
 80007b4:	4619      	mov	r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	430a      	orrs	r2, r1
 80007bc:	601a      	str	r2, [r3, #0]

	//CPOL
	spi_handle->SPIx->CR1 |= (spi_handle->spi_clock_polarity << Shift_1_pos);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6819      	ldr	r1, [r3, #0]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	79db      	ldrb	r3, [r3, #7]
 80007c8:	005a      	lsls	r2, r3, #1
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	430a      	orrs	r2, r1
 80007d0:	601a      	str	r2, [r3, #0]

	// Software slave management
	// Software
	if (spi_handle->spi_ssm == SPI_SOFTWARE_SLAVE_EN) {
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7a5b      	ldrb	r3, [r3, #9]
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d118      	bne.n	800080c <SPI_INIT+0x1ec>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_9_pos);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	681a      	ldr	r2, [r3, #0]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80007e8:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_9_pos);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	681a      	ldr	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007f8:	601a      	str	r2, [r3, #0]
		if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	799b      	ldrb	r3, [r3, #6]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d125      	bne.n	800084e <SPI_INIT+0x22e>
			// Internal slave select HIGH
			SPI_SSI_CONFIG(spi_handle, HIGH);
 8000802:	2101      	movs	r1, #1
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff feeb 	bl	80005e0 <SPI_SSI_CONFIG>
			spi_handle->SPIx->CR2 |= (HIGH << Shift_2_pos);
		} else if (spi_handle->spi_master_slave == SPI_SLAVE_MODE) {
			spi_handle->SPIx->CR2 &= ~(HIGH << Shift_2_pos);
		}
	}
}
 800080a:	e020      	b.n	800084e <SPI_INIT+0x22e>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_9_pos); // Clear SSM bit
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800081a:	601a      	str	r2, [r3, #0]
		if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	799b      	ldrb	r3, [r3, #6]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d108      	bne.n	8000836 <SPI_INIT+0x216>
			spi_handle->SPIx->CR2 |= (HIGH << Shift_2_pos);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0204 	orr.w	r2, r2, #4
 8000832:	605a      	str	r2, [r3, #4]
}
 8000834:	e00b      	b.n	800084e <SPI_INIT+0x22e>
		} else if (spi_handle->spi_master_slave == SPI_SLAVE_MODE) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	799b      	ldrb	r3, [r3, #6]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d107      	bne.n	800084e <SPI_INIT+0x22e>
			spi_handle->SPIx->CR2 &= ~(HIGH << Shift_2_pos);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	685a      	ldr	r2, [r3, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f022 0204 	bic.w	r2, r2, #4
 800084c:	605a      	str	r2, [r3, #4]
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40013000 	.word	0x40013000
 800085c:	40023800 	.word	0x40023800
 8000860:	40003800 	.word	0x40003800
 8000864:	40003c00 	.word	0x40003c00
 8000868:	40013400 	.word	0x40013400
 800086c:	40015000 	.word	0x40015000
 8000870:	40015400 	.word	0x40015400

08000874 <SPI_SendReceive_FullDuplex>:
		SPI_PERIPHERAL_ENABLE(spi_handle, LOW);
	}
}

void SPI_SendReceive_FullDuplex(SPI_HandleTypedef *spi_handle,
		uint8_t *txBuffer, uint8_t *rxBuffer, uint32_t len) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
 8000880:	603b      	str	r3, [r7, #0]
	// Enable SPI
	SPI_PERIPHERAL_ENABLE(spi_handle, HIGH);
 8000882:	2101      	movs	r1, #1
 8000884:	68f8      	ldr	r0, [r7, #12]
 8000886:	f7ff fe8b 	bl	80005a0 <SPI_PERIPHERAL_ENABLE>

	while (len > 0) {
 800088a:	e04d      	b.n	8000928 <SPI_SendReceive_FullDuplex+0xb4>
		// Wait for TXE is empty
		while (!((spi_handle->SPIx->SR >> Shift_1_pos) & 0x1))
 800088c:	bf00      	nop
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0f7      	beq.n	800088e <SPI_SendReceive_FullDuplex+0x1a>
			;
		if (spi_handle->spi_frame_format == SPI_8_BIT_FRAME_FORMAT) {
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	795b      	ldrb	r3, [r3, #5]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d10b      	bne.n	80008be <SPI_SendReceive_FullDuplex+0x4a>
			spi_handle->SPIx->DR = *txBuffer;
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	781a      	ldrb	r2, [r3, #0]
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	60da      	str	r2, [r3, #12]
			len--;
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	3b01      	subs	r3, #1
 80008b4:	603b      	str	r3, [r7, #0]
			txBuffer++;
 80008b6:	68bb      	ldr	r3, [r7, #8]
 80008b8:	3301      	adds	r3, #1
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	e011      	b.n	80008e2 <SPI_SendReceive_FullDuplex+0x6e>
		} else if (spi_handle->spi_frame_format == SPI_16_BIT_FRAME_FORMAT) {
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	795b      	ldrb	r3, [r3, #5]
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d10d      	bne.n	80008e2 <SPI_SendReceive_FullDuplex+0x6e>
			spi_handle->SPIx->DR = *(uint16_t*) txBuffer;
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	881a      	ldrh	r2, [r3, #0]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	60da      	str	r2, [r3, #12]
			len--;
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	603b      	str	r3, [r7, #0]
			len--;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	3b01      	subs	r3, #1
 80008da:	603b      	str	r3, [r7, #0]
			(uint16_t*) txBuffer++;
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3301      	adds	r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
		}

		// Wait for RXNE is not empty
		while (!((spi_handle->SPIx->SR >> Shift_0_pos) & 0x1))
 80008e2:	bf00      	nop
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	689b      	ldr	r3, [r3, #8]
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f8      	beq.n	80008e4 <SPI_SendReceive_FullDuplex+0x70>
			;

		if (spi_handle->spi_frame_format == SPI_8_BIT_FRAME_FORMAT) {
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	795b      	ldrb	r3, [r3, #5]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d109      	bne.n	800090e <SPI_SendReceive_FullDuplex+0x9a>
			*rxBuffer = spi_handle->SPIx->DR;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	b2da      	uxtb	r2, r3
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	3301      	adds	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	e00c      	b.n	8000928 <SPI_SendReceive_FullDuplex+0xb4>
		} else if (spi_handle->spi_frame_format == SPI_16_BIT_FRAME_FORMAT) {
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	795b      	ldrb	r3, [r3, #5]
 8000912:	2b01      	cmp	r3, #1
 8000914:	d108      	bne.n	8000928 <SPI_SendReceive_FullDuplex+0xb4>
			*(uint16_t*) rxBuffer = spi_handle->SPIx->DR;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	68db      	ldr	r3, [r3, #12]
 800091c:	b29a      	uxth	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	801a      	strh	r2, [r3, #0]
			(uint16_t*) rxBuffer++;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3301      	adds	r3, #1
 8000926:	607b      	str	r3, [r7, #4]
	while (len > 0) {
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1ae      	bne.n	800088c <SPI_SendReceive_FullDuplex+0x18>
		}
	}

	// Wait for TXE is empty
	while (!((spi_handle->SPIx->SR >> Shift_1_pos) & 0x1))
 800092e:	bf00      	nop
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	085b      	lsrs	r3, r3, #1
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d0f7      	beq.n	8000930 <SPI_SendReceive_FullDuplex+0xbc>
		;

	// Only wait for BSY in MASTER mode
	if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	799b      	ldrb	r3, [r3, #6]
 8000944:	2b01      	cmp	r3, #1
 8000946:	d108      	bne.n	800095a <SPI_SendReceive_FullDuplex+0xe6>
		// Wait until BSY=0
		while ((spi_handle->SPIx->SR >> Shift_7_pos) & 0x1)
 8000948:	bf00      	nop
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	09db      	lsrs	r3, r3, #7
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	2b00      	cmp	r3, #0
 8000958:	d1f7      	bne.n	800094a <SPI_SendReceive_FullDuplex+0xd6>
			;
	}

	// Disable SPI only in master mode
	if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	799b      	ldrb	r3, [r3, #6]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d103      	bne.n	800096a <SPI_SendReceive_FullDuplex+0xf6>
		SPI_PERIPHERAL_ENABLE(spi_handle, LOW);
 8000962:	2100      	movs	r1, #0
 8000964:	68f8      	ldr	r0, [r7, #12]
 8000966:	f7ff fe1b 	bl	80005a0 <SPI_PERIPHERAL_ENABLE>
	}
}
 800096a:	bf00      	nop
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
	...

08000974 <SPI2_GPIO_Init>:
// PB14 -> MISO (Master In Slave Out)
// PB15 -> MOSI (Master Out Slave In)

SPI_HandleTypedef spi2_slave;

void SPI2_GPIO_Init(void) {
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
	GPIO_Handle_TypeDef spi_pins;

	// Configure PB12 (NSS) as AF
	spi_pins.GPIOX = GPIOB;
 800097a:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <SPI2_GPIO_Init+0x5c>)
 800097c:	607b      	str	r3, [r7, #4]
	spi_pins.pin_number = GPIO_PIN_12;
 800097e:	230c      	movs	r3, #12
 8000980:	723b      	strb	r3, [r7, #8]
	spi_pins.mode = GPIO_MODE_AF;
 8000982:	2302      	movs	r3, #2
 8000984:	727b      	strb	r3, [r7, #9]
	spi_pins.alternate_function_select = GPIO_AF5; // AF5 for SPI2
 8000986:	2305      	movs	r3, #5
 8000988:	737b      	strb	r3, [r7, #13]
	spi_pins.output_type = GPIO_OUTPUT_TYPE_PP;
 800098a:	2300      	movs	r3, #0
 800098c:	733b      	strb	r3, [r7, #12]
	spi_pins.output_speed = GPIO_OUTPUT_SPEED_HIGH;
 800098e:	2302      	movs	r3, #2
 8000990:	72fb      	strb	r3, [r7, #11]
	spi_pins.pull_up_pull_down = GPIO_PUPD_PU; // Pull-up for NSS
 8000992:	2301      	movs	r3, #1
 8000994:	72bb      	strb	r3, [r7, #10]
	GPIO_INIT(&spi_pins);
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fc15 	bl	80001c8 <GPIO_INIT>

	// Configure PB13 (SCK) as AF
	spi_pins.pin_number = GPIO_PIN_13;
 800099e:	230d      	movs	r3, #13
 80009a0:	723b      	strb	r3, [r7, #8]
	spi_pins.pull_up_pull_down = GPIO_PUPD_NONE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	72bb      	strb	r3, [r7, #10]
	GPIO_INIT(&spi_pins);
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fc0d 	bl	80001c8 <GPIO_INIT>

	// Configure PB14 (MISO) as AF
	spi_pins.pin_number = GPIO_PIN_14;
 80009ae:	230e      	movs	r3, #14
 80009b0:	723b      	strb	r3, [r7, #8]
	GPIO_INIT(&spi_pins);
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f7ff fc07 	bl	80001c8 <GPIO_INIT>

	// Configure PB15 (MOSI) as AF
	spi_pins.pin_number = GPIO_PIN_15;
 80009ba:	230f      	movs	r3, #15
 80009bc:	723b      	strb	r3, [r7, #8]
	GPIO_INIT(&spi_pins);
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff fc01 	bl	80001c8 <GPIO_INIT>
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40020400 	.word	0x40020400

080009d4 <SPI2_Slave_Init>:

void SPI2_Slave_Init(void) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	spi2_slave.SPIx = SPI2;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 80009da:	4a0f      	ldr	r2, [pc, #60]	@ (8000a18 <SPI2_Slave_Init+0x44>)
 80009dc:	601a      	str	r2, [r3, #0]
	spi2_slave.spi_master_slave = SPI_SLAVE_MODE;
 80009de:	4b0d      	ldr	r3, [pc, #52]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	719a      	strb	r2, [r3, #6]
	spi2_slave.spi_data_direction = SPI_FULL_DUPLEX_MODE;
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 80009e6:	2203      	movs	r2, #3
 80009e8:	711a      	strb	r2, [r3, #4]
	spi2_slave.spi_frame_format = SPI_8_BIT_FRAME_FORMAT;
 80009ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	715a      	strb	r2, [r3, #5]
	spi2_slave.spi_clock_polarity = SPI_IDLE_LOW; // CPOL = 0
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	71da      	strb	r2, [r3, #7]
	spi2_slave.spi_clock_phase = SPI_DATA_CAPTURED_FIRST_CLOCK; // CPHA = 0
 80009f6:	4b07      	ldr	r3, [pc, #28]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	721a      	strb	r2, [r3, #8]
	spi2_slave.spi_ssm = SPI_SOFTWARE_SLAVE_DIS; // Hardware NSS management
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	725a      	strb	r2, [r3, #9]
	spi2_slave.spi_sclk_prescaler = SPI_PRES_2; // Don't care for slave
 8000a02:	4b04      	ldr	r3, [pc, #16]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	729a      	strb	r2, [r3, #10]

	SPI_INIT(&spi2_slave);
 8000a08:	4802      	ldr	r0, [pc, #8]	@ (8000a14 <SPI2_Slave_Init+0x40>)
 8000a0a:	f7ff fe09 	bl	8000620 <SPI_INIT>
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000001c 	.word	0x2000001c
 8000a18:	40003800 	.word	0x40003800

08000a1c <main>:

int main(void) {
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b091      	sub	sp, #68	@ 0x44
 8000a20:	af00      	add	r7, sp, #0
	uint8_t rxData[32] = { 0 };
 8000a22:	f107 0320 	add.w	r3, r7, #32
 8000a26:	2220      	movs	r2, #32
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f859 	bl	8000ae2 <memset>
	uint8_t txData[32] = "STM32 Response!";
 8000a30:	4b14      	ldr	r3, [pc, #80]	@ (8000a84 <main+0x68>)
 8000a32:	463c      	mov	r4, r7
 8000a34:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
 8000a44:	609a      	str	r2, [r3, #8]
 8000a46:	60da      	str	r2, [r3, #12]

	SPI2_GPIO_Init();
 8000a48:	f7ff ff94 	bl	8000974 <SPI2_GPIO_Init>
	SPI2_Slave_Init();
 8000a4c:	f7ff ffc2 	bl	80009d4 <SPI2_Slave_Init>

	// Enable SPI peripheral
	SPI_PERIPHERAL_ENABLE(&spi2_slave, HIGH);
 8000a50:	2101      	movs	r1, #1
 8000a52:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <main+0x6c>)
 8000a54:	f7ff fda4 	bl	80005a0 <SPI_PERIPHERAL_ENABLE>

	while (1) {

		// Wait for NSS to go LOW (master selects)
		while (GPIOB->IDR & (1 << 12))
 8000a58:	bf00      	nop
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <main+0x70>)
 8000a5c:	691b      	ldr	r3, [r3, #16]
 8000a5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d1f9      	bne.n	8000a5a <main+0x3e>
			;

		// Perform the full-duplex transfer
		SPI_SendReceive_FullDuplex(&spi2_slave, txData, rxData, 16);
 8000a66:	f107 0220 	add.w	r2, r7, #32
 8000a6a:	4639      	mov	r1, r7
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	4806      	ldr	r0, [pc, #24]	@ (8000a88 <main+0x6c>)
 8000a70:	f7ff ff00 	bl	8000874 <SPI_SendReceive_FullDuplex>

		// Wait for NSS to go HIGH (master deselects)
		while (!(GPIOB->IDR & (1 << 12)))
 8000a74:	bf00      	nop
 8000a76:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <main+0x70>)
 8000a78:	691b      	ldr	r3, [r3, #16]
 8000a7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f9      	beq.n	8000a76 <main+0x5a>
		while (GPIOB->IDR & (1 << 12))
 8000a82:	e7e9      	b.n	8000a58 <main+0x3c>
 8000a84:	08000b54 	.word	0x08000b54
 8000a88:	2000001c 	.word	0x2000001c
 8000a8c:	40020400 	.word	0x40020400

08000a90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a90:	480d      	ldr	r0, [pc, #52]	@ (8000ac8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a94:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <LoopForever+0x6>)
  ldr r1, =_edata
 8000a9a:	490d      	ldr	r1, [pc, #52]	@ (8000ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad4 <LoopForever+0xe>)
  movs r3, #0
 8000a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aa0:	e002      	b.n	8000aa8 <LoopCopyDataInit>

08000aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa6:	3304      	adds	r3, #4

08000aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aac:	d3f9      	bcc.n	8000aa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8000adc <LoopForever+0x16>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab4:	e001      	b.n	8000aba <LoopFillZerobss>

08000ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab8:	3204      	adds	r2, #4

08000aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000abc:	d3fb      	bcc.n	8000ab6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000abe:	f000 f819 	bl	8000af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ac2:	f7ff ffab 	bl	8000a1c <main>

08000ac6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ac6:	e7fe      	b.n	8000ac6 <LoopForever>
  ldr   r0, =_estack
 8000ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ad4:	08000b7c 	.word	0x08000b7c
  ldr r2, =_sbss
 8000ad8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000adc:	20000028 	.word	0x20000028

08000ae0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>

08000ae2 <memset>:
 8000ae2:	4402      	add	r2, r0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d100      	bne.n	8000aec <memset+0xa>
 8000aea:	4770      	bx	lr
 8000aec:	f803 1b01 	strb.w	r1, [r3], #1
 8000af0:	e7f9      	b.n	8000ae6 <memset+0x4>
	...

08000af4 <__libc_init_array>:
 8000af4:	b570      	push	{r4, r5, r6, lr}
 8000af6:	4d0d      	ldr	r5, [pc, #52]	@ (8000b2c <__libc_init_array+0x38>)
 8000af8:	4c0d      	ldr	r4, [pc, #52]	@ (8000b30 <__libc_init_array+0x3c>)
 8000afa:	1b64      	subs	r4, r4, r5
 8000afc:	10a4      	asrs	r4, r4, #2
 8000afe:	2600      	movs	r6, #0
 8000b00:	42a6      	cmp	r6, r4
 8000b02:	d109      	bne.n	8000b18 <__libc_init_array+0x24>
 8000b04:	4d0b      	ldr	r5, [pc, #44]	@ (8000b34 <__libc_init_array+0x40>)
 8000b06:	4c0c      	ldr	r4, [pc, #48]	@ (8000b38 <__libc_init_array+0x44>)
 8000b08:	f000 f818 	bl	8000b3c <_init>
 8000b0c:	1b64      	subs	r4, r4, r5
 8000b0e:	10a4      	asrs	r4, r4, #2
 8000b10:	2600      	movs	r6, #0
 8000b12:	42a6      	cmp	r6, r4
 8000b14:	d105      	bne.n	8000b22 <__libc_init_array+0x2e>
 8000b16:	bd70      	pop	{r4, r5, r6, pc}
 8000b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1c:	4798      	blx	r3
 8000b1e:	3601      	adds	r6, #1
 8000b20:	e7ee      	b.n	8000b00 <__libc_init_array+0xc>
 8000b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b26:	4798      	blx	r3
 8000b28:	3601      	adds	r6, #1
 8000b2a:	e7f2      	b.n	8000b12 <__libc_init_array+0x1e>
 8000b2c:	08000b74 	.word	0x08000b74
 8000b30:	08000b74 	.word	0x08000b74
 8000b34:	08000b74 	.word	0x08000b74
 8000b38:	08000b78 	.word	0x08000b78

08000b3c <_init>:
 8000b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3e:	bf00      	nop
 8000b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b42:	bc08      	pop	{r3}
 8000b44:	469e      	mov	lr, r3
 8000b46:	4770      	bx	lr

08000b48 <_fini>:
 8000b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b4a:	bf00      	nop
 8000b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b4e:	bc08      	pop	{r3}
 8000b50:	469e      	mov	lr, r3
 8000b52:	4770      	bx	lr
