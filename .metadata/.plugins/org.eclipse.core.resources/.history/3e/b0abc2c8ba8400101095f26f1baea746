#ifndef STM32F4XX_CUS_H
#define STM32F4XX_CUS_H

#include <stdio.h>
#include <stdint.h>

#define __IO volatile

// Input/Output Result
#define LOW 0
#define HIGH 1

// Mask
#define Shift_0_pos  0x0
#define Shift_1_pos  0x1
#define Shift_2_pos  0x2
#define Shift_3_pos  0x3
#define Shift_4_pos  0x4
#define Shift_5_pos  0x5
#define Shift_6_pos  0x6
#define Shift_7_pos  0x7
#define Shift_8_pos  0x8
#define Shift_16_pos 0x10
#define Divide_ALT_Function 0x8
#define GPIO_BIT_1_Mask 0x1
#define GPIO_BIT_11_Mask 0x3

// RCC Def
typedef struct {
	__IO uint32_t CR; /*!< RCC clock control register,                Address offset: 0x00 */
	__IO uint32_t PLLCFGR; /*!< RCC PLL configuration register,            Address offset: 0x04 */
	__IO uint32_t CFGR; /*!< RCC clock configuration register,          Address offset: 0x08 */
	__IO uint32_t CIR; /*!< RCC clock interrupt register,              Address offset: 0x0C */
	__IO uint32_t AHB1RSTR; /*!< RCC AHB1 peripheral reset register,        Address offset: 0x10 */
	__IO uint32_t AHB2RSTR; /*!< RCC AHB2 peripheral reset register,        Address offset: 0x14 */
	__IO uint32_t AHB3RSTR; /*!< RCC AHB3 peripheral reset register,        Address offset: 0x18 */
	uint32_t RESERVED0; /*!< Reserved,                                   Address offset: 0x1C */
	__IO uint32_t APB1RSTR; /*!< RCC APB1 peripheral reset register,        Address offset: 0x20 */
	__IO uint32_t APB2RSTR; /*!< RCC APB2 peripheral reset register,        Address offset: 0x24 */
	uint32_t RESERVED1[2];/*!< Reserved,                                   Address offset: 0x28-0x2C */
	__IO uint32_t AHB1ENR; /*!< RCC AHB1 peripheral clock register,        Address offset: 0x30 */
	__IO uint32_t AHB2ENR; /*!< RCC AHB2 peripheral clock register,        Address offset: 0x34 */
	__IO uint32_t AHB3ENR; /*!< RCC AHB3 peripheral clock register,        Address offset: 0x38 */
	uint32_t RESERVED2; /*!< Reserved,                                   Address offset: 0x3C */
	__IO uint32_t APB1ENR; /*!< RCC APB1 peripheral clock enable register, Address offset: 0x40 */
	__IO uint32_t APB2ENR; /*!< RCC APB2 peripheral clock enable register, Address offset: 0x44 */
	uint32_t RESERVED3[2];/*!< Reserved,                                   Address offset: 0x48-0x4C */
	__IO uint32_t AHB1LPENR; /*!< RCC AHB1 peripheral clock enable in low power mode register, Address offset: 0x50 */
	__IO uint32_t AHB2LPENR; /*!< RCC AHB2 peripheral clock enable in low power mode register, Address offset: 0x54 */
	__IO uint32_t AHB3LPENR; /*!< RCC AHB3 peripheral clock enable in low power mode register, Address offset: 0x58 */
	uint32_t RESERVED4; /*!< Reserved,                                   Address offset: 0x5C */
	__IO uint32_t APB1LPENR; /*!< RCC APB1 peripheral clock enable in low power mode register, Address offset: 0x60 */
	__IO uint32_t APB2LPENR; /*!< RCC APB2 peripheral clock enable in low power mode register, Address offset: 0x64 */
	uint32_t RESERVED5[2];/*!< Reserved,                                   Address offset: 0x68-0x6C */
	__IO uint32_t BDCR; /*!< RCC Backup domain control register,        Address offset: 0x70 */
	__IO uint32_t CSR; /*!< RCC clock control & status register,       Address offset: 0x74 */
	uint32_t RESERVED6[2];/*!< Reserved,                                   Address offset: 0x78-0x7C */
	__IO uint32_t SSCGR; /*!< RCC spread spectrum clock generation register, Address offset: 0x80 */
	__IO uint32_t PLLI2SCFGR; /*!< RCC PLLI2S configuration register,         Address offset: 0x84 */
} RCC_TypeDef;

#define RCC (RCC_TypeDef*) (0x40023800)

#define GPIOA_EN (RCC->AHB1ENR |= HIGH << Shift_0_pos)
#define GPIOB_EN (RCC->AHB1ENR |= HIGH << Shift_1_pos)
#define GPIOC_EN (RCC->AHB1ENR |= HIGH << Shift_2_pos)
#define GPIOD_EN (RCC->AHB1ENR |= HIGH << Shift_3_pos)
#define GPIOE_EN (RCC->AHB1ENR |= HIGH << Shift_4_pos)
#define GPIOF_EN (RCC->AHB1ENR |= HIGH << Shift_5_pos)
#define GPIOG_EN (RCC->AHB1ENR |= HIGH << Shift_6_pos)
#define GPIOH_EN (RCC->AHB1ENR |= HIGH << Shift_7_pos)
#define GPIOI_EN (RCC->AHB1ENR |= HIGH << Shift_8_pos)

#define GPIOA_DIS (RCC->AHB1ENR &= ~(HIGH << Shift_0_pos))

// Include peripheral headers last so they see all macro/type definitions (e.g., __IO) defined above
#include "stm32f4xx_cus_clock.h"
#include "stm32f4xx_cus_gpio.h"

#endif // STM32F4XX_CUS_H
