
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08002594  08002594  00003594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002728  08002728  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002728  08002728  00003728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002730  08002730  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002730  08002730  00003730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002734  08002734  00003734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002738  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000405c  2**0
                  CONTENTS
 10 .bss          00000170  2000005c  2000005c  0000405c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  0000405c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002650  00000000  00000000  0000408c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000086e  00000000  00000000  000066dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00006f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018b  00000000  00000000  00007160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003bb1  00000000  00000000  000072eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000034f2  00000000  00000000  0000ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c8da  00000000  00000000  0000e38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001ac68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ed8  00000000  00000000  0001acac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0001bb84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800257c 	.word	0x0800257c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800257c 	.word	0x0800257c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 8000270:	b4b0      	push	{r4, r5, r7}
 8000272:	b08f      	sub	sp, #60	@ 0x3c
 8000274:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 8000276:	4b2c      	ldr	r3, [pc, #176]	@ (8000328 <Get_APB1_Clock_Speed+0xb8>)
 8000278:	f107 0410 	add.w	r4, r7, #16
 800027c:	461d      	mov	r5, r3
 800027e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000280:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000282:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000286:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 800028a:	4b28      	ldr	r3, [pc, #160]	@ (800032c <Get_APB1_Clock_Speed+0xbc>)
 800028c:	463c      	mov	r4, r7
 800028e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000290:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 8000294:	4b26      	ldr	r3, [pc, #152]	@ (8000330 <Get_APB1_Clock_Speed+0xc0>)
 8000296:	689b      	ldr	r3, [r3, #8]
 8000298:	089b      	lsrs	r3, r3, #2
 800029a:	b2db      	uxtb	r3, r3
 800029c:	f003 0303 	and.w	r3, r3, #3
 80002a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 80002a4:	4b22      	ldr	r3, [pc, #136]	@ (8000330 <Get_APB1_Clock_Speed+0xc0>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	091b      	lsrs	r3, r3, #4
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 030f 	and.w	r3, r3, #15
 80002b0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 80002b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <Get_APB1_Clock_Speed+0xc0>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	0a9b      	lsrs	r3, r3, #10
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 0307 	and.w	r3, r3, #7
 80002c0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 80002c8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80002cc:	2b07      	cmp	r3, #7
 80002ce:	d908      	bls.n	80002e2 <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 80002d0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80002d4:	3b08      	subs	r3, #8
 80002d6:	009b      	lsls	r3, r3, #2
 80002d8:	3338      	adds	r3, #56	@ 0x38
 80002da:	443b      	add	r3, r7
 80002dc:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80002e0:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 80002e2:	2301      	movs	r3, #1
 80002e4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 80002e6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	d908      	bls.n	8000300 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 80002ee:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80002f2:	3b04      	subs	r3, #4
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	3338      	adds	r3, #56	@ 0x38
 80002f8:	443b      	add	r3, r7
 80002fa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80002fe:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000304:	2b00      	cmp	r3, #0
 8000306:	d109      	bne.n	800031c <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000308:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800030a:	4a0a      	ldr	r2, [pc, #40]	@ (8000334 <Get_APB1_Clock_Speed+0xc4>)
 800030c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000310:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000312:	fb92 f3f3 	sdiv	r3, r2, r3
 8000316:	461a      	mov	r2, r3
 8000318:	4b07      	ldr	r3, [pc, #28]	@ (8000338 <Get_APB1_Clock_Speed+0xc8>)
 800031a:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 800031c:	bf00      	nop
 800031e:	373c      	adds	r7, #60	@ 0x3c
 8000320:	46bd      	mov	sp, r7
 8000322:	bcb0      	pop	{r4, r5, r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	08002594 	.word	0x08002594
 800032c:	080025b4 	.word	0x080025b4
 8000330:	40023800 	.word	0x40023800
 8000334:	00f42400 	.word	0x00f42400
 8000338:	20000078 	.word	0x20000078

0800033c <CAN_ENTER_INIT_MODE>:
#include <stm32f4xx_cus_can.h>

static void CAN_ENTER_INIT_MODE(CAN_HandleTypedef *canHandleTypeDef) {
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
	// Enter INIT MODE
	canHandleTypeDef->CANx->MCR |= (HIGH << Shift_0_pos);
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f042 0201 	orr.w	r2, r2, #1
 8000352:	601a      	str	r2, [r3, #0]

	// Wait for enter INIT MODE
	while (!((canHandleTypeDef->CANx->MSR >> Shift_0_pos) & HIGH))
 8000354:	bf00      	nop
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	f003 0301 	and.w	r3, r3, #1
 8000360:	2b00      	cmp	r3, #0
 8000362:	d0f8      	beq.n	8000356 <CAN_ENTER_INIT_MODE+0x1a>
		;
}
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <CAN_EXIT_INIT_MODE>:

static void CAN_EXIT_INIT_MODE(CAN_HandleTypedef *canHandleTypeDef) {
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
	// Exit INIT MODE
	canHandleTypeDef->CANx->MCR &= ~(HIGH << Shift_0_pos);
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	681a      	ldr	r2, [r3, #0]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f022 0201 	bic.w	r2, r2, #1
 8000388:	601a      	str	r2, [r3, #0]

	// Wait for Exit INIT MODE
	while (((canHandleTypeDef->CANx->MSR >> Shift_0_pos) & HIGH))
 800038a:	bf00      	nop
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	f003 0301 	and.w	r3, r3, #1
 8000396:	2b00      	cmp	r3, #0
 8000398:	d1f8      	bne.n	800038c <CAN_EXIT_INIT_MODE+0x1a>
		;
}
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <CAN_INIT>:

void CAN_INIT(CAN_HandleTypedef *canHandleTypeDef) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b08e      	sub	sp, #56	@ 0x38
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]

	// Enable CLOCK CAN
	if (canHandleTypeDef->CANx == CAN1) {
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a8e      	ldr	r2, [pc, #568]	@ (80005f0 <CAN_INIT+0x248>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <CAN_INIT+0x20>
		CAN1_EN();
 80003ba:	4b8e      	ldr	r3, [pc, #568]	@ (80005f4 <CAN_INIT+0x24c>)
 80003bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003be:	4a8d      	ldr	r2, [pc, #564]	@ (80005f4 <CAN_INIT+0x24c>)
 80003c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80003c6:	e00a      	b.n	80003de <CAN_INIT+0x36>
	} else if (canHandleTypeDef->CANx == CAN2) {
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a8a      	ldr	r2, [pc, #552]	@ (80005f8 <CAN_INIT+0x250>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d105      	bne.n	80003de <CAN_INIT+0x36>
		CAN2_EN();
 80003d2:	4b88      	ldr	r3, [pc, #544]	@ (80005f4 <CAN_INIT+0x24c>)
 80003d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003d6:	4a87      	ldr	r2, [pc, #540]	@ (80005f4 <CAN_INIT+0x24c>)
 80003d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80003dc:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	canHandleTypeDef->CANx->MCR &= ~(HIGH << Shift_1_pos);  // Clear SLEEP bit
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	681a      	ldr	r2, [r3, #0]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	f022 0202 	bic.w	r2, r2, #2
 80003ec:	601a      	str	r2, [r3, #0]

	while (canHandleTypeDef->CANx->MSR & (HIGH << Shift_1_pos))
 80003ee:	bf00      	nop
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	f003 0302 	and.w	r3, r3, #2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d1f8      	bne.n	80003f0 <CAN_INIT+0x48>
		;

	// Enter INIT MODE
	CAN_ENTER_INIT_MODE(canHandleTypeDef);
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f7ff ff9c 	bl	800033c <CAN_ENTER_INIT_MODE>

	// Priority mode
	canHandleTypeDef->CANx->MCR &= ~(HIGH << Shift_2_pos);
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	681a      	ldr	r2, [r3, #0]
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	f022 0204 	bic.w	r2, r2, #4
 8000412:	601a      	str	r2, [r3, #0]
	canHandleTypeDef->CANx->MCR |= (canHandleTypeDef->transmitPriority
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	6819      	ldr	r1, [r3, #0]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	791b      	ldrb	r3, [r3, #4]
			<< Shift_2_pos);
 800041e:	009a      	lsls	r2, r3, #2
	canHandleTypeDef->CANx->MCR |= (canHandleTypeDef->transmitPriority
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	430a      	orrs	r2, r1
 8000426:	601a      	str	r2, [r3, #0]

	// Receive FIFO locked mode
	canHandleTypeDef->CANx->MCR &= ~(HIGH << Shift_3_pos);
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	681a      	ldr	r2, [r3, #0]
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	f022 0208 	bic.w	r2, r2, #8
 8000436:	601a      	str	r2, [r3, #0]
	canHandleTypeDef->CANx->MCR |= (canHandleTypeDef->receiveFIFOLockedMode
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	6819      	ldr	r1, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	795b      	ldrb	r3, [r3, #5]
			<< Shift_3_pos);
 8000442:	00da      	lsls	r2, r3, #3
	canHandleTypeDef->CANx->MCR |= (canHandleTypeDef->receiveFIFOLockedMode
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	430a      	orrs	r2, r1
 800044a:	601a      	str	r2, [r3, #0]

	// No automatic retransmission
	canHandleTypeDef->CANx->MCR &= ~(HIGH << Shift_4_pos);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	681a      	ldr	r2, [r3, #0]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	f022 0210 	bic.w	r2, r2, #16
 800045a:	601a      	str	r2, [r3, #0]
	canHandleTypeDef->CANx->MCR |= (canHandleTypeDef->autoReTransmit
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	6819      	ldr	r1, [r3, #0]
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	799b      	ldrb	r3, [r3, #6]
			<< Shift_4_pos);
 8000466:	011a      	lsls	r2, r3, #4
	canHandleTypeDef->CANx->MCR |= (canHandleTypeDef->autoReTransmit
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	430a      	orrs	r2, r1
 800046e:	601a      	str	r2, [r3, #0]

	// Automatic bus-off management
	/*
	 * If ABOM is set, the bxCAN starts the recovering sequence automatically after it has entered Bus-Off state.
	 * If ABOM is cleared, the software must initiate the recovering sequence by requesting bxCAN to enter and to leave initialization mode.*/
	canHandleTypeDef->CANx->MCR &= ~(HIGH << Shift_6_pos);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800047e:	601a      	str	r2, [r3, #0]
	canHandleTypeDef->CANx->MCR |=
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	6819      	ldr	r1, [r3, #0]
			(canHandleTypeDef->autoBusOff << Shift_6_pos);
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	79db      	ldrb	r3, [r3, #7]
 800048a:	019a      	lsls	r2, r3, #6
	canHandleTypeDef->CANx->MCR |=
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	430a      	orrs	r2, r1
 8000492:	601a      	str	r2, [r3, #0]

	// CAN BIT TIMING
	Get_APB1_Clock_Speed();
 8000494:	f7ff feec 	bl	8000270 <Get_APB1_Clock_Speed>

	uint32_t target_sample_point = 875; // 87.5% in tenths of percent
 8000498:	f240 336b 	movw	r3, #875	@ 0x36b
 800049c:	61fb      	str	r3, [r7, #28]
	uint32_t best_prescaler = 0;
 800049e:	2300      	movs	r3, #0
 80004a0:	637b      	str	r3, [r7, #52]	@ 0x34
	uint32_t best_ntq = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	633b      	str	r3, [r7, #48]	@ 0x30
	uint32_t best_error = 0xFFFFFFFF;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
 80004aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

	// Search for best prescaler and Ntq combination
	for (uint16_t prescaler = 1; prescaler <= 1024; prescaler++) {
 80004ac:	2301      	movs	r3, #1
 80004ae:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80004b0:	e03e      	b.n	8000530 <CAN_INIT+0x188>
		// Step 1: Calculate tq frequency
		uint32_t tq_frequency = SystemClockSrc / prescaler;
 80004b2:	4b52      	ldr	r3, [pc, #328]	@ (80005fc <CAN_INIT+0x254>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80004b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004bc:	61bb      	str	r3, [r7, #24]

		// Step 2: Calculate required Ntq
		uint32_t ntq = tq_frequency / canHandleTypeDef->bitrate;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	689b      	ldr	r3, [r3, #8]
 80004c2:	69ba      	ldr	r2, [r7, #24]
 80004c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c8:	617b      	str	r3, [r7, #20]

		// Step 3: Check if Ntq is in valid range (8-25 for bxCAN)
		if (ntq >= 8 && ntq <= 25) {
 80004ca:	697b      	ldr	r3, [r7, #20]
 80004cc:	2b07      	cmp	r3, #7
 80004ce:	d92c      	bls.n	800052a <CAN_INIT+0x182>
 80004d0:	697b      	ldr	r3, [r7, #20]
 80004d2:	2b19      	cmp	r3, #25
 80004d4:	d829      	bhi.n	800052a <CAN_INIT+0x182>
			// Step 4: Calculate actual bit rate and error
			uint32_t actual_bit_rate = tq_frequency / ntq;
 80004d6:	69ba      	ldr	r2, [r7, #24]
 80004d8:	697b      	ldr	r3, [r7, #20]
 80004da:	fbb2 f3f3 	udiv	r3, r2, r3
 80004de:	613b      	str	r3, [r7, #16]
			uint32_t error =
					(actual_bit_rate > canHandleTypeDef->bitrate) ?
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	689b      	ldr	r3, [r3, #8]
							(actual_bit_rate - canHandleTypeDef->bitrate) :
 80004e4:	693a      	ldr	r2, [r7, #16]
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d904      	bls.n	80004f4 <CAN_INIT+0x14c>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	693a      	ldr	r2, [r7, #16]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	e003      	b.n	80004fc <CAN_INIT+0x154>
							(canHandleTypeDef->bitrate - actual_bit_rate);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	689a      	ldr	r2, [r3, #8]
							(actual_bit_rate - canHandleTypeDef->bitrate) :
 80004f8:	693b      	ldr	r3, [r7, #16]
 80004fa:	1ad3      	subs	r3, r2, r3
			uint32_t error =
 80004fc:	60fb      	str	r3, [r7, #12]

			// Step 5: Keep track of best solution (prefer Ntq=16 if error is same)
			if (error < best_error || (error == 0 && ntq == 16)) {
 80004fe:	68fa      	ldr	r2, [r7, #12]
 8000500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000502:	429a      	cmp	r2, r3
 8000504:	d305      	bcc.n	8000512 <CAN_INIT+0x16a>
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d108      	bne.n	800051e <CAN_INIT+0x176>
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	2b10      	cmp	r3, #16
 8000510:	d105      	bne.n	800051e <CAN_INIT+0x176>
				best_error = error;
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	62fb      	str	r3, [r7, #44]	@ 0x2c
				best_ntq = ntq;
 8000516:	697b      	ldr	r3, [r7, #20]
 8000518:	633b      	str	r3, [r7, #48]	@ 0x30
				best_prescaler = prescaler;
 800051a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800051c:	637b      	str	r3, [r7, #52]	@ 0x34
			}

			// If perfect match found with Ntq=16, stop searching
			if (error == 0 && ntq == 16) {
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <CAN_INIT+0x182>
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	2b10      	cmp	r3, #16
 8000528:	d007      	beq.n	800053a <CAN_INIT+0x192>
	for (uint16_t prescaler = 1; prescaler <= 1024; prescaler++) {
 800052a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800052c:	3301      	adds	r3, #1
 800052e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8000530:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8000532:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000536:	d9bc      	bls.n	80004b2 <CAN_INIT+0x10a>
 8000538:	e000      	b.n	800053c <CAN_INIT+0x194>
				break;
 800053a:	bf00      	nop
	// Step 6: Calculate Seg1 and Seg2 for 87.5% sample point
	// Sample Point = (SYNC_SEG + Seg1) / Ntq
	// SYNC_SEG is always 1 tq
	// 87.5% = (1 + Seg1) / Ntq
	// Seg1 = (Ntq * 0.875) - 1
	uint32_t seg1 = ((best_ntq * target_sample_point) / 1000) - 1;
 800053c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800053e:	69fa      	ldr	r2, [r7, #28]
 8000540:	fb02 f303 	mul.w	r3, r2, r3
 8000544:	4a2e      	ldr	r2, [pc, #184]	@ (8000600 <CAN_INIT+0x258>)
 8000546:	fba2 2303 	umull	r2, r3, r2, r3
 800054a:	099b      	lsrs	r3, r3, #6
 800054c:	3b01      	subs	r3, #1
 800054e:	627b      	str	r3, [r7, #36]	@ 0x24
	uint32_t seg2 = best_ntq - 1 - seg1;
 8000550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000554:	1ad3      	subs	r3, r2, r3
 8000556:	3b01      	subs	r3, #1
 8000558:	623b      	str	r3, [r7, #32]

	// Ensure constraints are met
	if (seg1 > 16)
 800055a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800055c:	2b10      	cmp	r3, #16
 800055e:	d901      	bls.n	8000564 <CAN_INIT+0x1bc>
		seg1 = 16;  // Max for bxCAN
 8000560:	2310      	movs	r3, #16
 8000562:	627b      	str	r3, [r7, #36]	@ 0x24
	if (seg1 < 1)
 8000564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <CAN_INIT+0x1c6>
		seg1 = 1;    // Min value
 800056a:	2301      	movs	r3, #1
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (seg2 > 8)
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	2b08      	cmp	r3, #8
 8000572:	d901      	bls.n	8000578 <CAN_INIT+0x1d0>
		seg2 = 8;    // Max for bxCAN
 8000574:	2308      	movs	r3, #8
 8000576:	623b      	str	r3, [r7, #32]
	if (seg2 < 1)
 8000578:	6a3b      	ldr	r3, [r7, #32]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d101      	bne.n	8000582 <CAN_INIT+0x1da>
		seg2 = 1;    // Min value (must be >= SJW)
 800057e:	2301      	movs	r3, #1
 8000580:	623b      	str	r3, [r7, #32]

	uint32_t btr_value = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60bb      	str	r3, [r7, #8]
	btr_value |= ((best_prescaler - 1) & 0x3FF);      // BRP bits 0-9
 8000586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000588:	3b01      	subs	r3, #1
 800058a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800058e:	68ba      	ldr	r2, [r7, #8]
 8000590:	4313      	orrs	r3, r2
 8000592:	60bb      	str	r3, [r7, #8]
	btr_value |= (((seg1 - 1) & 0x0F) << 16);         // TS1 bits 16-19
 8000594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000596:	3b01      	subs	r3, #1
 8000598:	041b      	lsls	r3, r3, #16
 800059a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800059e:	68ba      	ldr	r2, [r7, #8]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
	btr_value |= (((seg2 - 1) & 0x07) << 20);         // TS2 bits 20-22
 80005a4:	6a3b      	ldr	r3, [r7, #32]
 80005a6:	3b01      	subs	r3, #1
 80005a8:	051b      	lsls	r3, r3, #20
 80005aa:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	4313      	orrs	r3, r2
 80005b2:	60bb      	str	r3, [r7, #8]
	btr_value |= (0 << 24);                      // SJW = 1 (SJW-1=0) bits 24-25

	canHandleTypeDef->CANx->BTR = btr_value;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	68ba      	ldr	r2, [r7, #8]
 80005ba:	61da      	str	r2, [r3, #28]

	canHandleTypeDef->CANx->BTR &= ~(GPIO_BIT_11_Mask << Shift_30_pos);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	69da      	ldr	r2, [r3, #28]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80005ca:	61da      	str	r2, [r3, #28]
	canHandleTypeDef->CANx->BTR |= (canHandleTypeDef->testModeSelected
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	69d9      	ldr	r1, [r3, #28]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	7b1b      	ldrb	r3, [r3, #12]
			<< Shift_30_pos);
 80005d6:	079a      	lsls	r2, r3, #30
	canHandleTypeDef->CANx->BTR |= (canHandleTypeDef->testModeSelected
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	430a      	orrs	r2, r1
 80005de:	61da      	str	r2, [r3, #28]

	// Exit INIT Mode
	CAN_EXIT_INIT_MODE(canHandleTypeDef);
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff fec6 	bl	8000372 <CAN_EXIT_INIT_MODE>
}
 80005e6:	bf00      	nop
 80005e8:	3738      	adds	r7, #56	@ 0x38
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40006400 	.word	0x40006400
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40006800 	.word	0x40006800
 80005fc:	20000078 	.word	0x20000078
 8000600:	10624dd3 	.word	0x10624dd3

08000604 <CAN_TX_FREE_LEVEL>:

uint8_t CAN_TX_FREE_LEVEL(CAN_HandleTypedef *canHandleTypeDef) {
 8000604:	b480      	push	{r7}
 8000606:	b085      	sub	sp, #20
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	uint8_t freeLevel = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	73fb      	strb	r3, [r7, #15]
	if ((canHandleTypeDef->CANx->TSR >> Shift_26_pos) & 0x1) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	0e9b      	lsrs	r3, r3, #26
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <CAN_TX_FREE_LEVEL+0x22>
		freeLevel++;
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	3301      	adds	r3, #1
 8000624:	73fb      	strb	r3, [r7, #15]
	}
	if ((canHandleTypeDef->CANx->TSR >> Shift_27_pos) & 0x1) {
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	0edb      	lsrs	r3, r3, #27
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	d002      	beq.n	800063c <CAN_TX_FREE_LEVEL+0x38>
		freeLevel++;
 8000636:	7bfb      	ldrb	r3, [r7, #15]
 8000638:	3301      	adds	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
	}
	if ((canHandleTypeDef->CANx->TSR >> Shift_28_pos) & 0x1) {
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	0f1b      	lsrs	r3, r3, #28
 8000644:	f003 0301 	and.w	r3, r3, #1
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <CAN_TX_FREE_LEVEL+0x4e>
		freeLevel++;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
 800064e:	3301      	adds	r3, #1
 8000650:	73fb      	strb	r3, [r7, #15]
	}
	return freeLevel;
 8000652:	7bfb      	ldrb	r3, [r7, #15]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3714      	adds	r7, #20
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <CAN_TX_CHECK_NEXT_MAILBOX_FREE>:

uint8_t CAN_TX_CHECK_NEXT_MAILBOX_FREE(CAN_HandleTypedef *canHandleTypeDef) {
 8000660:	b480      	push	{r7}
 8000662:	b085      	sub	sp, #20
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	/*
	 * CODE[1:0]: Mailbox code
	 In case at least one transmit mailbox is free, the code value is equal to the number of the next transmit mailbox free.
	 In case all transmit mailboxes are pending, the code value is equal to the number of the transmit mailbox with the lowest priority.*/
	uint8_t mailBox = (canHandleTypeDef->CANx->TSR >> Shift_24_pos)
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	0e1b      	lsrs	r3, r3, #24
			& GPIO_BIT_11_Mask;
 8000670:	b2db      	uxtb	r3, r3
	uint8_t mailBox = (canHandleTypeDef->CANx->TSR >> Shift_24_pos)
 8000672:	f003 0303 	and.w	r3, r3, #3
 8000676:	73fb      	strb	r3, [r7, #15]
	return mailBox;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <CAN_ADD_MESSAGE>:

void CAN_ADD_MESSAGE(CAN_HandleTypedef *canHandleTypeDef,
		CAN_TXHandleTypeDef *canTXHandleTypeDef, uint8_t mailbox) {
 8000686:	b480      	push	{r7}
 8000688:	b087      	sub	sp, #28
 800068a:	af00      	add	r7, sp, #0
 800068c:	60f8      	str	r0, [r7, #12]
 800068e:	60b9      	str	r1, [r7, #8]
 8000690:	4613      	mov	r3, r2
 8000692:	71fb      	strb	r3, [r7, #7]

	canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR &= ~(HIGH << Shift_1_pos);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	3318      	adds	r3, #24
 800069c:	011b      	lsls	r3, r3, #4
 800069e:	4413      	add	r3, r2
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	6819      	ldr	r1, [r3, #0]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f022 0202 	bic.w	r2, r2, #2
 80006ac:	3318      	adds	r3, #24
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	440b      	add	r3, r1
 80006b2:	601a      	str	r2, [r3, #0]
	canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |=
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	3318      	adds	r3, #24
 80006bc:	011b      	lsls	r3, r3, #4
 80006be:	4413      	add	r3, r2
 80006c0:	6818      	ldr	r0, [r3, #0]
			(canTXHandleTypeDef->frameType << Shift_1_pos);
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	7b9b      	ldrb	r3, [r3, #14]
 80006c6:	005a      	lsls	r2, r3, #1
	canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |=
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	6819      	ldr	r1, [r3, #0]
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	4302      	orrs	r2, r0
 80006d0:	3318      	adds	r3, #24
 80006d2:	011b      	lsls	r3, r3, #4
 80006d4:	440b      	add	r3, r1
 80006d6:	601a      	str	r2, [r3, #0]

	canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR &= ~(HIGH << Shift_2_pos);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	3318      	adds	r3, #24
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	4413      	add	r3, r2
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	6819      	ldr	r1, [r3, #0]
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f022 0204 	bic.w	r2, r2, #4
 80006f0:	3318      	adds	r3, #24
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	440b      	add	r3, r1
 80006f6:	601a      	str	r2, [r3, #0]
	canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |= (canTXHandleTypeDef->extd
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681a      	ldr	r2, [r3, #0]
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	3318      	adds	r3, #24
 8000700:	011b      	lsls	r3, r3, #4
 8000702:	4413      	add	r3, r2
 8000704:	6818      	ldr	r0, [r3, #0]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	7b1b      	ldrb	r3, [r3, #12]
			<< Shift_2_pos);
 800070a:	009a      	lsls	r2, r3, #2
	canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |= (canTXHandleTypeDef->extd
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	6819      	ldr	r1, [r3, #0]
 8000710:	79fb      	ldrb	r3, [r7, #7]
 8000712:	4302      	orrs	r2, r0
 8000714:	3318      	adds	r3, #24
 8000716:	011b      	lsls	r3, r3, #4
 8000718:	440b      	add	r3, r1
 800071a:	601a      	str	r2, [r3, #0]

	if (canTXHandleTypeDef->extd == CAN_STANDARD_IDE) {
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	7b1b      	ldrb	r3, [r3, #12]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d122      	bne.n	800076a <CAN_ADD_MESSAGE+0xe4>
		canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR &= ~(0x7FF
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3318      	adds	r3, #24
 800072c:	011b      	lsls	r3, r3, #4
 800072e:	4413      	add	r3, r2
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f3c2 0214 	ubfx	r2, r2, #0, #21
 800073c:	3318      	adds	r3, #24
 800073e:	011b      	lsls	r3, r3, #4
 8000740:	440b      	add	r3, r1
 8000742:	601a      	str	r2, [r3, #0]
				<< Shift_21_pos);
		canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |=
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	3318      	adds	r3, #24
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	4413      	add	r3, r2
 8000750:	6818      	ldr	r0, [r3, #0]
				(canTXHandleTypeDef->identifier << Shift_21_pos);
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	055a      	lsls	r2, r3, #21
		canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |=
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	6819      	ldr	r1, [r3, #0]
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	4302      	orrs	r2, r0
 8000760:	3318      	adds	r3, #24
 8000762:	011b      	lsls	r3, r3, #4
 8000764:	440b      	add	r3, r1
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	e025      	b.n	80007b6 <CAN_ADD_MESSAGE+0x130>
	} else if (canTXHandleTypeDef->extd == CAN_EXTENDED_IDE) {
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	7b1b      	ldrb	r3, [r3, #12]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d121      	bne.n	80007b6 <CAN_ADD_MESSAGE+0x130>
		canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR &= ~(0x1FFFFFFF
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3318      	adds	r3, #24
 800077a:	011b      	lsls	r3, r3, #4
 800077c:	4413      	add	r3, r2
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	6819      	ldr	r1, [r3, #0]
 8000784:	79fb      	ldrb	r3, [r7, #7]
 8000786:	f002 0207 	and.w	r2, r2, #7
 800078a:	3318      	adds	r3, #24
 800078c:	011b      	lsls	r3, r3, #4
 800078e:	440b      	add	r3, r1
 8000790:	601a      	str	r2, [r3, #0]
				<< Shift_3_pos);
		canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |=
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	3318      	adds	r3, #24
 800079a:	011b      	lsls	r3, r3, #4
 800079c:	4413      	add	r3, r2
 800079e:	6818      	ldr	r0, [r3, #0]
				(canTXHandleTypeDef->identifier << Shift_3_pos);
 80007a0:	68bb      	ldr	r3, [r7, #8]
 80007a2:	689b      	ldr	r3, [r3, #8]
 80007a4:	00da      	lsls	r2, r3, #3
		canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |=
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	6819      	ldr	r1, [r3, #0]
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	4302      	orrs	r2, r0
 80007ae:	3318      	adds	r3, #24
 80007b0:	011b      	lsls	r3, r3, #4
 80007b2:	440b      	add	r3, r1
 80007b4:	601a      	str	r2, [r3, #0]
	}

	canHandleTypeDef->CANx->sTxMailBox[mailbox].TDTR &= ~(0xF << Shift_0_pos);
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	681a      	ldr	r2, [r3, #0]
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	3318      	adds	r3, #24
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	4413      	add	r3, r2
 80007c2:	3304      	adds	r3, #4
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	6819      	ldr	r1, [r3, #0]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f022 020f 	bic.w	r2, r2, #15
 80007d0:	3318      	adds	r3, #24
 80007d2:	011b      	lsls	r3, r3, #4
 80007d4:	440b      	add	r3, r1
 80007d6:	3304      	adds	r3, #4
 80007d8:	601a      	str	r2, [r3, #0]
	canHandleTypeDef->CANx->sTxMailBox[mailbox].TDTR |=
 80007da:	68fb      	ldr	r3, [r7, #12]
 80007dc:	681a      	ldr	r2, [r3, #0]
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3318      	adds	r3, #24
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	4413      	add	r3, r2
 80007e6:	3304      	adds	r3, #4
 80007e8:	681a      	ldr	r2, [r3, #0]
			(canTXHandleTypeDef->dataLengthCode << Shift_0_pos);
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	7b5b      	ldrb	r3, [r3, #13]
 80007ee:	4618      	mov	r0, r3
	canHandleTypeDef->CANx->sTxMailBox[mailbox].TDTR |=
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	6819      	ldr	r1, [r3, #0]
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	4302      	orrs	r2, r0
 80007f8:	3318      	adds	r3, #24
 80007fa:	011b      	lsls	r3, r3, #4
 80007fc:	440b      	add	r3, r1
 80007fe:	3304      	adds	r3, #4
 8000800:	601a      	str	r2, [r3, #0]

	// Clear TDLR and TDHR completely before writing data
	canHandleTypeDef->CANx->sTxMailBox[mailbox].TDLR = 0;
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	79fb      	ldrb	r3, [r7, #7]
 8000808:	011b      	lsls	r3, r3, #4
 800080a:	4413      	add	r3, r2
 800080c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
	canHandleTypeDef->CANx->sTxMailBox[mailbox].TDHR = 0;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	011b      	lsls	r3, r3, #4
 800081c:	4413      	add	r3, r2
 800081e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000822:	2200      	movs	r2, #0
 8000824:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < canTXHandleTypeDef->dataLengthCode; i++) {
 8000826:	2300      	movs	r3, #0
 8000828:	75fb      	strb	r3, [r7, #23]
 800082a:	e03b      	b.n	80008a4 <CAN_ADD_MESSAGE+0x21e>
		if (i < 4) {
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d81a      	bhi.n	8000868 <CAN_ADD_MESSAGE+0x1e2>
			canHandleTypeDef->CANx->sTxMailBox[mailbox].TDLR |=
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	011b      	lsls	r3, r3, #4
 800083a:	4413      	add	r3, r2
 800083c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000840:	681a      	ldr	r2, [r3, #0]
					(canTXHandleTypeDef->data[i] << (i * 8));
 8000842:	7dfb      	ldrb	r3, [r7, #23]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	5ccb      	ldrb	r3, [r1, r3]
 8000848:	4619      	mov	r1, r3
 800084a:	7dfb      	ldrb	r3, [r7, #23]
 800084c:	00db      	lsls	r3, r3, #3
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	4618      	mov	r0, r3
			canHandleTypeDef->CANx->sTxMailBox[mailbox].TDLR |=
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	6819      	ldr	r1, [r3, #0]
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4302      	orrs	r2, r0
 800085c:	011b      	lsls	r3, r3, #4
 800085e:	440b      	add	r3, r1
 8000860:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	e01a      	b.n	800089e <CAN_ADD_MESSAGE+0x218>
		} else {
			canHandleTypeDef->CANx->sTxMailBox[mailbox].TDHR |=
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	79fb      	ldrb	r3, [r7, #7]
 800086e:	011b      	lsls	r3, r3, #4
 8000870:	4413      	add	r3, r2
 8000872:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8000876:	681a      	ldr	r2, [r3, #0]
					(canTXHandleTypeDef->data[i] << ((i - 4) * 8));
 8000878:	7dfb      	ldrb	r3, [r7, #23]
 800087a:	68b9      	ldr	r1, [r7, #8]
 800087c:	5ccb      	ldrb	r3, [r1, r3]
 800087e:	4619      	mov	r1, r3
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	3b04      	subs	r3, #4
 8000884:	00db      	lsls	r3, r3, #3
 8000886:	fa01 f303 	lsl.w	r3, r1, r3
 800088a:	4618      	mov	r0, r3
			canHandleTypeDef->CANx->sTxMailBox[mailbox].TDHR |=
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	6819      	ldr	r1, [r3, #0]
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	4302      	orrs	r2, r0
 8000894:	011b      	lsls	r3, r3, #4
 8000896:	440b      	add	r3, r1
 8000898:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800089c:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < canTXHandleTypeDef->dataLengthCode; i++) {
 800089e:	7dfb      	ldrb	r3, [r7, #23]
 80008a0:	3301      	adds	r3, #1
 80008a2:	75fb      	strb	r3, [r7, #23]
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	7b5b      	ldrb	r3, [r3, #13]
 80008a8:	7dfa      	ldrb	r2, [r7, #23]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d3be      	bcc.n	800082c <CAN_ADD_MESSAGE+0x1a6>
		}
	}

	canHandleTypeDef->CANx->sTxMailBox[mailbox].TIR |= (HIGH << Shift_0_pos);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	3318      	adds	r3, #24
 80008b6:	011b      	lsls	r3, r3, #4
 80008b8:	4413      	add	r3, r2
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	6819      	ldr	r1, [r3, #0]
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f042 0201 	orr.w	r2, r2, #1
 80008c6:	3318      	adds	r3, #24
 80008c8:	011b      	lsls	r3, r3, #4
 80008ca:	440b      	add	r3, r1
 80008cc:	601a      	str	r2, [r3, #0]

	uint32_t mailBoxBit = mailbox * 8;
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	613b      	str	r3, [r7, #16]
	// Chekc RQCP and TXOK0
	// Wait for transmission complete
	while (!((canHandleTypeDef->CANx->TSR >> mailBoxBit) & 0x1)
 80008d4:	bf00      	nop
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	693b      	ldr	r3, [r7, #16]
 80008de:	fa22 f303 	lsr.w	r3, r2, r3
 80008e2:	f003 0301 	and.w	r3, r3, #1
			&& !((canHandleTypeDef->CANx->TSR >> (mailBoxBit + 1)) & 0x1))
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d10a      	bne.n	8000900 <CAN_ADD_MESSAGE+0x27a>
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	689a      	ldr	r2, [r3, #8]
 80008f0:	693b      	ldr	r3, [r7, #16]
 80008f2:	3301      	adds	r3, #1
 80008f4:	fa22 f303 	lsr.w	r3, r2, r3
 80008f8:	f003 0301 	and.w	r3, r3, #1
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0ea      	beq.n	80008d6 <CAN_ADD_MESSAGE+0x250>
		;
}
 8000900:	bf00      	nop
 8000902:	371c      	adds	r7, #28
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <CAN_SEND>:

void CAN_SEND(CAN_HandleTypedef *canHandleTypeDef,
		CAN_TXHandleTypeDef *canTXHandleTypeDef) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
	uint8_t mailBox;
	mailBox = CAN_TX_CHECK_NEXT_MAILBOX_FREE(canHandleTypeDef);
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f7ff fea2 	bl	8000660 <CAN_TX_CHECK_NEXT_MAILBOX_FREE>
 800091c:	4603      	mov	r3, r0
 800091e:	73fb      	strb	r3, [r7, #15]
	if (CAN_TX_FREE_LEVEL(canHandleTypeDef) > 0) {
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f7ff fe6f 	bl	8000604 <CAN_TX_FREE_LEVEL>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d005      	beq.n	8000938 <CAN_SEND+0x2c>
		CAN_ADD_MESSAGE(canHandleTypeDef, canTXHandleTypeDef, mailBox);
 800092c:	7bfb      	ldrb	r3, [r7, #15]
 800092e:	461a      	mov	r2, r3
 8000930:	6839      	ldr	r1, [r7, #0]
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fea7 	bl	8000686 <CAN_ADD_MESSAGE>
	}
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <CAN_FILTER_CONFIG>:
 * Both registers = Identifiers
 * Accepts exactly those IDs, nothing else
 * Example: FR1=0x123, FR2=0x456 accepts only 0x123 OR 0x456*/

void CAN_FILTER_CONFIG(CAN_HandleTypedef *canHandleTypeDef,
		CAN_FilterHandleTypeDef *canFilterHandleTypedef) {
 8000940:	b480      	push	{r7}
 8000942:	b087      	sub	sp, #28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
	// Enter filter init mode
	canHandleTypeDef->CANx->FMR |= (HIGH << Shift_0_pos);
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f042 0201 	orr.w	r2, r2, #1
 800095a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	// Deactivated filter bank first
	canHandleTypeDef->CANx->FA1R &=
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
			~(HIGH << canFilterHandleTypedef->filterBank);
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	4619      	mov	r1, r3
 800096c:	2301      	movs	r3, #1
 800096e:	408b      	lsls	r3, r1
 8000970:	43db      	mvns	r3, r3
 8000972:	4619      	mov	r1, r3
	canHandleTypeDef->CANx->FA1R &=
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	400a      	ands	r2, r1
 800097a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	// Configure filter scale
	/*
	 * FSCx: Filter scale configuration
	 These bits define the scale configuration of Filters 13-0. 0: Dual 16-bit scale configuration
	 1: Single 32-bit scale configuration*/
	canHandleTypeDef->CANx->FS1R &=
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
			~(HIGH << canFilterHandleTypedef->filterBank);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	4619      	mov	r1, r3
 800098c:	2301      	movs	r3, #1
 800098e:	408b      	lsls	r3, r1
 8000990:	43db      	mvns	r3, r3
 8000992:	4619      	mov	r1, r3
	canHandleTypeDef->CANx->FS1R &=
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	400a      	ands	r2, r1
 800099a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	canHandleTypeDef->CANx->FS1R |= (canFilterHandleTypedef->filterScale
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	7b5b      	ldrb	r3, [r3, #13]
 80009aa:	4619      	mov	r1, r3
			<< canFilterHandleTypedef->filterBank);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	fa01 f303 	lsl.w	r3, r1, r3
 80009b4:	4619      	mov	r1, r3
	canHandleTypeDef->CANx->FS1R |= (canFilterHandleTypedef->filterScale
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	430a      	orrs	r2, r1
 80009bc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	// Mask mode or List mode
	canHandleTypeDef->CANx->FM1R &=
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
			~(HIGH << canFilterHandleTypedef->filterBank);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4619      	mov	r1, r3
 80009ce:	2301      	movs	r3, #1
 80009d0:	408b      	lsls	r3, r1
 80009d2:	43db      	mvns	r3, r3
 80009d4:	4619      	mov	r1, r3
	canHandleTypeDef->CANx->FM1R &=
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	400a      	ands	r2, r1
 80009dc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
	canHandleTypeDef->CANx->FM1R |= (canFilterHandleTypedef->filterMaskListMode
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	7b9b      	ldrb	r3, [r3, #14]
 80009ec:	4619      	mov	r1, r3
			<< canFilterHandleTypedef->filterBank);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	4619      	mov	r1, r3
	canHandleTypeDef->CANx->FM1R |= (canFilterHandleTypedef->filterMaskListMode
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

	if (canFilterHandleTypedef->filterScale == CAN_FILTER_16_BIT_SCALE) {
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	7b5b      	ldrb	r3, [r3, #13]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d15c      	bne.n	8000ac4 <CAN_FILTER_CONFIG+0x184>
		if (canFilterHandleTypedef->filterMaskListMode == CAN_ID_LIST_MODE) {
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	7b9b      	ldrb	r3, [r3, #14]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d129      	bne.n	8000a66 <CAN_FILTER_CONFIG+0x126>
			/*
			 * Bits:  15  14  13  12  11  10   9   8   7   6   5   4   3   2   1   0
			 * |--------STID[10:0]--------|RTR|IDE|EXID[17:15]|  (don't care)  |
			 * |<------- 11 bits -------->|*/
			uint16_t idBit1 =
					((canFilterHandleTypedef->CAN_Filter16BitListHandleTypeDef.id1)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	8a1b      	ldrh	r3, [r3, #16]
			uint16_t idBit1 =
 8000a16:	015b      	lsls	r3, r3, #5
 8000a18:	81fb      	strh	r3, [r7, #14]
							<< Shift_5_pos);
			uint16_t idBit2 =
					((canFilterHandleTypedef->CAN_Filter16BitListHandleTypeDef.id2)
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	8a5b      	ldrh	r3, [r3, #18]
			uint16_t idBit2 =
 8000a1e:	015b      	lsls	r3, r3, #5
 8000a20:	81bb      	strh	r3, [r7, #12]
							<< Shift_5_pos);
			uint16_t idBit3 =
					((canFilterHandleTypedef->CAN_Filter16BitListHandleTypeDef.id3)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	8a9b      	ldrh	r3, [r3, #20]
			uint16_t idBit3 =
 8000a26:	015b      	lsls	r3, r3, #5
 8000a28:	817b      	strh	r3, [r7, #10]
							<< Shift_5_pos);
			uint16_t idBit4 =
					((canFilterHandleTypedef->CAN_Filter16BitListHandleTypeDef.id4)
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	8adb      	ldrh	r3, [r3, #22]
			uint16_t idBit4 =
 8000a2e:	015b      	lsls	r3, r3, #5
 8000a30:	813b      	strh	r3, [r7, #8]
							<< Shift_5_pos);
			canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
					((idBit1) | (idBit2 << Shift_16_pos));
 8000a32:	89fa      	ldrh	r2, [r7, #14]
 8000a34:	89bb      	ldrh	r3, [r7, #12]
 8000a36:	041b      	lsls	r3, r3, #16
 8000a38:	ea42 0103 	orr.w	r1, r2, r3
			canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	683a      	ldr	r2, [r7, #0]
 8000a42:	7812      	ldrb	r2, [r2, #0]
 8000a44:	3248      	adds	r2, #72	@ 0x48
 8000a46:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
					((idBit3) | (idBit4 << Shift_16_pos));
 8000a4a:	897a      	ldrh	r2, [r7, #10]
 8000a4c:	893b      	ldrh	r3, [r7, #8]
 8000a4e:	041b      	lsls	r3, r3, #16
 8000a50:	ea42 0103 	orr.w	r1, r2, r3
			canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681a      	ldr	r2, [r3, #0]
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	3348      	adds	r3, #72	@ 0x48
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	4413      	add	r3, r2
 8000a62:	6059      	str	r1, [r3, #4]
 8000a64:	e0ba      	b.n	8000bdc <CAN_FILTER_CONFIG+0x29c>
		} else if (canFilterHandleTypedef->filterMaskListMode
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	7b9b      	ldrb	r3, [r3, #14]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f040 80b6 	bne.w	8000bdc <CAN_FILTER_CONFIG+0x29c>
				== CAN_ID_MASK_MODE) {
			uint16_t maskBit1 =
					((canFilterHandleTypedef->CAN_Filter16BitMaskHandleTypeDef.mask1)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	8b1b      	ldrh	r3, [r3, #24]
			uint16_t maskBit1 =
 8000a74:	015b      	lsls	r3, r3, #5
 8000a76:	82fb      	strh	r3, [r7, #22]
							<< Shift_5_pos);
			uint16_t idBit1 =
					((canFilterHandleTypedef->CAN_Filter16BitMaskHandleTypeDef.id1)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	8b5b      	ldrh	r3, [r3, #26]
			uint16_t idBit1 =
 8000a7c:	015b      	lsls	r3, r3, #5
 8000a7e:	82bb      	strh	r3, [r7, #20]
							<< Shift_5_pos);
			uint16_t maskBit2 =
					((canFilterHandleTypedef->CAN_Filter16BitMaskHandleTypeDef.mask2)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	8b9b      	ldrh	r3, [r3, #28]
			uint16_t maskBit2 =
 8000a84:	015b      	lsls	r3, r3, #5
 8000a86:	827b      	strh	r3, [r7, #18]
							<< Shift_5_pos);
			uint16_t idBit2 =
					((canFilterHandleTypedef->CAN_Filter16BitMaskHandleTypeDef.id2)
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	8bdb      	ldrh	r3, [r3, #30]
			uint16_t idBit2 =
 8000a8c:	015b      	lsls	r3, r3, #5
 8000a8e:	823b      	strh	r3, [r7, #16]
							<< Shift_5_pos);

			canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
					((idBit1) | (maskBit1 << Shift_16_pos));
 8000a90:	8aba      	ldrh	r2, [r7, #20]
 8000a92:	8afb      	ldrh	r3, [r7, #22]
 8000a94:	041b      	lsls	r3, r3, #16
 8000a96:	ea42 0103 	orr.w	r1, r2, r3
			canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	3248      	adds	r2, #72	@ 0x48
 8000aa4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
					((idBit2) | (maskBit2 << Shift_16_pos));
 8000aa8:	8a3a      	ldrh	r2, [r7, #16]
 8000aaa:	8a7b      	ldrh	r3, [r7, #18]
 8000aac:	041b      	lsls	r3, r3, #16
 8000aae:	ea42 0103 	orr.w	r1, r2, r3
			canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	3348      	adds	r3, #72	@ 0x48
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	4413      	add	r3, r2
 8000ac0:	6059      	str	r1, [r3, #4]
 8000ac2:	e08b      	b.n	8000bdc <CAN_FILTER_CONFIG+0x29c>
		}
	} else if (canFilterHandleTypedef->filterScale == CAN_FILTER_32_BIT_SCALE) {
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	7b5b      	ldrb	r3, [r3, #13]
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	f040 8087 	bne.w	8000bdc <CAN_FILTER_CONFIG+0x29c>
		if (canFilterHandleTypedef->filterMaskListMode == CAN_ID_LIST_MODE) {
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	7b9b      	ldrb	r3, [r3, #14]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d13f      	bne.n	8000b56 <CAN_FILTER_CONFIG+0x216>
			if (canFilterHandleTypedef->extd == CAN_STANDARD_IDE) {
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	7bdb      	ldrb	r3, [r3, #15]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d119      	bne.n	8000b12 <CAN_FILTER_CONFIG+0x1d2>
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
						(canFilterHandleTypedef->CAN_Filter32BitListHandleTypeDef.id1
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	6a1a      	ldr	r2, [r3, #32]
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6839      	ldr	r1, [r7, #0]
 8000ae8:	7809      	ldrb	r1, [r1, #0]
 8000aea:	4608      	mov	r0, r1
								<< Shift_21_pos);
 8000aec:	0551      	lsls	r1, r2, #21
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000aee:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 8000af2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
						(canFilterHandleTypedef->CAN_Filter32BitListHandleTypeDef.id2
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000afa:	687a      	ldr	r2, [r7, #4]
 8000afc:	6811      	ldr	r1, [r2, #0]
 8000afe:	683a      	ldr	r2, [r7, #0]
 8000b00:	7812      	ldrb	r2, [r2, #0]
 8000b02:	4610      	mov	r0, r2
								<< Shift_21_pos);
 8000b04:	055a      	lsls	r2, r3, #21
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000b06:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	e064      	b.n	8000bdc <CAN_FILTER_CONFIG+0x29c>
			} else if (canFilterHandleTypedef->extd == CAN_EXTENDED_IDE) {
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	7bdb      	ldrb	r3, [r3, #15]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d160      	bne.n	8000bdc <CAN_FILTER_CONFIG+0x29c>
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
						((canFilterHandleTypedef->CAN_Filter32BitListHandleTypeDef.id1
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	6a1b      	ldr	r3, [r3, #32]
								<< Shift_3_pos) | (HIGH << Shift_2_pos));
 8000b1e:	00da      	lsls	r2, r3, #3
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6839      	ldr	r1, [r7, #0]
 8000b26:	7809      	ldrb	r1, [r1, #0]
 8000b28:	4608      	mov	r0, r1
								<< Shift_3_pos) | (HIGH << Shift_2_pos));
 8000b2a:	f042 0104 	orr.w	r1, r2, #4
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000b2e:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 8000b32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
						((canFilterHandleTypedef->CAN_Filter32BitListHandleTypeDef.id2
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
								<< Shift_3_pos) | (HIGH << Shift_2_pos));
 8000b3a:	00db      	lsls	r3, r3, #3
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000b3c:	687a      	ldr	r2, [r7, #4]
 8000b3e:	6811      	ldr	r1, [r2, #0]
 8000b40:	683a      	ldr	r2, [r7, #0]
 8000b42:	7812      	ldrb	r2, [r2, #0]
 8000b44:	4610      	mov	r0, r2
								<< Shift_3_pos) | (HIGH << Shift_2_pos));
 8000b46:	f043 0204 	orr.w	r2, r3, #4
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000b4a:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 8000b4e:	00db      	lsls	r3, r3, #3
 8000b50:	440b      	add	r3, r1
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	e042      	b.n	8000bdc <CAN_FILTER_CONFIG+0x29c>
			}
		} else if (canFilterHandleTypedef->filterMaskListMode
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	7b9b      	ldrb	r3, [r3, #14]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d13e      	bne.n	8000bdc <CAN_FILTER_CONFIG+0x29c>
				== CAN_ID_MASK_MODE) {
			if (canFilterHandleTypedef->extd == CAN_STANDARD_IDE) {
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	7bdb      	ldrb	r3, [r3, #15]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d119      	bne.n	8000b9a <CAN_FILTER_CONFIG+0x25a>
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
						(canFilterHandleTypedef->CAN_Filter32BitMaskHandleTypeDef.id1
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	6839      	ldr	r1, [r7, #0]
 8000b70:	7809      	ldrb	r1, [r1, #0]
 8000b72:	4608      	mov	r0, r1
								<< Shift_21_pos);
 8000b74:	0551      	lsls	r1, r2, #21
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000b76:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 8000b7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
						(canFilterHandleTypedef->CAN_Filter32BitMaskHandleTypeDef.mask1
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6811      	ldr	r1, [r2, #0]
 8000b86:	683a      	ldr	r2, [r7, #0]
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	4610      	mov	r0, r2
								<< Shift_21_pos);
 8000b8c:	055a      	lsls	r2, r3, #21
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000b8e:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 8000b92:	00db      	lsls	r3, r3, #3
 8000b94:	440b      	add	r3, r1
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	e020      	b.n	8000bdc <CAN_FILTER_CONFIG+0x29c>
			} else if (canFilterHandleTypedef->extd == CAN_EXTENDED_IDE) {
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	7bdb      	ldrb	r3, [r3, #15]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d11c      	bne.n	8000bdc <CAN_FILTER_CONFIG+0x29c>
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
						((canFilterHandleTypedef->CAN_Filter32BitMaskHandleTypeDef.id1
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
								<< Shift_3_pos) | (HIGH << Shift_2_pos));
 8000ba6:	00da      	lsls	r2, r3, #3
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6839      	ldr	r1, [r7, #0]
 8000bae:	7809      	ldrb	r1, [r1, #0]
 8000bb0:	4608      	mov	r0, r1
								<< Shift_3_pos) | (HIGH << Shift_2_pos));
 8000bb2:	f042 0104 	orr.w	r1, r2, #4
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR1 =
 8000bb6:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 8000bba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
						((canFilterHandleTypedef->CAN_Filter32BitMaskHandleTypeDef.mask1
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
								<< Shift_3_pos) | (HIGH << Shift_2_pos));
 8000bc2:	00db      	lsls	r3, r3, #3
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6811      	ldr	r1, [r2, #0]
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	4610      	mov	r0, r2
								<< Shift_3_pos) | (HIGH << Shift_2_pos));
 8000bce:	f043 0204 	orr.w	r2, r3, #4
				canHandleTypeDef->CANx->sFilterRegister[canFilterHandleTypedef->filterBank].FR2 =
 8000bd2:	f100 0348 	add.w	r3, r0, #72	@ 0x48
 8000bd6:	00db      	lsls	r3, r3, #3
 8000bd8:	440b      	add	r3, r1
 8000bda:	605a      	str	r2, [r3, #4]
			}
		}
	}

	if (canFilterHandleTypedef->fifoAssignment == CAN_FIFO_0) {
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	7b1b      	ldrb	r3, [r3, #12]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d110      	bne.n	8000c06 <CAN_FILTER_CONFIG+0x2c6>
		canHandleTypeDef->CANx->FFA1R &= ~(HIGH
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
				<< canFilterHandleTypedef->filterBank);
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	408b      	lsls	r3, r1
		canHandleTypeDef->CANx->FFA1R &= ~(HIGH
 8000bf6:	43db      	mvns	r3, r3
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	400a      	ands	r2, r1
 8000c00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000c04:	e012      	b.n	8000c2c <CAN_FILTER_CONFIG+0x2ec>
	} else if (canFilterHandleTypedef->fifoAssignment == CAN_FIFO_1) {
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	7b1b      	ldrb	r3, [r3, #12]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d10e      	bne.n	8000c2c <CAN_FILTER_CONFIG+0x2ec>
		canHandleTypeDef->CANx->FFA1R |= (HIGH
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
				<< canFilterHandleTypedef->filterBank);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	408b      	lsls	r3, r1
 8000c20:	4619      	mov	r1, r3
		canHandleTypeDef->CANx->FFA1R |= (HIGH
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	}

	// Activate the filter bank
	canHandleTypeDef->CANx->FA1R |=
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
			(HIGH << canFilterHandleTypedef->filterBank);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	408b      	lsls	r3, r1
 8000c3e:	4619      	mov	r1, r3
	canHandleTypeDef->CANx->FA1R |=
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	430a      	orrs	r2, r1
 8000c46:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

	// Exit filter init mode
	canHandleTypeDef->CANx->FMR &= ~(HIGH << Shift_0_pos);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8000c5e:	bf00      	nop
 8000c60:	371c      	adds	r7, #28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <CAN_RX_FREE_LEVEL>:

uint8_t CAN_RX_FREE_LEVEL(CAN_HandleTypedef *canHandleTypeDef, uint8_t fifo) {
 8000c6a:	b480      	push	{r7}
 8000c6c:	b083      	sub	sp, #12
 8000c6e:	af00      	add	r7, sp, #0
 8000c70:	6078      	str	r0, [r7, #4]
 8000c72:	460b      	mov	r3, r1
 8000c74:	70fb      	strb	r3, [r7, #3]
	if (fifo == CAN_FIFO_0) {
 8000c76:	78fb      	ldrb	r3, [r7, #3]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d107      	bne.n	8000c8c <CAN_RX_FREE_LEVEL+0x22>
		return (canHandleTypeDef->CANx->RFxR[CAN_FIFO_0] & GPIO_BIT_11_Mask);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	e00b      	b.n	8000ca4 <CAN_RX_FREE_LEVEL+0x3a>
	} else if (fifo == CAN_FIFO_1) {
 8000c8c:	78fb      	ldrb	r3, [r7, #3]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d107      	bne.n	8000ca2 <CAN_RX_FREE_LEVEL+0x38>
		return (canHandleTypeDef->CANx->RFxR[CAN_FIFO_1] & GPIO_BIT_11_Mask);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	e000      	b.n	8000ca4 <CAN_RX_FREE_LEVEL+0x3a>
	}

	return CAN_INVALID_FIFO;
 8000ca2:	2300      	movs	r3, #0
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <CAN_RECEIVE>:

uint8_t CAN_RECEIVE(CAN_HandleTypedef *canHandleTypeDef,
		CAN_RXHandleTypeDef *can_RXHandleTypeDef, uint8_t fifo) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b086      	sub	sp, #24
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	71fb      	strb	r3, [r7, #7]
	uint8_t messagePendding = CAN_RX_FREE_LEVEL(canHandleTypeDef, fifo);
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f7ff ffd1 	bl	8000c6a <CAN_RX_FREE_LEVEL>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	757b      	strb	r3, [r7, #21]
	if (messagePendding == 0) {
 8000ccc:	7d7b      	ldrb	r3, [r7, #21]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <CAN_RECEIVE+0x26>
		return CAN_RCV_NOT_SUCCESS;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e090      	b.n	8000df8 <CAN_RECEIVE+0x148>
	}

	can_RXHandleTypeDef->rtr = (canHandleTypeDef->CANx->sFIFOMailBox[fifo].RIR
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	331b      	adds	r3, #27
 8000cde:	011b      	lsls	r3, r3, #4
 8000ce0:	4413      	add	r3, r2
 8000ce2:	681b      	ldr	r3, [r3, #0]
			>> Shift_1_pos) & HIGH;
 8000ce4:	085b      	lsrs	r3, r3, #1
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	b2da      	uxtb	r2, r3
	can_RXHandleTypeDef->rtr = (canHandleTypeDef->CANx->sFIFOMailBox[fifo].RIR
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	73da      	strb	r2, [r3, #15]
	can_RXHandleTypeDef->extd = ((canHandleTypeDef->CANx->sFIFOMailBox[fifo].RIR
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681a      	ldr	r2, [r3, #0]
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	331b      	adds	r3, #27
 8000cfa:	011b      	lsls	r3, r3, #4
 8000cfc:	4413      	add	r3, r2
 8000cfe:	681b      	ldr	r3, [r3, #0]
			>> Shift_2_pos) & HIGH);
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	b2da      	uxtb	r2, r3
	can_RXHandleTypeDef->extd = ((canHandleTypeDef->CANx->sFIFOMailBox[fifo].RIR
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	731a      	strb	r2, [r3, #12]
	if (can_RXHandleTypeDef->extd == CAN_STANDARD_IDE) {
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	7b1b      	ldrb	r3, [r3, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d10c      	bne.n	8000d30 <CAN_RECEIVE+0x80>
		can_RXHandleTypeDef->identifier =
				((canHandleTypeDef->CANx->sFIFOMailBox[fifo].RIR >> Shift_21_pos)
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	331b      	adds	r3, #27
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	0d5b      	lsrs	r3, r3, #21
						& 0x7FF);
 8000d26:	f3c3 020a 	ubfx	r2, r3, #0, #11
		can_RXHandleTypeDef->identifier =
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	609a      	str	r2, [r3, #8]
 8000d2e:	e00f      	b.n	8000d50 <CAN_RECEIVE+0xa0>
	} else if (can_RXHandleTypeDef->extd == CAN_EXTENDED_IDE) {
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	7b1b      	ldrb	r3, [r3, #12]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d10b      	bne.n	8000d50 <CAN_RECEIVE+0xa0>
		can_RXHandleTypeDef->identifier =
				((canHandleTypeDef->CANx->sFIFOMailBox[fifo].RIR >> Shift_3_pos)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	331b      	adds	r3, #27
 8000d40:	011b      	lsls	r3, r3, #4
 8000d42:	4413      	add	r3, r2
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	08db      	lsrs	r3, r3, #3
						& 0x1FFFFFFF);
 8000d48:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
		can_RXHandleTypeDef->identifier =
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	609a      	str	r2, [r3, #8]
	}

	can_RXHandleTypeDef->dataLengthCode =
			((canHandleTypeDef->CANx->sFIFOMailBox[fifo].RDTR >> Shift_0_pos)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	331b      	adds	r3, #27
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	4413      	add	r3, r2
 8000d5c:	3304      	adds	r3, #4
 8000d5e:	681b      	ldr	r3, [r3, #0]
					& 0xF);
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 030f 	and.w	r3, r3, #15
 8000d66:	b2da      	uxtb	r2, r3
	can_RXHandleTypeDef->dataLengthCode =
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	735a      	strb	r2, [r3, #13]

	uint8_t j = 0;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < can_RXHandleTypeDef->dataLengthCode && i < 8; i++) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	75bb      	strb	r3, [r7, #22]
 8000d74:	e027      	b.n	8000dc6 <CAN_RECEIVE+0x116>
		if (i < 4) {
 8000d76:	7dbb      	ldrb	r3, [r7, #22]
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d80f      	bhi.n	8000d9c <CAN_RECEIVE+0xec>
			can_RXHandleTypeDef->data[i] =
					((canHandleTypeDef->CANx->sFIFOMailBox[fifo].RDLR >> (i * 8))
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	011b      	lsls	r3, r3, #4
 8000d84:	4413      	add	r3, r2
 8000d86:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	7dbb      	ldrb	r3, [r7, #22]
 8000d8e:	00db      	lsls	r3, r3, #3
 8000d90:	40da      	lsrs	r2, r3
			can_RXHandleTypeDef->data[i] =
 8000d92:	7dbb      	ldrb	r3, [r7, #22]
 8000d94:	b2d1      	uxtb	r1, r2
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	54d1      	strb	r1, [r2, r3]
 8000d9a:	e011      	b.n	8000dc0 <CAN_RECEIVE+0x110>
							& 0xFF);
		} else {
			can_RXHandleTypeDef->data[i] =
					((canHandleTypeDef->CANx->sFIFOMailBox[fifo].RDHR >> (j * 8))
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	4413      	add	r3, r2
 8000da6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	7dfb      	ldrb	r3, [r7, #23]
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	40da      	lsrs	r2, r3
			can_RXHandleTypeDef->data[i] =
 8000db2:	7dbb      	ldrb	r3, [r7, #22]
 8000db4:	b2d1      	uxtb	r1, r2
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	54d1      	strb	r1, [r2, r3]
							& 0xFF);
			j++;
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < can_RXHandleTypeDef->dataLengthCode && i < 8; i++) {
 8000dc0:	7dbb      	ldrb	r3, [r7, #22]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	75bb      	strb	r3, [r7, #22]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	7b5b      	ldrb	r3, [r3, #13]
 8000dca:	7dba      	ldrb	r2, [r7, #22]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d202      	bcs.n	8000dd6 <CAN_RECEIVE+0x126>
 8000dd0:	7dbb      	ldrb	r3, [r7, #22]
 8000dd2:	2b07      	cmp	r3, #7
 8000dd4:	d9cf      	bls.n	8000d76 <CAN_RECEIVE+0xc6>
		}
	}

	// Release FIFO 0/1 by setting RFOMx bit
	canHandleTypeDef->CANx->RFxR[fifo] |= (HIGH << Shift_5_pos);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	3302      	adds	r3, #2
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4413      	add	r3, r2
 8000de2:	685a      	ldr	r2, [r3, #4]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	6819      	ldr	r1, [r3, #0]
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f042 0220 	orr.w	r2, r2, #32
 8000dee:	3302      	adds	r3, #2
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	605a      	str	r2, [r3, #4]
	return CAN_RCV_SUCCESS;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000e00:	b480      	push	{r7}
 8000e02:	b085      	sub	sp, #20
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a90      	ldr	r2, [pc, #576]	@ (8001050 <GPIO_INIT+0x250>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d106      	bne.n	8000e20 <GPIO_INIT+0x20>
		GPIOA_EN();
 8000e12:	4b90      	ldr	r3, [pc, #576]	@ (8001054 <GPIO_INIT+0x254>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	4a8f      	ldr	r2, [pc, #572]	@ (8001054 <GPIO_INIT+0x254>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1e:	e05e      	b.n	8000ede <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a8c      	ldr	r2, [pc, #560]	@ (8001058 <GPIO_INIT+0x258>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d106      	bne.n	8000e38 <GPIO_INIT+0x38>
		GPIOB_EN();
 8000e2a:	4b8a      	ldr	r3, [pc, #552]	@ (8001054 <GPIO_INIT+0x254>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2e:	4a89      	ldr	r2, [pc, #548]	@ (8001054 <GPIO_INIT+0x254>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e36:	e052      	b.n	8000ede <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a87      	ldr	r2, [pc, #540]	@ (800105c <GPIO_INIT+0x25c>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d106      	bne.n	8000e50 <GPIO_INIT+0x50>
		GPIOC_EN();
 8000e42:	4b84      	ldr	r3, [pc, #528]	@ (8001054 <GPIO_INIT+0x254>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a83      	ldr	r2, [pc, #524]	@ (8001054 <GPIO_INIT+0x254>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	e046      	b.n	8000ede <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a82      	ldr	r2, [pc, #520]	@ (8001060 <GPIO_INIT+0x260>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d106      	bne.n	8000e68 <GPIO_INIT+0x68>
		GPIOD_EN();
 8000e5a:	4b7e      	ldr	r3, [pc, #504]	@ (8001054 <GPIO_INIT+0x254>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a7d      	ldr	r2, [pc, #500]	@ (8001054 <GPIO_INIT+0x254>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	e03a      	b.n	8000ede <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a7d      	ldr	r2, [pc, #500]	@ (8001064 <GPIO_INIT+0x264>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <GPIO_INIT+0x80>
		GPIOE_EN();
 8000e72:	4b78      	ldr	r3, [pc, #480]	@ (8001054 <GPIO_INIT+0x254>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e76:	4a77      	ldr	r2, [pc, #476]	@ (8001054 <GPIO_INIT+0x254>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7e:	e02e      	b.n	8000ede <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a78      	ldr	r2, [pc, #480]	@ (8001068 <GPIO_INIT+0x268>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <GPIO_INIT+0x98>
		GPIOF_EN();
 8000e8a:	4b72      	ldr	r3, [pc, #456]	@ (8001054 <GPIO_INIT+0x254>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e8e:	4a71      	ldr	r2, [pc, #452]	@ (8001054 <GPIO_INIT+0x254>)
 8000e90:	f043 0320 	orr.w	r3, r3, #32
 8000e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e96:	e022      	b.n	8000ede <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a73      	ldr	r2, [pc, #460]	@ (800106c <GPIO_INIT+0x26c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d106      	bne.n	8000eb0 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8001054 <GPIO_INIT+0x254>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea6:	4a6b      	ldr	r2, [pc, #428]	@ (8001054 <GPIO_INIT+0x254>)
 8000ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eae:	e016      	b.n	8000ede <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a6e      	ldr	r2, [pc, #440]	@ (8001070 <GPIO_INIT+0x270>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d106      	bne.n	8000ec8 <GPIO_INIT+0xc8>
		GPIOH_EN();
 8000eba:	4b66      	ldr	r3, [pc, #408]	@ (8001054 <GPIO_INIT+0x254>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a65      	ldr	r2, [pc, #404]	@ (8001054 <GPIO_INIT+0x254>)
 8000ec0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	e00a      	b.n	8000ede <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a69      	ldr	r2, [pc, #420]	@ (8001074 <GPIO_INIT+0x274>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d105      	bne.n	8000ede <GPIO_INIT+0xde>
		GPIOI_EN();
 8000ed2:	4b60      	ldr	r3, [pc, #384]	@ (8001054 <GPIO_INIT+0x254>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed6:	4a5f      	ldr	r2, [pc, #380]	@ (8001054 <GPIO_INIT+0x254>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000edc:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	2103      	movs	r1, #3
 8000eec:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	400a      	ands	r2, r1
 8000efa:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	791b      	ldrb	r3, [r3, #4]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2103      	movs	r1, #3
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	400a      	ands	r2, r1
 8000f18:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68da      	ldr	r2, [r3, #12]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	799b      	ldrb	r3, [r3, #6]
 8000f24:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f30:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	795b      	ldrb	r3, [r3, #5]
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	f200 809a 	bhi.w	8001078 <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	795b      	ldrb	r3, [r3, #5]
 8000f4e:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	791b      	ldrb	r3, [r3, #4]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5a:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	791b      	ldrb	r3, [r3, #4]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	2303      	movs	r3, #3
 8000f72:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000f74:	43db      	mvns	r3, r3
 8000f76:	4619      	mov	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	400a      	ands	r2, r1
 8000f7e:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	7a1b      	ldrb	r3, [r3, #8]
 8000f8a:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	791b      	ldrb	r3, [r3, #4]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	791b      	ldrb	r3, [r3, #4]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2103      	movs	r1, #3
 8000fac:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	400a      	ands	r2, r1
 8000fba:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	79db      	ldrb	r3, [r3, #7]
 8000fc6:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	791b      	ldrb	r3, [r3, #4]
 8000fcc:	005b      	lsls	r3, r3, #1
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	795b      	ldrb	r3, [r3, #5]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	f040 80ec 	bne.w	80011be <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 8000fea:	08db      	lsrs	r3, r3, #3
 8000fec:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	791b      	ldrb	r3, [r3, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	7b7a      	ldrb	r2, [r7, #13]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	791b      	ldrb	r3, [r3, #4]
 8001008:	009b      	lsls	r3, r3, #2
 800100a:	2203      	movs	r2, #3
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8001010:	43db      	mvns	r3, r3
 8001012:	4618      	mov	r0, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	7b7a      	ldrb	r2, [r7, #13]
 800101a:	4001      	ands	r1, r0
 800101c:	3208      	adds	r2, #8
 800101e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	7b7a      	ldrb	r2, [r7, #13]
 8001028:	3208      	adds	r2, #8
 800102a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7a5b      	ldrb	r3, [r3, #9]
 8001032:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 8001034:	7b3b      	ldrb	r3, [r7, #12]
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	7b7a      	ldrb	r2, [r7, #13]
 8001044:	4301      	orrs	r1, r0
 8001046:	3208      	adds	r2, #8
 8001048:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 800104c:	e0b7      	b.n	80011be <GPIO_INIT+0x3be>
 800104e:	bf00      	nop
 8001050:	40020000 	.word	0x40020000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020400 	.word	0x40020400
 800105c:	40020800 	.word	0x40020800
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40021000 	.word	0x40021000
 8001068:	40021400 	.word	0x40021400
 800106c:	40021800 	.word	0x40021800
 8001070:	40021c00 	.word	0x40021c00
 8001074:	40022000 	.word	0x40022000
		SYSCFG_EN();
 8001078:	4b54      	ldr	r3, [pc, #336]	@ (80011cc <GPIO_INIT+0x3cc>)
 800107a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107c:	4a53      	ldr	r2, [pc, #332]	@ (80011cc <GPIO_INIT+0x3cc>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001082:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	795b      	ldrb	r3, [r3, #5]
 8001088:	2b06      	cmp	r3, #6
 800108a:	d12e      	bne.n	80010ea <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 800108c:	4b50      	ldr	r3, [pc, #320]	@ (80011d0 <GPIO_INIT+0x3d0>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	7912      	ldrb	r2, [r2, #4]
 8001094:	4611      	mov	r1, r2
 8001096:	2201      	movs	r2, #1
 8001098:	408a      	lsls	r2, r1
 800109a:	43d2      	mvns	r2, r2
 800109c:	4611      	mov	r1, r2
 800109e:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80010a0:	400b      	ands	r3, r1
 80010a2:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 80010a4:	4b4a      	ldr	r3, [pc, #296]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	687a      	ldr	r2, [r7, #4]
 80010aa:	7912      	ldrb	r2, [r2, #4]
 80010ac:	4611      	mov	r1, r2
 80010ae:	2201      	movs	r2, #1
 80010b0:	408a      	lsls	r2, r1
 80010b2:	43d2      	mvns	r2, r2
 80010b4:	4611      	mov	r1, r2
 80010b6:	4a46      	ldr	r2, [pc, #280]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80010b8:	400b      	ands	r3, r1
 80010ba:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 80010bc:	4b44      	ldr	r3, [pc, #272]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	7912      	ldrb	r2, [r2, #4]
 80010c4:	4611      	mov	r1, r2
 80010c6:	2201      	movs	r2, #1
 80010c8:	408a      	lsls	r2, r1
 80010ca:	4611      	mov	r1, r2
 80010cc:	4a40      	ldr	r2, [pc, #256]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80010ce:	430b      	orrs	r3, r1
 80010d0:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 80010d2:	4b3f      	ldr	r3, [pc, #252]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	7912      	ldrb	r2, [r2, #4]
 80010da:	4611      	mov	r1, r2
 80010dc:	2201      	movs	r2, #1
 80010de:	408a      	lsls	r2, r1
 80010e0:	4611      	mov	r1, r2
 80010e2:	4a3b      	ldr	r2, [pc, #236]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80010e4:	430b      	orrs	r3, r1
 80010e6:	60d3      	str	r3, [r2, #12]
 80010e8:	e036      	b.n	8001158 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	795b      	ldrb	r3, [r3, #5]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d117      	bne.n	8001122 <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 80010f2:	4b37      	ldr	r3, [pc, #220]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	7912      	ldrb	r2, [r2, #4]
 80010fa:	4611      	mov	r1, r2
 80010fc:	2201      	movs	r2, #1
 80010fe:	408a      	lsls	r2, r1
 8001100:	43d2      	mvns	r2, r2
 8001102:	4611      	mov	r1, r2
 8001104:	4a32      	ldr	r2, [pc, #200]	@ (80011d0 <GPIO_INIT+0x3d0>)
 8001106:	400b      	ands	r3, r1
 8001108:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 800110a:	4b31      	ldr	r3, [pc, #196]	@ (80011d0 <GPIO_INIT+0x3d0>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	7912      	ldrb	r2, [r2, #4]
 8001112:	4611      	mov	r1, r2
 8001114:	2201      	movs	r2, #1
 8001116:	408a      	lsls	r2, r1
 8001118:	4611      	mov	r1, r2
 800111a:	4a2d      	ldr	r2, [pc, #180]	@ (80011d0 <GPIO_INIT+0x3d0>)
 800111c:	430b      	orrs	r3, r1
 800111e:	60d3      	str	r3, [r2, #12]
 8001120:	e01a      	b.n	8001158 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	795b      	ldrb	r3, [r3, #5]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d116      	bne.n	8001158 <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 800112a:	4b29      	ldr	r3, [pc, #164]	@ (80011d0 <GPIO_INIT+0x3d0>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	7912      	ldrb	r2, [r2, #4]
 8001132:	4611      	mov	r1, r2
 8001134:	2201      	movs	r2, #1
 8001136:	408a      	lsls	r2, r1
 8001138:	43d2      	mvns	r2, r2
 800113a:	4611      	mov	r1, r2
 800113c:	4a24      	ldr	r2, [pc, #144]	@ (80011d0 <GPIO_INIT+0x3d0>)
 800113e:	400b      	ands	r3, r1
 8001140:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8001142:	4b23      	ldr	r3, [pc, #140]	@ (80011d0 <GPIO_INIT+0x3d0>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	7912      	ldrb	r2, [r2, #4]
 800114a:	4611      	mov	r1, r2
 800114c:	2201      	movs	r2, #1
 800114e:	408a      	lsls	r2, r1
 8001150:	4611      	mov	r1, r2
 8001152:	4a1f      	ldr	r2, [pc, #124]	@ (80011d0 <GPIO_INIT+0x3d0>)
 8001154:	430b      	orrs	r3, r1
 8001156:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	791b      	ldrb	r3, [r3, #4]
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	791b      	ldrb	r3, [r3, #4]
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 800116a:	4a1a      	ldr	r2, [pc, #104]	@ (80011d4 <GPIO_INIT+0x3d4>)
 800116c:	7bfb      	ldrb	r3, [r7, #15]
 800116e:	3302      	adds	r3, #2
 8001170:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	7a9b      	ldrb	r3, [r3, #10]
 8001178:	4619      	mov	r1, r3
 800117a:	7bbb      	ldrb	r3, [r7, #14]
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	4618      	mov	r0, r3
 8001184:	4913      	ldr	r1, [pc, #76]	@ (80011d4 <GPIO_INIT+0x3d4>)
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4302      	orrs	r2, r0
 800118a:	3302      	adds	r3, #2
 800118c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <GPIO_INIT+0x3d0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	7912      	ldrb	r2, [r2, #4]
 8001198:	4611      	mov	r1, r2
 800119a:	2201      	movs	r2, #1
 800119c:	408a      	lsls	r2, r1
 800119e:	43d2      	mvns	r2, r2
 80011a0:	4611      	mov	r1, r2
 80011a2:	4a0b      	ldr	r2, [pc, #44]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80011a4:	400b      	ands	r3, r1
 80011a6:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	7912      	ldrb	r2, [r2, #4]
 80011b0:	4611      	mov	r1, r2
 80011b2:	2201      	movs	r2, #1
 80011b4:	408a      	lsls	r2, r1
 80011b6:	4611      	mov	r1, r2
 80011b8:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <GPIO_INIT+0x3d0>)
 80011ba:	430b      	orrs	r3, r1
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40013c00 	.word	0x40013c00
 80011d4:	40013800 	.word	0x40013800

080011d8 <main>:
// Function prototypes
void CAN_GPIO_Init(void);
void Test_Silent_Mode(void);
void delay_ms(uint32_t ms);

int main(void) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	// Run CAN loopback test
	Test_Silent_Mode();
 80011dc:	f000 f830 	bl	8001240 <Test_Silent_Mode>

	while (1) {
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <main+0x8>

080011e4 <CAN_GPIO_Init>:
		// Main loop - test runs in Test_Loopback_Mode
	}
}

void CAN_GPIO_Init(void) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
	// Configure PD0 (CAN1_RX) and PD1 (CAN1_TX)
	GPIO_Handle_TypeDef canTxPin;
	canTxPin.GPIOX = GPIOD;
 80011ea:	4b14      	ldr	r3, [pc, #80]	@ (800123c <CAN_GPIO_Init+0x58>)
 80011ec:	60fb      	str	r3, [r7, #12]
	canTxPin.pin_number = GPIO_PIN_1; // CAN1_TX = PD1
 80011ee:	2301      	movs	r3, #1
 80011f0:	743b      	strb	r3, [r7, #16]
	canTxPin.mode = GPIO_MODE_AF; // Alternate function
 80011f2:	2302      	movs	r3, #2
 80011f4:	747b      	strb	r3, [r7, #17]
	canTxPin.alternate_function_select = GPIO_AF9; // AF9 = CAN1
 80011f6:	2309      	movs	r3, #9
 80011f8:	757b      	strb	r3, [r7, #21]
	canTxPin.output_type = GPIO_OUTPUT_TYPE_PP; // Push-pull
 80011fa:	2300      	movs	r3, #0
 80011fc:	753b      	strb	r3, [r7, #20]
	canTxPin.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH; // Very high speed
 80011fe:	2303      	movs	r3, #3
 8001200:	74fb      	strb	r3, [r7, #19]
	canTxPin.pull_up_pull_down = GPIO_PUPD_PU; // Pull-up
 8001202:	2301      	movs	r3, #1
 8001204:	74bb      	strb	r3, [r7, #18]
	GPIO_INIT(&canTxPin);
 8001206:	f107 030c 	add.w	r3, r7, #12
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fdf8 	bl	8000e00 <GPIO_INIT>

	GPIO_Handle_TypeDef canRxPin;
	canRxPin.GPIOX = GPIOD;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <CAN_GPIO_Init+0x58>)
 8001212:	603b      	str	r3, [r7, #0]
	canRxPin.pin_number = GPIO_PIN_0; // CAN1_RX = PD0
 8001214:	2300      	movs	r3, #0
 8001216:	713b      	strb	r3, [r7, #4]
	canRxPin.mode = GPIO_MODE_AF; // Alternate function
 8001218:	2302      	movs	r3, #2
 800121a:	717b      	strb	r3, [r7, #5]
	canRxPin.alternate_function_select = GPIO_AF9; // AF9 = CAN1
 800121c:	2309      	movs	r3, #9
 800121e:	727b      	strb	r3, [r7, #9]
	canRxPin.output_type = GPIO_OUTPUT_TYPE_PP; // Push-pull (not used for input but set anyway)
 8001220:	2300      	movs	r3, #0
 8001222:	723b      	strb	r3, [r7, #8]
	canRxPin.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH; // Very high speed
 8001224:	2303      	movs	r3, #3
 8001226:	71fb      	strb	r3, [r7, #7]
	canRxPin.pull_up_pull_down = GPIO_PUPD_PU; // Pull-up
 8001228:	2301      	movs	r3, #1
 800122a:	71bb      	strb	r3, [r7, #6]
	GPIO_INIT(&canRxPin);
 800122c:	463b      	mov	r3, r7
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fde6 	bl	8000e00 <GPIO_INIT>
}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40020c00 	.word	0x40020c00

08001240 <Test_Silent_Mode>:

void Test_Silent_Mode(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b09a      	sub	sp, #104	@ 0x68
 8001244:	af00      	add	r7, sp, #0
	// Step 1: Initialize GPIO
	CAN_GPIO_Init();
 8001246:	f7ff ffcd 	bl	80011e4 <CAN_GPIO_Init>

	// Step 2: Configure CAN handle
	CAN_HandleTypedef canHandle;
	canHandle.CANx = CAN1;
 800124a:	4b68      	ldr	r3, [pc, #416]	@ (80013ec <Test_Silent_Mode+0x1ac>)
 800124c:	653b      	str	r3, [r7, #80]	@ 0x50
	canHandle.transmitPriority = 0; // Priority by request order
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	canHandle.receiveFIFOLockedMode = 0; // Overwrite mode (not locked)
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	canHandle.autoReTransmit = 1; // Disable auto retransmission
 800125a:	2301      	movs	r3, #1
 800125c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	canHandle.autoBusOff = 1; // Enable auto bus-off management
 8001260:	2301      	movs	r3, #1
 8001262:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	canHandle.bitrate = 1000000; // 1000 kbps
 8001266:	4b62      	ldr	r3, [pc, #392]	@ (80013f0 <Test_Silent_Mode+0x1b0>)
 8001268:	65bb      	str	r3, [r7, #88]	@ 0x58
	canHandle.testModeSelected = CAN_LOOP_BACK_SILENT_MODE; // Loopback and Silent mode
 800126a:	2303      	movs	r3, #3
 800126c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

	// Step 3: Initialize CAN peripheral
	CAN_INIT(&canHandle);
 8001270:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f897 	bl	80003a8 <CAN_INIT>

	// Step 4: Configure filter to accept all messages
	CAN_FilterHandleTypeDef filterConfig;
	filterConfig.filterBank = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	f887 3020 	strb.w	r3, [r7, #32]
	filterConfig.filterScale = CAN_FILTER_32_BIT_SCALE;
 8001280:	2301      	movs	r3, #1
 8001282:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	filterConfig.filterMaskListMode = CAN_ID_MASK_MODE;
 8001286:	2300      	movs	r3, #0
 8001288:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
	filterConfig.extd = CAN_STANDARD_IDE;
 800128c:	2300      	movs	r3, #0
 800128e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	filterConfig.fifoAssignment = CAN_FIFO_0;
 8001292:	2300      	movs	r3, #0
 8001294:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	// Accept all messages (ID = 0x000, Mask = 0x000)
	filterConfig.CAN_Filter32BitMaskHandleTypeDef.id1 = 0x000;
 8001298:	2300      	movs	r3, #0
 800129a:	64bb      	str	r3, [r7, #72]	@ 0x48
	filterConfig.CAN_Filter32BitMaskHandleTypeDef.mask1 = 0x000;
 800129c:	2300      	movs	r3, #0
 800129e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	CAN_FILTER_CONFIG(&canHandle, &filterConfig);
 80012a0:	f107 0220 	add.w	r2, r7, #32
 80012a4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80012a8:	4611      	mov	r1, r2
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fb48 	bl	8000940 <CAN_FILTER_CONFIG>

	// Step 5: Test loop - continuous send and receive
	uint32_t messageCount = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	667b      	str	r3, [r7, #100]	@ 0x64

	printf("CAN Loopback Test Started\r\n");
 80012b4:	484f      	ldr	r0, [pc, #316]	@ (80013f4 <Test_Silent_Mode+0x1b4>)
 80012b6:	f000 faff 	bl	80018b8 <puts>
	printf("==========================\r\n\r\n");
 80012ba:	484f      	ldr	r0, [pc, #316]	@ (80013f8 <Test_Silent_Mode+0x1b8>)
 80012bc:	f000 fafc 	bl	80018b8 <puts>

	while (1) {
		// Prepare TX message
		CAN_TXHandleTypeDef txMsg;
		txMsg.identifier = 0x123;
 80012c0:	f240 1323 	movw	r3, #291	@ 0x123
 80012c4:	61bb      	str	r3, [r7, #24]
		txMsg.extd = CAN_STANDARD_IDE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	773b      	strb	r3, [r7, #28]
		txMsg.frameType = CAN_DATA_FRAME;
 80012ca:	2300      	movs	r3, #0
 80012cc:	77bb      	strb	r3, [r7, #30]
		txMsg.dataLengthCode = 8;
 80012ce:	2308      	movs	r3, #8
 80012d0:	777b      	strb	r3, [r7, #29]

		// Fill data with pattern
		txMsg.data[0] = 0xAA;
 80012d2:	23aa      	movs	r3, #170	@ 0xaa
 80012d4:	743b      	strb	r3, [r7, #16]
		txMsg.data[1] = 0xBB;
 80012d6:	23bb      	movs	r3, #187	@ 0xbb
 80012d8:	747b      	strb	r3, [r7, #17]
		txMsg.data[2] = 0xCC;
 80012da:	23cc      	movs	r3, #204	@ 0xcc
 80012dc:	74bb      	strb	r3, [r7, #18]
		txMsg.data[3] = 0xDD;
 80012de:	23dd      	movs	r3, #221	@ 0xdd
 80012e0:	74fb      	strb	r3, [r7, #19]
		txMsg.data[4] = 0x01;
 80012e2:	2301      	movs	r3, #1
 80012e4:	753b      	strb	r3, [r7, #20]
		txMsg.data[5] = 0x02;
 80012e6:	2302      	movs	r3, #2
 80012e8:	757b      	strb	r3, [r7, #21]
		txMsg.data[6] = 0x03;
 80012ea:	2303      	movs	r3, #3
 80012ec:	75bb      	strb	r3, [r7, #22]
		txMsg.data[7] = 0x04;
 80012ee:	2304      	movs	r3, #4
 80012f0:	75fb      	strb	r3, [r7, #23]

		// Send message
		printf("Sending CAN message #%lu...\r\n", ++messageCount);
 80012f2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80012f4:	3301      	adds	r3, #1
 80012f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80012f8:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80012fa:	4840      	ldr	r0, [pc, #256]	@ (80013fc <Test_Silent_Mode+0x1bc>)
 80012fc:	f000 fa74 	bl	80017e8 <iprintf>
		CAN_SEND(&canHandle, &txMsg);
 8001300:	f107 0210 	add.w	r2, r7, #16
 8001304:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001308:	4611      	mov	r1, r2
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fafe 	bl	800090c <CAN_SEND>

		// Small delay to allow transmission to complete
		delay_ms(10);
 8001310:	200a      	movs	r0, #10
 8001312:	f000 f891 	bl	8001438 <delay_ms>

		// Check for received messages
		uint8_t msgPending = CAN_RX_FREE_LEVEL(&canHandle, CAN_FIFO_0);
 8001316:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fca4 	bl	8000c6a <CAN_RX_FREE_LEVEL>
 8001322:	4603      	mov	r3, r0
 8001324:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

		if (msgPending > 0) {
 8001328:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 800132c:	2b00      	cmp	r3, #0
 800132e:	d051      	beq.n	80013d4 <Test_Silent_Mode+0x194>
			CAN_RXHandleTypeDef rxMsg;
			uint8_t status = CAN_RECEIVE(&canHandle, &rxMsg, CAN_FIFO_0);
 8001330:	4639      	mov	r1, r7
 8001332:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001336:	2200      	movs	r2, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fcb9 	bl	8000cb0 <CAN_RECEIVE>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

			if (status == CAN_RCV_SUCCESS) {
 8001344:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8001348:	2b01      	cmp	r3, #1
 800134a:	d13f      	bne.n	80013cc <Test_Silent_Mode+0x18c>
				// Print received message details
				printf("Message received successfully!\r\n");
 800134c:	482c      	ldr	r0, [pc, #176]	@ (8001400 <Test_Silent_Mode+0x1c0>)
 800134e:	f000 fab3 	bl	80018b8 <puts>
				printf("  ID: 0x%03lX\r\n", rxMsg.identifier);
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	4619      	mov	r1, r3
 8001356:	482b      	ldr	r0, [pc, #172]	@ (8001404 <Test_Silent_Mode+0x1c4>)
 8001358:	f000 fa46 	bl	80017e8 <iprintf>
				printf("  Type: %s\r\n",
						rxMsg.extd == CAN_STANDARD_IDE ?
 800135c:	7b3b      	ldrb	r3, [r7, #12]
				printf("  Type: %s\r\n",
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <Test_Silent_Mode+0x126>
 8001362:	4b29      	ldr	r3, [pc, #164]	@ (8001408 <Test_Silent_Mode+0x1c8>)
 8001364:	e000      	b.n	8001368 <Test_Silent_Mode+0x128>
 8001366:	4b29      	ldr	r3, [pc, #164]	@ (800140c <Test_Silent_Mode+0x1cc>)
 8001368:	4619      	mov	r1, r3
 800136a:	4829      	ldr	r0, [pc, #164]	@ (8001410 <Test_Silent_Mode+0x1d0>)
 800136c:	f000 fa3c 	bl	80017e8 <iprintf>
								"Standard" : "Extended");
				printf("  Frame: %s\r\n", rxMsg.rtr ? "Remote" : "Data");
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <Test_Silent_Mode+0x13a>
 8001376:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <Test_Silent_Mode+0x1d4>)
 8001378:	e000      	b.n	800137c <Test_Silent_Mode+0x13c>
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <Test_Silent_Mode+0x1d8>)
 800137c:	4619      	mov	r1, r3
 800137e:	4827      	ldr	r0, [pc, #156]	@ (800141c <Test_Silent_Mode+0x1dc>)
 8001380:	f000 fa32 	bl	80017e8 <iprintf>
				printf("  DLC: %d\r\n", rxMsg.dataLengthCode);
 8001384:	7b7b      	ldrb	r3, [r7, #13]
 8001386:	4619      	mov	r1, r3
 8001388:	4825      	ldr	r0, [pc, #148]	@ (8001420 <Test_Silent_Mode+0x1e0>)
 800138a:	f000 fa2d 	bl	80017e8 <iprintf>
				printf("  Data: ");
 800138e:	4825      	ldr	r0, [pc, #148]	@ (8001424 <Test_Silent_Mode+0x1e4>)
 8001390:	f000 fa2a 	bl	80017e8 <iprintf>

				for (uint8_t i = 0; i < rxMsg.dataLengthCode; i++) {
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 800139a:	e00e      	b.n	80013ba <Test_Silent_Mode+0x17a>
					printf("0x%02X ", rxMsg.data[i]);
 800139c:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80013a0:	3368      	adds	r3, #104	@ 0x68
 80013a2:	443b      	add	r3, r7
 80013a4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80013a8:	4619      	mov	r1, r3
 80013aa:	481f      	ldr	r0, [pc, #124]	@ (8001428 <Test_Silent_Mode+0x1e8>)
 80013ac:	f000 fa1c 	bl	80017e8 <iprintf>
				for (uint8_t i = 0; i < rxMsg.dataLengthCode; i++) {
 80013b0:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80013b4:	3301      	adds	r3, #1
 80013b6:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
 80013ba:	7b7b      	ldrb	r3, [r7, #13]
 80013bc:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d3eb      	bcc.n	800139c <Test_Silent_Mode+0x15c>
				}
				printf("\r\n");
 80013c4:	4819      	ldr	r0, [pc, #100]	@ (800142c <Test_Silent_Mode+0x1ec>)
 80013c6:	f000 fa77 	bl	80018b8 <puts>
 80013ca:	e006      	b.n	80013da <Test_Silent_Mode+0x19a>
			} else {
				printf("Failed to receive message\r\n");
 80013cc:	4818      	ldr	r0, [pc, #96]	@ (8001430 <Test_Silent_Mode+0x1f0>)
 80013ce:	f000 fa73 	bl	80018b8 <puts>
 80013d2:	e002      	b.n	80013da <Test_Silent_Mode+0x19a>
			}
		} else {
			printf("No message pending in FIFO\r\n");
 80013d4:	4817      	ldr	r0, [pc, #92]	@ (8001434 <Test_Silent_Mode+0x1f4>)
 80013d6:	f000 fa6f 	bl	80018b8 <puts>
		}

		printf("\r\n");
 80013da:	4814      	ldr	r0, [pc, #80]	@ (800142c <Test_Silent_Mode+0x1ec>)
 80013dc:	f000 fa6c 	bl	80018b8 <puts>

		// Delay between messages (1 second)
		delay_ms(1000);
 80013e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e4:	f000 f828 	bl	8001438 <delay_ms>
	while (1) {
 80013e8:	e76a      	b.n	80012c0 <Test_Silent_Mode+0x80>
 80013ea:	bf00      	nop
 80013ec:	40006400 	.word	0x40006400
 80013f0:	000f4240 	.word	0x000f4240
 80013f4:	080025c4 	.word	0x080025c4
 80013f8:	080025e0 	.word	0x080025e0
 80013fc:	08002600 	.word	0x08002600
 8001400:	08002620 	.word	0x08002620
 8001404:	08002640 	.word	0x08002640
 8001408:	08002650 	.word	0x08002650
 800140c:	0800265c 	.word	0x0800265c
 8001410:	08002668 	.word	0x08002668
 8001414:	08002678 	.word	0x08002678
 8001418:	08002680 	.word	0x08002680
 800141c:	08002688 	.word	0x08002688
 8001420:	08002698 	.word	0x08002698
 8001424:	080026a4 	.word	0x080026a4
 8001428:	080026b0 	.word	0x080026b0
 800142c:	080026b8 	.word	0x080026b8
 8001430:	080026bc 	.word	0x080026bc
 8001434:	080026d8 	.word	0x080026d8

08001438 <delay_ms>:
	}
}

void delay_ms(uint32_t ms) {
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	// Rough delay - adjust based on your system clock
	// Assumes ~16 MHz clock, ~4 cycles per loop iteration
	for (uint32_t i = 0; i < ms; i++) {
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	e00c      	b.n	8001460 <delay_ms+0x28>
		for (volatile uint32_t j = 0; j < 4000; j++)
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	e002      	b.n	8001452 <delay_ms+0x1a>
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	3301      	adds	r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001458:	d3f8      	bcc.n	800144c <delay_ms+0x14>
	for (uint32_t i = 0; i < ms; i++) {
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	3301      	adds	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	429a      	cmp	r2, r3
 8001466:	d3ee      	bcc.n	8001446 <delay_ms+0xe>
			;
	}
}
 8001468:	bf00      	nop
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <ITM_SendChar+0x48>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0e      	ldr	r2, [pc, #56]	@ (80014c0 <ITM_SendChar+0x48>)
 8001488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800148c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <ITM_SendChar+0x4c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a0c      	ldr	r2, [pc, #48]	@ (80014c4 <ITM_SendChar+0x4c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 800149a:	bf00      	nop
 800149c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f8      	beq.n	800149c <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80014aa:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000edfc 	.word	0xe000edfc
 80014c4:	e0000e00 	.word	0xe0000e00

080014c8 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	60f8      	str	r0, [r7, #12]
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	e00a      	b.n	80014f0 <_read+0x28>
		*ptr++ = __io_getchar();
 80014da:	f3af 8000 	nop.w
 80014de:	4601      	mov	r1, r0
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	1c5a      	adds	r2, r3, #1
 80014e4:	60ba      	str	r2, [r7, #8]
 80014e6:	b2ca      	uxtb	r2, r1
 80014e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf0      	blt.n	80014da <_read+0x12>
	}

	return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800150e:	2300      	movs	r3, #0
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	e009      	b.n	8001528 <_write+0x26>
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	60ba      	str	r2, [r7, #8]
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ffab 	bl	8001478 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	3301      	adds	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbf1      	blt.n	8001514 <_write+0x12>
	}
	return len;
 8001530:	687b      	ldr	r3, [r7, #4]
}
 8001532:	4618      	mov	r0, r3
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <_close>:

int _close(int file) {
 800153a:	b480      	push	{r7}
 800153c:	b083      	sub	sp, #12
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	6078      	str	r0, [r7, #4]
 800155a:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001562:	605a      	str	r2, [r3, #4]
	return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_isatty>:

int _isatty(int file) {
 8001572:	b480      	push	{r7}
 8001574:	b083      	sub	sp, #12
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 800157a:	2301      	movs	r3, #1
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3714      	adds	r7, #20
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ac:	4a14      	ldr	r2, [pc, #80]	@ (8001600 <_sbrk+0x5c>)
 80015ae:	4b15      	ldr	r3, [pc, #84]	@ (8001604 <_sbrk+0x60>)
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4b13      	ldr	r3, [pc, #76]	@ (8001608 <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d102      	bne.n	80015c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c0:	4b11      	ldr	r3, [pc, #68]	@ (8001608 <_sbrk+0x64>)
 80015c2:	4a12      	ldr	r2, [pc, #72]	@ (800160c <_sbrk+0x68>)
 80015c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <_sbrk+0x64>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4413      	add	r3, r2
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	429a      	cmp	r2, r3
 80015d2:	d207      	bcs.n	80015e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d4:	f000 fa9e 	bl	8001b14 <__errno>
 80015d8:	4603      	mov	r3, r0
 80015da:	220c      	movs	r2, #12
 80015dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e009      	b.n	80015f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e4:	4b08      	ldr	r3, [pc, #32]	@ (8001608 <_sbrk+0x64>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ea:	4b07      	ldr	r3, [pc, #28]	@ (8001608 <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <_sbrk+0x64>)
 80015f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015f6:	68fb      	ldr	r3, [r7, #12]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	3718      	adds	r7, #24
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20020000 	.word	0x20020000
 8001604:	00000400 	.word	0x00000400
 8001608:	2000007c 	.word	0x2000007c
 800160c:	200001d0 	.word	0x200001d0

08001610 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001610:	480d      	ldr	r0, [pc, #52]	@ (8001648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001612:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001614:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <LoopForever+0x6>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	@ (8001650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LoopForever+0xe>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	@ (800165c <LoopForever+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800163e:	f000 fa6f 	bl	8001b20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001642:	f7ff fdc9 	bl	80011d8 <main>

08001646 <LoopForever>:

LoopForever:
  b LoopForever
 8001646:	e7fe      	b.n	8001646 <LoopForever>
  ldr   r0, =_estack
 8001648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001654:	08002738 	.word	0x08002738
  ldr r2, =_sbss
 8001658:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800165c:	200001cc 	.word	0x200001cc

08001660 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC_IRQHandler>
	...

08001664 <std>:
 8001664:	2300      	movs	r3, #0
 8001666:	b510      	push	{r4, lr}
 8001668:	4604      	mov	r4, r0
 800166a:	e9c0 3300 	strd	r3, r3, [r0]
 800166e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001672:	6083      	str	r3, [r0, #8]
 8001674:	8181      	strh	r1, [r0, #12]
 8001676:	6643      	str	r3, [r0, #100]	@ 0x64
 8001678:	81c2      	strh	r2, [r0, #14]
 800167a:	6183      	str	r3, [r0, #24]
 800167c:	4619      	mov	r1, r3
 800167e:	2208      	movs	r2, #8
 8001680:	305c      	adds	r0, #92	@ 0x5c
 8001682:	f000 f9f9 	bl	8001a78 <memset>
 8001686:	4b0d      	ldr	r3, [pc, #52]	@ (80016bc <std+0x58>)
 8001688:	6263      	str	r3, [r4, #36]	@ 0x24
 800168a:	4b0d      	ldr	r3, [pc, #52]	@ (80016c0 <std+0x5c>)
 800168c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800168e:	4b0d      	ldr	r3, [pc, #52]	@ (80016c4 <std+0x60>)
 8001690:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001692:	4b0d      	ldr	r3, [pc, #52]	@ (80016c8 <std+0x64>)
 8001694:	6323      	str	r3, [r4, #48]	@ 0x30
 8001696:	4b0d      	ldr	r3, [pc, #52]	@ (80016cc <std+0x68>)
 8001698:	6224      	str	r4, [r4, #32]
 800169a:	429c      	cmp	r4, r3
 800169c:	d006      	beq.n	80016ac <std+0x48>
 800169e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80016a2:	4294      	cmp	r4, r2
 80016a4:	d002      	beq.n	80016ac <std+0x48>
 80016a6:	33d0      	adds	r3, #208	@ 0xd0
 80016a8:	429c      	cmp	r4, r3
 80016aa:	d105      	bne.n	80016b8 <std+0x54>
 80016ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80016b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016b4:	f000 ba58 	b.w	8001b68 <__retarget_lock_init_recursive>
 80016b8:	bd10      	pop	{r4, pc}
 80016ba:	bf00      	nop
 80016bc:	080018c9 	.word	0x080018c9
 80016c0:	080018eb 	.word	0x080018eb
 80016c4:	08001923 	.word	0x08001923
 80016c8:	08001947 	.word	0x08001947
 80016cc:	20000080 	.word	0x20000080

080016d0 <stdio_exit_handler>:
 80016d0:	4a02      	ldr	r2, [pc, #8]	@ (80016dc <stdio_exit_handler+0xc>)
 80016d2:	4903      	ldr	r1, [pc, #12]	@ (80016e0 <stdio_exit_handler+0x10>)
 80016d4:	4803      	ldr	r0, [pc, #12]	@ (80016e4 <stdio_exit_handler+0x14>)
 80016d6:	f000 b869 	b.w	80017ac <_fwalk_sglue>
 80016da:	bf00      	nop
 80016dc:	20000000 	.word	0x20000000
 80016e0:	08002405 	.word	0x08002405
 80016e4:	20000010 	.word	0x20000010

080016e8 <cleanup_stdio>:
 80016e8:	6841      	ldr	r1, [r0, #4]
 80016ea:	4b0c      	ldr	r3, [pc, #48]	@ (800171c <cleanup_stdio+0x34>)
 80016ec:	4299      	cmp	r1, r3
 80016ee:	b510      	push	{r4, lr}
 80016f0:	4604      	mov	r4, r0
 80016f2:	d001      	beq.n	80016f8 <cleanup_stdio+0x10>
 80016f4:	f000 fe86 	bl	8002404 <_fflush_r>
 80016f8:	68a1      	ldr	r1, [r4, #8]
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <cleanup_stdio+0x38>)
 80016fc:	4299      	cmp	r1, r3
 80016fe:	d002      	beq.n	8001706 <cleanup_stdio+0x1e>
 8001700:	4620      	mov	r0, r4
 8001702:	f000 fe7f 	bl	8002404 <_fflush_r>
 8001706:	68e1      	ldr	r1, [r4, #12]
 8001708:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <cleanup_stdio+0x3c>)
 800170a:	4299      	cmp	r1, r3
 800170c:	d004      	beq.n	8001718 <cleanup_stdio+0x30>
 800170e:	4620      	mov	r0, r4
 8001710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001714:	f000 be76 	b.w	8002404 <_fflush_r>
 8001718:	bd10      	pop	{r4, pc}
 800171a:	bf00      	nop
 800171c:	20000080 	.word	0x20000080
 8001720:	200000e8 	.word	0x200000e8
 8001724:	20000150 	.word	0x20000150

08001728 <global_stdio_init.part.0>:
 8001728:	b510      	push	{r4, lr}
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <global_stdio_init.part.0+0x30>)
 800172c:	4c0b      	ldr	r4, [pc, #44]	@ (800175c <global_stdio_init.part.0+0x34>)
 800172e:	4a0c      	ldr	r2, [pc, #48]	@ (8001760 <global_stdio_init.part.0+0x38>)
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	4620      	mov	r0, r4
 8001734:	2200      	movs	r2, #0
 8001736:	2104      	movs	r1, #4
 8001738:	f7ff ff94 	bl	8001664 <std>
 800173c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001740:	2201      	movs	r2, #1
 8001742:	2109      	movs	r1, #9
 8001744:	f7ff ff8e 	bl	8001664 <std>
 8001748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800174c:	2202      	movs	r2, #2
 800174e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001752:	2112      	movs	r1, #18
 8001754:	f7ff bf86 	b.w	8001664 <std>
 8001758:	200001b8 	.word	0x200001b8
 800175c:	20000080 	.word	0x20000080
 8001760:	080016d1 	.word	0x080016d1

08001764 <__sfp_lock_acquire>:
 8001764:	4801      	ldr	r0, [pc, #4]	@ (800176c <__sfp_lock_acquire+0x8>)
 8001766:	f000 ba00 	b.w	8001b6a <__retarget_lock_acquire_recursive>
 800176a:	bf00      	nop
 800176c:	200001c1 	.word	0x200001c1

08001770 <__sfp_lock_release>:
 8001770:	4801      	ldr	r0, [pc, #4]	@ (8001778 <__sfp_lock_release+0x8>)
 8001772:	f000 b9fb 	b.w	8001b6c <__retarget_lock_release_recursive>
 8001776:	bf00      	nop
 8001778:	200001c1 	.word	0x200001c1

0800177c <__sinit>:
 800177c:	b510      	push	{r4, lr}
 800177e:	4604      	mov	r4, r0
 8001780:	f7ff fff0 	bl	8001764 <__sfp_lock_acquire>
 8001784:	6a23      	ldr	r3, [r4, #32]
 8001786:	b11b      	cbz	r3, 8001790 <__sinit+0x14>
 8001788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800178c:	f7ff bff0 	b.w	8001770 <__sfp_lock_release>
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__sinit+0x28>)
 8001792:	6223      	str	r3, [r4, #32]
 8001794:	4b04      	ldr	r3, [pc, #16]	@ (80017a8 <__sinit+0x2c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1f5      	bne.n	8001788 <__sinit+0xc>
 800179c:	f7ff ffc4 	bl	8001728 <global_stdio_init.part.0>
 80017a0:	e7f2      	b.n	8001788 <__sinit+0xc>
 80017a2:	bf00      	nop
 80017a4:	080016e9 	.word	0x080016e9
 80017a8:	200001b8 	.word	0x200001b8

080017ac <_fwalk_sglue>:
 80017ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017b0:	4607      	mov	r7, r0
 80017b2:	4688      	mov	r8, r1
 80017b4:	4614      	mov	r4, r2
 80017b6:	2600      	movs	r6, #0
 80017b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80017bc:	f1b9 0901 	subs.w	r9, r9, #1
 80017c0:	d505      	bpl.n	80017ce <_fwalk_sglue+0x22>
 80017c2:	6824      	ldr	r4, [r4, #0]
 80017c4:	2c00      	cmp	r4, #0
 80017c6:	d1f7      	bne.n	80017b8 <_fwalk_sglue+0xc>
 80017c8:	4630      	mov	r0, r6
 80017ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017ce:	89ab      	ldrh	r3, [r5, #12]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d907      	bls.n	80017e4 <_fwalk_sglue+0x38>
 80017d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80017d8:	3301      	adds	r3, #1
 80017da:	d003      	beq.n	80017e4 <_fwalk_sglue+0x38>
 80017dc:	4629      	mov	r1, r5
 80017de:	4638      	mov	r0, r7
 80017e0:	47c0      	blx	r8
 80017e2:	4306      	orrs	r6, r0
 80017e4:	3568      	adds	r5, #104	@ 0x68
 80017e6:	e7e9      	b.n	80017bc <_fwalk_sglue+0x10>

080017e8 <iprintf>:
 80017e8:	b40f      	push	{r0, r1, r2, r3}
 80017ea:	b507      	push	{r0, r1, r2, lr}
 80017ec:	4906      	ldr	r1, [pc, #24]	@ (8001808 <iprintf+0x20>)
 80017ee:	ab04      	add	r3, sp, #16
 80017f0:	6808      	ldr	r0, [r1, #0]
 80017f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80017f6:	6881      	ldr	r1, [r0, #8]
 80017f8:	9301      	str	r3, [sp, #4]
 80017fa:	f000 fadb 	bl	8001db4 <_vfiprintf_r>
 80017fe:	b003      	add	sp, #12
 8001800:	f85d eb04 	ldr.w	lr, [sp], #4
 8001804:	b004      	add	sp, #16
 8001806:	4770      	bx	lr
 8001808:	2000000c 	.word	0x2000000c

0800180c <_puts_r>:
 800180c:	6a03      	ldr	r3, [r0, #32]
 800180e:	b570      	push	{r4, r5, r6, lr}
 8001810:	6884      	ldr	r4, [r0, #8]
 8001812:	4605      	mov	r5, r0
 8001814:	460e      	mov	r6, r1
 8001816:	b90b      	cbnz	r3, 800181c <_puts_r+0x10>
 8001818:	f7ff ffb0 	bl	800177c <__sinit>
 800181c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800181e:	07db      	lsls	r3, r3, #31
 8001820:	d405      	bmi.n	800182e <_puts_r+0x22>
 8001822:	89a3      	ldrh	r3, [r4, #12]
 8001824:	0598      	lsls	r0, r3, #22
 8001826:	d402      	bmi.n	800182e <_puts_r+0x22>
 8001828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800182a:	f000 f99e 	bl	8001b6a <__retarget_lock_acquire_recursive>
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	0719      	lsls	r1, r3, #28
 8001832:	d502      	bpl.n	800183a <_puts_r+0x2e>
 8001834:	6923      	ldr	r3, [r4, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d135      	bne.n	80018a6 <_puts_r+0x9a>
 800183a:	4621      	mov	r1, r4
 800183c:	4628      	mov	r0, r5
 800183e:	f000 f8c5 	bl	80019cc <__swsetup_r>
 8001842:	b380      	cbz	r0, 80018a6 <_puts_r+0x9a>
 8001844:	f04f 35ff 	mov.w	r5, #4294967295
 8001848:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800184a:	07da      	lsls	r2, r3, #31
 800184c:	d405      	bmi.n	800185a <_puts_r+0x4e>
 800184e:	89a3      	ldrh	r3, [r4, #12]
 8001850:	059b      	lsls	r3, r3, #22
 8001852:	d402      	bmi.n	800185a <_puts_r+0x4e>
 8001854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001856:	f000 f989 	bl	8001b6c <__retarget_lock_release_recursive>
 800185a:	4628      	mov	r0, r5
 800185c:	bd70      	pop	{r4, r5, r6, pc}
 800185e:	2b00      	cmp	r3, #0
 8001860:	da04      	bge.n	800186c <_puts_r+0x60>
 8001862:	69a2      	ldr	r2, [r4, #24]
 8001864:	429a      	cmp	r2, r3
 8001866:	dc17      	bgt.n	8001898 <_puts_r+0x8c>
 8001868:	290a      	cmp	r1, #10
 800186a:	d015      	beq.n	8001898 <_puts_r+0x8c>
 800186c:	6823      	ldr	r3, [r4, #0]
 800186e:	1c5a      	adds	r2, r3, #1
 8001870:	6022      	str	r2, [r4, #0]
 8001872:	7019      	strb	r1, [r3, #0]
 8001874:	68a3      	ldr	r3, [r4, #8]
 8001876:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800187a:	3b01      	subs	r3, #1
 800187c:	60a3      	str	r3, [r4, #8]
 800187e:	2900      	cmp	r1, #0
 8001880:	d1ed      	bne.n	800185e <_puts_r+0x52>
 8001882:	2b00      	cmp	r3, #0
 8001884:	da11      	bge.n	80018aa <_puts_r+0x9e>
 8001886:	4622      	mov	r2, r4
 8001888:	210a      	movs	r1, #10
 800188a:	4628      	mov	r0, r5
 800188c:	f000 f85f 	bl	800194e <__swbuf_r>
 8001890:	3001      	adds	r0, #1
 8001892:	d0d7      	beq.n	8001844 <_puts_r+0x38>
 8001894:	250a      	movs	r5, #10
 8001896:	e7d7      	b.n	8001848 <_puts_r+0x3c>
 8001898:	4622      	mov	r2, r4
 800189a:	4628      	mov	r0, r5
 800189c:	f000 f857 	bl	800194e <__swbuf_r>
 80018a0:	3001      	adds	r0, #1
 80018a2:	d1e7      	bne.n	8001874 <_puts_r+0x68>
 80018a4:	e7ce      	b.n	8001844 <_puts_r+0x38>
 80018a6:	3e01      	subs	r6, #1
 80018a8:	e7e4      	b.n	8001874 <_puts_r+0x68>
 80018aa:	6823      	ldr	r3, [r4, #0]
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	6022      	str	r2, [r4, #0]
 80018b0:	220a      	movs	r2, #10
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e7ee      	b.n	8001894 <_puts_r+0x88>
	...

080018b8 <puts>:
 80018b8:	4b02      	ldr	r3, [pc, #8]	@ (80018c4 <puts+0xc>)
 80018ba:	4601      	mov	r1, r0
 80018bc:	6818      	ldr	r0, [r3, #0]
 80018be:	f7ff bfa5 	b.w	800180c <_puts_r>
 80018c2:	bf00      	nop
 80018c4:	2000000c 	.word	0x2000000c

080018c8 <__sread>:
 80018c8:	b510      	push	{r4, lr}
 80018ca:	460c      	mov	r4, r1
 80018cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018d0:	f000 f8fc 	bl	8001acc <_read_r>
 80018d4:	2800      	cmp	r0, #0
 80018d6:	bfab      	itete	ge
 80018d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80018da:	89a3      	ldrhlt	r3, [r4, #12]
 80018dc:	181b      	addge	r3, r3, r0
 80018de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80018e2:	bfac      	ite	ge
 80018e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80018e6:	81a3      	strhlt	r3, [r4, #12]
 80018e8:	bd10      	pop	{r4, pc}

080018ea <__swrite>:
 80018ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018ee:	461f      	mov	r7, r3
 80018f0:	898b      	ldrh	r3, [r1, #12]
 80018f2:	05db      	lsls	r3, r3, #23
 80018f4:	4605      	mov	r5, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	4616      	mov	r6, r2
 80018fa:	d505      	bpl.n	8001908 <__swrite+0x1e>
 80018fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001900:	2302      	movs	r3, #2
 8001902:	2200      	movs	r2, #0
 8001904:	f000 f8d0 	bl	8001aa8 <_lseek_r>
 8001908:	89a3      	ldrh	r3, [r4, #12]
 800190a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800190e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001912:	81a3      	strh	r3, [r4, #12]
 8001914:	4632      	mov	r2, r6
 8001916:	463b      	mov	r3, r7
 8001918:	4628      	mov	r0, r5
 800191a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800191e:	f000 b8e7 	b.w	8001af0 <_write_r>

08001922 <__sseek>:
 8001922:	b510      	push	{r4, lr}
 8001924:	460c      	mov	r4, r1
 8001926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800192a:	f000 f8bd 	bl	8001aa8 <_lseek_r>
 800192e:	1c43      	adds	r3, r0, #1
 8001930:	89a3      	ldrh	r3, [r4, #12]
 8001932:	bf15      	itete	ne
 8001934:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800193a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800193e:	81a3      	strheq	r3, [r4, #12]
 8001940:	bf18      	it	ne
 8001942:	81a3      	strhne	r3, [r4, #12]
 8001944:	bd10      	pop	{r4, pc}

08001946 <__sclose>:
 8001946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800194a:	f000 b89d 	b.w	8001a88 <_close_r>

0800194e <__swbuf_r>:
 800194e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001950:	460e      	mov	r6, r1
 8001952:	4614      	mov	r4, r2
 8001954:	4605      	mov	r5, r0
 8001956:	b118      	cbz	r0, 8001960 <__swbuf_r+0x12>
 8001958:	6a03      	ldr	r3, [r0, #32]
 800195a:	b90b      	cbnz	r3, 8001960 <__swbuf_r+0x12>
 800195c:	f7ff ff0e 	bl	800177c <__sinit>
 8001960:	69a3      	ldr	r3, [r4, #24]
 8001962:	60a3      	str	r3, [r4, #8]
 8001964:	89a3      	ldrh	r3, [r4, #12]
 8001966:	071a      	lsls	r2, r3, #28
 8001968:	d501      	bpl.n	800196e <__swbuf_r+0x20>
 800196a:	6923      	ldr	r3, [r4, #16]
 800196c:	b943      	cbnz	r3, 8001980 <__swbuf_r+0x32>
 800196e:	4621      	mov	r1, r4
 8001970:	4628      	mov	r0, r5
 8001972:	f000 f82b 	bl	80019cc <__swsetup_r>
 8001976:	b118      	cbz	r0, 8001980 <__swbuf_r+0x32>
 8001978:	f04f 37ff 	mov.w	r7, #4294967295
 800197c:	4638      	mov	r0, r7
 800197e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001980:	6823      	ldr	r3, [r4, #0]
 8001982:	6922      	ldr	r2, [r4, #16]
 8001984:	1a98      	subs	r0, r3, r2
 8001986:	6963      	ldr	r3, [r4, #20]
 8001988:	b2f6      	uxtb	r6, r6
 800198a:	4283      	cmp	r3, r0
 800198c:	4637      	mov	r7, r6
 800198e:	dc05      	bgt.n	800199c <__swbuf_r+0x4e>
 8001990:	4621      	mov	r1, r4
 8001992:	4628      	mov	r0, r5
 8001994:	f000 fd36 	bl	8002404 <_fflush_r>
 8001998:	2800      	cmp	r0, #0
 800199a:	d1ed      	bne.n	8001978 <__swbuf_r+0x2a>
 800199c:	68a3      	ldr	r3, [r4, #8]
 800199e:	3b01      	subs	r3, #1
 80019a0:	60a3      	str	r3, [r4, #8]
 80019a2:	6823      	ldr	r3, [r4, #0]
 80019a4:	1c5a      	adds	r2, r3, #1
 80019a6:	6022      	str	r2, [r4, #0]
 80019a8:	701e      	strb	r6, [r3, #0]
 80019aa:	6962      	ldr	r2, [r4, #20]
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d004      	beq.n	80019bc <__swbuf_r+0x6e>
 80019b2:	89a3      	ldrh	r3, [r4, #12]
 80019b4:	07db      	lsls	r3, r3, #31
 80019b6:	d5e1      	bpl.n	800197c <__swbuf_r+0x2e>
 80019b8:	2e0a      	cmp	r6, #10
 80019ba:	d1df      	bne.n	800197c <__swbuf_r+0x2e>
 80019bc:	4621      	mov	r1, r4
 80019be:	4628      	mov	r0, r5
 80019c0:	f000 fd20 	bl	8002404 <_fflush_r>
 80019c4:	2800      	cmp	r0, #0
 80019c6:	d0d9      	beq.n	800197c <__swbuf_r+0x2e>
 80019c8:	e7d6      	b.n	8001978 <__swbuf_r+0x2a>
	...

080019cc <__swsetup_r>:
 80019cc:	b538      	push	{r3, r4, r5, lr}
 80019ce:	4b29      	ldr	r3, [pc, #164]	@ (8001a74 <__swsetup_r+0xa8>)
 80019d0:	4605      	mov	r5, r0
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	460c      	mov	r4, r1
 80019d6:	b118      	cbz	r0, 80019e0 <__swsetup_r+0x14>
 80019d8:	6a03      	ldr	r3, [r0, #32]
 80019da:	b90b      	cbnz	r3, 80019e0 <__swsetup_r+0x14>
 80019dc:	f7ff fece 	bl	800177c <__sinit>
 80019e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019e4:	0719      	lsls	r1, r3, #28
 80019e6:	d422      	bmi.n	8001a2e <__swsetup_r+0x62>
 80019e8:	06da      	lsls	r2, r3, #27
 80019ea:	d407      	bmi.n	80019fc <__swsetup_r+0x30>
 80019ec:	2209      	movs	r2, #9
 80019ee:	602a      	str	r2, [r5, #0]
 80019f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019f4:	81a3      	strh	r3, [r4, #12]
 80019f6:	f04f 30ff 	mov.w	r0, #4294967295
 80019fa:	e033      	b.n	8001a64 <__swsetup_r+0x98>
 80019fc:	0758      	lsls	r0, r3, #29
 80019fe:	d512      	bpl.n	8001a26 <__swsetup_r+0x5a>
 8001a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a02:	b141      	cbz	r1, 8001a16 <__swsetup_r+0x4a>
 8001a04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001a08:	4299      	cmp	r1, r3
 8001a0a:	d002      	beq.n	8001a12 <__swsetup_r+0x46>
 8001a0c:	4628      	mov	r0, r5
 8001a0e:	f000 f8af 	bl	8001b70 <_free_r>
 8001a12:	2300      	movs	r3, #0
 8001a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8001a16:	89a3      	ldrh	r3, [r4, #12]
 8001a18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001a1c:	81a3      	strh	r3, [r4, #12]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	6063      	str	r3, [r4, #4]
 8001a22:	6923      	ldr	r3, [r4, #16]
 8001a24:	6023      	str	r3, [r4, #0]
 8001a26:	89a3      	ldrh	r3, [r4, #12]
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	81a3      	strh	r3, [r4, #12]
 8001a2e:	6923      	ldr	r3, [r4, #16]
 8001a30:	b94b      	cbnz	r3, 8001a46 <__swsetup_r+0x7a>
 8001a32:	89a3      	ldrh	r3, [r4, #12]
 8001a34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a3c:	d003      	beq.n	8001a46 <__swsetup_r+0x7a>
 8001a3e:	4621      	mov	r1, r4
 8001a40:	4628      	mov	r0, r5
 8001a42:	f000 fd2d 	bl	80024a0 <__smakebuf_r>
 8001a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a4a:	f013 0201 	ands.w	r2, r3, #1
 8001a4e:	d00a      	beq.n	8001a66 <__swsetup_r+0x9a>
 8001a50:	2200      	movs	r2, #0
 8001a52:	60a2      	str	r2, [r4, #8]
 8001a54:	6962      	ldr	r2, [r4, #20]
 8001a56:	4252      	negs	r2, r2
 8001a58:	61a2      	str	r2, [r4, #24]
 8001a5a:	6922      	ldr	r2, [r4, #16]
 8001a5c:	b942      	cbnz	r2, 8001a70 <__swsetup_r+0xa4>
 8001a5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001a62:	d1c5      	bne.n	80019f0 <__swsetup_r+0x24>
 8001a64:	bd38      	pop	{r3, r4, r5, pc}
 8001a66:	0799      	lsls	r1, r3, #30
 8001a68:	bf58      	it	pl
 8001a6a:	6962      	ldrpl	r2, [r4, #20]
 8001a6c:	60a2      	str	r2, [r4, #8]
 8001a6e:	e7f4      	b.n	8001a5a <__swsetup_r+0x8e>
 8001a70:	2000      	movs	r0, #0
 8001a72:	e7f7      	b.n	8001a64 <__swsetup_r+0x98>
 8001a74:	2000000c 	.word	0x2000000c

08001a78 <memset>:
 8001a78:	4402      	add	r2, r0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d100      	bne.n	8001a82 <memset+0xa>
 8001a80:	4770      	bx	lr
 8001a82:	f803 1b01 	strb.w	r1, [r3], #1
 8001a86:	e7f9      	b.n	8001a7c <memset+0x4>

08001a88 <_close_r>:
 8001a88:	b538      	push	{r3, r4, r5, lr}
 8001a8a:	4d06      	ldr	r5, [pc, #24]	@ (8001aa4 <_close_r+0x1c>)
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4608      	mov	r0, r1
 8001a92:	602b      	str	r3, [r5, #0]
 8001a94:	f7ff fd51 	bl	800153a <_close>
 8001a98:	1c43      	adds	r3, r0, #1
 8001a9a:	d102      	bne.n	8001aa2 <_close_r+0x1a>
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	b103      	cbz	r3, 8001aa2 <_close_r+0x1a>
 8001aa0:	6023      	str	r3, [r4, #0]
 8001aa2:	bd38      	pop	{r3, r4, r5, pc}
 8001aa4:	200001bc 	.word	0x200001bc

08001aa8 <_lseek_r>:
 8001aa8:	b538      	push	{r3, r4, r5, lr}
 8001aaa:	4d07      	ldr	r5, [pc, #28]	@ (8001ac8 <_lseek_r+0x20>)
 8001aac:	4604      	mov	r4, r0
 8001aae:	4608      	mov	r0, r1
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	602a      	str	r2, [r5, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	f7ff fd66 	bl	8001588 <_lseek>
 8001abc:	1c43      	adds	r3, r0, #1
 8001abe:	d102      	bne.n	8001ac6 <_lseek_r+0x1e>
 8001ac0:	682b      	ldr	r3, [r5, #0]
 8001ac2:	b103      	cbz	r3, 8001ac6 <_lseek_r+0x1e>
 8001ac4:	6023      	str	r3, [r4, #0]
 8001ac6:	bd38      	pop	{r3, r4, r5, pc}
 8001ac8:	200001bc 	.word	0x200001bc

08001acc <_read_r>:
 8001acc:	b538      	push	{r3, r4, r5, lr}
 8001ace:	4d07      	ldr	r5, [pc, #28]	@ (8001aec <_read_r+0x20>)
 8001ad0:	4604      	mov	r4, r0
 8001ad2:	4608      	mov	r0, r1
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	602a      	str	r2, [r5, #0]
 8001ada:	461a      	mov	r2, r3
 8001adc:	f7ff fcf4 	bl	80014c8 <_read>
 8001ae0:	1c43      	adds	r3, r0, #1
 8001ae2:	d102      	bne.n	8001aea <_read_r+0x1e>
 8001ae4:	682b      	ldr	r3, [r5, #0]
 8001ae6:	b103      	cbz	r3, 8001aea <_read_r+0x1e>
 8001ae8:	6023      	str	r3, [r4, #0]
 8001aea:	bd38      	pop	{r3, r4, r5, pc}
 8001aec:	200001bc 	.word	0x200001bc

08001af0 <_write_r>:
 8001af0:	b538      	push	{r3, r4, r5, lr}
 8001af2:	4d07      	ldr	r5, [pc, #28]	@ (8001b10 <_write_r+0x20>)
 8001af4:	4604      	mov	r4, r0
 8001af6:	4608      	mov	r0, r1
 8001af8:	4611      	mov	r1, r2
 8001afa:	2200      	movs	r2, #0
 8001afc:	602a      	str	r2, [r5, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	f7ff fcff 	bl	8001502 <_write>
 8001b04:	1c43      	adds	r3, r0, #1
 8001b06:	d102      	bne.n	8001b0e <_write_r+0x1e>
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	b103      	cbz	r3, 8001b0e <_write_r+0x1e>
 8001b0c:	6023      	str	r3, [r4, #0]
 8001b0e:	bd38      	pop	{r3, r4, r5, pc}
 8001b10:	200001bc 	.word	0x200001bc

08001b14 <__errno>:
 8001b14:	4b01      	ldr	r3, [pc, #4]	@ (8001b1c <__errno+0x8>)
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	2000000c 	.word	0x2000000c

08001b20 <__libc_init_array>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	4d0d      	ldr	r5, [pc, #52]	@ (8001b58 <__libc_init_array+0x38>)
 8001b24:	4c0d      	ldr	r4, [pc, #52]	@ (8001b5c <__libc_init_array+0x3c>)
 8001b26:	1b64      	subs	r4, r4, r5
 8001b28:	10a4      	asrs	r4, r4, #2
 8001b2a:	2600      	movs	r6, #0
 8001b2c:	42a6      	cmp	r6, r4
 8001b2e:	d109      	bne.n	8001b44 <__libc_init_array+0x24>
 8001b30:	4d0b      	ldr	r5, [pc, #44]	@ (8001b60 <__libc_init_array+0x40>)
 8001b32:	4c0c      	ldr	r4, [pc, #48]	@ (8001b64 <__libc_init_array+0x44>)
 8001b34:	f000 fd22 	bl	800257c <_init>
 8001b38:	1b64      	subs	r4, r4, r5
 8001b3a:	10a4      	asrs	r4, r4, #2
 8001b3c:	2600      	movs	r6, #0
 8001b3e:	42a6      	cmp	r6, r4
 8001b40:	d105      	bne.n	8001b4e <__libc_init_array+0x2e>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
 8001b44:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b48:	4798      	blx	r3
 8001b4a:	3601      	adds	r6, #1
 8001b4c:	e7ee      	b.n	8001b2c <__libc_init_array+0xc>
 8001b4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001b52:	4798      	blx	r3
 8001b54:	3601      	adds	r6, #1
 8001b56:	e7f2      	b.n	8001b3e <__libc_init_array+0x1e>
 8001b58:	08002730 	.word	0x08002730
 8001b5c:	08002730 	.word	0x08002730
 8001b60:	08002730 	.word	0x08002730
 8001b64:	08002734 	.word	0x08002734

08001b68 <__retarget_lock_init_recursive>:
 8001b68:	4770      	bx	lr

08001b6a <__retarget_lock_acquire_recursive>:
 8001b6a:	4770      	bx	lr

08001b6c <__retarget_lock_release_recursive>:
 8001b6c:	4770      	bx	lr
	...

08001b70 <_free_r>:
 8001b70:	b538      	push	{r3, r4, r5, lr}
 8001b72:	4605      	mov	r5, r0
 8001b74:	2900      	cmp	r1, #0
 8001b76:	d041      	beq.n	8001bfc <_free_r+0x8c>
 8001b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b7c:	1f0c      	subs	r4, r1, #4
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bfb8      	it	lt
 8001b82:	18e4      	addlt	r4, r4, r3
 8001b84:	f000 f8e0 	bl	8001d48 <__malloc_lock>
 8001b88:	4a1d      	ldr	r2, [pc, #116]	@ (8001c00 <_free_r+0x90>)
 8001b8a:	6813      	ldr	r3, [r2, #0]
 8001b8c:	b933      	cbnz	r3, 8001b9c <_free_r+0x2c>
 8001b8e:	6063      	str	r3, [r4, #4]
 8001b90:	6014      	str	r4, [r2, #0]
 8001b92:	4628      	mov	r0, r5
 8001b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b98:	f000 b8dc 	b.w	8001d54 <__malloc_unlock>
 8001b9c:	42a3      	cmp	r3, r4
 8001b9e:	d908      	bls.n	8001bb2 <_free_r+0x42>
 8001ba0:	6820      	ldr	r0, [r4, #0]
 8001ba2:	1821      	adds	r1, r4, r0
 8001ba4:	428b      	cmp	r3, r1
 8001ba6:	bf01      	itttt	eq
 8001ba8:	6819      	ldreq	r1, [r3, #0]
 8001baa:	685b      	ldreq	r3, [r3, #4]
 8001bac:	1809      	addeq	r1, r1, r0
 8001bae:	6021      	streq	r1, [r4, #0]
 8001bb0:	e7ed      	b.n	8001b8e <_free_r+0x1e>
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	b10b      	cbz	r3, 8001bbc <_free_r+0x4c>
 8001bb8:	42a3      	cmp	r3, r4
 8001bba:	d9fa      	bls.n	8001bb2 <_free_r+0x42>
 8001bbc:	6811      	ldr	r1, [r2, #0]
 8001bbe:	1850      	adds	r0, r2, r1
 8001bc0:	42a0      	cmp	r0, r4
 8001bc2:	d10b      	bne.n	8001bdc <_free_r+0x6c>
 8001bc4:	6820      	ldr	r0, [r4, #0]
 8001bc6:	4401      	add	r1, r0
 8001bc8:	1850      	adds	r0, r2, r1
 8001bca:	4283      	cmp	r3, r0
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	d1e0      	bne.n	8001b92 <_free_r+0x22>
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	6053      	str	r3, [r2, #4]
 8001bd6:	4408      	add	r0, r1
 8001bd8:	6010      	str	r0, [r2, #0]
 8001bda:	e7da      	b.n	8001b92 <_free_r+0x22>
 8001bdc:	d902      	bls.n	8001be4 <_free_r+0x74>
 8001bde:	230c      	movs	r3, #12
 8001be0:	602b      	str	r3, [r5, #0]
 8001be2:	e7d6      	b.n	8001b92 <_free_r+0x22>
 8001be4:	6820      	ldr	r0, [r4, #0]
 8001be6:	1821      	adds	r1, r4, r0
 8001be8:	428b      	cmp	r3, r1
 8001bea:	bf04      	itt	eq
 8001bec:	6819      	ldreq	r1, [r3, #0]
 8001bee:	685b      	ldreq	r3, [r3, #4]
 8001bf0:	6063      	str	r3, [r4, #4]
 8001bf2:	bf04      	itt	eq
 8001bf4:	1809      	addeq	r1, r1, r0
 8001bf6:	6021      	streq	r1, [r4, #0]
 8001bf8:	6054      	str	r4, [r2, #4]
 8001bfa:	e7ca      	b.n	8001b92 <_free_r+0x22>
 8001bfc:	bd38      	pop	{r3, r4, r5, pc}
 8001bfe:	bf00      	nop
 8001c00:	200001c8 	.word	0x200001c8

08001c04 <sbrk_aligned>:
 8001c04:	b570      	push	{r4, r5, r6, lr}
 8001c06:	4e0f      	ldr	r6, [pc, #60]	@ (8001c44 <sbrk_aligned+0x40>)
 8001c08:	460c      	mov	r4, r1
 8001c0a:	6831      	ldr	r1, [r6, #0]
 8001c0c:	4605      	mov	r5, r0
 8001c0e:	b911      	cbnz	r1, 8001c16 <sbrk_aligned+0x12>
 8001c10:	f000 fca4 	bl	800255c <_sbrk_r>
 8001c14:	6030      	str	r0, [r6, #0]
 8001c16:	4621      	mov	r1, r4
 8001c18:	4628      	mov	r0, r5
 8001c1a:	f000 fc9f 	bl	800255c <_sbrk_r>
 8001c1e:	1c43      	adds	r3, r0, #1
 8001c20:	d103      	bne.n	8001c2a <sbrk_aligned+0x26>
 8001c22:	f04f 34ff 	mov.w	r4, #4294967295
 8001c26:	4620      	mov	r0, r4
 8001c28:	bd70      	pop	{r4, r5, r6, pc}
 8001c2a:	1cc4      	adds	r4, r0, #3
 8001c2c:	f024 0403 	bic.w	r4, r4, #3
 8001c30:	42a0      	cmp	r0, r4
 8001c32:	d0f8      	beq.n	8001c26 <sbrk_aligned+0x22>
 8001c34:	1a21      	subs	r1, r4, r0
 8001c36:	4628      	mov	r0, r5
 8001c38:	f000 fc90 	bl	800255c <_sbrk_r>
 8001c3c:	3001      	adds	r0, #1
 8001c3e:	d1f2      	bne.n	8001c26 <sbrk_aligned+0x22>
 8001c40:	e7ef      	b.n	8001c22 <sbrk_aligned+0x1e>
 8001c42:	bf00      	nop
 8001c44:	200001c4 	.word	0x200001c4

08001c48 <_malloc_r>:
 8001c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001c4c:	1ccd      	adds	r5, r1, #3
 8001c4e:	f025 0503 	bic.w	r5, r5, #3
 8001c52:	3508      	adds	r5, #8
 8001c54:	2d0c      	cmp	r5, #12
 8001c56:	bf38      	it	cc
 8001c58:	250c      	movcc	r5, #12
 8001c5a:	2d00      	cmp	r5, #0
 8001c5c:	4606      	mov	r6, r0
 8001c5e:	db01      	blt.n	8001c64 <_malloc_r+0x1c>
 8001c60:	42a9      	cmp	r1, r5
 8001c62:	d904      	bls.n	8001c6e <_malloc_r+0x26>
 8001c64:	230c      	movs	r3, #12
 8001c66:	6033      	str	r3, [r6, #0]
 8001c68:	2000      	movs	r0, #0
 8001c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001c6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001d44 <_malloc_r+0xfc>
 8001c72:	f000 f869 	bl	8001d48 <__malloc_lock>
 8001c76:	f8d8 3000 	ldr.w	r3, [r8]
 8001c7a:	461c      	mov	r4, r3
 8001c7c:	bb44      	cbnz	r4, 8001cd0 <_malloc_r+0x88>
 8001c7e:	4629      	mov	r1, r5
 8001c80:	4630      	mov	r0, r6
 8001c82:	f7ff ffbf 	bl	8001c04 <sbrk_aligned>
 8001c86:	1c43      	adds	r3, r0, #1
 8001c88:	4604      	mov	r4, r0
 8001c8a:	d158      	bne.n	8001d3e <_malloc_r+0xf6>
 8001c8c:	f8d8 4000 	ldr.w	r4, [r8]
 8001c90:	4627      	mov	r7, r4
 8001c92:	2f00      	cmp	r7, #0
 8001c94:	d143      	bne.n	8001d1e <_malloc_r+0xd6>
 8001c96:	2c00      	cmp	r4, #0
 8001c98:	d04b      	beq.n	8001d32 <_malloc_r+0xea>
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	4639      	mov	r1, r7
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	eb04 0903 	add.w	r9, r4, r3
 8001ca4:	f000 fc5a 	bl	800255c <_sbrk_r>
 8001ca8:	4581      	cmp	r9, r0
 8001caa:	d142      	bne.n	8001d32 <_malloc_r+0xea>
 8001cac:	6821      	ldr	r1, [r4, #0]
 8001cae:	1a6d      	subs	r5, r5, r1
 8001cb0:	4629      	mov	r1, r5
 8001cb2:	4630      	mov	r0, r6
 8001cb4:	f7ff ffa6 	bl	8001c04 <sbrk_aligned>
 8001cb8:	3001      	adds	r0, #1
 8001cba:	d03a      	beq.n	8001d32 <_malloc_r+0xea>
 8001cbc:	6823      	ldr	r3, [r4, #0]
 8001cbe:	442b      	add	r3, r5
 8001cc0:	6023      	str	r3, [r4, #0]
 8001cc2:	f8d8 3000 	ldr.w	r3, [r8]
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	bb62      	cbnz	r2, 8001d24 <_malloc_r+0xdc>
 8001cca:	f8c8 7000 	str.w	r7, [r8]
 8001cce:	e00f      	b.n	8001cf0 <_malloc_r+0xa8>
 8001cd0:	6822      	ldr	r2, [r4, #0]
 8001cd2:	1b52      	subs	r2, r2, r5
 8001cd4:	d420      	bmi.n	8001d18 <_malloc_r+0xd0>
 8001cd6:	2a0b      	cmp	r2, #11
 8001cd8:	d917      	bls.n	8001d0a <_malloc_r+0xc2>
 8001cda:	1961      	adds	r1, r4, r5
 8001cdc:	42a3      	cmp	r3, r4
 8001cde:	6025      	str	r5, [r4, #0]
 8001ce0:	bf18      	it	ne
 8001ce2:	6059      	strne	r1, [r3, #4]
 8001ce4:	6863      	ldr	r3, [r4, #4]
 8001ce6:	bf08      	it	eq
 8001ce8:	f8c8 1000 	streq.w	r1, [r8]
 8001cec:	5162      	str	r2, [r4, r5]
 8001cee:	604b      	str	r3, [r1, #4]
 8001cf0:	4630      	mov	r0, r6
 8001cf2:	f000 f82f 	bl	8001d54 <__malloc_unlock>
 8001cf6:	f104 000b 	add.w	r0, r4, #11
 8001cfa:	1d23      	adds	r3, r4, #4
 8001cfc:	f020 0007 	bic.w	r0, r0, #7
 8001d00:	1ac2      	subs	r2, r0, r3
 8001d02:	bf1c      	itt	ne
 8001d04:	1a1b      	subne	r3, r3, r0
 8001d06:	50a3      	strne	r3, [r4, r2]
 8001d08:	e7af      	b.n	8001c6a <_malloc_r+0x22>
 8001d0a:	6862      	ldr	r2, [r4, #4]
 8001d0c:	42a3      	cmp	r3, r4
 8001d0e:	bf0c      	ite	eq
 8001d10:	f8c8 2000 	streq.w	r2, [r8]
 8001d14:	605a      	strne	r2, [r3, #4]
 8001d16:	e7eb      	b.n	8001cf0 <_malloc_r+0xa8>
 8001d18:	4623      	mov	r3, r4
 8001d1a:	6864      	ldr	r4, [r4, #4]
 8001d1c:	e7ae      	b.n	8001c7c <_malloc_r+0x34>
 8001d1e:	463c      	mov	r4, r7
 8001d20:	687f      	ldr	r7, [r7, #4]
 8001d22:	e7b6      	b.n	8001c92 <_malloc_r+0x4a>
 8001d24:	461a      	mov	r2, r3
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	42a3      	cmp	r3, r4
 8001d2a:	d1fb      	bne.n	8001d24 <_malloc_r+0xdc>
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	6053      	str	r3, [r2, #4]
 8001d30:	e7de      	b.n	8001cf0 <_malloc_r+0xa8>
 8001d32:	230c      	movs	r3, #12
 8001d34:	6033      	str	r3, [r6, #0]
 8001d36:	4630      	mov	r0, r6
 8001d38:	f000 f80c 	bl	8001d54 <__malloc_unlock>
 8001d3c:	e794      	b.n	8001c68 <_malloc_r+0x20>
 8001d3e:	6005      	str	r5, [r0, #0]
 8001d40:	e7d6      	b.n	8001cf0 <_malloc_r+0xa8>
 8001d42:	bf00      	nop
 8001d44:	200001c8 	.word	0x200001c8

08001d48 <__malloc_lock>:
 8001d48:	4801      	ldr	r0, [pc, #4]	@ (8001d50 <__malloc_lock+0x8>)
 8001d4a:	f7ff bf0e 	b.w	8001b6a <__retarget_lock_acquire_recursive>
 8001d4e:	bf00      	nop
 8001d50:	200001c0 	.word	0x200001c0

08001d54 <__malloc_unlock>:
 8001d54:	4801      	ldr	r0, [pc, #4]	@ (8001d5c <__malloc_unlock+0x8>)
 8001d56:	f7ff bf09 	b.w	8001b6c <__retarget_lock_release_recursive>
 8001d5a:	bf00      	nop
 8001d5c:	200001c0 	.word	0x200001c0

08001d60 <__sfputc_r>:
 8001d60:	6893      	ldr	r3, [r2, #8]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	b410      	push	{r4}
 8001d68:	6093      	str	r3, [r2, #8]
 8001d6a:	da08      	bge.n	8001d7e <__sfputc_r+0x1e>
 8001d6c:	6994      	ldr	r4, [r2, #24]
 8001d6e:	42a3      	cmp	r3, r4
 8001d70:	db01      	blt.n	8001d76 <__sfputc_r+0x16>
 8001d72:	290a      	cmp	r1, #10
 8001d74:	d103      	bne.n	8001d7e <__sfputc_r+0x1e>
 8001d76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d7a:	f7ff bde8 	b.w	800194e <__swbuf_r>
 8001d7e:	6813      	ldr	r3, [r2, #0]
 8001d80:	1c58      	adds	r0, r3, #1
 8001d82:	6010      	str	r0, [r2, #0]
 8001d84:	7019      	strb	r1, [r3, #0]
 8001d86:	4608      	mov	r0, r1
 8001d88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <__sfputs_r>:
 8001d8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d90:	4606      	mov	r6, r0
 8001d92:	460f      	mov	r7, r1
 8001d94:	4614      	mov	r4, r2
 8001d96:	18d5      	adds	r5, r2, r3
 8001d98:	42ac      	cmp	r4, r5
 8001d9a:	d101      	bne.n	8001da0 <__sfputs_r+0x12>
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	e007      	b.n	8001db0 <__sfputs_r+0x22>
 8001da0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001da4:	463a      	mov	r2, r7
 8001da6:	4630      	mov	r0, r6
 8001da8:	f7ff ffda 	bl	8001d60 <__sfputc_r>
 8001dac:	1c43      	adds	r3, r0, #1
 8001dae:	d1f3      	bne.n	8001d98 <__sfputs_r+0xa>
 8001db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001db4 <_vfiprintf_r>:
 8001db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db8:	460d      	mov	r5, r1
 8001dba:	b09d      	sub	sp, #116	@ 0x74
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	4698      	mov	r8, r3
 8001dc0:	4606      	mov	r6, r0
 8001dc2:	b118      	cbz	r0, 8001dcc <_vfiprintf_r+0x18>
 8001dc4:	6a03      	ldr	r3, [r0, #32]
 8001dc6:	b90b      	cbnz	r3, 8001dcc <_vfiprintf_r+0x18>
 8001dc8:	f7ff fcd8 	bl	800177c <__sinit>
 8001dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001dce:	07d9      	lsls	r1, r3, #31
 8001dd0:	d405      	bmi.n	8001dde <_vfiprintf_r+0x2a>
 8001dd2:	89ab      	ldrh	r3, [r5, #12]
 8001dd4:	059a      	lsls	r2, r3, #22
 8001dd6:	d402      	bmi.n	8001dde <_vfiprintf_r+0x2a>
 8001dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001dda:	f7ff fec6 	bl	8001b6a <__retarget_lock_acquire_recursive>
 8001dde:	89ab      	ldrh	r3, [r5, #12]
 8001de0:	071b      	lsls	r3, r3, #28
 8001de2:	d501      	bpl.n	8001de8 <_vfiprintf_r+0x34>
 8001de4:	692b      	ldr	r3, [r5, #16]
 8001de6:	b99b      	cbnz	r3, 8001e10 <_vfiprintf_r+0x5c>
 8001de8:	4629      	mov	r1, r5
 8001dea:	4630      	mov	r0, r6
 8001dec:	f7ff fdee 	bl	80019cc <__swsetup_r>
 8001df0:	b170      	cbz	r0, 8001e10 <_vfiprintf_r+0x5c>
 8001df2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001df4:	07dc      	lsls	r4, r3, #31
 8001df6:	d504      	bpl.n	8001e02 <_vfiprintf_r+0x4e>
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dfc:	b01d      	add	sp, #116	@ 0x74
 8001dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e02:	89ab      	ldrh	r3, [r5, #12]
 8001e04:	0598      	lsls	r0, r3, #22
 8001e06:	d4f7      	bmi.n	8001df8 <_vfiprintf_r+0x44>
 8001e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001e0a:	f7ff feaf 	bl	8001b6c <__retarget_lock_release_recursive>
 8001e0e:	e7f3      	b.n	8001df8 <_vfiprintf_r+0x44>
 8001e10:	2300      	movs	r3, #0
 8001e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e14:	2320      	movs	r3, #32
 8001e16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8001e1e:	2330      	movs	r3, #48	@ 0x30
 8001e20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001fd0 <_vfiprintf_r+0x21c>
 8001e24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001e28:	f04f 0901 	mov.w	r9, #1
 8001e2c:	4623      	mov	r3, r4
 8001e2e:	469a      	mov	sl, r3
 8001e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001e34:	b10a      	cbz	r2, 8001e3a <_vfiprintf_r+0x86>
 8001e36:	2a25      	cmp	r2, #37	@ 0x25
 8001e38:	d1f9      	bne.n	8001e2e <_vfiprintf_r+0x7a>
 8001e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8001e3e:	d00b      	beq.n	8001e58 <_vfiprintf_r+0xa4>
 8001e40:	465b      	mov	r3, fp
 8001e42:	4622      	mov	r2, r4
 8001e44:	4629      	mov	r1, r5
 8001e46:	4630      	mov	r0, r6
 8001e48:	f7ff ffa1 	bl	8001d8e <__sfputs_r>
 8001e4c:	3001      	adds	r0, #1
 8001e4e:	f000 80a7 	beq.w	8001fa0 <_vfiprintf_r+0x1ec>
 8001e52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001e54:	445a      	add	r2, fp
 8001e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8001e58:	f89a 3000 	ldrb.w	r3, [sl]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 809f 	beq.w	8001fa0 <_vfiprintf_r+0x1ec>
 8001e62:	2300      	movs	r3, #0
 8001e64:	f04f 32ff 	mov.w	r2, #4294967295
 8001e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001e6c:	f10a 0a01 	add.w	sl, sl, #1
 8001e70:	9304      	str	r3, [sp, #16]
 8001e72:	9307      	str	r3, [sp, #28]
 8001e74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001e78:	931a      	str	r3, [sp, #104]	@ 0x68
 8001e7a:	4654      	mov	r4, sl
 8001e7c:	2205      	movs	r2, #5
 8001e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e82:	4853      	ldr	r0, [pc, #332]	@ (8001fd0 <_vfiprintf_r+0x21c>)
 8001e84:	f7fe f9a4 	bl	80001d0 <memchr>
 8001e88:	9a04      	ldr	r2, [sp, #16]
 8001e8a:	b9d8      	cbnz	r0, 8001ec4 <_vfiprintf_r+0x110>
 8001e8c:	06d1      	lsls	r1, r2, #27
 8001e8e:	bf44      	itt	mi
 8001e90:	2320      	movmi	r3, #32
 8001e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e96:	0713      	lsls	r3, r2, #28
 8001e98:	bf44      	itt	mi
 8001e9a:	232b      	movmi	r3, #43	@ 0x2b
 8001e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8001ea4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ea6:	d015      	beq.n	8001ed4 <_vfiprintf_r+0x120>
 8001ea8:	9a07      	ldr	r2, [sp, #28]
 8001eaa:	4654      	mov	r4, sl
 8001eac:	2000      	movs	r0, #0
 8001eae:	f04f 0c0a 	mov.w	ip, #10
 8001eb2:	4621      	mov	r1, r4
 8001eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001eb8:	3b30      	subs	r3, #48	@ 0x30
 8001eba:	2b09      	cmp	r3, #9
 8001ebc:	d94b      	bls.n	8001f56 <_vfiprintf_r+0x1a2>
 8001ebe:	b1b0      	cbz	r0, 8001eee <_vfiprintf_r+0x13a>
 8001ec0:	9207      	str	r2, [sp, #28]
 8001ec2:	e014      	b.n	8001eee <_vfiprintf_r+0x13a>
 8001ec4:	eba0 0308 	sub.w	r3, r0, r8
 8001ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	9304      	str	r3, [sp, #16]
 8001ed0:	46a2      	mov	sl, r4
 8001ed2:	e7d2      	b.n	8001e7a <_vfiprintf_r+0xc6>
 8001ed4:	9b03      	ldr	r3, [sp, #12]
 8001ed6:	1d19      	adds	r1, r3, #4
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	9103      	str	r1, [sp, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bfbb      	ittet	lt
 8001ee0:	425b      	neglt	r3, r3
 8001ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8001ee6:	9307      	strge	r3, [sp, #28]
 8001ee8:	9307      	strlt	r3, [sp, #28]
 8001eea:	bfb8      	it	lt
 8001eec:	9204      	strlt	r2, [sp, #16]
 8001eee:	7823      	ldrb	r3, [r4, #0]
 8001ef0:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ef2:	d10a      	bne.n	8001f0a <_vfiprintf_r+0x156>
 8001ef4:	7863      	ldrb	r3, [r4, #1]
 8001ef6:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ef8:	d132      	bne.n	8001f60 <_vfiprintf_r+0x1ac>
 8001efa:	9b03      	ldr	r3, [sp, #12]
 8001efc:	1d1a      	adds	r2, r3, #4
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	9203      	str	r2, [sp, #12]
 8001f02:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001f06:	3402      	adds	r4, #2
 8001f08:	9305      	str	r3, [sp, #20]
 8001f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001fe0 <_vfiprintf_r+0x22c>
 8001f0e:	7821      	ldrb	r1, [r4, #0]
 8001f10:	2203      	movs	r2, #3
 8001f12:	4650      	mov	r0, sl
 8001f14:	f7fe f95c 	bl	80001d0 <memchr>
 8001f18:	b138      	cbz	r0, 8001f2a <_vfiprintf_r+0x176>
 8001f1a:	9b04      	ldr	r3, [sp, #16]
 8001f1c:	eba0 000a 	sub.w	r0, r0, sl
 8001f20:	2240      	movs	r2, #64	@ 0x40
 8001f22:	4082      	lsls	r2, r0
 8001f24:	4313      	orrs	r3, r2
 8001f26:	3401      	adds	r4, #1
 8001f28:	9304      	str	r3, [sp, #16]
 8001f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f2e:	4829      	ldr	r0, [pc, #164]	@ (8001fd4 <_vfiprintf_r+0x220>)
 8001f30:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001f34:	2206      	movs	r2, #6
 8001f36:	f7fe f94b 	bl	80001d0 <memchr>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d03f      	beq.n	8001fbe <_vfiprintf_r+0x20a>
 8001f3e:	4b26      	ldr	r3, [pc, #152]	@ (8001fd8 <_vfiprintf_r+0x224>)
 8001f40:	bb1b      	cbnz	r3, 8001f8a <_vfiprintf_r+0x1d6>
 8001f42:	9b03      	ldr	r3, [sp, #12]
 8001f44:	3307      	adds	r3, #7
 8001f46:	f023 0307 	bic.w	r3, r3, #7
 8001f4a:	3308      	adds	r3, #8
 8001f4c:	9303      	str	r3, [sp, #12]
 8001f4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f50:	443b      	add	r3, r7
 8001f52:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f54:	e76a      	b.n	8001e2c <_vfiprintf_r+0x78>
 8001f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8001f5a:	460c      	mov	r4, r1
 8001f5c:	2001      	movs	r0, #1
 8001f5e:	e7a8      	b.n	8001eb2 <_vfiprintf_r+0xfe>
 8001f60:	2300      	movs	r3, #0
 8001f62:	3401      	adds	r4, #1
 8001f64:	9305      	str	r3, [sp, #20]
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 0c0a 	mov.w	ip, #10
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001f72:	3a30      	subs	r2, #48	@ 0x30
 8001f74:	2a09      	cmp	r2, #9
 8001f76:	d903      	bls.n	8001f80 <_vfiprintf_r+0x1cc>
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0c6      	beq.n	8001f0a <_vfiprintf_r+0x156>
 8001f7c:	9105      	str	r1, [sp, #20]
 8001f7e:	e7c4      	b.n	8001f0a <_vfiprintf_r+0x156>
 8001f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8001f84:	4604      	mov	r4, r0
 8001f86:	2301      	movs	r3, #1
 8001f88:	e7f0      	b.n	8001f6c <_vfiprintf_r+0x1b8>
 8001f8a:	ab03      	add	r3, sp, #12
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	462a      	mov	r2, r5
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <_vfiprintf_r+0x228>)
 8001f92:	a904      	add	r1, sp, #16
 8001f94:	4630      	mov	r0, r6
 8001f96:	f3af 8000 	nop.w
 8001f9a:	4607      	mov	r7, r0
 8001f9c:	1c78      	adds	r0, r7, #1
 8001f9e:	d1d6      	bne.n	8001f4e <_vfiprintf_r+0x19a>
 8001fa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001fa2:	07d9      	lsls	r1, r3, #31
 8001fa4:	d405      	bmi.n	8001fb2 <_vfiprintf_r+0x1fe>
 8001fa6:	89ab      	ldrh	r3, [r5, #12]
 8001fa8:	059a      	lsls	r2, r3, #22
 8001faa:	d402      	bmi.n	8001fb2 <_vfiprintf_r+0x1fe>
 8001fac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001fae:	f7ff fddd 	bl	8001b6c <__retarget_lock_release_recursive>
 8001fb2:	89ab      	ldrh	r3, [r5, #12]
 8001fb4:	065b      	lsls	r3, r3, #25
 8001fb6:	f53f af1f 	bmi.w	8001df8 <_vfiprintf_r+0x44>
 8001fba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001fbc:	e71e      	b.n	8001dfc <_vfiprintf_r+0x48>
 8001fbe:	ab03      	add	r3, sp, #12
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	462a      	mov	r2, r5
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <_vfiprintf_r+0x228>)
 8001fc6:	a904      	add	r1, sp, #16
 8001fc8:	4630      	mov	r0, r6
 8001fca:	f000 f879 	bl	80020c0 <_printf_i>
 8001fce:	e7e4      	b.n	8001f9a <_vfiprintf_r+0x1e6>
 8001fd0:	080026f4 	.word	0x080026f4
 8001fd4:	080026fe 	.word	0x080026fe
 8001fd8:	00000000 	.word	0x00000000
 8001fdc:	08001d8f 	.word	0x08001d8f
 8001fe0:	080026fa 	.word	0x080026fa

08001fe4 <_printf_common>:
 8001fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001fe8:	4616      	mov	r6, r2
 8001fea:	4698      	mov	r8, r3
 8001fec:	688a      	ldr	r2, [r1, #8]
 8001fee:	690b      	ldr	r3, [r1, #16]
 8001ff0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	bfb8      	it	lt
 8001ff8:	4613      	movlt	r3, r2
 8001ffa:	6033      	str	r3, [r6, #0]
 8001ffc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002000:	4607      	mov	r7, r0
 8002002:	460c      	mov	r4, r1
 8002004:	b10a      	cbz	r2, 800200a <_printf_common+0x26>
 8002006:	3301      	adds	r3, #1
 8002008:	6033      	str	r3, [r6, #0]
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	0699      	lsls	r1, r3, #26
 800200e:	bf42      	ittt	mi
 8002010:	6833      	ldrmi	r3, [r6, #0]
 8002012:	3302      	addmi	r3, #2
 8002014:	6033      	strmi	r3, [r6, #0]
 8002016:	6825      	ldr	r5, [r4, #0]
 8002018:	f015 0506 	ands.w	r5, r5, #6
 800201c:	d106      	bne.n	800202c <_printf_common+0x48>
 800201e:	f104 0a19 	add.w	sl, r4, #25
 8002022:	68e3      	ldr	r3, [r4, #12]
 8002024:	6832      	ldr	r2, [r6, #0]
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	42ab      	cmp	r3, r5
 800202a:	dc26      	bgt.n	800207a <_printf_common+0x96>
 800202c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002030:	6822      	ldr	r2, [r4, #0]
 8002032:	3b00      	subs	r3, #0
 8002034:	bf18      	it	ne
 8002036:	2301      	movne	r3, #1
 8002038:	0692      	lsls	r2, r2, #26
 800203a:	d42b      	bmi.n	8002094 <_printf_common+0xb0>
 800203c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002040:	4641      	mov	r1, r8
 8002042:	4638      	mov	r0, r7
 8002044:	47c8      	blx	r9
 8002046:	3001      	adds	r0, #1
 8002048:	d01e      	beq.n	8002088 <_printf_common+0xa4>
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	6922      	ldr	r2, [r4, #16]
 800204e:	f003 0306 	and.w	r3, r3, #6
 8002052:	2b04      	cmp	r3, #4
 8002054:	bf02      	ittt	eq
 8002056:	68e5      	ldreq	r5, [r4, #12]
 8002058:	6833      	ldreq	r3, [r6, #0]
 800205a:	1aed      	subeq	r5, r5, r3
 800205c:	68a3      	ldr	r3, [r4, #8]
 800205e:	bf0c      	ite	eq
 8002060:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002064:	2500      	movne	r5, #0
 8002066:	4293      	cmp	r3, r2
 8002068:	bfc4      	itt	gt
 800206a:	1a9b      	subgt	r3, r3, r2
 800206c:	18ed      	addgt	r5, r5, r3
 800206e:	2600      	movs	r6, #0
 8002070:	341a      	adds	r4, #26
 8002072:	42b5      	cmp	r5, r6
 8002074:	d11a      	bne.n	80020ac <_printf_common+0xc8>
 8002076:	2000      	movs	r0, #0
 8002078:	e008      	b.n	800208c <_printf_common+0xa8>
 800207a:	2301      	movs	r3, #1
 800207c:	4652      	mov	r2, sl
 800207e:	4641      	mov	r1, r8
 8002080:	4638      	mov	r0, r7
 8002082:	47c8      	blx	r9
 8002084:	3001      	adds	r0, #1
 8002086:	d103      	bne.n	8002090 <_printf_common+0xac>
 8002088:	f04f 30ff 	mov.w	r0, #4294967295
 800208c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002090:	3501      	adds	r5, #1
 8002092:	e7c6      	b.n	8002022 <_printf_common+0x3e>
 8002094:	18e1      	adds	r1, r4, r3
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	2030      	movs	r0, #48	@ 0x30
 800209a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800209e:	4422      	add	r2, r4
 80020a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80020a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80020a8:	3302      	adds	r3, #2
 80020aa:	e7c7      	b.n	800203c <_printf_common+0x58>
 80020ac:	2301      	movs	r3, #1
 80020ae:	4622      	mov	r2, r4
 80020b0:	4641      	mov	r1, r8
 80020b2:	4638      	mov	r0, r7
 80020b4:	47c8      	blx	r9
 80020b6:	3001      	adds	r0, #1
 80020b8:	d0e6      	beq.n	8002088 <_printf_common+0xa4>
 80020ba:	3601      	adds	r6, #1
 80020bc:	e7d9      	b.n	8002072 <_printf_common+0x8e>
	...

080020c0 <_printf_i>:
 80020c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020c4:	7e0f      	ldrb	r7, [r1, #24]
 80020c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80020c8:	2f78      	cmp	r7, #120	@ 0x78
 80020ca:	4691      	mov	r9, r2
 80020cc:	4680      	mov	r8, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	469a      	mov	sl, r3
 80020d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80020d6:	d807      	bhi.n	80020e8 <_printf_i+0x28>
 80020d8:	2f62      	cmp	r7, #98	@ 0x62
 80020da:	d80a      	bhi.n	80020f2 <_printf_i+0x32>
 80020dc:	2f00      	cmp	r7, #0
 80020de:	f000 80d1 	beq.w	8002284 <_printf_i+0x1c4>
 80020e2:	2f58      	cmp	r7, #88	@ 0x58
 80020e4:	f000 80b8 	beq.w	8002258 <_printf_i+0x198>
 80020e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80020f0:	e03a      	b.n	8002168 <_printf_i+0xa8>
 80020f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80020f6:	2b15      	cmp	r3, #21
 80020f8:	d8f6      	bhi.n	80020e8 <_printf_i+0x28>
 80020fa:	a101      	add	r1, pc, #4	@ (adr r1, 8002100 <_printf_i+0x40>)
 80020fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002100:	08002159 	.word	0x08002159
 8002104:	0800216d 	.word	0x0800216d
 8002108:	080020e9 	.word	0x080020e9
 800210c:	080020e9 	.word	0x080020e9
 8002110:	080020e9 	.word	0x080020e9
 8002114:	080020e9 	.word	0x080020e9
 8002118:	0800216d 	.word	0x0800216d
 800211c:	080020e9 	.word	0x080020e9
 8002120:	080020e9 	.word	0x080020e9
 8002124:	080020e9 	.word	0x080020e9
 8002128:	080020e9 	.word	0x080020e9
 800212c:	0800226b 	.word	0x0800226b
 8002130:	08002197 	.word	0x08002197
 8002134:	08002225 	.word	0x08002225
 8002138:	080020e9 	.word	0x080020e9
 800213c:	080020e9 	.word	0x080020e9
 8002140:	0800228d 	.word	0x0800228d
 8002144:	080020e9 	.word	0x080020e9
 8002148:	08002197 	.word	0x08002197
 800214c:	080020e9 	.word	0x080020e9
 8002150:	080020e9 	.word	0x080020e9
 8002154:	0800222d 	.word	0x0800222d
 8002158:	6833      	ldr	r3, [r6, #0]
 800215a:	1d1a      	adds	r2, r3, #4
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6032      	str	r2, [r6, #0]
 8002160:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002164:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002168:	2301      	movs	r3, #1
 800216a:	e09c      	b.n	80022a6 <_printf_i+0x1e6>
 800216c:	6833      	ldr	r3, [r6, #0]
 800216e:	6820      	ldr	r0, [r4, #0]
 8002170:	1d19      	adds	r1, r3, #4
 8002172:	6031      	str	r1, [r6, #0]
 8002174:	0606      	lsls	r6, r0, #24
 8002176:	d501      	bpl.n	800217c <_printf_i+0xbc>
 8002178:	681d      	ldr	r5, [r3, #0]
 800217a:	e003      	b.n	8002184 <_printf_i+0xc4>
 800217c:	0645      	lsls	r5, r0, #25
 800217e:	d5fb      	bpl.n	8002178 <_printf_i+0xb8>
 8002180:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002184:	2d00      	cmp	r5, #0
 8002186:	da03      	bge.n	8002190 <_printf_i+0xd0>
 8002188:	232d      	movs	r3, #45	@ 0x2d
 800218a:	426d      	negs	r5, r5
 800218c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002190:	4858      	ldr	r0, [pc, #352]	@ (80022f4 <_printf_i+0x234>)
 8002192:	230a      	movs	r3, #10
 8002194:	e011      	b.n	80021ba <_printf_i+0xfa>
 8002196:	6821      	ldr	r1, [r4, #0]
 8002198:	6833      	ldr	r3, [r6, #0]
 800219a:	0608      	lsls	r0, r1, #24
 800219c:	f853 5b04 	ldr.w	r5, [r3], #4
 80021a0:	d402      	bmi.n	80021a8 <_printf_i+0xe8>
 80021a2:	0649      	lsls	r1, r1, #25
 80021a4:	bf48      	it	mi
 80021a6:	b2ad      	uxthmi	r5, r5
 80021a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80021aa:	4852      	ldr	r0, [pc, #328]	@ (80022f4 <_printf_i+0x234>)
 80021ac:	6033      	str	r3, [r6, #0]
 80021ae:	bf14      	ite	ne
 80021b0:	230a      	movne	r3, #10
 80021b2:	2308      	moveq	r3, #8
 80021b4:	2100      	movs	r1, #0
 80021b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80021ba:	6866      	ldr	r6, [r4, #4]
 80021bc:	60a6      	str	r6, [r4, #8]
 80021be:	2e00      	cmp	r6, #0
 80021c0:	db05      	blt.n	80021ce <_printf_i+0x10e>
 80021c2:	6821      	ldr	r1, [r4, #0]
 80021c4:	432e      	orrs	r6, r5
 80021c6:	f021 0104 	bic.w	r1, r1, #4
 80021ca:	6021      	str	r1, [r4, #0]
 80021cc:	d04b      	beq.n	8002266 <_printf_i+0x1a6>
 80021ce:	4616      	mov	r6, r2
 80021d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80021d4:	fb03 5711 	mls	r7, r3, r1, r5
 80021d8:	5dc7      	ldrb	r7, [r0, r7]
 80021da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80021de:	462f      	mov	r7, r5
 80021e0:	42bb      	cmp	r3, r7
 80021e2:	460d      	mov	r5, r1
 80021e4:	d9f4      	bls.n	80021d0 <_printf_i+0x110>
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d10b      	bne.n	8002202 <_printf_i+0x142>
 80021ea:	6823      	ldr	r3, [r4, #0]
 80021ec:	07df      	lsls	r7, r3, #31
 80021ee:	d508      	bpl.n	8002202 <_printf_i+0x142>
 80021f0:	6923      	ldr	r3, [r4, #16]
 80021f2:	6861      	ldr	r1, [r4, #4]
 80021f4:	4299      	cmp	r1, r3
 80021f6:	bfde      	ittt	le
 80021f8:	2330      	movle	r3, #48	@ 0x30
 80021fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80021fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002202:	1b92      	subs	r2, r2, r6
 8002204:	6122      	str	r2, [r4, #16]
 8002206:	f8cd a000 	str.w	sl, [sp]
 800220a:	464b      	mov	r3, r9
 800220c:	aa03      	add	r2, sp, #12
 800220e:	4621      	mov	r1, r4
 8002210:	4640      	mov	r0, r8
 8002212:	f7ff fee7 	bl	8001fe4 <_printf_common>
 8002216:	3001      	adds	r0, #1
 8002218:	d14a      	bne.n	80022b0 <_printf_i+0x1f0>
 800221a:	f04f 30ff 	mov.w	r0, #4294967295
 800221e:	b004      	add	sp, #16
 8002220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002224:	6823      	ldr	r3, [r4, #0]
 8002226:	f043 0320 	orr.w	r3, r3, #32
 800222a:	6023      	str	r3, [r4, #0]
 800222c:	4832      	ldr	r0, [pc, #200]	@ (80022f8 <_printf_i+0x238>)
 800222e:	2778      	movs	r7, #120	@ 0x78
 8002230:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	6831      	ldr	r1, [r6, #0]
 8002238:	061f      	lsls	r7, r3, #24
 800223a:	f851 5b04 	ldr.w	r5, [r1], #4
 800223e:	d402      	bmi.n	8002246 <_printf_i+0x186>
 8002240:	065f      	lsls	r7, r3, #25
 8002242:	bf48      	it	mi
 8002244:	b2ad      	uxthmi	r5, r5
 8002246:	6031      	str	r1, [r6, #0]
 8002248:	07d9      	lsls	r1, r3, #31
 800224a:	bf44      	itt	mi
 800224c:	f043 0320 	orrmi.w	r3, r3, #32
 8002250:	6023      	strmi	r3, [r4, #0]
 8002252:	b11d      	cbz	r5, 800225c <_printf_i+0x19c>
 8002254:	2310      	movs	r3, #16
 8002256:	e7ad      	b.n	80021b4 <_printf_i+0xf4>
 8002258:	4826      	ldr	r0, [pc, #152]	@ (80022f4 <_printf_i+0x234>)
 800225a:	e7e9      	b.n	8002230 <_printf_i+0x170>
 800225c:	6823      	ldr	r3, [r4, #0]
 800225e:	f023 0320 	bic.w	r3, r3, #32
 8002262:	6023      	str	r3, [r4, #0]
 8002264:	e7f6      	b.n	8002254 <_printf_i+0x194>
 8002266:	4616      	mov	r6, r2
 8002268:	e7bd      	b.n	80021e6 <_printf_i+0x126>
 800226a:	6833      	ldr	r3, [r6, #0]
 800226c:	6825      	ldr	r5, [r4, #0]
 800226e:	6961      	ldr	r1, [r4, #20]
 8002270:	1d18      	adds	r0, r3, #4
 8002272:	6030      	str	r0, [r6, #0]
 8002274:	062e      	lsls	r6, r5, #24
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	d501      	bpl.n	800227e <_printf_i+0x1be>
 800227a:	6019      	str	r1, [r3, #0]
 800227c:	e002      	b.n	8002284 <_printf_i+0x1c4>
 800227e:	0668      	lsls	r0, r5, #25
 8002280:	d5fb      	bpl.n	800227a <_printf_i+0x1ba>
 8002282:	8019      	strh	r1, [r3, #0]
 8002284:	2300      	movs	r3, #0
 8002286:	6123      	str	r3, [r4, #16]
 8002288:	4616      	mov	r6, r2
 800228a:	e7bc      	b.n	8002206 <_printf_i+0x146>
 800228c:	6833      	ldr	r3, [r6, #0]
 800228e:	1d1a      	adds	r2, r3, #4
 8002290:	6032      	str	r2, [r6, #0]
 8002292:	681e      	ldr	r6, [r3, #0]
 8002294:	6862      	ldr	r2, [r4, #4]
 8002296:	2100      	movs	r1, #0
 8002298:	4630      	mov	r0, r6
 800229a:	f7fd ff99 	bl	80001d0 <memchr>
 800229e:	b108      	cbz	r0, 80022a4 <_printf_i+0x1e4>
 80022a0:	1b80      	subs	r0, r0, r6
 80022a2:	6060      	str	r0, [r4, #4]
 80022a4:	6863      	ldr	r3, [r4, #4]
 80022a6:	6123      	str	r3, [r4, #16]
 80022a8:	2300      	movs	r3, #0
 80022aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022ae:	e7aa      	b.n	8002206 <_printf_i+0x146>
 80022b0:	6923      	ldr	r3, [r4, #16]
 80022b2:	4632      	mov	r2, r6
 80022b4:	4649      	mov	r1, r9
 80022b6:	4640      	mov	r0, r8
 80022b8:	47d0      	blx	sl
 80022ba:	3001      	adds	r0, #1
 80022bc:	d0ad      	beq.n	800221a <_printf_i+0x15a>
 80022be:	6823      	ldr	r3, [r4, #0]
 80022c0:	079b      	lsls	r3, r3, #30
 80022c2:	d413      	bmi.n	80022ec <_printf_i+0x22c>
 80022c4:	68e0      	ldr	r0, [r4, #12]
 80022c6:	9b03      	ldr	r3, [sp, #12]
 80022c8:	4298      	cmp	r0, r3
 80022ca:	bfb8      	it	lt
 80022cc:	4618      	movlt	r0, r3
 80022ce:	e7a6      	b.n	800221e <_printf_i+0x15e>
 80022d0:	2301      	movs	r3, #1
 80022d2:	4632      	mov	r2, r6
 80022d4:	4649      	mov	r1, r9
 80022d6:	4640      	mov	r0, r8
 80022d8:	47d0      	blx	sl
 80022da:	3001      	adds	r0, #1
 80022dc:	d09d      	beq.n	800221a <_printf_i+0x15a>
 80022de:	3501      	adds	r5, #1
 80022e0:	68e3      	ldr	r3, [r4, #12]
 80022e2:	9903      	ldr	r1, [sp, #12]
 80022e4:	1a5b      	subs	r3, r3, r1
 80022e6:	42ab      	cmp	r3, r5
 80022e8:	dcf2      	bgt.n	80022d0 <_printf_i+0x210>
 80022ea:	e7eb      	b.n	80022c4 <_printf_i+0x204>
 80022ec:	2500      	movs	r5, #0
 80022ee:	f104 0619 	add.w	r6, r4, #25
 80022f2:	e7f5      	b.n	80022e0 <_printf_i+0x220>
 80022f4:	08002705 	.word	0x08002705
 80022f8:	08002716 	.word	0x08002716

080022fc <__sflush_r>:
 80022fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002304:	0716      	lsls	r6, r2, #28
 8002306:	4605      	mov	r5, r0
 8002308:	460c      	mov	r4, r1
 800230a:	d454      	bmi.n	80023b6 <__sflush_r+0xba>
 800230c:	684b      	ldr	r3, [r1, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	dc02      	bgt.n	8002318 <__sflush_r+0x1c>
 8002312:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002314:	2b00      	cmp	r3, #0
 8002316:	dd48      	ble.n	80023aa <__sflush_r+0xae>
 8002318:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800231a:	2e00      	cmp	r6, #0
 800231c:	d045      	beq.n	80023aa <__sflush_r+0xae>
 800231e:	2300      	movs	r3, #0
 8002320:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002324:	682f      	ldr	r7, [r5, #0]
 8002326:	6a21      	ldr	r1, [r4, #32]
 8002328:	602b      	str	r3, [r5, #0]
 800232a:	d030      	beq.n	800238e <__sflush_r+0x92>
 800232c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800232e:	89a3      	ldrh	r3, [r4, #12]
 8002330:	0759      	lsls	r1, r3, #29
 8002332:	d505      	bpl.n	8002340 <__sflush_r+0x44>
 8002334:	6863      	ldr	r3, [r4, #4]
 8002336:	1ad2      	subs	r2, r2, r3
 8002338:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800233a:	b10b      	cbz	r3, 8002340 <__sflush_r+0x44>
 800233c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800233e:	1ad2      	subs	r2, r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002344:	6a21      	ldr	r1, [r4, #32]
 8002346:	4628      	mov	r0, r5
 8002348:	47b0      	blx	r6
 800234a:	1c43      	adds	r3, r0, #1
 800234c:	89a3      	ldrh	r3, [r4, #12]
 800234e:	d106      	bne.n	800235e <__sflush_r+0x62>
 8002350:	6829      	ldr	r1, [r5, #0]
 8002352:	291d      	cmp	r1, #29
 8002354:	d82b      	bhi.n	80023ae <__sflush_r+0xb2>
 8002356:	4a2a      	ldr	r2, [pc, #168]	@ (8002400 <__sflush_r+0x104>)
 8002358:	40ca      	lsrs	r2, r1
 800235a:	07d6      	lsls	r6, r2, #31
 800235c:	d527      	bpl.n	80023ae <__sflush_r+0xb2>
 800235e:	2200      	movs	r2, #0
 8002360:	6062      	str	r2, [r4, #4]
 8002362:	04d9      	lsls	r1, r3, #19
 8002364:	6922      	ldr	r2, [r4, #16]
 8002366:	6022      	str	r2, [r4, #0]
 8002368:	d504      	bpl.n	8002374 <__sflush_r+0x78>
 800236a:	1c42      	adds	r2, r0, #1
 800236c:	d101      	bne.n	8002372 <__sflush_r+0x76>
 800236e:	682b      	ldr	r3, [r5, #0]
 8002370:	b903      	cbnz	r3, 8002374 <__sflush_r+0x78>
 8002372:	6560      	str	r0, [r4, #84]	@ 0x54
 8002374:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002376:	602f      	str	r7, [r5, #0]
 8002378:	b1b9      	cbz	r1, 80023aa <__sflush_r+0xae>
 800237a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800237e:	4299      	cmp	r1, r3
 8002380:	d002      	beq.n	8002388 <__sflush_r+0x8c>
 8002382:	4628      	mov	r0, r5
 8002384:	f7ff fbf4 	bl	8001b70 <_free_r>
 8002388:	2300      	movs	r3, #0
 800238a:	6363      	str	r3, [r4, #52]	@ 0x34
 800238c:	e00d      	b.n	80023aa <__sflush_r+0xae>
 800238e:	2301      	movs	r3, #1
 8002390:	4628      	mov	r0, r5
 8002392:	47b0      	blx	r6
 8002394:	4602      	mov	r2, r0
 8002396:	1c50      	adds	r0, r2, #1
 8002398:	d1c9      	bne.n	800232e <__sflush_r+0x32>
 800239a:	682b      	ldr	r3, [r5, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0c6      	beq.n	800232e <__sflush_r+0x32>
 80023a0:	2b1d      	cmp	r3, #29
 80023a2:	d001      	beq.n	80023a8 <__sflush_r+0xac>
 80023a4:	2b16      	cmp	r3, #22
 80023a6:	d11e      	bne.n	80023e6 <__sflush_r+0xea>
 80023a8:	602f      	str	r7, [r5, #0]
 80023aa:	2000      	movs	r0, #0
 80023ac:	e022      	b.n	80023f4 <__sflush_r+0xf8>
 80023ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	e01b      	b.n	80023ee <__sflush_r+0xf2>
 80023b6:	690f      	ldr	r7, [r1, #16]
 80023b8:	2f00      	cmp	r7, #0
 80023ba:	d0f6      	beq.n	80023aa <__sflush_r+0xae>
 80023bc:	0793      	lsls	r3, r2, #30
 80023be:	680e      	ldr	r6, [r1, #0]
 80023c0:	bf08      	it	eq
 80023c2:	694b      	ldreq	r3, [r1, #20]
 80023c4:	600f      	str	r7, [r1, #0]
 80023c6:	bf18      	it	ne
 80023c8:	2300      	movne	r3, #0
 80023ca:	eba6 0807 	sub.w	r8, r6, r7
 80023ce:	608b      	str	r3, [r1, #8]
 80023d0:	f1b8 0f00 	cmp.w	r8, #0
 80023d4:	dde9      	ble.n	80023aa <__sflush_r+0xae>
 80023d6:	6a21      	ldr	r1, [r4, #32]
 80023d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80023da:	4643      	mov	r3, r8
 80023dc:	463a      	mov	r2, r7
 80023de:	4628      	mov	r0, r5
 80023e0:	47b0      	blx	r6
 80023e2:	2800      	cmp	r0, #0
 80023e4:	dc08      	bgt.n	80023f8 <__sflush_r+0xfc>
 80023e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80023ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023ee:	81a3      	strh	r3, [r4, #12]
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f8:	4407      	add	r7, r0
 80023fa:	eba8 0800 	sub.w	r8, r8, r0
 80023fe:	e7e7      	b.n	80023d0 <__sflush_r+0xd4>
 8002400:	20400001 	.word	0x20400001

08002404 <_fflush_r>:
 8002404:	b538      	push	{r3, r4, r5, lr}
 8002406:	690b      	ldr	r3, [r1, #16]
 8002408:	4605      	mov	r5, r0
 800240a:	460c      	mov	r4, r1
 800240c:	b913      	cbnz	r3, 8002414 <_fflush_r+0x10>
 800240e:	2500      	movs	r5, #0
 8002410:	4628      	mov	r0, r5
 8002412:	bd38      	pop	{r3, r4, r5, pc}
 8002414:	b118      	cbz	r0, 800241e <_fflush_r+0x1a>
 8002416:	6a03      	ldr	r3, [r0, #32]
 8002418:	b90b      	cbnz	r3, 800241e <_fflush_r+0x1a>
 800241a:	f7ff f9af 	bl	800177c <__sinit>
 800241e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0f3      	beq.n	800240e <_fflush_r+0xa>
 8002426:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002428:	07d0      	lsls	r0, r2, #31
 800242a:	d404      	bmi.n	8002436 <_fflush_r+0x32>
 800242c:	0599      	lsls	r1, r3, #22
 800242e:	d402      	bmi.n	8002436 <_fflush_r+0x32>
 8002430:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002432:	f7ff fb9a 	bl	8001b6a <__retarget_lock_acquire_recursive>
 8002436:	4628      	mov	r0, r5
 8002438:	4621      	mov	r1, r4
 800243a:	f7ff ff5f 	bl	80022fc <__sflush_r>
 800243e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002440:	07da      	lsls	r2, r3, #31
 8002442:	4605      	mov	r5, r0
 8002444:	d4e4      	bmi.n	8002410 <_fflush_r+0xc>
 8002446:	89a3      	ldrh	r3, [r4, #12]
 8002448:	059b      	lsls	r3, r3, #22
 800244a:	d4e1      	bmi.n	8002410 <_fflush_r+0xc>
 800244c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800244e:	f7ff fb8d 	bl	8001b6c <__retarget_lock_release_recursive>
 8002452:	e7dd      	b.n	8002410 <_fflush_r+0xc>

08002454 <__swhatbuf_r>:
 8002454:	b570      	push	{r4, r5, r6, lr}
 8002456:	460c      	mov	r4, r1
 8002458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800245c:	2900      	cmp	r1, #0
 800245e:	b096      	sub	sp, #88	@ 0x58
 8002460:	4615      	mov	r5, r2
 8002462:	461e      	mov	r6, r3
 8002464:	da0d      	bge.n	8002482 <__swhatbuf_r+0x2e>
 8002466:	89a3      	ldrh	r3, [r4, #12]
 8002468:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800246c:	f04f 0100 	mov.w	r1, #0
 8002470:	bf14      	ite	ne
 8002472:	2340      	movne	r3, #64	@ 0x40
 8002474:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002478:	2000      	movs	r0, #0
 800247a:	6031      	str	r1, [r6, #0]
 800247c:	602b      	str	r3, [r5, #0]
 800247e:	b016      	add	sp, #88	@ 0x58
 8002480:	bd70      	pop	{r4, r5, r6, pc}
 8002482:	466a      	mov	r2, sp
 8002484:	f000 f848 	bl	8002518 <_fstat_r>
 8002488:	2800      	cmp	r0, #0
 800248a:	dbec      	blt.n	8002466 <__swhatbuf_r+0x12>
 800248c:	9901      	ldr	r1, [sp, #4]
 800248e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002492:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002496:	4259      	negs	r1, r3
 8002498:	4159      	adcs	r1, r3
 800249a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800249e:	e7eb      	b.n	8002478 <__swhatbuf_r+0x24>

080024a0 <__smakebuf_r>:
 80024a0:	898b      	ldrh	r3, [r1, #12]
 80024a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024a4:	079d      	lsls	r5, r3, #30
 80024a6:	4606      	mov	r6, r0
 80024a8:	460c      	mov	r4, r1
 80024aa:	d507      	bpl.n	80024bc <__smakebuf_r+0x1c>
 80024ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80024b0:	6023      	str	r3, [r4, #0]
 80024b2:	6123      	str	r3, [r4, #16]
 80024b4:	2301      	movs	r3, #1
 80024b6:	6163      	str	r3, [r4, #20]
 80024b8:	b003      	add	sp, #12
 80024ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024bc:	ab01      	add	r3, sp, #4
 80024be:	466a      	mov	r2, sp
 80024c0:	f7ff ffc8 	bl	8002454 <__swhatbuf_r>
 80024c4:	9f00      	ldr	r7, [sp, #0]
 80024c6:	4605      	mov	r5, r0
 80024c8:	4639      	mov	r1, r7
 80024ca:	4630      	mov	r0, r6
 80024cc:	f7ff fbbc 	bl	8001c48 <_malloc_r>
 80024d0:	b948      	cbnz	r0, 80024e6 <__smakebuf_r+0x46>
 80024d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024d6:	059a      	lsls	r2, r3, #22
 80024d8:	d4ee      	bmi.n	80024b8 <__smakebuf_r+0x18>
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	81a3      	strh	r3, [r4, #12]
 80024e4:	e7e2      	b.n	80024ac <__smakebuf_r+0xc>
 80024e6:	89a3      	ldrh	r3, [r4, #12]
 80024e8:	6020      	str	r0, [r4, #0]
 80024ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024ee:	81a3      	strh	r3, [r4, #12]
 80024f0:	9b01      	ldr	r3, [sp, #4]
 80024f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80024f6:	b15b      	cbz	r3, 8002510 <__smakebuf_r+0x70>
 80024f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80024fc:	4630      	mov	r0, r6
 80024fe:	f000 f81d 	bl	800253c <_isatty_r>
 8002502:	b128      	cbz	r0, 8002510 <__smakebuf_r+0x70>
 8002504:	89a3      	ldrh	r3, [r4, #12]
 8002506:	f023 0303 	bic.w	r3, r3, #3
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	81a3      	strh	r3, [r4, #12]
 8002510:	89a3      	ldrh	r3, [r4, #12]
 8002512:	431d      	orrs	r5, r3
 8002514:	81a5      	strh	r5, [r4, #12]
 8002516:	e7cf      	b.n	80024b8 <__smakebuf_r+0x18>

08002518 <_fstat_r>:
 8002518:	b538      	push	{r3, r4, r5, lr}
 800251a:	4d07      	ldr	r5, [pc, #28]	@ (8002538 <_fstat_r+0x20>)
 800251c:	2300      	movs	r3, #0
 800251e:	4604      	mov	r4, r0
 8002520:	4608      	mov	r0, r1
 8002522:	4611      	mov	r1, r2
 8002524:	602b      	str	r3, [r5, #0]
 8002526:	f7ff f814 	bl	8001552 <_fstat>
 800252a:	1c43      	adds	r3, r0, #1
 800252c:	d102      	bne.n	8002534 <_fstat_r+0x1c>
 800252e:	682b      	ldr	r3, [r5, #0]
 8002530:	b103      	cbz	r3, 8002534 <_fstat_r+0x1c>
 8002532:	6023      	str	r3, [r4, #0]
 8002534:	bd38      	pop	{r3, r4, r5, pc}
 8002536:	bf00      	nop
 8002538:	200001bc 	.word	0x200001bc

0800253c <_isatty_r>:
 800253c:	b538      	push	{r3, r4, r5, lr}
 800253e:	4d06      	ldr	r5, [pc, #24]	@ (8002558 <_isatty_r+0x1c>)
 8002540:	2300      	movs	r3, #0
 8002542:	4604      	mov	r4, r0
 8002544:	4608      	mov	r0, r1
 8002546:	602b      	str	r3, [r5, #0]
 8002548:	f7ff f813 	bl	8001572 <_isatty>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d102      	bne.n	8002556 <_isatty_r+0x1a>
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	b103      	cbz	r3, 8002556 <_isatty_r+0x1a>
 8002554:	6023      	str	r3, [r4, #0]
 8002556:	bd38      	pop	{r3, r4, r5, pc}
 8002558:	200001bc 	.word	0x200001bc

0800255c <_sbrk_r>:
 800255c:	b538      	push	{r3, r4, r5, lr}
 800255e:	4d06      	ldr	r5, [pc, #24]	@ (8002578 <_sbrk_r+0x1c>)
 8002560:	2300      	movs	r3, #0
 8002562:	4604      	mov	r4, r0
 8002564:	4608      	mov	r0, r1
 8002566:	602b      	str	r3, [r5, #0]
 8002568:	f7ff f81c 	bl	80015a4 <_sbrk>
 800256c:	1c43      	adds	r3, r0, #1
 800256e:	d102      	bne.n	8002576 <_sbrk_r+0x1a>
 8002570:	682b      	ldr	r3, [r5, #0]
 8002572:	b103      	cbz	r3, 8002576 <_sbrk_r+0x1a>
 8002574:	6023      	str	r3, [r4, #0]
 8002576:	bd38      	pop	{r3, r4, r5, pc}
 8002578:	200001bc 	.word	0x200001bc

0800257c <_init>:
 800257c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800257e:	bf00      	nop
 8002580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002582:	bc08      	pop	{r3}
 8002584:	469e      	mov	lr, r3
 8002586:	4770      	bx	lr

08002588 <_fini>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr
