#include "stm32f4xx_cus_spi.h"

void SPI_PERIPHERAL_ENABLE(SPI_HandleTypedef *spi_handle, uint8_t EN) {
	if (EN == HIGH) {
		spi_handle->SPIx->CR1 |= (HIGH << Shift_6_pos);
	} else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_6_pos);
	}
}

void SPI_SSI_CONFIG(SPI_HandleTypedef *spi_handle, uint8_t EN) {
	if (EN == HIGH) {
		spi_handle->SPIx->CR1 |= (HIGH << Shift_8_pos);
	} else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_8_pos);
	}
}

void SPI_SSOE_CONFIG(SPI_HandleTypedef *spi_handle, uint8_t EN) {
	// Hardware output enable
	if (EN == HIGH) {
		spi_handle->SPIx->CR2 |= (HIGH << Shift_2_pos);
	} else {
		spi_handle->SPIx->CR2 &= ~(HIGH << Shift_2_pos);
	}
}

uint8_t SPI_GetFlagStatus(SPI_HandleTypedef *spi_handle, uint8_t flag) {
	// Wait until BSY=0
	while ((spi_handle->SPIx->SR >> flag) & 0x1)
		;
}

void SPI_INIT(SPI_HandleTypedef *spi_handle) {
	if (spi_handle->SPIx == SPI1) {
		SPI1_EN();
	} else if (spi_handle->SPIx == SPI2) {
		SPI2_EN();
	} else if (spi_handle->SPIx == SPI3) {
		SPI3_EN();
	} else if (spi_handle->SPIx == SPI4) {
		SPI4_EN();
	} else if (spi_handle->SPIx == SPI5) {
		SPI5_EN();
	} else if (spi_handle->SPIx == SPI6) {
		SPI6_EN();
	}

	uint32_t tempreg = 0;

	// Master/Slave
	if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
		tempreg |= (HIGH << Shift_2_pos); // Set MSTR bit for master
	}

	// Simplex mode RX: we need to configure this because the communication happens only when master produces the clock, the clock happens when MOSI line has the data
	if (spi_handle->spi_data_direction == SPI_SIMPLEX_MODE_RX) {
		tempreg &= ~(HIGH << Shift_15_pos);
		tempreg |= (HIGH << Shift_10_pos);
	}
	// Simplex mode TX: just remove the MISO line in full duplex mode

	// Half duplex mode:
	// In master mode, the MOSI pin is used while the MISO pin is used in slave mode.
	else if (spi_handle->spi_data_direction == SPI_HALF_DUPLEX_MODE) {
		tempreg &= ~(HIGH << Shift_15_pos);
		tempreg |= (HIGH << Shift_15_pos);
	}
	// Full duplex mode or Simplex mode TX
	else {
		tempreg &= ~(HIGH << Shift_15_pos);
		tempreg &= ~(HIGH << Shift_10_pos);
	}

	// Configure baud rate
	tempreg |= (spi_handle->spi_sclk_prescaler << Shift_3_pos);

	// Select data frame
	tempreg |= (spi_handle->spi_frame_format << Shift_11_pos);

	// Configure CPOL and CPHA
	//CPOL
	tempreg |= (spi_handle->spi_clock_polarity << Shift_1_pos);

	// CPHA
	tempreg |= (spi_handle->spi_clock_phase << Shift_0_pos);

	// Software slave management
	// Software
	if (spi_handle->spi_ssm == SPI_SOFTWARE_SLAVE_EN) {
		tempreg |= (HIGH << Shift_9_pos);
		if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
			// Internal slave select HIGH
			SPI_SSI_CONFIG(spi_handle, HIGH);
		}
	} else {
		// Hardware slave management
		tempreg &= ~(HIGH << Shift_9_pos); // Clear SSM bit

	}

	spi_handle->SPIx->CR1 = tempreg;
}

void SPI_SEND(SPI_HandleTypedef *spi_handle, uint8_t *txBuffer, uint32_t len) {
	if (spi_handle->spi_data_direction == SPI_HALF_DUPLEX_MODE) {
		// If this is half duplex mode then want to sending data, then this is send only
		spi_handle->SPIx->CR1 |= (HIGH << Shift_14_pos);
	}

	while (len > 0) {

		// Wait for TXE is empty
		while (!((spi_handle->SPIx->SR >> Shift_1_pos) & 0x1))
			;
		if (spi_handle->spi_frame_format == SPI_8_BIT_FRAME_FORMAT) {
			spi_handle->SPIx->DR = *txBuffer;
			len--;
			txBuffer++;
		} else if (spi_handle->spi_frame_format == SPI_16_BIT_FRAME_FORMAT) {
			spi_handle->SPIx->DR = *(uint16_t*) txBuffer;
			len--;
			len--;
			(uint16_t*) txBuffer++;
		}

	}

}
