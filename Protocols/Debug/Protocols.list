
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004878  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08004a08  08004a08  00005a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004dac  08004dac  000061c8  2**0
                  CONTENTS
  4 .ARM          00000008  08004dac  08004dac  00005dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004db4  08004db4  000061c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004db4  08004db4  00005db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004db8  08004db8  00005db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  08004dbc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000061c8  2**0
                  CONTENTS
 10 .bss          000001ec  200001c8  200001c8  000061c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003b4  200003b4  000061c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000061c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000021d6  00000000  00000000  000061f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000079c  00000000  00000000  000083ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000248  00000000  00000000  00008b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000019a  00000000  00000000  00008db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003dbb  00000000  00000000  00008f52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000038c6  00000000  00000000  0000cd0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cc57  00000000  00000000  000105d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001d22a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000017f4  00000000  00000000  0001d270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0001ea64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001c8 	.word	0x200001c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049f0 	.word	0x080049f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	080049f0 	.word	0x080049f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 8000ba8:	b4b0      	push	{r4, r5, r7}
 8000baa:	b08f      	sub	sp, #60	@ 0x3c
 8000bac:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <Get_APB1_Clock_Speed+0xb8>)
 8000bb0:	f107 0410 	add.w	r4, r7, #16
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 8000bc2:	4b28      	ldr	r3, [pc, #160]	@ (8000c64 <Get_APB1_Clock_Speed+0xbc>)
 8000bc4:	463c      	mov	r4, r7
 8000bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 8000bcc:	4b26      	ldr	r3, [pc, #152]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	0a9b      	lsrs	r3, r3, #10
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 8000c00:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d908      	bls.n	8000c1a <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 8000c08:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000c0c:	3b08      	subs	r3, #8
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	3338      	adds	r3, #56	@ 0x38
 8000c12:	443b      	add	r3, r7
 8000c14:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000c18:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 8000c1e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d908      	bls.n	8000c38 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 8000c26:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	3338      	adds	r3, #56	@ 0x38
 8000c30:	443b      	add	r3, r7
 8000c32:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000c36:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000c38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000c40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <Get_APB1_Clock_Speed+0xc4>)
 8000c44:	fb92 f2f3 	sdiv	r2, r2, r3
 8000c48:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <Get_APB1_Clock_Speed+0xc8>)
 8000c52:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 8000c54:	bf00      	nop
 8000c56:	373c      	adds	r7, #60	@ 0x3c
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bcb0      	pop	{r4, r5, r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	08004a08 	.word	0x08004a08
 8000c64:	08004a28 	.word	0x08004a28
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	00f42400 	.word	0x00f42400
 8000c70:	200001e4 	.word	0x200001e4

08000c74 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a90      	ldr	r2, [pc, #576]	@ (8000ec4 <GPIO_INIT+0x250>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d106      	bne.n	8000c94 <GPIO_INIT+0x20>
		GPIOA_EN();
 8000c86:	4b90      	ldr	r3, [pc, #576]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a8f      	ldr	r2, [pc, #572]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	e05e      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a8c      	ldr	r2, [pc, #560]	@ (8000ecc <GPIO_INIT+0x258>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d106      	bne.n	8000cac <GPIO_INIT+0x38>
		GPIOB_EN();
 8000c9e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a89      	ldr	r2, [pc, #548]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	e052      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a87      	ldr	r2, [pc, #540]	@ (8000ed0 <GPIO_INIT+0x25c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d106      	bne.n	8000cc4 <GPIO_INIT+0x50>
		GPIOC_EN();
 8000cb6:	4b84      	ldr	r3, [pc, #528]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a83      	ldr	r2, [pc, #524]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	e046      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a82      	ldr	r2, [pc, #520]	@ (8000ed4 <GPIO_INIT+0x260>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d106      	bne.n	8000cdc <GPIO_INIT+0x68>
		GPIOD_EN();
 8000cce:	4b7e      	ldr	r3, [pc, #504]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a7d      	ldr	r2, [pc, #500]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	e03a      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a7d      	ldr	r2, [pc, #500]	@ (8000ed8 <GPIO_INIT+0x264>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d106      	bne.n	8000cf4 <GPIO_INIT+0x80>
		GPIOE_EN();
 8000ce6:	4b78      	ldr	r3, [pc, #480]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a77      	ldr	r2, [pc, #476]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	e02e      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a78      	ldr	r2, [pc, #480]	@ (8000edc <GPIO_INIT+0x268>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d106      	bne.n	8000d0c <GPIO_INIT+0x98>
		GPIOF_EN();
 8000cfe:	4b72      	ldr	r3, [pc, #456]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a71      	ldr	r2, [pc, #452]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	e022      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a73      	ldr	r2, [pc, #460]	@ (8000ee0 <GPIO_INIT+0x26c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d106      	bne.n	8000d24 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000d16:	4b6c      	ldr	r3, [pc, #432]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a6b      	ldr	r2, [pc, #428]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	e016      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a6e      	ldr	r2, [pc, #440]	@ (8000ee4 <GPIO_INIT+0x270>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d106      	bne.n	8000d3c <GPIO_INIT+0xc8>
		GPIOH_EN();
 8000d2e:	4b66      	ldr	r3, [pc, #408]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a65      	ldr	r2, [pc, #404]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	e00a      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a69      	ldr	r2, [pc, #420]	@ (8000ee8 <GPIO_INIT+0x274>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d105      	bne.n	8000d52 <GPIO_INIT+0xde>
		GPIOI_EN();
 8000d46:	4b60      	ldr	r3, [pc, #384]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	791b      	ldrb	r3, [r3, #4]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2103      	movs	r1, #3
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	799b      	ldrb	r3, [r3, #6]
 8000d98:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	795b      	ldrb	r3, [r3, #5]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	f200 809a 	bhi.w	8000eec <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	795b      	ldrb	r3, [r3, #5]
 8000dc2:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	4619      	mov	r1, r3
 8000de4:	2303      	movs	r3, #3
 8000de6:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	400a      	ands	r2, r1
 8000df2:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7a1b      	ldrb	r3, [r3, #8]
 8000dfe:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	791b      	ldrb	r3, [r3, #4]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	791b      	ldrb	r3, [r3, #4]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2103      	movs	r1, #3
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000e24:	43db      	mvns	r3, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	79db      	ldrb	r3, [r3, #7]
 8000e3a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	795b      	ldrb	r3, [r3, #5]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f040 80ec 	bne.w	8001032 <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	7b7a      	ldrb	r2, [r7, #13]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	7b7a      	ldrb	r2, [r7, #13]
 8000e8e:	4001      	ands	r1, r0
 8000e90:	3208      	adds	r2, #8
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	7b7a      	ldrb	r2, [r7, #13]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7a5b      	ldrb	r3, [r3, #9]
 8000ea6:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 8000ea8:	7b3b      	ldrb	r3, [r7, #12]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	7b7a      	ldrb	r2, [r7, #13]
 8000eb8:	4301      	orrs	r1, r0
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 8000ec0:	e0b7      	b.n	8001032 <GPIO_INIT+0x3be>
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40021400 	.word	0x40021400
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40021c00 	.word	0x40021c00
 8000ee8:	40022000 	.word	0x40022000
		SYSCFG_EN();
 8000eec:	4b54      	ldr	r3, [pc, #336]	@ (8001040 <GPIO_INIT+0x3cc>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef0:	4a53      	ldr	r2, [pc, #332]	@ (8001040 <GPIO_INIT+0x3cc>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef6:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	795b      	ldrb	r3, [r3, #5]
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	d12e      	bne.n	8000f5e <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f00:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	7912      	ldrb	r2, [r2, #4]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	408a      	lsls	r2, r1
 8000f0e:	43d2      	mvns	r2, r2
 8000f10:	4611      	mov	r1, r2
 8000f12:	4a4c      	ldr	r2, [pc, #304]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f14:	400b      	ands	r3, r1
 8000f16:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f18:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	7912      	ldrb	r2, [r2, #4]
 8000f20:	4611      	mov	r1, r2
 8000f22:	2201      	movs	r2, #1
 8000f24:	408a      	lsls	r2, r1
 8000f26:	43d2      	mvns	r2, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4a46      	ldr	r2, [pc, #280]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000f30:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	7912      	ldrb	r2, [r2, #4]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	408a      	lsls	r2, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a40      	ldr	r2, [pc, #256]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f42:	430b      	orrs	r3, r1
 8000f44:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000f46:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	7912      	ldrb	r2, [r2, #4]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	2201      	movs	r2, #1
 8000f52:	408a      	lsls	r2, r1
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a3b      	ldr	r2, [pc, #236]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	60d3      	str	r3, [r2, #12]
 8000f5c:	e036      	b.n	8000fcc <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d117      	bne.n	8000f96 <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f66:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	7912      	ldrb	r2, [r2, #4]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	2201      	movs	r2, #1
 8000f72:	408a      	lsls	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	4611      	mov	r1, r2
 8000f78:	4a32      	ldr	r2, [pc, #200]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	7912      	ldrb	r2, [r2, #4]
 8000f86:	4611      	mov	r1, r2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	408a      	lsls	r2, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f90:	430b      	orrs	r3, r1
 8000f92:	60d3      	str	r3, [r2, #12]
 8000f94:	e01a      	b.n	8000fcc <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d116      	bne.n	8000fcc <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f9e:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	7912      	ldrb	r2, [r2, #4]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	2201      	movs	r2, #1
 8000faa:	408a      	lsls	r2, r1
 8000fac:	43d2      	mvns	r2, r2
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4a24      	ldr	r2, [pc, #144]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	7912      	ldrb	r2, [r2, #4]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	408a      	lsls	r2, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <GPIO_INIT+0x3d4>)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a9b      	ldrb	r3, [r3, #10]
 8000fec:	4619      	mov	r1, r3
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	4913      	ldr	r1, [pc, #76]	@ (8001048 <GPIO_INIT+0x3d4>)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4302      	orrs	r2, r0
 8000ffe:	3302      	adds	r3, #2
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <GPIO_INIT+0x3d0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7912      	ldrb	r2, [r2, #4]
 800100c:	4611      	mov	r1, r2
 800100e:	2201      	movs	r2, #1
 8001010:	408a      	lsls	r2, r1
 8001012:	43d2      	mvns	r2, r2
 8001014:	4611      	mov	r1, r2
 8001016:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <GPIO_INIT+0x3d0>)
 8001018:	400b      	ands	r3, r1
 800101a:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <GPIO_INIT+0x3d0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	7912      	ldrb	r2, [r2, #4]
 8001024:	4611      	mov	r1, r2
 8001026:	2201      	movs	r2, #1
 8001028:	408a      	lsls	r2, r1
 800102a:	4611      	mov	r1, r2
 800102c:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <GPIO_INIT+0x3d0>)
 800102e:	430b      	orrs	r3, r1
 8001030:	6013      	str	r3, [r2, #0]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40013c00 	.word	0x40013c00
 8001048:	40013800 	.word	0x40013800

0800104c <IRQ_Config>:
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 800104c:	b480      	push	{r7}
 800104e:	b087      	sub	sp, #28
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	460a      	mov	r2, r1
 8001056:	71fb      	strb	r3, [r7, #7]
 8001058:	4613      	mov	r3, r2
 800105a:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	095b      	lsrs	r3, r3, #5
 8001060:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 8001066:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800106a:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800106e:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 8001070:	7dfb      	ldrb	r3, [r7, #23]
 8001072:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 8001074:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <IRQ_Config+0x74>)
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 800107a:	79bb      	ldrb	r3, [r7, #6]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d10b      	bne.n	8001098 <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	f002 021f 	and.w	r2, r2, #31
 800108a:	2101      	movs	r1, #1
 800108c:	fa01 f202 	lsl.w	r2, r1, r2
 8001090:	431a      	orrs	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 8001096:	e00d      	b.n	80010b4 <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 8001098:	79bb      	ldrb	r3, [r7, #6]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10a      	bne.n	80010b4 <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	79fa      	ldrb	r2, [r7, #7]
 80010a4:	f002 021f 	and.w	r2, r2, #31
 80010a8:	2101      	movs	r1, #1
 80010aa:	fa01 f202 	lsl.w	r2, r1, r2
 80010ae:	431a      	orrs	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	371c      	adds	r7, #28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e180 	.word	0xe000e180

080010c4 <TIM_INIT>:
#include <stm32f4xx_cus_timer.h>

volatile uint32_t mil = 0;

void TIM_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	if (timHandleTypeDef->TIMx == TIM2) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d4:	d106      	bne.n	80010e4 <TIM_INIT+0x20>
		TIM2_EN();
 80010d6:	4b82      	ldr	r3, [pc, #520]	@ (80012e0 <TIM_INIT+0x21c>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	4a81      	ldr	r2, [pc, #516]	@ (80012e0 <TIM_INIT+0x21c>)
 80010dc:	f043 0301 	orr.w	r3, r3, #1
 80010e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e2:	e022      	b.n	800112a <TIM_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM3) {
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a7e      	ldr	r2, [pc, #504]	@ (80012e4 <TIM_INIT+0x220>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d106      	bne.n	80010fc <TIM_INIT+0x38>
		TIM3_EN();
 80010ee:	4b7c      	ldr	r3, [pc, #496]	@ (80012e0 <TIM_INIT+0x21c>)
 80010f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f2:	4a7b      	ldr	r2, [pc, #492]	@ (80012e0 <TIM_INIT+0x21c>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010fa:	e016      	b.n	800112a <TIM_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM4) {
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a79      	ldr	r2, [pc, #484]	@ (80012e8 <TIM_INIT+0x224>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d106      	bne.n	8001114 <TIM_INIT+0x50>
		TIM4_EN();
 8001106:	4b76      	ldr	r3, [pc, #472]	@ (80012e0 <TIM_INIT+0x21c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	4a75      	ldr	r2, [pc, #468]	@ (80012e0 <TIM_INIT+0x21c>)
 800110c:	f043 0304 	orr.w	r3, r3, #4
 8001110:	6413      	str	r3, [r2, #64]	@ 0x40
 8001112:	e00a      	b.n	800112a <TIM_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM5) {
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a74      	ldr	r2, [pc, #464]	@ (80012ec <TIM_INIT+0x228>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d105      	bne.n	800112a <TIM_INIT+0x66>
		TIM5_EN();
 800111e:	4b70      	ldr	r3, [pc, #448]	@ (80012e0 <TIM_INIT+0x21c>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	4a6f      	ldr	r2, [pc, #444]	@ (80012e0 <TIM_INIT+0x21c>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	// Ensure Counter is disable
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_0_pos);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	681a      	ldr	r2, [r3, #0]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 0201 	bic.w	r2, r2, #1
 8001138:	601a      	str	r2, [r3, #0]

	// Clock prescaler
	timHandleTypeDef->TIMx->PSC = timHandleTypeDef->prescaler;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	6892      	ldr	r2, [r2, #8]
 8001142:	629a      	str	r2, [r3, #40]	@ 0x28

	// Select Auto-reload value
	timHandleTypeDef->TIMx->ARR = timHandleTypeDef->autoReload;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6912      	ldr	r2, [r2, #16]
 800114c:	62da      	str	r2, [r3, #44]	@ 0x2c
	 You write ARR = 500 while CNT = 750
	 CNT: 750 → 999 → 1000 (overflow with old ARR)
	 0 → 499 → 500 (now using new ARR) ✓*/

	// autoReloadPreload
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_7_pos);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800115c:	601a      	str	r2, [r3, #0]
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->autoReloadPreload
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6819      	ldr	r1, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7d1b      	ldrb	r3, [r3, #20]
			<< Shift_7_pos);
 8001168:	01da      	lsls	r2, r3, #7
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->autoReloadPreload
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	601a      	str	r2, [r3, #0]

	// Select direction counter
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_4_pos);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 0210 	bic.w	r2, r2, #16
 8001180:	601a      	str	r2, [r3, #0]
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->directionCounter
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	68db      	ldr	r3, [r3, #12]
			<< Shift_4_pos);
 800118c:	011a      	lsls	r2, r3, #4
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->directionCounter
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

	// Update disable
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_1_pos);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 0202 	bic.w	r2, r2, #2
 80011a4:	601a      	str	r2, [r3, #0]
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->updateDisable
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	6819      	ldr	r1, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	7d9b      	ldrb	r3, [r3, #22]
			<< Shift_1_pos);
 80011b0:	005a      	lsls	r2, r3, #1
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->updateDisable
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

	// Update request source (Select source)
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_2_pos);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0204 	bic.w	r2, r2, #4
 80011c8:	601a      	str	r2, [r3, #0]
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->updateRequestSource
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6819      	ldr	r1, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	7d5b      	ldrb	r3, [r3, #21]
			<< Shift_2_pos);
 80011d4:	009a      	lsls	r2, r3, #2
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->updateRequestSource
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]

	// Configure Input Capture if mode is selected
	if (timHandleTypeDef->timerMode == TIM_INPUT_CAPTURE_MODE) {
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	791b      	ldrb	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f040 81e8 	bne.w	80015b8 <TIM_INIT+0x4f4>
		uint8_t channel = timHandleTypeDef->TIM_IC_HandleTypeDef.channel;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	7ddb      	ldrb	r3, [r3, #23]
 80011ec:	77fb      	strb	r3, [r7, #31]
		uint8_t selection = timHandleTypeDef->TIM_IC_HandleTypeDef.selection;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	7e5b      	ldrb	r3, [r3, #25]
 80011f2:	77bb      	strb	r3, [r7, #30]
		uint8_t prescaler = timHandleTypeDef->TIM_IC_HandleTypeDef.prescaler;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7e9b      	ldrb	r3, [r3, #26]
 80011f8:	777b      	strb	r3, [r7, #29]
		uint8_t filter = timHandleTypeDef->TIM_IC_HandleTypeDef.filter;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7edb      	ldrb	r3, [r3, #27]
 80011fe:	773b      	strb	r3, [r7, #28]
		uint8_t polarity = timHandleTypeDef->TIM_IC_HandleTypeDef.polarity;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	7e1b      	ldrb	r3, [r3, #24]
 8001204:	76fb      	strb	r3, [r7, #27]
		uint8_t enableInt =
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7f1b      	ldrb	r3, [r3, #28]
 800120a:	76bb      	strb	r3, [r7, #26]
				timHandleTypeDef->TIM_IC_HandleTypeDef.enableInterrupt;

		if (channel == TIM_CHANNEL_1) {
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d16e      	bne.n	80012f0 <TIM_INIT+0x22c>
			// CC1S[1:0]: Capture/Compare 1 selection (bits 1:0)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	699a      	ldr	r2, [r3, #24]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f022 0203 	bic.w	r2, r2, #3
 8001220:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (selection << Shift_0_pos);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	6999      	ldr	r1, [r3, #24]
 8001228:	7fba      	ldrb	r2, [r7, #30]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	430a      	orrs	r2, r1
 8001230:	619a      	str	r2, [r3, #24]

			// IC1PSC[1:0]: Input capture 1 prescaler (bits 3:2)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_2_pos);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	699a      	ldr	r2, [r3, #24]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 020c 	bic.w	r2, r2, #12
 8001240:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (prescaler << Shift_2_pos);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	6999      	ldr	r1, [r3, #24]
 8001248:	7f7b      	ldrb	r3, [r7, #29]
 800124a:	009a      	lsls	r2, r3, #2
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	619a      	str	r2, [r3, #24]

			// IC1F[3:0]: Input capture 1 filter (bits 7:4)
			timHandleTypeDef->TIMx->CCMR1 &= ~(0xF << Shift_4_pos);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001262:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (filter << Shift_4_pos);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6999      	ldr	r1, [r3, #24]
 800126a:	7f3b      	ldrb	r3, [r7, #28]
 800126c:	011a      	lsls	r2, r3, #4
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	619a      	str	r2, [r3, #24]

			// Configure polarity: Clear CC1P (bit 1) and CC1NP (bit 3)
			timHandleTypeDef->TIMx->CCER &= ~((HIGH << Shift_1_pos)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 020a 	bic.w	r2, r2, #10
 8001284:	621a      	str	r2, [r3, #32]
					| (HIGH << Shift_3_pos));
			if (polarity == TIM_IC_FALLING_EDGE) {
 8001286:	7efb      	ldrb	r3, [r7, #27]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d108      	bne.n	800129e <TIM_INIT+0x1da>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_1_pos); // CC1P = 1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6a1a      	ldr	r2, [r3, #32]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f042 0202 	orr.w	r2, r2, #2
 800129a:	621a      	str	r2, [r3, #32]
 800129c:	e00a      	b.n	80012b4 <TIM_INIT+0x1f0>
			} else if (polarity == TIM_IC_BOTH_EDGES) {
 800129e:	7efb      	ldrb	r3, [r7, #27]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d107      	bne.n	80012b4 <TIM_INIT+0x1f0>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_1_pos)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6a1a      	ldr	r2, [r3, #32]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 020a 	orr.w	r2, r2, #10
 80012b2:	621a      	str	r2, [r3, #32]
						| (HIGH << Shift_3_pos);
			}
			// Rising edge: both bits = 0 (default)

			// CC1E: Enable capture on channel 1 (bit 0)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_0_pos);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6a1a      	ldr	r2, [r3, #32]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f042 0201 	orr.w	r2, r2, #1
 80012c2:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 80012c4:	7ebb      	ldrb	r3, [r7, #26]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 814c 	beq.w	8001564 <TIM_INIT+0x4a0>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_1_pos);  // CC1IE
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0202 	orr.w	r2, r2, #2
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	e142      	b.n	8001564 <TIM_INIT+0x4a0>
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40000400 	.word	0x40000400
 80012e8:	40000800 	.word	0x40000800
 80012ec:	40000c00 	.word	0x40000c00
			}

		} else if (channel == TIM_CHANNEL_2) {
 80012f0:	7ffb      	ldrb	r3, [r7, #31]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d166      	bne.n	80013c4 <TIM_INIT+0x300>
			// CC2S[1:0]: Capture/Compare 2 selection (bits 9:8)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	699a      	ldr	r2, [r3, #24]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001304:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (selection << Shift_8_pos);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6999      	ldr	r1, [r3, #24]
 800130c:	7fbb      	ldrb	r3, [r7, #30]
 800130e:	021a      	lsls	r2, r3, #8
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	430a      	orrs	r2, r1
 8001316:	619a      	str	r2, [r3, #24]

			// IC2PSC[1:0]: Input capture 2 prescaler (bits 11:10)
			timHandleTypeDef->TIMx->CCMR1 &=
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699a      	ldr	r2, [r3, #24]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8001326:	619a      	str	r2, [r3, #24]
					~(GPIO_BIT_11_Mask << Shift_10_pos);
			timHandleTypeDef->TIMx->CCMR1 |= (prescaler << Shift_10_pos);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	6999      	ldr	r1, [r3, #24]
 800132e:	7f7b      	ldrb	r3, [r7, #29]
 8001330:	029a      	lsls	r2, r3, #10
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	619a      	str	r2, [r3, #24]

			// IC2F[3:0]: Input capture 2 filter (bits 15:12)
			timHandleTypeDef->TIMx->CCMR1 &= ~(0xF << Shift_12_pos);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	699a      	ldr	r2, [r3, #24]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8001348:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (filter << Shift_12_pos);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	6999      	ldr	r1, [r3, #24]
 8001350:	7f3b      	ldrb	r3, [r7, #28]
 8001352:	031a      	lsls	r2, r3, #12
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	619a      	str	r2, [r3, #24]

			// Configure polarity: Clear CC2P (bit 5) and CC2NP (bit 7)
			timHandleTypeDef->TIMx->CCER &= ~((HIGH << Shift_5_pos)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6a1a      	ldr	r2, [r3, #32]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800136a:	621a      	str	r2, [r3, #32]
					| (HIGH << Shift_7_pos));
			if (polarity == TIM_IC_FALLING_EDGE) {
 800136c:	7efb      	ldrb	r3, [r7, #27]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <TIM_INIT+0x2c0>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_5_pos); // CC2P = 1
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	6a1a      	ldr	r2, [r3, #32]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0220 	orr.w	r2, r2, #32
 8001380:	621a      	str	r2, [r3, #32]
 8001382:	e00a      	b.n	800139a <TIM_INIT+0x2d6>
			} else if (polarity == TIM_IC_BOTH_EDGES) {
 8001384:	7efb      	ldrb	r3, [r7, #27]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d107      	bne.n	800139a <TIM_INIT+0x2d6>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_5_pos)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	6a1a      	ldr	r2, [r3, #32]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8001398:	621a      	str	r2, [r3, #32]
						| (HIGH << Shift_7_pos);
			}

			// CC2E: Enable capture on channel 2 (bit 4)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_4_pos);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	6a1a      	ldr	r2, [r3, #32]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f042 0210 	orr.w	r2, r2, #16
 80013a8:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 80013aa:	7ebb      	ldrb	r3, [r7, #26]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f000 80d9 	beq.w	8001564 <TIM_INIT+0x4a0>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_2_pos);  // CC2IE
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	68da      	ldr	r2, [r3, #12]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f042 0204 	orr.w	r2, r2, #4
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	e0cf      	b.n	8001564 <TIM_INIT+0x4a0>
			}

		} else if (channel == TIM_CHANNEL_3) {
 80013c4:	7ffb      	ldrb	r3, [r7, #31]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d164      	bne.n	8001494 <TIM_INIT+0x3d0>
			// CC3S[1:0]: Capture/Compare 3 selection (bits 1:0 of CCMR2)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	69da      	ldr	r2, [r3, #28]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0203 	bic.w	r2, r2, #3
 80013d8:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (selection << Shift_0_pos);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69d9      	ldr	r1, [r3, #28]
 80013e0:	7fba      	ldrb	r2, [r7, #30]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	430a      	orrs	r2, r1
 80013e8:	61da      	str	r2, [r3, #28]

			// IC3PSC[1:0]: Input capture 3 prescaler (bits 3:2)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_2_pos);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	69da      	ldr	r2, [r3, #28]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f022 020c 	bic.w	r2, r2, #12
 80013f8:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (prescaler << Shift_2_pos);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	69d9      	ldr	r1, [r3, #28]
 8001400:	7f7b      	ldrb	r3, [r7, #29]
 8001402:	009a      	lsls	r2, r3, #2
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	430a      	orrs	r2, r1
 800140a:	61da      	str	r2, [r3, #28]

			// IC3F[3:0]: Input capture 3 filter (bits 7:4)
			timHandleTypeDef->TIMx->CCMR2 &= ~(0xF << Shift_4_pos);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	69da      	ldr	r2, [r3, #28]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800141a:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (filter << Shift_4_pos);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	69d9      	ldr	r1, [r3, #28]
 8001422:	7f3b      	ldrb	r3, [r7, #28]
 8001424:	011a      	lsls	r2, r3, #4
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	61da      	str	r2, [r3, #28]

			// Configure polarity: Clear CC3P (bit 9) and CC3NP (bit 11)
			timHandleTypeDef->TIMx->CCER &= ~((HIGH << Shift_9_pos)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6a1a      	ldr	r2, [r3, #32]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 800143c:	621a      	str	r2, [r3, #32]
					| (HIGH << Shift_11_pos));
			if (polarity == TIM_IC_FALLING_EDGE) {
 800143e:	7efb      	ldrb	r3, [r7, #27]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d108      	bne.n	8001456 <TIM_INIT+0x392>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_9_pos); // CC3P = 1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a1a      	ldr	r2, [r3, #32]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001452:	621a      	str	r2, [r3, #32]
 8001454:	e00a      	b.n	800146c <TIM_INIT+0x3a8>
			} else if (polarity == TIM_IC_BOTH_EDGES) {
 8001456:	7efb      	ldrb	r3, [r7, #27]
 8001458:	2b03      	cmp	r3, #3
 800145a:	d107      	bne.n	800146c <TIM_INIT+0x3a8>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_9_pos)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6a1a      	ldr	r2, [r3, #32]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f442 6220 	orr.w	r2, r2, #2560	@ 0xa00
 800146a:	621a      	str	r2, [r3, #32]
						| (HIGH << Shift_11_pos);
			}

			// CC3E: Enable capture on channel 3 (bit 8)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_8_pos);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	6a1a      	ldr	r2, [r3, #32]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800147a:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 800147c:	7ebb      	ldrb	r3, [r7, #26]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d070      	beq.n	8001564 <TIM_INIT+0x4a0>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_3_pos);  // CC3IE
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	68da      	ldr	r2, [r3, #12]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0208 	orr.w	r2, r2, #8
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	e067      	b.n	8001564 <TIM_INIT+0x4a0>
			}

		} else if (channel == TIM_CHANNEL_4) {
 8001494:	7ffb      	ldrb	r3, [r7, #31]
 8001496:	2b03      	cmp	r3, #3
 8001498:	d164      	bne.n	8001564 <TIM_INIT+0x4a0>
			// CC4S[1:0]: Capture/Compare 4 selection (bits 9:8 of CCMR2)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	69da      	ldr	r2, [r3, #28]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80014a8:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (selection << Shift_8_pos);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	69d9      	ldr	r1, [r3, #28]
 80014b0:	7fbb      	ldrb	r3, [r7, #30]
 80014b2:	021a      	lsls	r2, r3, #8
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	61da      	str	r2, [r3, #28]

			// IC4PSC[1:0]: Input capture 4 prescaler (bits 11:10)
			timHandleTypeDef->TIMx->CCMR2 &=
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	69da      	ldr	r2, [r3, #28]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80014ca:	61da      	str	r2, [r3, #28]
					~(GPIO_BIT_11_Mask << Shift_10_pos);
			timHandleTypeDef->TIMx->CCMR2 |= (prescaler << Shift_10_pos);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	69d9      	ldr	r1, [r3, #28]
 80014d2:	7f7b      	ldrb	r3, [r7, #29]
 80014d4:	029a      	lsls	r2, r3, #10
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	61da      	str	r2, [r3, #28]

			// IC4F[3:0]: Input capture 4 filter (bits 15:12)
			timHandleTypeDef->TIMx->CCMR2 &= ~(0xF << Shift_12_pos);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69da      	ldr	r2, [r3, #28]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80014ec:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (filter << Shift_12_pos);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69d9      	ldr	r1, [r3, #28]
 80014f4:	7f3b      	ldrb	r3, [r7, #28]
 80014f6:	031a      	lsls	r2, r3, #12
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	61da      	str	r2, [r3, #28]

			// Configure polarity: Clear CC4P (bit 13) and CC4NP (bit 15)
			timHandleTypeDef->TIMx->CCER &= ~((HIGH << Shift_13_pos)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a1a      	ldr	r2, [r3, #32]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 800150e:	621a      	str	r2, [r3, #32]
					| (HIGH << Shift_15_pos));
			if (polarity == TIM_IC_FALLING_EDGE) {
 8001510:	7efb      	ldrb	r3, [r7, #27]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <TIM_INIT+0x464>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_13_pos); // CC4P = 1
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6a1a      	ldr	r2, [r3, #32]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001524:	621a      	str	r2, [r3, #32]
 8001526:	e00a      	b.n	800153e <TIM_INIT+0x47a>
			} else if (polarity == TIM_IC_BOTH_EDGES) {
 8001528:	7efb      	ldrb	r3, [r7, #27]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d107      	bne.n	800153e <TIM_INIT+0x47a>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_13_pos)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a1a      	ldr	r2, [r3, #32]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f442 4220 	orr.w	r2, r2, #40960	@ 0xa000
 800153c:	621a      	str	r2, [r3, #32]
						| (HIGH << Shift_15_pos);
			}

			// CC4E: Enable capture on channel 4 (bit 12)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_12_pos);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6a1a      	ldr	r2, [r3, #32]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800154c:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 800154e:	7ebb      	ldrb	r3, [r7, #26]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d007      	beq.n	8001564 <TIM_INIT+0x4a0>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_4_pos);  // CC4IE
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	68da      	ldr	r2, [r3, #12]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f042 0210 	orr.w	r2, r2, #16
 8001562:	60da      	str	r2, [r3, #12]
			}
		}

		// Enable NVIC interrupt for the timer if any channel interrupt is enabled
		if (enableInt) {
 8001564:	7ebb      	ldrb	r3, [r7, #26]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d026      	beq.n	80015b8 <TIM_INIT+0x4f4>
			if (timHandleTypeDef->TIMx == TIM2) {
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001572:	d104      	bne.n	800157e <TIM_INIT+0x4ba>
				IRQ_Config(TIM2_IRQ28, HIGH);
 8001574:	2101      	movs	r1, #1
 8001576:	201c      	movs	r0, #28
 8001578:	f7ff fd68 	bl	800104c <IRQ_Config>
 800157c:	e01c      	b.n	80015b8 <TIM_INIT+0x4f4>
			} else if (timHandleTypeDef->TIMx == TIM3) {
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a8e      	ldr	r2, [pc, #568]	@ (80017bc <TIM_INIT+0x6f8>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d104      	bne.n	8001592 <TIM_INIT+0x4ce>
				IRQ_Config(TIM3_IRQ29, HIGH);
 8001588:	2101      	movs	r1, #1
 800158a:	201d      	movs	r0, #29
 800158c:	f7ff fd5e 	bl	800104c <IRQ_Config>
 8001590:	e012      	b.n	80015b8 <TIM_INIT+0x4f4>
			} else if (timHandleTypeDef->TIMx == TIM4) {
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a8a      	ldr	r2, [pc, #552]	@ (80017c0 <TIM_INIT+0x6fc>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d104      	bne.n	80015a6 <TIM_INIT+0x4e2>
				IRQ_Config(TIM4_IRQ30, HIGH);
 800159c:	2101      	movs	r1, #1
 800159e:	201e      	movs	r0, #30
 80015a0:	f7ff fd54 	bl	800104c <IRQ_Config>
 80015a4:	e008      	b.n	80015b8 <TIM_INIT+0x4f4>
			} else if (timHandleTypeDef->TIMx == TIM5) {
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a86      	ldr	r2, [pc, #536]	@ (80017c4 <TIM_INIT+0x700>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d103      	bne.n	80015b8 <TIM_INIT+0x4f4>
				IRQ_Config(TIM5_IRQ50, HIGH);
 80015b0:	2101      	movs	r1, #1
 80015b2:	2032      	movs	r0, #50	@ 0x32
 80015b4:	f7ff fd4a 	bl	800104c <IRQ_Config>
			}
		}
	}

	if (timHandleTypeDef->timerMode == TIM_OUTPUT_COMPARE_MODE) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	791b      	ldrb	r3, [r3, #4]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	f040 8179 	bne.w	80018b4 <TIM_INIT+0x7f0>
		uint8_t channel = timHandleTypeDef->TIM_OC_HandleTypeDef.channel;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015c8:	767b      	strb	r3, [r7, #25]
		uint8_t mode = timHandleTypeDef->TIM_OC_HandleTypeDef.mode;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015d0:	763b      	strb	r3, [r7, #24]
		uint32_t pulse = timHandleTypeDef->TIM_OC_HandleTypeDef.pulse;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d6:	617b      	str	r3, [r7, #20]
		uint8_t polarity = timHandleTypeDef->TIM_OC_HandleTypeDef.polarity;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80015de:	74fb      	strb	r3, [r7, #19]
		uint8_t enableInt =
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 80015e6:	74bb      	strb	r3, [r7, #18]
				timHandleTypeDef->TIM_OC_HandleTypeDef.enableInterrupt;

		if (channel == TIM_CHANNEL_1) {
 80015e8:	7e7b      	ldrb	r3, [r7, #25]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d14a      	bne.n	8001684 <TIM_INIT+0x5c0>
			// CC1S[1:0]: Channel 1 configured as output (bits 1:0 = 00)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699a      	ldr	r2, [r3, #24]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f022 0203 	bic.w	r2, r2, #3
 80015fc:	619a      	str	r2, [r3, #24]

			// OC1M[2:0]: Output compare mode (bits 6:4)
			timHandleTypeDef->TIMx->CCMR1 &= ~(0x7 << Shift_4_pos);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	699a      	ldr	r2, [r3, #24]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800160c:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (mode << Shift_4_pos);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	6999      	ldr	r1, [r3, #24]
 8001614:	7e3b      	ldrb	r3, [r7, #24]
 8001616:	011a      	lsls	r2, r3, #4
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	430a      	orrs	r2, r1
 800161e:	619a      	str	r2, [r3, #24]

			// OC1PE: Output compare preload enable (bit 3)
			timHandleTypeDef->TIMx->CCMR1 |= (HIGH << Shift_3_pos);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	699a      	ldr	r2, [r3, #24]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0208 	orr.w	r2, r2, #8
 800162e:	619a      	str	r2, [r3, #24]

			// CC1P: Output polarity (bit 1)
			timHandleTypeDef->TIMx->CCER &= ~(HIGH << Shift_1_pos);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6a1a      	ldr	r2, [r3, #32]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0202 	bic.w	r2, r2, #2
 800163e:	621a      	str	r2, [r3, #32]
			timHandleTypeDef->TIMx->CCER |= (polarity << Shift_1_pos);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6a19      	ldr	r1, [r3, #32]
 8001646:	7cfb      	ldrb	r3, [r7, #19]
 8001648:	005a      	lsls	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	621a      	str	r2, [r3, #32]

			// Set compare value
			timHandleTypeDef->TIMx->CCR1 = pulse;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	635a      	str	r2, [r3, #52]	@ 0x34

			// CC1E: Enable output on channel 1 (bit 0)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_0_pos);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6a1a      	ldr	r2, [r3, #32]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f042 0201 	orr.w	r2, r2, #1
 8001668:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 800166a:	7cbb      	ldrb	r3, [r7, #18]
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 80f7 	beq.w	8001860 <TIM_INIT+0x79c>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_1_pos);  // CC1IE
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68da      	ldr	r2, [r3, #12]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 0202 	orr.w	r2, r2, #2
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	e0ed      	b.n	8001860 <TIM_INIT+0x79c>
			}

		} else if (channel == TIM_CHANNEL_2) {
 8001684:	7e7b      	ldrb	r3, [r7, #25]
 8001686:	2b01      	cmp	r3, #1
 8001688:	d14a      	bne.n	8001720 <TIM_INIT+0x65c>

			// CC2S[1:0]: Channel 2 configured as output (bits 9:8 = 00)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699a      	ldr	r2, [r3, #24]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001698:	619a      	str	r2, [r3, #24]

			// OC2M[2:0]: Output compare mode (bits 14:12)
			timHandleTypeDef->TIMx->CCMR1 &= ~(0x7 << Shift_12_pos);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	699a      	ldr	r2, [r3, #24]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80016a8:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (mode << Shift_12_pos);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6999      	ldr	r1, [r3, #24]
 80016b0:	7e3b      	ldrb	r3, [r7, #24]
 80016b2:	031a      	lsls	r2, r3, #12
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	619a      	str	r2, [r3, #24]

			// OC2PE: Output compare preload enable (bit 11)
			timHandleTypeDef->TIMx->CCMR1 |= (HIGH << Shift_11_pos);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	699a      	ldr	r2, [r3, #24]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80016ca:	619a      	str	r2, [r3, #24]

			// CC2P: Output polarity (bit 5)
			timHandleTypeDef->TIMx->CCER &= ~(HIGH << Shift_5_pos);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a1a      	ldr	r2, [r3, #32]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0220 	bic.w	r2, r2, #32
 80016da:	621a      	str	r2, [r3, #32]
			timHandleTypeDef->TIMx->CCER |= (polarity << Shift_5_pos);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6a19      	ldr	r1, [r3, #32]
 80016e2:	7cfb      	ldrb	r3, [r7, #19]
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	621a      	str	r2, [r3, #32]

			// Set compare value
			timHandleTypeDef->TIMx->CCR2 = pulse;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	639a      	str	r2, [r3, #56]	@ 0x38

			// CC2E: Enable output on channel 2 (bit 4)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_4_pos);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6a1a      	ldr	r2, [r3, #32]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0210 	orr.w	r2, r2, #16
 8001704:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 8001706:	7cbb      	ldrb	r3, [r7, #18]
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80a9 	beq.w	8001860 <TIM_INIT+0x79c>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_2_pos);  // CC2IE
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0204 	orr.w	r2, r2, #4
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	e09f      	b.n	8001860 <TIM_INIT+0x79c>
			}

		} else if (channel == TIM_CHANNEL_3) {
 8001720:	7e7b      	ldrb	r3, [r7, #25]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d150      	bne.n	80017c8 <TIM_INIT+0x704>
			// CC3S[1:0]: Channel 3 configured as output (bits 1:0 of CCMR2 = 00)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	69da      	ldr	r2, [r3, #28]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0203 	bic.w	r2, r2, #3
 8001734:	61da      	str	r2, [r3, #28]

			// OC3M[2:0]: Output compare mode (bits 6:4)
			timHandleTypeDef->TIMx->CCMR2 &= ~(0x7 << Shift_4_pos);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001744:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (mode << Shift_4_pos);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	69d9      	ldr	r1, [r3, #28]
 800174c:	7e3b      	ldrb	r3, [r7, #24]
 800174e:	011a      	lsls	r2, r3, #4
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	61da      	str	r2, [r3, #28]

			// OC3PE: Output compare preload enable (bit 3)
			timHandleTypeDef->TIMx->CCMR2 |= (HIGH << Shift_3_pos);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	69da      	ldr	r2, [r3, #28]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0208 	orr.w	r2, r2, #8
 8001766:	61da      	str	r2, [r3, #28]

			// CC3P: Output polarity (bit 9)
			timHandleTypeDef->TIMx->CCER &= ~(HIGH << Shift_9_pos);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6a1a      	ldr	r2, [r3, #32]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001776:	621a      	str	r2, [r3, #32]
			timHandleTypeDef->TIMx->CCER |= (polarity << Shift_9_pos);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6a19      	ldr	r1, [r3, #32]
 800177e:	7cfb      	ldrb	r3, [r7, #19]
 8001780:	025a      	lsls	r2, r3, #9
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	621a      	str	r2, [r3, #32]

			// Set compare value
			timHandleTypeDef->TIMx->CCR3 = pulse;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	63da      	str	r2, [r3, #60]	@ 0x3c

			// CC3E: Enable output on channel 3 (bit 8)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_8_pos);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6a1a      	ldr	r2, [r3, #32]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80017a0:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 80017a2:	7cbb      	ldrb	r3, [r7, #18]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d05b      	beq.n	8001860 <TIM_INIT+0x79c>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_3_pos);  // CC3IE
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0208 	orr.w	r2, r2, #8
 80017b6:	60da      	str	r2, [r3, #12]
 80017b8:	e052      	b.n	8001860 <TIM_INIT+0x79c>
 80017ba:	bf00      	nop
 80017bc:	40000400 	.word	0x40000400
 80017c0:	40000800 	.word	0x40000800
 80017c4:	40000c00 	.word	0x40000c00
			}
		} else if (channel == TIM_CHANNEL_4) {
 80017c8:	7e7b      	ldrb	r3, [r7, #25]
 80017ca:	2b03      	cmp	r3, #3
 80017cc:	d148      	bne.n	8001860 <TIM_INIT+0x79c>
			// CC4S[1:0]: Channel 4 configured as output (bits 9:8 of CCMR2 = 00)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	69da      	ldr	r2, [r3, #28]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80017dc:	61da      	str	r2, [r3, #28]

			// OC4M[2:0]: Output compare mode (bits 14:12)
			timHandleTypeDef->TIMx->CCMR2 &= ~(0x7 << Shift_12_pos);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	69da      	ldr	r2, [r3, #28]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 80017ec:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (mode << Shift_12_pos);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	69d9      	ldr	r1, [r3, #28]
 80017f4:	7e3b      	ldrb	r3, [r7, #24]
 80017f6:	031a      	lsls	r2, r3, #12
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	430a      	orrs	r2, r1
 80017fe:	61da      	str	r2, [r3, #28]

			// OC4PE: Output compare preload enable (bit 11)
			timHandleTypeDef->TIMx->CCMR2 |= (HIGH << Shift_11_pos);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	69da      	ldr	r2, [r3, #28]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800180e:	61da      	str	r2, [r3, #28]

			// CC4P: Output polarity (bit 13)
			timHandleTypeDef->TIMx->CCER &= ~(HIGH << Shift_13_pos);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6a1a      	ldr	r2, [r3, #32]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800181e:	621a      	str	r2, [r3, #32]
			timHandleTypeDef->TIMx->CCER |= (polarity << Shift_13_pos);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a19      	ldr	r1, [r3, #32]
 8001826:	7cfb      	ldrb	r3, [r7, #19]
 8001828:	035a      	lsls	r2, r3, #13
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	430a      	orrs	r2, r1
 8001830:	621a      	str	r2, [r3, #32]

			// Set compare value
			timHandleTypeDef->TIMx->CCR4 = pulse;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	641a      	str	r2, [r3, #64]	@ 0x40

			// CC4E: Enable output on channel 4 (bit 12)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_12_pos);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a1a      	ldr	r2, [r3, #32]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001848:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 800184a:	7cbb      	ldrb	r3, [r7, #18]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <TIM_INIT+0x79c>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_4_pos);  // CC4IE
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68da      	ldr	r2, [r3, #12]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0210 	orr.w	r2, r2, #16
 800185e:	60da      	str	r2, [r3, #12]
			}
		}

		// Enable NVIC interrupt for the timer if any channel interrupt is enabled
		if (enableInt) {
 8001860:	7cbb      	ldrb	r3, [r7, #18]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d026      	beq.n	80018b4 <TIM_INIT+0x7f0>
			if (timHandleTypeDef->TIMx == TIM2) {
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800186e:	d104      	bne.n	800187a <TIM_INIT+0x7b6>
				IRQ_Config(TIM2_IRQ28, HIGH);
 8001870:	2101      	movs	r1, #1
 8001872:	201c      	movs	r0, #28
 8001874:	f7ff fbea 	bl	800104c <IRQ_Config>
 8001878:	e01c      	b.n	80018b4 <TIM_INIT+0x7f0>
			} else if (timHandleTypeDef->TIMx == TIM3) {
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a7a      	ldr	r2, [pc, #488]	@ (8001a68 <TIM_INIT+0x9a4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d104      	bne.n	800188e <TIM_INIT+0x7ca>
				IRQ_Config(TIM3_IRQ29, HIGH);
 8001884:	2101      	movs	r1, #1
 8001886:	201d      	movs	r0, #29
 8001888:	f7ff fbe0 	bl	800104c <IRQ_Config>
 800188c:	e012      	b.n	80018b4 <TIM_INIT+0x7f0>
			} else if (timHandleTypeDef->TIMx == TIM4) {
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a76      	ldr	r2, [pc, #472]	@ (8001a6c <TIM_INIT+0x9a8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d104      	bne.n	80018a2 <TIM_INIT+0x7de>
				IRQ_Config(TIM4_IRQ30, HIGH);
 8001898:	2101      	movs	r1, #1
 800189a:	201e      	movs	r0, #30
 800189c:	f7ff fbd6 	bl	800104c <IRQ_Config>
 80018a0:	e008      	b.n	80018b4 <TIM_INIT+0x7f0>
			} else if (timHandleTypeDef->TIMx == TIM5) {
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a72      	ldr	r2, [pc, #456]	@ (8001a70 <TIM_INIT+0x9ac>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d103      	bne.n	80018b4 <TIM_INIT+0x7f0>
				IRQ_Config(TIM5_IRQ50, HIGH);
 80018ac:	2101      	movs	r1, #1
 80018ae:	2032      	movs	r0, #50	@ 0x32
 80018b0:	f7ff fbcc 	bl	800104c <IRQ_Config>
			}
		}
	}

	if (timHandleTypeDef->timerMode == TIM_PWM_MODE) {
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	791b      	ldrb	r3, [r3, #4]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 811c 	bne.w	8001af6 <TIM_INIT+0xa32>
		uint8_t channel = timHandleTypeDef->TIM_PWM_HandleTypeDef.channel;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80018c4:	747b      	strb	r3, [r7, #17]
		uint8_t mode = timHandleTypeDef->TIM_PWM_HandleTypeDef.mode;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80018cc:	743b      	strb	r3, [r7, #16]
		uint32_t pulse = timHandleTypeDef->TIM_PWM_HandleTypeDef.pulse;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	60fb      	str	r3, [r7, #12]
		uint8_t polarity = timHandleTypeDef->TIM_PWM_HandleTypeDef.polarity;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018da:	72fb      	strb	r3, [r7, #11]

		if (channel == TIM_CHANNEL_1) {
 80018dc:	7c7b      	ldrb	r3, [r7, #17]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d13e      	bne.n	8001960 <TIM_INIT+0x89c>
			// CC1S[1:0]: Channel 1 configured as output (bits 1:0 = 00)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699a      	ldr	r2, [r3, #24]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 0203 	bic.w	r2, r2, #3
 80018f0:	619a      	str	r2, [r3, #24]

			// OC1M[2:0]: PWM mode (bits 6:4)
			timHandleTypeDef->TIMx->CCMR1 &= ~(0x7 << Shift_4_pos);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	699a      	ldr	r2, [r3, #24]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001900:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (mode << Shift_4_pos);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6999      	ldr	r1, [r3, #24]
 8001908:	7c3b      	ldrb	r3, [r7, #16]
 800190a:	011a      	lsls	r2, r3, #4
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	430a      	orrs	r2, r1
 8001912:	619a      	str	r2, [r3, #24]

			// OC1PE: Output compare preload enable (bit 3) - IMPORTANT for PWM
			timHandleTypeDef->TIMx->CCMR1 |= (HIGH << Shift_3_pos);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0208 	orr.w	r2, r2, #8
 8001922:	619a      	str	r2, [r3, #24]

			// CC1P: Output polarity (bit 1)
			timHandleTypeDef->TIMx->CCER &= ~(HIGH << Shift_1_pos);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6a1a      	ldr	r2, [r3, #32]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0202 	bic.w	r2, r2, #2
 8001932:	621a      	str	r2, [r3, #32]
			timHandleTypeDef->TIMx->CCER |= (polarity << Shift_1_pos);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a19      	ldr	r1, [r3, #32]
 800193a:	7afb      	ldrb	r3, [r7, #11]
 800193c:	005a      	lsls	r2, r3, #1
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	621a      	str	r2, [r3, #32]

			// Set duty cycle
			timHandleTypeDef->TIMx->CCR1 = pulse;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	635a      	str	r2, [r3, #52]	@ 0x34

			// CC1E: Enable output on channel 1 (bit 0)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_0_pos);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a1a      	ldr	r2, [r3, #32]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f042 0201 	orr.w	r2, r2, #1
 800195c:	621a      	str	r2, [r3, #32]
 800195e:	e0ca      	b.n	8001af6 <TIM_INIT+0xa32>

		} else if (channel == TIM_CHANNEL_2) {
 8001960:	7c7b      	ldrb	r3, [r7, #17]
 8001962:	2b01      	cmp	r3, #1
 8001964:	d13e      	bne.n	80019e4 <TIM_INIT+0x920>
			// CC2S[1:0]: Channel 2 configured as output (bits 9:8 = 00)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001974:	619a      	str	r2, [r3, #24]

			// OC2M[2:0]: PWM mode (bits 14:12)
			timHandleTypeDef->TIMx->CCMR1 &= ~(0x7 << Shift_12_pos);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	699a      	ldr	r2, [r3, #24]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001984:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (mode << Shift_12_pos);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6999      	ldr	r1, [r3, #24]
 800198c:	7c3b      	ldrb	r3, [r7, #16]
 800198e:	031a      	lsls	r2, r3, #12
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	619a      	str	r2, [r3, #24]

			// OC2PE: Output compare preload enable (bit 11)
			timHandleTypeDef->TIMx->CCMR1 |= (HIGH << Shift_11_pos);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019a6:	619a      	str	r2, [r3, #24]

			// CC2P: Output polarity (bit 5)
			timHandleTypeDef->TIMx->CCER &= ~(HIGH << Shift_5_pos);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6a1a      	ldr	r2, [r3, #32]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f022 0220 	bic.w	r2, r2, #32
 80019b6:	621a      	str	r2, [r3, #32]
			timHandleTypeDef->TIMx->CCER |= (polarity << Shift_5_pos);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	6a19      	ldr	r1, [r3, #32]
 80019be:	7afb      	ldrb	r3, [r7, #11]
 80019c0:	015a      	lsls	r2, r3, #5
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	621a      	str	r2, [r3, #32]

			// Set duty cycle
			timHandleTypeDef->TIMx->CCR2 = pulse;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	639a      	str	r2, [r3, #56]	@ 0x38

			// CC2E: Enable output on channel 2 (bit 4)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_4_pos);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6a1a      	ldr	r2, [r3, #32]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0210 	orr.w	r2, r2, #16
 80019e0:	621a      	str	r2, [r3, #32]
 80019e2:	e088      	b.n	8001af6 <TIM_INIT+0xa32>

		} else if (channel == TIM_CHANNEL_3) {
 80019e4:	7c7b      	ldrb	r3, [r7, #17]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d144      	bne.n	8001a74 <TIM_INIT+0x9b0>
			// CC3S[1:0]: Channel 3 configured as output (bits 1:0 of CCMR2 = 00)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69da      	ldr	r2, [r3, #28]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 0203 	bic.w	r2, r2, #3
 80019f8:	61da      	str	r2, [r3, #28]

			// OC3M[2:0]: PWM mode (bits 6:4)
			timHandleTypeDef->TIMx->CCMR2 &= ~(0x7 << Shift_4_pos);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	69da      	ldr	r2, [r3, #28]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001a08:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (mode << Shift_4_pos);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	69d9      	ldr	r1, [r3, #28]
 8001a10:	7c3b      	ldrb	r3, [r7, #16]
 8001a12:	011a      	lsls	r2, r3, #4
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	61da      	str	r2, [r3, #28]

			// OC3PE: Output compare preload enable (bit 3)
			timHandleTypeDef->TIMx->CCMR2 |= (HIGH << Shift_3_pos);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	69da      	ldr	r2, [r3, #28]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f042 0208 	orr.w	r2, r2, #8
 8001a2a:	61da      	str	r2, [r3, #28]

			// CC3P: Output polarity (bit 9)
			timHandleTypeDef->TIMx->CCER &= ~(HIGH << Shift_9_pos);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001a3a:	621a      	str	r2, [r3, #32]
			timHandleTypeDef->TIMx->CCER |= (polarity << Shift_9_pos);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6a19      	ldr	r1, [r3, #32]
 8001a42:	7afb      	ldrb	r3, [r7, #11]
 8001a44:	025a      	lsls	r2, r3, #9
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	621a      	str	r2, [r3, #32]

			// Set duty cycle
			timHandleTypeDef->TIMx->CCR3 = pulse;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	63da      	str	r2, [r3, #60]	@ 0x3c

			// CC3E: Enable output on channel 3 (bit 8)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_8_pos);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	6a1a      	ldr	r2, [r3, #32]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001a64:	621a      	str	r2, [r3, #32]
 8001a66:	e046      	b.n	8001af6 <TIM_INIT+0xa32>
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800
 8001a70:	40000c00 	.word	0x40000c00

		} else if (channel == TIM_CHANNEL_4) {
 8001a74:	7c7b      	ldrb	r3, [r7, #17]
 8001a76:	2b03      	cmp	r3, #3
 8001a78:	d13d      	bne.n	8001af6 <TIM_INIT+0xa32>
			// CC4S[1:0]: Channel 4 configured as output (bits 9:8 of CCMR2 = 00)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	69da      	ldr	r2, [r3, #28]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001a88:	61da      	str	r2, [r3, #28]

			// OC4M[2:0]: PWM mode (bits 14:12)
			timHandleTypeDef->TIMx->CCMR2 &= ~(0x7 << Shift_12_pos);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69da      	ldr	r2, [r3, #28]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 42e0 	bic.w	r2, r2, #28672	@ 0x7000
 8001a98:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (mode << Shift_12_pos);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	69d9      	ldr	r1, [r3, #28]
 8001aa0:	7c3b      	ldrb	r3, [r7, #16]
 8001aa2:	031a      	lsls	r2, r3, #12
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	61da      	str	r2, [r3, #28]

			// OC4PE: Output compare preload enable (bit 11)
			timHandleTypeDef->TIMx->CCMR2 |= (HIGH << Shift_11_pos);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	69da      	ldr	r2, [r3, #28]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001aba:	61da      	str	r2, [r3, #28]

			// CC4P: Output polarity (bit 13)
			timHandleTypeDef->TIMx->CCER &= ~(HIGH << Shift_13_pos);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	6a1a      	ldr	r2, [r3, #32]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001aca:	621a      	str	r2, [r3, #32]
			timHandleTypeDef->TIMx->CCER |= (polarity << Shift_13_pos);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6a19      	ldr	r1, [r3, #32]
 8001ad2:	7afb      	ldrb	r3, [r7, #11]
 8001ad4:	035a      	lsls	r2, r3, #13
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	621a      	str	r2, [r3, #32]

			// Set duty cycle
			timHandleTypeDef->TIMx->CCR4 = pulse;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	641a      	str	r2, [r3, #64]	@ 0x40

			// CC4E: Enable output on channel 4 (bit 12)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_12_pos);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	6a1a      	ldr	r2, [r3, #32]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001af4:	621a      	str	r2, [r3, #32]
		}
	}

	// Timer enable
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_0_pos);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f042 0201 	orr.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

	/*	UG: Update generation
	 This bit can be set by software, it is automatically cleared by hardware.
	 0: No action
	 1: Re-initialize the counter and generates an update of the registers.*/
	timHandleTypeDef->TIMx->EGR |= (HIGH << Shift_0_pos);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695a      	ldr	r2, [r3, #20]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	615a      	str	r2, [r3, #20]

	// Clear the update flag that was just set
	timHandleTypeDef->TIMx->SR = 0;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	611a      	str	r2, [r3, #16]
}
 8001b1e:	bf00      	nop
 8001b20:	3720      	adds	r7, #32
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop

08001b28 <TIM_PWM_SetDutyCycle>:
 ARR = 9999 → 10,000 steps → 0.01% resolution (very fine)
 */

// Set PWM duty cycle (0 to ARR)
void TIM_PWM_SetDutyCycle(TIM_HandleTypeDef *timHandleTypeDef, uint8_t channel,
		uint32_t duty) {
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	460b      	mov	r3, r1
 8001b32:	607a      	str	r2, [r7, #4]
 8001b34:	72fb      	strb	r3, [r7, #11]
	switch (channel) {
 8001b36:	7afb      	ldrb	r3, [r7, #11]
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d81f      	bhi.n	8001b7c <TIM_PWM_SetDutyCycle+0x54>
 8001b3c:	a201      	add	r2, pc, #4	@ (adr r2, 8001b44 <TIM_PWM_SetDutyCycle+0x1c>)
 8001b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b42:	bf00      	nop
 8001b44:	08001b55 	.word	0x08001b55
 8001b48:	08001b5f 	.word	0x08001b5f
 8001b4c:	08001b69 	.word	0x08001b69
 8001b50:	08001b73 	.word	0x08001b73
	case TIM_CHANNEL_1:
		timHandleTypeDef->TIMx->CCR1 = duty;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8001b5c:	e00e      	b.n	8001b7c <TIM_PWM_SetDutyCycle+0x54>
	case TIM_CHANNEL_2:
		timHandleTypeDef->TIMx->CCR2 = duty;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8001b66:	e009      	b.n	8001b7c <TIM_PWM_SetDutyCycle+0x54>
	case TIM_CHANNEL_3:
		timHandleTypeDef->TIMx->CCR3 = duty;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8001b70:	e004      	b.n	8001b7c <TIM_PWM_SetDutyCycle+0x54>
	case TIM_CHANNEL_4:
		timHandleTypeDef->TIMx->CCR4 = duty;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	641a      	str	r2, [r3, #64]	@ 0x40
		break;
 8001b7a:	bf00      	nop
	}
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <TIM_PWM_SetDutyCyclePercent>:

// Set PWM duty cycle as percentage (0-100%)
void TIM_PWM_SetDutyCyclePercent(TIM_HandleTypeDef *timHandleTypeDef,
		uint8_t channel, uint8_t percent) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
 8001b94:	4613      	mov	r3, r2
 8001b96:	70bb      	strb	r3, [r7, #2]
	if (percent > 100)
 8001b98:	78bb      	ldrb	r3, [r7, #2]
 8001b9a:	2b64      	cmp	r3, #100	@ 0x64
 8001b9c:	d901      	bls.n	8001ba2 <TIM_PWM_SetDutyCyclePercent+0x1a>
		percent = 100;
 8001b9e:	2364      	movs	r3, #100	@ 0x64
 8001ba0:	70bb      	strb	r3, [r7, #2]

	uint32_t arr = timHandleTypeDef->TIMx->ARR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba8:	60fb      	str	r3, [r7, #12]
	uint32_t duty = (arr * percent) / 100;
 8001baa:	78bb      	ldrb	r3, [r7, #2]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	fb02 f303 	mul.w	r3, r2, r3
 8001bb2:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <TIM_PWM_SetDutyCyclePercent+0x48>)
 8001bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb8:	095b      	lsrs	r3, r3, #5
 8001bba:	60bb      	str	r3, [r7, #8]

	TIM_PWM_SetDutyCycle(timHandleTypeDef, channel, duty);
 8001bbc:	78fb      	ldrb	r3, [r7, #3]
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffb0 	bl	8001b28 <TIM_PWM_SetDutyCycle>
}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	51eb851f 	.word	0x51eb851f

08001bd4 <TIM_ENABLE>:
	default:
		return 0;
	}
}

void TIM_ENABLE(TIM_HandleTypeDef *timHandleTypeDef) {
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	// Timer enable
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_0_pos);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0201 	orr.w	r2, r2, #1
 8001bea:	601a      	str	r2, [r3, #0]

	/*	UG: Update generation
	 This bit can be set by software, it is automatically cleared by hardware.
	 0: No action
	 1: Re-initialize the counter and generates an update of the registers.*/
	timHandleTypeDef->TIMx->EGR |= (HIGH << Shift_0_pos);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	695a      	ldr	r2, [r3, #20]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	615a      	str	r2, [r3, #20]

	while (!((timHandleTypeDef->TIMx->SR >> Shift_0_pos) & 0x1))
 8001bfc:	bf00      	nop
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f8      	beq.n	8001bfe <TIM_ENABLE+0x2a>
		;

	// Clear the update flag that was just set
	timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691a      	ldr	r2, [r3, #16]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 0201 	bic.w	r2, r2, #1
 8001c1a:	611a      	str	r2, [r3, #16]
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <TIM_DELAY_INIT>:

void TIM_DELAY_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	if (timHandleTypeDef->TIMx == TIM2) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c38:	d106      	bne.n	8001c48 <TIM_DELAY_INIT+0x20>
		TIM2_EN();
 8001c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d2c <TIM_DELAY_INIT+0x104>)
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d2c <TIM_DELAY_INIT+0x104>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c46:	e022      	b.n	8001c8e <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM3) {
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a38      	ldr	r2, [pc, #224]	@ (8001d30 <TIM_DELAY_INIT+0x108>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d106      	bne.n	8001c60 <TIM_DELAY_INIT+0x38>
		TIM3_EN();
 8001c52:	4b36      	ldr	r3, [pc, #216]	@ (8001d2c <TIM_DELAY_INIT+0x104>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	4a35      	ldr	r2, [pc, #212]	@ (8001d2c <TIM_DELAY_INIT+0x104>)
 8001c58:	f043 0302 	orr.w	r3, r3, #2
 8001c5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5e:	e016      	b.n	8001c8e <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM4) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a33      	ldr	r2, [pc, #204]	@ (8001d34 <TIM_DELAY_INIT+0x10c>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d106      	bne.n	8001c78 <TIM_DELAY_INIT+0x50>
		TIM4_EN();
 8001c6a:	4b30      	ldr	r3, [pc, #192]	@ (8001d2c <TIM_DELAY_INIT+0x104>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a2f      	ldr	r2, [pc, #188]	@ (8001d2c <TIM_DELAY_INIT+0x104>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	e00a      	b.n	8001c8e <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM5) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d38 <TIM_DELAY_INIT+0x110>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d105      	bne.n	8001c8e <TIM_DELAY_INIT+0x66>
		TIM5_EN();
 8001c82:	4b2a      	ldr	r3, [pc, #168]	@ (8001d2c <TIM_DELAY_INIT+0x104>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	4a29      	ldr	r2, [pc, #164]	@ (8001d2c <TIM_DELAY_INIT+0x104>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	Get_APB1_Clock_Speed();
 8001c8e:	f7fe ff8b 	bl	8000ba8 <Get_APB1_Clock_Speed>

	uint32_t psc = SystemClockSrc / ONE_MEGA_HERT;
 8001c92:	4b2a      	ldr	r3, [pc, #168]	@ (8001d3c <TIM_DELAY_INIT+0x114>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a2a      	ldr	r2, [pc, #168]	@ (8001d40 <TIM_DELAY_INIT+0x118>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	0c9b      	lsrs	r3, r3, #18
 8001c9e:	60fb      	str	r3, [r7, #12]

	// Ensure Counter is disable
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_0_pos);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

	// Clock prescaler
	timHandleTypeDef->TIMx->PSC = (psc - 1);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	3a01      	subs	r2, #1
 8001cb8:	629a      	str	r2, [r3, #40]	@ 0x28

	if (timHandleTypeDef->TIMx == TIM2 || timHandleTypeDef->TIMx == TIM5) {
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cc2:	d004      	beq.n	8001cce <TIM_DELAY_INIT+0xa6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8001d38 <TIM_DELAY_INIT+0x110>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d105      	bne.n	8001cda <TIM_DELAY_INIT+0xb2>
		timHandleTypeDef->TIMx->ARR = 0xFFFFFFFF;  // 32-bit max
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001cd8:	e004      	b.n	8001ce4 <TIM_DELAY_INIT+0xbc>
	} else {
		timHandleTypeDef->TIMx->ARR = 0xFFFF;      // 16-bit max
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ce2:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// autoReloadPreload
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_7_pos);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001cf2:	601a      	str	r2, [r3, #0]

	// Count up
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_4_pos);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0210 	bic.w	r2, r2, #16
 8001d02:	601a      	str	r2, [r3, #0]

	// Enable update
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_1_pos);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0202 	bic.w	r2, r2, #2
 8001d12:	601a      	str	r2, [r3, #0]

	// Update request source (Select source)
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_2_pos);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0204 	bic.w	r2, r2, #4
 8001d22:	601a      	str	r2, [r3, #0]
}
 8001d24:	bf00      	nop
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40000800 	.word	0x40000800
 8001d38:	40000c00 	.word	0x40000c00
 8001d3c:	200001e4 	.word	0x200001e4
 8001d40:	431bde83 	.word	0x431bde83

08001d44 <delay_us>:
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
		mil++;
	}
}

void delay_us(TIM_HandleTypeDef *timHandleTypeDef, uint32_t us) {
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
	timHandleTypeDef->TIMx->CNT = 0;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2200      	movs	r2, #0
 8001d54:	625a      	str	r2, [r3, #36]	@ 0x24

	while (timHandleTypeDef->TIMx->CNT < us)
 8001d56:	bf00      	nop
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d8f9      	bhi.n	8001d58 <delay_us+0x14>
		;
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <delay_ms>:

void delay_ms(TIM_HandleTypeDef *timHandleTypeDef, uint32_t ms) {
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
	for (uint32_t i = 0; i < ms; i++) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	e007      	b.n	8001d92 <delay_ms+0x20>
		delay_us(timHandleTypeDef, 1000);
 8001d82:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f7ff ffdc 	bl	8001d44 <delay_us>
	for (uint32_t i = 0; i < ms; i++) {
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	3301      	adds	r3, #1
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d3f3      	bcc.n	8001d82 <delay_ms+0x10>
	}
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8001da4:	b480      	push	{r7}
 8001da6:	b083      	sub	sp, #12
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 8001dae:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <ITM_SendChar+0x48>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a0e      	ldr	r2, [pc, #56]	@ (8001dec <ITM_SendChar+0x48>)
 8001db4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001db8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 8001dba:	4b0d      	ldr	r3, [pc, #52]	@ (8001df0 <ITM_SendChar+0x4c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <ITM_SendChar+0x4c>)
 8001dc0:	f043 0301 	orr.w	r3, r3, #1
 8001dc4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 8001dc6:	bf00      	nop
 8001dc8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f8      	beq.n	8001dc8 <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001dd6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	6013      	str	r3, [r2, #0]
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000edfc 	.word	0xe000edfc
 8001df0:	e0000e00 	.word	0xe0000e00

08001df4 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
	return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_kill>:

int _kill(int pid, int sig) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001e0e:	f000 ff1b 	bl	8002c48 <__errno>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2216      	movs	r2, #22
 8001e16:	601a      	str	r2, [r3, #0]
	return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_exit>:

void _exit(int status) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffe7 	bl	8001e04 <_kill>
	while (1) {
 8001e36:	bf00      	nop
 8001e38:	e7fd      	b.n	8001e36 <_exit+0x12>

08001e3a <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e00a      	b.n	8001e62 <_read+0x28>
		*ptr++ = __io_getchar();
 8001e4c:	f3af 8000 	nop.w
 8001e50:	4601      	mov	r1, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	60ba      	str	r2, [r7, #8]
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dbf0      	blt.n	8001e4c <_read+0x12>
	}

	return len;
 8001e6a:	687b      	ldr	r3, [r7, #4]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e009      	b.n	8001e9a <_write+0x26>
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	60ba      	str	r2, [r7, #8]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ff88 	bl	8001da4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	dbf1      	blt.n	8001e86 <_write+0x12>
	}
	return len;
 8001ea2:	687b      	ldr	r3, [r7, #4]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_close>:

int _close(int file) {
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ed4:	605a      	str	r2, [r3, #4]
	return 0;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_isatty>:

int _isatty(int file) {
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	@ (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f000 fe80 	bl	8002c48 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	@ (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20020000 	.word	0x20020000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	200001e8 	.word	0x200001e8
 8001f7c:	200003b8 	.word	0x200003b8

08001f80 <Motor_PWM_Init>:
void Motor_PWM_Init(void);

/*==============================================================================
 * Motor PWM Initialization
 *============================================================================*/
void Motor_PWM_Init(void) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
	// Step 1: Configure PB6 as TIM4_CH1 (Alternate Function)
	gpio_pwm.GPIOX = GPIOB;
 8001f84:	4b27      	ldr	r3, [pc, #156]	@ (8002024 <Motor_PWM_Init+0xa4>)
 8001f86:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <Motor_PWM_Init+0xa8>)
 8001f88:	601a      	str	r2, [r3, #0]
	gpio_pwm.pin_number = GPIO_PIN_6;
 8001f8a:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <Motor_PWM_Init+0xa4>)
 8001f8c:	2206      	movs	r2, #6
 8001f8e:	711a      	strb	r2, [r3, #4]
	gpio_pwm.mode = GPIO_MODE_AF;
 8001f90:	4b24      	ldr	r3, [pc, #144]	@ (8002024 <Motor_PWM_Init+0xa4>)
 8001f92:	2202      	movs	r2, #2
 8001f94:	715a      	strb	r2, [r3, #5]
	gpio_pwm.alternate_function_select = GPIO_AF2;  // TIM4 Alternate Function
 8001f96:	4b23      	ldr	r3, [pc, #140]	@ (8002024 <Motor_PWM_Init+0xa4>)
 8001f98:	2202      	movs	r2, #2
 8001f9a:	725a      	strb	r2, [r3, #9]
	gpio_pwm.output_type = GPIO_OUTPUT_TYPE_PP;     // Push-Pull
 8001f9c:	4b21      	ldr	r3, [pc, #132]	@ (8002024 <Motor_PWM_Init+0xa4>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	721a      	strb	r2, [r3, #8]
	gpio_pwm.output_speed = GPIO_OUTPUT_SPEED_HIGH;
 8001fa2:	4b20      	ldr	r3, [pc, #128]	@ (8002024 <Motor_PWM_Init+0xa4>)
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	71da      	strb	r2, [r3, #7]
	gpio_pwm.pull_up_pull_down = GPIO_PUPD_NONE;
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8002024 <Motor_PWM_Init+0xa4>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&gpio_pwm);
 8001fae:	481d      	ldr	r0, [pc, #116]	@ (8002024 <Motor_PWM_Init+0xa4>)
 8001fb0:	f7fe fe60 	bl	8000c74 <GPIO_INIT>

	// Step 2: Configure TIM4 for 20kHz PWM
	htim4.TIMx = TIM4;
 8001fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8002030 <Motor_PWM_Init+0xb0>)
 8001fb8:	601a      	str	r2, [r3, #0]
	htim4.timerMode = TIM_PWM_MODE;
 8001fba:	4b1c      	ldr	r3, [pc, #112]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	711a      	strb	r2, [r3, #4]
	htim4.prescaler = 0;                      // No prescaler: 16MHz timer clock
 8001fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	609a      	str	r2, [r3, #8]
	htim4.autoReload = 799;                 // 16MHz / 800 = 20kHz PWM frequency
 8001fc6:	4b19      	ldr	r3, [pc, #100]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fc8:	f240 321f 	movw	r2, #799	@ 0x31f
 8001fcc:	611a      	str	r2, [r3, #16]
	htim4.autoReloadPreload = HIGH;         // Enable preload for smooth updates
 8001fce:	4b17      	ldr	r3, [pc, #92]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	751a      	strb	r2, [r3, #20]
	htim4.directionCounter = TIM_COUNT_UP;
 8001fd4:	4b15      	ldr	r3, [pc, #84]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
	htim4.updateRequestSource = 0;
 8001fda:	4b14      	ldr	r3, [pc, #80]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	755a      	strb	r2, [r3, #21]
	htim4.updateDisable = 0;
 8001fe0:	4b12      	ldr	r3, [pc, #72]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	759a      	strb	r2, [r3, #22]

	// Step 3: Configure PWM Channel 1
	htim4.TIM_PWM_HandleTypeDef.channel = TIM_CHANNEL_1;
 8001fe6:	4b11      	ldr	r3, [pc, #68]	@ (800202c <Motor_PWM_Init+0xac>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	htim4.TIM_PWM_HandleTypeDef.mode = TIM_OC_MODE_PWM1;      // PWM Mode 1
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <Motor_PWM_Init+0xac>)
 8001ff0:	2206      	movs	r2, #6
 8001ff2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	htim4.TIM_PWM_HandleTypeDef.pulse = 0;            // Start at 0% (motor off)
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <Motor_PWM_Init+0xac>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
	htim4.TIM_PWM_HandleTypeDef.polarity = TIM_OC_POLARITY_HIGH;
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800202c <Motor_PWM_Init+0xac>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	// Step 4: Initialize Timer
	TIM_INIT(&htim4);
 8002004:	4809      	ldr	r0, [pc, #36]	@ (800202c <Motor_PWM_Init+0xac>)
 8002006:	f7ff f85d 	bl	80010c4 <TIM_INIT>

	// Initialize delay timer
	htim2.TIMx = TIM2;
 800200a:	4b0a      	ldr	r3, [pc, #40]	@ (8002034 <Motor_PWM_Init+0xb4>)
 800200c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002010:	601a      	str	r2, [r3, #0]
	TIM_DELAY_INIT(&htim2);
 8002012:	4808      	ldr	r0, [pc, #32]	@ (8002034 <Motor_PWM_Init+0xb4>)
 8002014:	f7ff fe08 	bl	8001c28 <TIM_DELAY_INIT>
	TIM_ENABLE(&htim2);
 8002018:	4806      	ldr	r0, [pc, #24]	@ (8002034 <Motor_PWM_Init+0xb4>)
 800201a:	f7ff fddb 	bl	8001bd4 <TIM_ENABLE>
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000025c 	.word	0x2000025c
 8002028:	40020400 	.word	0x40020400
 800202c:	200001ec 	.word	0x200001ec
 8002030:	40000800 	.word	0x40000800
 8002034:	20000224 	.word	0x20000224

08002038 <main>:

int main() {
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
	Motor_PWM_Init();
 800203c:	f7ff ffa0 	bl	8001f80 <Motor_PWM_Init>
	while (1) {
		// Control motor speed
		TIM_PWM_SetDutyCyclePercent(&htim4, TIM_CHANNEL_1, 25);  // 25% speed
 8002040:	2219      	movs	r2, #25
 8002042:	2100      	movs	r1, #0
 8002044:	4813      	ldr	r0, [pc, #76]	@ (8002094 <main+0x5c>)
 8002046:	f7ff fd9f 	bl	8001b88 <TIM_PWM_SetDutyCyclePercent>
		delay_ms(&htim2, 2000);
 800204a:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800204e:	4812      	ldr	r0, [pc, #72]	@ (8002098 <main+0x60>)
 8002050:	f7ff fe8f 	bl	8001d72 <delay_ms>

		TIM_PWM_SetDutyCyclePercent(&htim4, TIM_CHANNEL_1, 50);  // 50% speed
 8002054:	2232      	movs	r2, #50	@ 0x32
 8002056:	2100      	movs	r1, #0
 8002058:	480e      	ldr	r0, [pc, #56]	@ (8002094 <main+0x5c>)
 800205a:	f7ff fd95 	bl	8001b88 <TIM_PWM_SetDutyCyclePercent>
		delay_ms(&htim2, 2000);
 800205e:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002062:	480d      	ldr	r0, [pc, #52]	@ (8002098 <main+0x60>)
 8002064:	f7ff fe85 	bl	8001d72 <delay_ms>

		TIM_PWM_SetDutyCyclePercent(&htim4, TIM_CHANNEL_1, 75);  // 75% speed
 8002068:	224b      	movs	r2, #75	@ 0x4b
 800206a:	2100      	movs	r1, #0
 800206c:	4809      	ldr	r0, [pc, #36]	@ (8002094 <main+0x5c>)
 800206e:	f7ff fd8b 	bl	8001b88 <TIM_PWM_SetDutyCyclePercent>
		delay_ms(&htim2, 2000);
 8002072:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8002076:	4808      	ldr	r0, [pc, #32]	@ (8002098 <main+0x60>)
 8002078:	f7ff fe7b 	bl	8001d72 <delay_ms>

		TIM_PWM_SetDutyCyclePercent(&htim4, TIM_CHANNEL_1, 100); // Full speed
 800207c:	2264      	movs	r2, #100	@ 0x64
 800207e:	2100      	movs	r1, #0
 8002080:	4804      	ldr	r0, [pc, #16]	@ (8002094 <main+0x5c>)
 8002082:	f7ff fd81 	bl	8001b88 <TIM_PWM_SetDutyCyclePercent>
		delay_ms(&htim2, 2000);
 8002086:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800208a:	4803      	ldr	r0, [pc, #12]	@ (8002098 <main+0x60>)
 800208c:	f7ff fe71 	bl	8001d72 <delay_ms>
		TIM_PWM_SetDutyCyclePercent(&htim4, TIM_CHANNEL_1, 25);  // 25% speed
 8002090:	bf00      	nop
 8002092:	e7d5      	b.n	8002040 <main+0x8>
 8002094:	200001ec 	.word	0x200001ec
 8002098:	20000224 	.word	0x20000224

0800209c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800209c:	480d      	ldr	r0, [pc, #52]	@ (80020d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800209e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80020a0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	@ (80020dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <LoopForever+0xe>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	@ (80020e8 <LoopForever+0x16>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80020ca:	f000 fdc3 	bl	8002c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80020ce:	f7ff ffb3 	bl	8002038 <main>

080020d2 <LoopForever>:

LoopForever:
  b LoopForever
 80020d2:	e7fe      	b.n	80020d2 <LoopForever>
  ldr   r0, =_estack
 80020d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 80020e0:	08004dbc 	.word	0x08004dbc
  ldr r2, =_sbss
 80020e4:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 80020e8:	200003b4 	.word	0x200003b4

080020ec <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC_IRQHandler>

080020ee <__cvt>:
 80020ee:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80020f2:	ec57 6b10 	vmov	r6, r7, d0
 80020f6:	2f00      	cmp	r7, #0
 80020f8:	460c      	mov	r4, r1
 80020fa:	4619      	mov	r1, r3
 80020fc:	463b      	mov	r3, r7
 80020fe:	bfbb      	ittet	lt
 8002100:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002104:	461f      	movlt	r7, r3
 8002106:	2300      	movge	r3, #0
 8002108:	232d      	movlt	r3, #45	@ 0x2d
 800210a:	700b      	strb	r3, [r1, #0]
 800210c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800210e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002112:	4691      	mov	r9, r2
 8002114:	f023 0820 	bic.w	r8, r3, #32
 8002118:	bfbc      	itt	lt
 800211a:	4632      	movlt	r2, r6
 800211c:	4616      	movlt	r6, r2
 800211e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002122:	d005      	beq.n	8002130 <__cvt+0x42>
 8002124:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002128:	d100      	bne.n	800212c <__cvt+0x3e>
 800212a:	3401      	adds	r4, #1
 800212c:	2102      	movs	r1, #2
 800212e:	e000      	b.n	8002132 <__cvt+0x44>
 8002130:	2103      	movs	r1, #3
 8002132:	ab03      	add	r3, sp, #12
 8002134:	9301      	str	r3, [sp, #4]
 8002136:	ab02      	add	r3, sp, #8
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	ec47 6b10 	vmov	d0, r6, r7
 800213e:	4653      	mov	r3, sl
 8002140:	4622      	mov	r2, r4
 8002142:	f000 fe39 	bl	8002db8 <_dtoa_r>
 8002146:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800214a:	4605      	mov	r5, r0
 800214c:	d119      	bne.n	8002182 <__cvt+0x94>
 800214e:	f019 0f01 	tst.w	r9, #1
 8002152:	d00e      	beq.n	8002172 <__cvt+0x84>
 8002154:	eb00 0904 	add.w	r9, r0, r4
 8002158:	2200      	movs	r2, #0
 800215a:	2300      	movs	r3, #0
 800215c:	4630      	mov	r0, r6
 800215e:	4639      	mov	r1, r7
 8002160:	f7fe fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8002164:	b108      	cbz	r0, 800216a <__cvt+0x7c>
 8002166:	f8cd 900c 	str.w	r9, [sp, #12]
 800216a:	2230      	movs	r2, #48	@ 0x30
 800216c:	9b03      	ldr	r3, [sp, #12]
 800216e:	454b      	cmp	r3, r9
 8002170:	d31e      	bcc.n	80021b0 <__cvt+0xc2>
 8002172:	9b03      	ldr	r3, [sp, #12]
 8002174:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002176:	1b5b      	subs	r3, r3, r5
 8002178:	4628      	mov	r0, r5
 800217a:	6013      	str	r3, [r2, #0]
 800217c:	b004      	add	sp, #16
 800217e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002182:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002186:	eb00 0904 	add.w	r9, r0, r4
 800218a:	d1e5      	bne.n	8002158 <__cvt+0x6a>
 800218c:	7803      	ldrb	r3, [r0, #0]
 800218e:	2b30      	cmp	r3, #48	@ 0x30
 8002190:	d10a      	bne.n	80021a8 <__cvt+0xba>
 8002192:	2200      	movs	r2, #0
 8002194:	2300      	movs	r3, #0
 8002196:	4630      	mov	r0, r6
 8002198:	4639      	mov	r1, r7
 800219a:	f7fe fc95 	bl	8000ac8 <__aeabi_dcmpeq>
 800219e:	b918      	cbnz	r0, 80021a8 <__cvt+0xba>
 80021a0:	f1c4 0401 	rsb	r4, r4, #1
 80021a4:	f8ca 4000 	str.w	r4, [sl]
 80021a8:	f8da 3000 	ldr.w	r3, [sl]
 80021ac:	4499      	add	r9, r3
 80021ae:	e7d3      	b.n	8002158 <__cvt+0x6a>
 80021b0:	1c59      	adds	r1, r3, #1
 80021b2:	9103      	str	r1, [sp, #12]
 80021b4:	701a      	strb	r2, [r3, #0]
 80021b6:	e7d9      	b.n	800216c <__cvt+0x7e>

080021b8 <__exponent>:
 80021b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80021ba:	2900      	cmp	r1, #0
 80021bc:	bfba      	itte	lt
 80021be:	4249      	neglt	r1, r1
 80021c0:	232d      	movlt	r3, #45	@ 0x2d
 80021c2:	232b      	movge	r3, #43	@ 0x2b
 80021c4:	2909      	cmp	r1, #9
 80021c6:	7002      	strb	r2, [r0, #0]
 80021c8:	7043      	strb	r3, [r0, #1]
 80021ca:	dd29      	ble.n	8002220 <__exponent+0x68>
 80021cc:	f10d 0307 	add.w	r3, sp, #7
 80021d0:	461d      	mov	r5, r3
 80021d2:	270a      	movs	r7, #10
 80021d4:	461a      	mov	r2, r3
 80021d6:	fbb1 f6f7 	udiv	r6, r1, r7
 80021da:	fb07 1416 	mls	r4, r7, r6, r1
 80021de:	3430      	adds	r4, #48	@ 0x30
 80021e0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80021e4:	460c      	mov	r4, r1
 80021e6:	2c63      	cmp	r4, #99	@ 0x63
 80021e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80021ec:	4631      	mov	r1, r6
 80021ee:	dcf1      	bgt.n	80021d4 <__exponent+0x1c>
 80021f0:	3130      	adds	r1, #48	@ 0x30
 80021f2:	1e94      	subs	r4, r2, #2
 80021f4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80021f8:	1c41      	adds	r1, r0, #1
 80021fa:	4623      	mov	r3, r4
 80021fc:	42ab      	cmp	r3, r5
 80021fe:	d30a      	bcc.n	8002216 <__exponent+0x5e>
 8002200:	f10d 0309 	add.w	r3, sp, #9
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	42ac      	cmp	r4, r5
 8002208:	bf88      	it	hi
 800220a:	2300      	movhi	r3, #0
 800220c:	3302      	adds	r3, #2
 800220e:	4403      	add	r3, r0
 8002210:	1a18      	subs	r0, r3, r0
 8002212:	b003      	add	sp, #12
 8002214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002216:	f813 6b01 	ldrb.w	r6, [r3], #1
 800221a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800221e:	e7ed      	b.n	80021fc <__exponent+0x44>
 8002220:	2330      	movs	r3, #48	@ 0x30
 8002222:	3130      	adds	r1, #48	@ 0x30
 8002224:	7083      	strb	r3, [r0, #2]
 8002226:	70c1      	strb	r1, [r0, #3]
 8002228:	1d03      	adds	r3, r0, #4
 800222a:	e7f1      	b.n	8002210 <__exponent+0x58>

0800222c <_printf_float>:
 800222c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002230:	b08d      	sub	sp, #52	@ 0x34
 8002232:	460c      	mov	r4, r1
 8002234:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002238:	4616      	mov	r6, r2
 800223a:	461f      	mov	r7, r3
 800223c:	4605      	mov	r5, r0
 800223e:	f000 fcb9 	bl	8002bb4 <_localeconv_r>
 8002242:	6803      	ldr	r3, [r0, #0]
 8002244:	9304      	str	r3, [sp, #16]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f812 	bl	8000270 <strlen>
 800224c:	2300      	movs	r3, #0
 800224e:	930a      	str	r3, [sp, #40]	@ 0x28
 8002250:	f8d8 3000 	ldr.w	r3, [r8]
 8002254:	9005      	str	r0, [sp, #20]
 8002256:	3307      	adds	r3, #7
 8002258:	f023 0307 	bic.w	r3, r3, #7
 800225c:	f103 0208 	add.w	r2, r3, #8
 8002260:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002264:	f8d4 b000 	ldr.w	fp, [r4]
 8002268:	f8c8 2000 	str.w	r2, [r8]
 800226c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002270:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002274:	9307      	str	r3, [sp, #28]
 8002276:	f8cd 8018 	str.w	r8, [sp, #24]
 800227a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800227e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002282:	4b9c      	ldr	r3, [pc, #624]	@ (80024f4 <_printf_float+0x2c8>)
 8002284:	f04f 32ff 	mov.w	r2, #4294967295
 8002288:	f7fe fc50 	bl	8000b2c <__aeabi_dcmpun>
 800228c:	bb70      	cbnz	r0, 80022ec <_printf_float+0xc0>
 800228e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002292:	4b98      	ldr	r3, [pc, #608]	@ (80024f4 <_printf_float+0x2c8>)
 8002294:	f04f 32ff 	mov.w	r2, #4294967295
 8002298:	f7fe fc2a 	bl	8000af0 <__aeabi_dcmple>
 800229c:	bb30      	cbnz	r0, 80022ec <_printf_float+0xc0>
 800229e:	2200      	movs	r2, #0
 80022a0:	2300      	movs	r3, #0
 80022a2:	4640      	mov	r0, r8
 80022a4:	4649      	mov	r1, r9
 80022a6:	f7fe fc19 	bl	8000adc <__aeabi_dcmplt>
 80022aa:	b110      	cbz	r0, 80022b2 <_printf_float+0x86>
 80022ac:	232d      	movs	r3, #45	@ 0x2d
 80022ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022b2:	4a91      	ldr	r2, [pc, #580]	@ (80024f8 <_printf_float+0x2cc>)
 80022b4:	4b91      	ldr	r3, [pc, #580]	@ (80024fc <_printf_float+0x2d0>)
 80022b6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80022ba:	bf8c      	ite	hi
 80022bc:	4690      	movhi	r8, r2
 80022be:	4698      	movls	r8, r3
 80022c0:	2303      	movs	r3, #3
 80022c2:	6123      	str	r3, [r4, #16]
 80022c4:	f02b 0304 	bic.w	r3, fp, #4
 80022c8:	6023      	str	r3, [r4, #0]
 80022ca:	f04f 0900 	mov.w	r9, #0
 80022ce:	9700      	str	r7, [sp, #0]
 80022d0:	4633      	mov	r3, r6
 80022d2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80022d4:	4621      	mov	r1, r4
 80022d6:	4628      	mov	r0, r5
 80022d8:	f000 f9d2 	bl	8002680 <_printf_common>
 80022dc:	3001      	adds	r0, #1
 80022de:	f040 808d 	bne.w	80023fc <_printf_float+0x1d0>
 80022e2:	f04f 30ff 	mov.w	r0, #4294967295
 80022e6:	b00d      	add	sp, #52	@ 0x34
 80022e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022ec:	4642      	mov	r2, r8
 80022ee:	464b      	mov	r3, r9
 80022f0:	4640      	mov	r0, r8
 80022f2:	4649      	mov	r1, r9
 80022f4:	f7fe fc1a 	bl	8000b2c <__aeabi_dcmpun>
 80022f8:	b140      	cbz	r0, 800230c <_printf_float+0xe0>
 80022fa:	464b      	mov	r3, r9
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bfbc      	itt	lt
 8002300:	232d      	movlt	r3, #45	@ 0x2d
 8002302:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002306:	4a7e      	ldr	r2, [pc, #504]	@ (8002500 <_printf_float+0x2d4>)
 8002308:	4b7e      	ldr	r3, [pc, #504]	@ (8002504 <_printf_float+0x2d8>)
 800230a:	e7d4      	b.n	80022b6 <_printf_float+0x8a>
 800230c:	6863      	ldr	r3, [r4, #4]
 800230e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002312:	9206      	str	r2, [sp, #24]
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	d13b      	bne.n	8002390 <_printf_float+0x164>
 8002318:	2306      	movs	r3, #6
 800231a:	6063      	str	r3, [r4, #4]
 800231c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002320:	2300      	movs	r3, #0
 8002322:	6022      	str	r2, [r4, #0]
 8002324:	9303      	str	r3, [sp, #12]
 8002326:	ab0a      	add	r3, sp, #40	@ 0x28
 8002328:	e9cd a301 	strd	sl, r3, [sp, #4]
 800232c:	ab09      	add	r3, sp, #36	@ 0x24
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	6861      	ldr	r1, [r4, #4]
 8002332:	ec49 8b10 	vmov	d0, r8, r9
 8002336:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800233a:	4628      	mov	r0, r5
 800233c:	f7ff fed7 	bl	80020ee <__cvt>
 8002340:	9b06      	ldr	r3, [sp, #24]
 8002342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002344:	2b47      	cmp	r3, #71	@ 0x47
 8002346:	4680      	mov	r8, r0
 8002348:	d129      	bne.n	800239e <_printf_float+0x172>
 800234a:	1cc8      	adds	r0, r1, #3
 800234c:	db02      	blt.n	8002354 <_printf_float+0x128>
 800234e:	6863      	ldr	r3, [r4, #4]
 8002350:	4299      	cmp	r1, r3
 8002352:	dd41      	ble.n	80023d8 <_printf_float+0x1ac>
 8002354:	f1aa 0a02 	sub.w	sl, sl, #2
 8002358:	fa5f fa8a 	uxtb.w	sl, sl
 800235c:	3901      	subs	r1, #1
 800235e:	4652      	mov	r2, sl
 8002360:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002364:	9109      	str	r1, [sp, #36]	@ 0x24
 8002366:	f7ff ff27 	bl	80021b8 <__exponent>
 800236a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800236c:	1813      	adds	r3, r2, r0
 800236e:	2a01      	cmp	r2, #1
 8002370:	4681      	mov	r9, r0
 8002372:	6123      	str	r3, [r4, #16]
 8002374:	dc02      	bgt.n	800237c <_printf_float+0x150>
 8002376:	6822      	ldr	r2, [r4, #0]
 8002378:	07d2      	lsls	r2, r2, #31
 800237a:	d501      	bpl.n	8002380 <_printf_float+0x154>
 800237c:	3301      	adds	r3, #1
 800237e:	6123      	str	r3, [r4, #16]
 8002380:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0a2      	beq.n	80022ce <_printf_float+0xa2>
 8002388:	232d      	movs	r3, #45	@ 0x2d
 800238a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800238e:	e79e      	b.n	80022ce <_printf_float+0xa2>
 8002390:	9a06      	ldr	r2, [sp, #24]
 8002392:	2a47      	cmp	r2, #71	@ 0x47
 8002394:	d1c2      	bne.n	800231c <_printf_float+0xf0>
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1c0      	bne.n	800231c <_printf_float+0xf0>
 800239a:	2301      	movs	r3, #1
 800239c:	e7bd      	b.n	800231a <_printf_float+0xee>
 800239e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80023a2:	d9db      	bls.n	800235c <_printf_float+0x130>
 80023a4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80023a8:	d118      	bne.n	80023dc <_printf_float+0x1b0>
 80023aa:	2900      	cmp	r1, #0
 80023ac:	6863      	ldr	r3, [r4, #4]
 80023ae:	dd0b      	ble.n	80023c8 <_printf_float+0x19c>
 80023b0:	6121      	str	r1, [r4, #16]
 80023b2:	b913      	cbnz	r3, 80023ba <_printf_float+0x18e>
 80023b4:	6822      	ldr	r2, [r4, #0]
 80023b6:	07d0      	lsls	r0, r2, #31
 80023b8:	d502      	bpl.n	80023c0 <_printf_float+0x194>
 80023ba:	3301      	adds	r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	6123      	str	r3, [r4, #16]
 80023c0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80023c2:	f04f 0900 	mov.w	r9, #0
 80023c6:	e7db      	b.n	8002380 <_printf_float+0x154>
 80023c8:	b913      	cbnz	r3, 80023d0 <_printf_float+0x1a4>
 80023ca:	6822      	ldr	r2, [r4, #0]
 80023cc:	07d2      	lsls	r2, r2, #31
 80023ce:	d501      	bpl.n	80023d4 <_printf_float+0x1a8>
 80023d0:	3302      	adds	r3, #2
 80023d2:	e7f4      	b.n	80023be <_printf_float+0x192>
 80023d4:	2301      	movs	r3, #1
 80023d6:	e7f2      	b.n	80023be <_printf_float+0x192>
 80023d8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80023dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80023de:	4299      	cmp	r1, r3
 80023e0:	db05      	blt.n	80023ee <_printf_float+0x1c2>
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	6121      	str	r1, [r4, #16]
 80023e6:	07d8      	lsls	r0, r3, #31
 80023e8:	d5ea      	bpl.n	80023c0 <_printf_float+0x194>
 80023ea:	1c4b      	adds	r3, r1, #1
 80023ec:	e7e7      	b.n	80023be <_printf_float+0x192>
 80023ee:	2900      	cmp	r1, #0
 80023f0:	bfd4      	ite	le
 80023f2:	f1c1 0202 	rsble	r2, r1, #2
 80023f6:	2201      	movgt	r2, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	e7e0      	b.n	80023be <_printf_float+0x192>
 80023fc:	6823      	ldr	r3, [r4, #0]
 80023fe:	055a      	lsls	r2, r3, #21
 8002400:	d407      	bmi.n	8002412 <_printf_float+0x1e6>
 8002402:	6923      	ldr	r3, [r4, #16]
 8002404:	4642      	mov	r2, r8
 8002406:	4631      	mov	r1, r6
 8002408:	4628      	mov	r0, r5
 800240a:	47b8      	blx	r7
 800240c:	3001      	adds	r0, #1
 800240e:	d12b      	bne.n	8002468 <_printf_float+0x23c>
 8002410:	e767      	b.n	80022e2 <_printf_float+0xb6>
 8002412:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002416:	f240 80dd 	bls.w	80025d4 <_printf_float+0x3a8>
 800241a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800241e:	2200      	movs	r2, #0
 8002420:	2300      	movs	r3, #0
 8002422:	f7fe fb51 	bl	8000ac8 <__aeabi_dcmpeq>
 8002426:	2800      	cmp	r0, #0
 8002428:	d033      	beq.n	8002492 <_printf_float+0x266>
 800242a:	4a37      	ldr	r2, [pc, #220]	@ (8002508 <_printf_float+0x2dc>)
 800242c:	2301      	movs	r3, #1
 800242e:	4631      	mov	r1, r6
 8002430:	4628      	mov	r0, r5
 8002432:	47b8      	blx	r7
 8002434:	3001      	adds	r0, #1
 8002436:	f43f af54 	beq.w	80022e2 <_printf_float+0xb6>
 800243a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800243e:	4543      	cmp	r3, r8
 8002440:	db02      	blt.n	8002448 <_printf_float+0x21c>
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	07d8      	lsls	r0, r3, #31
 8002446:	d50f      	bpl.n	8002468 <_printf_float+0x23c>
 8002448:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800244c:	4631      	mov	r1, r6
 800244e:	4628      	mov	r0, r5
 8002450:	47b8      	blx	r7
 8002452:	3001      	adds	r0, #1
 8002454:	f43f af45 	beq.w	80022e2 <_printf_float+0xb6>
 8002458:	f04f 0900 	mov.w	r9, #0
 800245c:	f108 38ff 	add.w	r8, r8, #4294967295
 8002460:	f104 0a1a 	add.w	sl, r4, #26
 8002464:	45c8      	cmp	r8, r9
 8002466:	dc09      	bgt.n	800247c <_printf_float+0x250>
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	079b      	lsls	r3, r3, #30
 800246c:	f100 8103 	bmi.w	8002676 <_printf_float+0x44a>
 8002470:	68e0      	ldr	r0, [r4, #12]
 8002472:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002474:	4298      	cmp	r0, r3
 8002476:	bfb8      	it	lt
 8002478:	4618      	movlt	r0, r3
 800247a:	e734      	b.n	80022e6 <_printf_float+0xba>
 800247c:	2301      	movs	r3, #1
 800247e:	4652      	mov	r2, sl
 8002480:	4631      	mov	r1, r6
 8002482:	4628      	mov	r0, r5
 8002484:	47b8      	blx	r7
 8002486:	3001      	adds	r0, #1
 8002488:	f43f af2b 	beq.w	80022e2 <_printf_float+0xb6>
 800248c:	f109 0901 	add.w	r9, r9, #1
 8002490:	e7e8      	b.n	8002464 <_printf_float+0x238>
 8002492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	dc39      	bgt.n	800250c <_printf_float+0x2e0>
 8002498:	4a1b      	ldr	r2, [pc, #108]	@ (8002508 <_printf_float+0x2dc>)
 800249a:	2301      	movs	r3, #1
 800249c:	4631      	mov	r1, r6
 800249e:	4628      	mov	r0, r5
 80024a0:	47b8      	blx	r7
 80024a2:	3001      	adds	r0, #1
 80024a4:	f43f af1d 	beq.w	80022e2 <_printf_float+0xb6>
 80024a8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80024ac:	ea59 0303 	orrs.w	r3, r9, r3
 80024b0:	d102      	bne.n	80024b8 <_printf_float+0x28c>
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	07d9      	lsls	r1, r3, #31
 80024b6:	d5d7      	bpl.n	8002468 <_printf_float+0x23c>
 80024b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80024bc:	4631      	mov	r1, r6
 80024be:	4628      	mov	r0, r5
 80024c0:	47b8      	blx	r7
 80024c2:	3001      	adds	r0, #1
 80024c4:	f43f af0d 	beq.w	80022e2 <_printf_float+0xb6>
 80024c8:	f04f 0a00 	mov.w	sl, #0
 80024cc:	f104 0b1a 	add.w	fp, r4, #26
 80024d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80024d2:	425b      	negs	r3, r3
 80024d4:	4553      	cmp	r3, sl
 80024d6:	dc01      	bgt.n	80024dc <_printf_float+0x2b0>
 80024d8:	464b      	mov	r3, r9
 80024da:	e793      	b.n	8002404 <_printf_float+0x1d8>
 80024dc:	2301      	movs	r3, #1
 80024de:	465a      	mov	r2, fp
 80024e0:	4631      	mov	r1, r6
 80024e2:	4628      	mov	r0, r5
 80024e4:	47b8      	blx	r7
 80024e6:	3001      	adds	r0, #1
 80024e8:	f43f aefb 	beq.w	80022e2 <_printf_float+0xb6>
 80024ec:	f10a 0a01 	add.w	sl, sl, #1
 80024f0:	e7ee      	b.n	80024d0 <_printf_float+0x2a4>
 80024f2:	bf00      	nop
 80024f4:	7fefffff 	.word	0x7fefffff
 80024f8:	08004a3c 	.word	0x08004a3c
 80024fc:	08004a38 	.word	0x08004a38
 8002500:	08004a44 	.word	0x08004a44
 8002504:	08004a40 	.word	0x08004a40
 8002508:	08004a48 	.word	0x08004a48
 800250c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800250e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002512:	4553      	cmp	r3, sl
 8002514:	bfa8      	it	ge
 8002516:	4653      	movge	r3, sl
 8002518:	2b00      	cmp	r3, #0
 800251a:	4699      	mov	r9, r3
 800251c:	dc36      	bgt.n	800258c <_printf_float+0x360>
 800251e:	f04f 0b00 	mov.w	fp, #0
 8002522:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002526:	f104 021a 	add.w	r2, r4, #26
 800252a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800252c:	9306      	str	r3, [sp, #24]
 800252e:	eba3 0309 	sub.w	r3, r3, r9
 8002532:	455b      	cmp	r3, fp
 8002534:	dc31      	bgt.n	800259a <_printf_float+0x36e>
 8002536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002538:	459a      	cmp	sl, r3
 800253a:	dc3a      	bgt.n	80025b2 <_printf_float+0x386>
 800253c:	6823      	ldr	r3, [r4, #0]
 800253e:	07da      	lsls	r2, r3, #31
 8002540:	d437      	bmi.n	80025b2 <_printf_float+0x386>
 8002542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002544:	ebaa 0903 	sub.w	r9, sl, r3
 8002548:	9b06      	ldr	r3, [sp, #24]
 800254a:	ebaa 0303 	sub.w	r3, sl, r3
 800254e:	4599      	cmp	r9, r3
 8002550:	bfa8      	it	ge
 8002552:	4699      	movge	r9, r3
 8002554:	f1b9 0f00 	cmp.w	r9, #0
 8002558:	dc33      	bgt.n	80025c2 <_printf_float+0x396>
 800255a:	f04f 0800 	mov.w	r8, #0
 800255e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002562:	f104 0b1a 	add.w	fp, r4, #26
 8002566:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002568:	ebaa 0303 	sub.w	r3, sl, r3
 800256c:	eba3 0309 	sub.w	r3, r3, r9
 8002570:	4543      	cmp	r3, r8
 8002572:	f77f af79 	ble.w	8002468 <_printf_float+0x23c>
 8002576:	2301      	movs	r3, #1
 8002578:	465a      	mov	r2, fp
 800257a:	4631      	mov	r1, r6
 800257c:	4628      	mov	r0, r5
 800257e:	47b8      	blx	r7
 8002580:	3001      	adds	r0, #1
 8002582:	f43f aeae 	beq.w	80022e2 <_printf_float+0xb6>
 8002586:	f108 0801 	add.w	r8, r8, #1
 800258a:	e7ec      	b.n	8002566 <_printf_float+0x33a>
 800258c:	4642      	mov	r2, r8
 800258e:	4631      	mov	r1, r6
 8002590:	4628      	mov	r0, r5
 8002592:	47b8      	blx	r7
 8002594:	3001      	adds	r0, #1
 8002596:	d1c2      	bne.n	800251e <_printf_float+0x2f2>
 8002598:	e6a3      	b.n	80022e2 <_printf_float+0xb6>
 800259a:	2301      	movs	r3, #1
 800259c:	4631      	mov	r1, r6
 800259e:	4628      	mov	r0, r5
 80025a0:	9206      	str	r2, [sp, #24]
 80025a2:	47b8      	blx	r7
 80025a4:	3001      	adds	r0, #1
 80025a6:	f43f ae9c 	beq.w	80022e2 <_printf_float+0xb6>
 80025aa:	9a06      	ldr	r2, [sp, #24]
 80025ac:	f10b 0b01 	add.w	fp, fp, #1
 80025b0:	e7bb      	b.n	800252a <_printf_float+0x2fe>
 80025b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025b6:	4631      	mov	r1, r6
 80025b8:	4628      	mov	r0, r5
 80025ba:	47b8      	blx	r7
 80025bc:	3001      	adds	r0, #1
 80025be:	d1c0      	bne.n	8002542 <_printf_float+0x316>
 80025c0:	e68f      	b.n	80022e2 <_printf_float+0xb6>
 80025c2:	9a06      	ldr	r2, [sp, #24]
 80025c4:	464b      	mov	r3, r9
 80025c6:	4442      	add	r2, r8
 80025c8:	4631      	mov	r1, r6
 80025ca:	4628      	mov	r0, r5
 80025cc:	47b8      	blx	r7
 80025ce:	3001      	adds	r0, #1
 80025d0:	d1c3      	bne.n	800255a <_printf_float+0x32e>
 80025d2:	e686      	b.n	80022e2 <_printf_float+0xb6>
 80025d4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80025d8:	f1ba 0f01 	cmp.w	sl, #1
 80025dc:	dc01      	bgt.n	80025e2 <_printf_float+0x3b6>
 80025de:	07db      	lsls	r3, r3, #31
 80025e0:	d536      	bpl.n	8002650 <_printf_float+0x424>
 80025e2:	2301      	movs	r3, #1
 80025e4:	4642      	mov	r2, r8
 80025e6:	4631      	mov	r1, r6
 80025e8:	4628      	mov	r0, r5
 80025ea:	47b8      	blx	r7
 80025ec:	3001      	adds	r0, #1
 80025ee:	f43f ae78 	beq.w	80022e2 <_printf_float+0xb6>
 80025f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025f6:	4631      	mov	r1, r6
 80025f8:	4628      	mov	r0, r5
 80025fa:	47b8      	blx	r7
 80025fc:	3001      	adds	r0, #1
 80025fe:	f43f ae70 	beq.w	80022e2 <_printf_float+0xb6>
 8002602:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002606:	2200      	movs	r2, #0
 8002608:	2300      	movs	r3, #0
 800260a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800260e:	f7fe fa5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8002612:	b9c0      	cbnz	r0, 8002646 <_printf_float+0x41a>
 8002614:	4653      	mov	r3, sl
 8002616:	f108 0201 	add.w	r2, r8, #1
 800261a:	4631      	mov	r1, r6
 800261c:	4628      	mov	r0, r5
 800261e:	47b8      	blx	r7
 8002620:	3001      	adds	r0, #1
 8002622:	d10c      	bne.n	800263e <_printf_float+0x412>
 8002624:	e65d      	b.n	80022e2 <_printf_float+0xb6>
 8002626:	2301      	movs	r3, #1
 8002628:	465a      	mov	r2, fp
 800262a:	4631      	mov	r1, r6
 800262c:	4628      	mov	r0, r5
 800262e:	47b8      	blx	r7
 8002630:	3001      	adds	r0, #1
 8002632:	f43f ae56 	beq.w	80022e2 <_printf_float+0xb6>
 8002636:	f108 0801 	add.w	r8, r8, #1
 800263a:	45d0      	cmp	r8, sl
 800263c:	dbf3      	blt.n	8002626 <_printf_float+0x3fa>
 800263e:	464b      	mov	r3, r9
 8002640:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002644:	e6df      	b.n	8002406 <_printf_float+0x1da>
 8002646:	f04f 0800 	mov.w	r8, #0
 800264a:	f104 0b1a 	add.w	fp, r4, #26
 800264e:	e7f4      	b.n	800263a <_printf_float+0x40e>
 8002650:	2301      	movs	r3, #1
 8002652:	4642      	mov	r2, r8
 8002654:	e7e1      	b.n	800261a <_printf_float+0x3ee>
 8002656:	2301      	movs	r3, #1
 8002658:	464a      	mov	r2, r9
 800265a:	4631      	mov	r1, r6
 800265c:	4628      	mov	r0, r5
 800265e:	47b8      	blx	r7
 8002660:	3001      	adds	r0, #1
 8002662:	f43f ae3e 	beq.w	80022e2 <_printf_float+0xb6>
 8002666:	f108 0801 	add.w	r8, r8, #1
 800266a:	68e3      	ldr	r3, [r4, #12]
 800266c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800266e:	1a5b      	subs	r3, r3, r1
 8002670:	4543      	cmp	r3, r8
 8002672:	dcf0      	bgt.n	8002656 <_printf_float+0x42a>
 8002674:	e6fc      	b.n	8002470 <_printf_float+0x244>
 8002676:	f04f 0800 	mov.w	r8, #0
 800267a:	f104 0919 	add.w	r9, r4, #25
 800267e:	e7f4      	b.n	800266a <_printf_float+0x43e>

08002680 <_printf_common>:
 8002680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002684:	4616      	mov	r6, r2
 8002686:	4698      	mov	r8, r3
 8002688:	688a      	ldr	r2, [r1, #8]
 800268a:	690b      	ldr	r3, [r1, #16]
 800268c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002690:	4293      	cmp	r3, r2
 8002692:	bfb8      	it	lt
 8002694:	4613      	movlt	r3, r2
 8002696:	6033      	str	r3, [r6, #0]
 8002698:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800269c:	4607      	mov	r7, r0
 800269e:	460c      	mov	r4, r1
 80026a0:	b10a      	cbz	r2, 80026a6 <_printf_common+0x26>
 80026a2:	3301      	adds	r3, #1
 80026a4:	6033      	str	r3, [r6, #0]
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	0699      	lsls	r1, r3, #26
 80026aa:	bf42      	ittt	mi
 80026ac:	6833      	ldrmi	r3, [r6, #0]
 80026ae:	3302      	addmi	r3, #2
 80026b0:	6033      	strmi	r3, [r6, #0]
 80026b2:	6825      	ldr	r5, [r4, #0]
 80026b4:	f015 0506 	ands.w	r5, r5, #6
 80026b8:	d106      	bne.n	80026c8 <_printf_common+0x48>
 80026ba:	f104 0a19 	add.w	sl, r4, #25
 80026be:	68e3      	ldr	r3, [r4, #12]
 80026c0:	6832      	ldr	r2, [r6, #0]
 80026c2:	1a9b      	subs	r3, r3, r2
 80026c4:	42ab      	cmp	r3, r5
 80026c6:	dc26      	bgt.n	8002716 <_printf_common+0x96>
 80026c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80026cc:	6822      	ldr	r2, [r4, #0]
 80026ce:	3b00      	subs	r3, #0
 80026d0:	bf18      	it	ne
 80026d2:	2301      	movne	r3, #1
 80026d4:	0692      	lsls	r2, r2, #26
 80026d6:	d42b      	bmi.n	8002730 <_printf_common+0xb0>
 80026d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80026dc:	4641      	mov	r1, r8
 80026de:	4638      	mov	r0, r7
 80026e0:	47c8      	blx	r9
 80026e2:	3001      	adds	r0, #1
 80026e4:	d01e      	beq.n	8002724 <_printf_common+0xa4>
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	6922      	ldr	r2, [r4, #16]
 80026ea:	f003 0306 	and.w	r3, r3, #6
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	bf02      	ittt	eq
 80026f2:	68e5      	ldreq	r5, [r4, #12]
 80026f4:	6833      	ldreq	r3, [r6, #0]
 80026f6:	1aed      	subeq	r5, r5, r3
 80026f8:	68a3      	ldr	r3, [r4, #8]
 80026fa:	bf0c      	ite	eq
 80026fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002700:	2500      	movne	r5, #0
 8002702:	4293      	cmp	r3, r2
 8002704:	bfc4      	itt	gt
 8002706:	1a9b      	subgt	r3, r3, r2
 8002708:	18ed      	addgt	r5, r5, r3
 800270a:	2600      	movs	r6, #0
 800270c:	341a      	adds	r4, #26
 800270e:	42b5      	cmp	r5, r6
 8002710:	d11a      	bne.n	8002748 <_printf_common+0xc8>
 8002712:	2000      	movs	r0, #0
 8002714:	e008      	b.n	8002728 <_printf_common+0xa8>
 8002716:	2301      	movs	r3, #1
 8002718:	4652      	mov	r2, sl
 800271a:	4641      	mov	r1, r8
 800271c:	4638      	mov	r0, r7
 800271e:	47c8      	blx	r9
 8002720:	3001      	adds	r0, #1
 8002722:	d103      	bne.n	800272c <_printf_common+0xac>
 8002724:	f04f 30ff 	mov.w	r0, #4294967295
 8002728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800272c:	3501      	adds	r5, #1
 800272e:	e7c6      	b.n	80026be <_printf_common+0x3e>
 8002730:	18e1      	adds	r1, r4, r3
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	2030      	movs	r0, #48	@ 0x30
 8002736:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800273a:	4422      	add	r2, r4
 800273c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002740:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002744:	3302      	adds	r3, #2
 8002746:	e7c7      	b.n	80026d8 <_printf_common+0x58>
 8002748:	2301      	movs	r3, #1
 800274a:	4622      	mov	r2, r4
 800274c:	4641      	mov	r1, r8
 800274e:	4638      	mov	r0, r7
 8002750:	47c8      	blx	r9
 8002752:	3001      	adds	r0, #1
 8002754:	d0e6      	beq.n	8002724 <_printf_common+0xa4>
 8002756:	3601      	adds	r6, #1
 8002758:	e7d9      	b.n	800270e <_printf_common+0x8e>
	...

0800275c <_printf_i>:
 800275c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002760:	7e0f      	ldrb	r7, [r1, #24]
 8002762:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002764:	2f78      	cmp	r7, #120	@ 0x78
 8002766:	4691      	mov	r9, r2
 8002768:	4680      	mov	r8, r0
 800276a:	460c      	mov	r4, r1
 800276c:	469a      	mov	sl, r3
 800276e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002772:	d807      	bhi.n	8002784 <_printf_i+0x28>
 8002774:	2f62      	cmp	r7, #98	@ 0x62
 8002776:	d80a      	bhi.n	800278e <_printf_i+0x32>
 8002778:	2f00      	cmp	r7, #0
 800277a:	f000 80d1 	beq.w	8002920 <_printf_i+0x1c4>
 800277e:	2f58      	cmp	r7, #88	@ 0x58
 8002780:	f000 80b8 	beq.w	80028f4 <_printf_i+0x198>
 8002784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002788:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800278c:	e03a      	b.n	8002804 <_printf_i+0xa8>
 800278e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002792:	2b15      	cmp	r3, #21
 8002794:	d8f6      	bhi.n	8002784 <_printf_i+0x28>
 8002796:	a101      	add	r1, pc, #4	@ (adr r1, 800279c <_printf_i+0x40>)
 8002798:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800279c:	080027f5 	.word	0x080027f5
 80027a0:	08002809 	.word	0x08002809
 80027a4:	08002785 	.word	0x08002785
 80027a8:	08002785 	.word	0x08002785
 80027ac:	08002785 	.word	0x08002785
 80027b0:	08002785 	.word	0x08002785
 80027b4:	08002809 	.word	0x08002809
 80027b8:	08002785 	.word	0x08002785
 80027bc:	08002785 	.word	0x08002785
 80027c0:	08002785 	.word	0x08002785
 80027c4:	08002785 	.word	0x08002785
 80027c8:	08002907 	.word	0x08002907
 80027cc:	08002833 	.word	0x08002833
 80027d0:	080028c1 	.word	0x080028c1
 80027d4:	08002785 	.word	0x08002785
 80027d8:	08002785 	.word	0x08002785
 80027dc:	08002929 	.word	0x08002929
 80027e0:	08002785 	.word	0x08002785
 80027e4:	08002833 	.word	0x08002833
 80027e8:	08002785 	.word	0x08002785
 80027ec:	08002785 	.word	0x08002785
 80027f0:	080028c9 	.word	0x080028c9
 80027f4:	6833      	ldr	r3, [r6, #0]
 80027f6:	1d1a      	adds	r2, r3, #4
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6032      	str	r2, [r6, #0]
 80027fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002800:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002804:	2301      	movs	r3, #1
 8002806:	e09c      	b.n	8002942 <_printf_i+0x1e6>
 8002808:	6833      	ldr	r3, [r6, #0]
 800280a:	6820      	ldr	r0, [r4, #0]
 800280c:	1d19      	adds	r1, r3, #4
 800280e:	6031      	str	r1, [r6, #0]
 8002810:	0606      	lsls	r6, r0, #24
 8002812:	d501      	bpl.n	8002818 <_printf_i+0xbc>
 8002814:	681d      	ldr	r5, [r3, #0]
 8002816:	e003      	b.n	8002820 <_printf_i+0xc4>
 8002818:	0645      	lsls	r5, r0, #25
 800281a:	d5fb      	bpl.n	8002814 <_printf_i+0xb8>
 800281c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002820:	2d00      	cmp	r5, #0
 8002822:	da03      	bge.n	800282c <_printf_i+0xd0>
 8002824:	232d      	movs	r3, #45	@ 0x2d
 8002826:	426d      	negs	r5, r5
 8002828:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800282c:	4858      	ldr	r0, [pc, #352]	@ (8002990 <_printf_i+0x234>)
 800282e:	230a      	movs	r3, #10
 8002830:	e011      	b.n	8002856 <_printf_i+0xfa>
 8002832:	6821      	ldr	r1, [r4, #0]
 8002834:	6833      	ldr	r3, [r6, #0]
 8002836:	0608      	lsls	r0, r1, #24
 8002838:	f853 5b04 	ldr.w	r5, [r3], #4
 800283c:	d402      	bmi.n	8002844 <_printf_i+0xe8>
 800283e:	0649      	lsls	r1, r1, #25
 8002840:	bf48      	it	mi
 8002842:	b2ad      	uxthmi	r5, r5
 8002844:	2f6f      	cmp	r7, #111	@ 0x6f
 8002846:	4852      	ldr	r0, [pc, #328]	@ (8002990 <_printf_i+0x234>)
 8002848:	6033      	str	r3, [r6, #0]
 800284a:	bf14      	ite	ne
 800284c:	230a      	movne	r3, #10
 800284e:	2308      	moveq	r3, #8
 8002850:	2100      	movs	r1, #0
 8002852:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002856:	6866      	ldr	r6, [r4, #4]
 8002858:	60a6      	str	r6, [r4, #8]
 800285a:	2e00      	cmp	r6, #0
 800285c:	db05      	blt.n	800286a <_printf_i+0x10e>
 800285e:	6821      	ldr	r1, [r4, #0]
 8002860:	432e      	orrs	r6, r5
 8002862:	f021 0104 	bic.w	r1, r1, #4
 8002866:	6021      	str	r1, [r4, #0]
 8002868:	d04b      	beq.n	8002902 <_printf_i+0x1a6>
 800286a:	4616      	mov	r6, r2
 800286c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002870:	fb03 5711 	mls	r7, r3, r1, r5
 8002874:	5dc7      	ldrb	r7, [r0, r7]
 8002876:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800287a:	462f      	mov	r7, r5
 800287c:	42bb      	cmp	r3, r7
 800287e:	460d      	mov	r5, r1
 8002880:	d9f4      	bls.n	800286c <_printf_i+0x110>
 8002882:	2b08      	cmp	r3, #8
 8002884:	d10b      	bne.n	800289e <_printf_i+0x142>
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	07df      	lsls	r7, r3, #31
 800288a:	d508      	bpl.n	800289e <_printf_i+0x142>
 800288c:	6923      	ldr	r3, [r4, #16]
 800288e:	6861      	ldr	r1, [r4, #4]
 8002890:	4299      	cmp	r1, r3
 8002892:	bfde      	ittt	le
 8002894:	2330      	movle	r3, #48	@ 0x30
 8002896:	f806 3c01 	strble.w	r3, [r6, #-1]
 800289a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800289e:	1b92      	subs	r2, r2, r6
 80028a0:	6122      	str	r2, [r4, #16]
 80028a2:	f8cd a000 	str.w	sl, [sp]
 80028a6:	464b      	mov	r3, r9
 80028a8:	aa03      	add	r2, sp, #12
 80028aa:	4621      	mov	r1, r4
 80028ac:	4640      	mov	r0, r8
 80028ae:	f7ff fee7 	bl	8002680 <_printf_common>
 80028b2:	3001      	adds	r0, #1
 80028b4:	d14a      	bne.n	800294c <_printf_i+0x1f0>
 80028b6:	f04f 30ff 	mov.w	r0, #4294967295
 80028ba:	b004      	add	sp, #16
 80028bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	f043 0320 	orr.w	r3, r3, #32
 80028c6:	6023      	str	r3, [r4, #0]
 80028c8:	4832      	ldr	r0, [pc, #200]	@ (8002994 <_printf_i+0x238>)
 80028ca:	2778      	movs	r7, #120	@ 0x78
 80028cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80028d0:	6823      	ldr	r3, [r4, #0]
 80028d2:	6831      	ldr	r1, [r6, #0]
 80028d4:	061f      	lsls	r7, r3, #24
 80028d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80028da:	d402      	bmi.n	80028e2 <_printf_i+0x186>
 80028dc:	065f      	lsls	r7, r3, #25
 80028de:	bf48      	it	mi
 80028e0:	b2ad      	uxthmi	r5, r5
 80028e2:	6031      	str	r1, [r6, #0]
 80028e4:	07d9      	lsls	r1, r3, #31
 80028e6:	bf44      	itt	mi
 80028e8:	f043 0320 	orrmi.w	r3, r3, #32
 80028ec:	6023      	strmi	r3, [r4, #0]
 80028ee:	b11d      	cbz	r5, 80028f8 <_printf_i+0x19c>
 80028f0:	2310      	movs	r3, #16
 80028f2:	e7ad      	b.n	8002850 <_printf_i+0xf4>
 80028f4:	4826      	ldr	r0, [pc, #152]	@ (8002990 <_printf_i+0x234>)
 80028f6:	e7e9      	b.n	80028cc <_printf_i+0x170>
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	f023 0320 	bic.w	r3, r3, #32
 80028fe:	6023      	str	r3, [r4, #0]
 8002900:	e7f6      	b.n	80028f0 <_printf_i+0x194>
 8002902:	4616      	mov	r6, r2
 8002904:	e7bd      	b.n	8002882 <_printf_i+0x126>
 8002906:	6833      	ldr	r3, [r6, #0]
 8002908:	6825      	ldr	r5, [r4, #0]
 800290a:	6961      	ldr	r1, [r4, #20]
 800290c:	1d18      	adds	r0, r3, #4
 800290e:	6030      	str	r0, [r6, #0]
 8002910:	062e      	lsls	r6, r5, #24
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	d501      	bpl.n	800291a <_printf_i+0x1be>
 8002916:	6019      	str	r1, [r3, #0]
 8002918:	e002      	b.n	8002920 <_printf_i+0x1c4>
 800291a:	0668      	lsls	r0, r5, #25
 800291c:	d5fb      	bpl.n	8002916 <_printf_i+0x1ba>
 800291e:	8019      	strh	r1, [r3, #0]
 8002920:	2300      	movs	r3, #0
 8002922:	6123      	str	r3, [r4, #16]
 8002924:	4616      	mov	r6, r2
 8002926:	e7bc      	b.n	80028a2 <_printf_i+0x146>
 8002928:	6833      	ldr	r3, [r6, #0]
 800292a:	1d1a      	adds	r2, r3, #4
 800292c:	6032      	str	r2, [r6, #0]
 800292e:	681e      	ldr	r6, [r3, #0]
 8002930:	6862      	ldr	r2, [r4, #4]
 8002932:	2100      	movs	r1, #0
 8002934:	4630      	mov	r0, r6
 8002936:	f7fd fc4b 	bl	80001d0 <memchr>
 800293a:	b108      	cbz	r0, 8002940 <_printf_i+0x1e4>
 800293c:	1b80      	subs	r0, r0, r6
 800293e:	6060      	str	r0, [r4, #4]
 8002940:	6863      	ldr	r3, [r4, #4]
 8002942:	6123      	str	r3, [r4, #16]
 8002944:	2300      	movs	r3, #0
 8002946:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800294a:	e7aa      	b.n	80028a2 <_printf_i+0x146>
 800294c:	6923      	ldr	r3, [r4, #16]
 800294e:	4632      	mov	r2, r6
 8002950:	4649      	mov	r1, r9
 8002952:	4640      	mov	r0, r8
 8002954:	47d0      	blx	sl
 8002956:	3001      	adds	r0, #1
 8002958:	d0ad      	beq.n	80028b6 <_printf_i+0x15a>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	079b      	lsls	r3, r3, #30
 800295e:	d413      	bmi.n	8002988 <_printf_i+0x22c>
 8002960:	68e0      	ldr	r0, [r4, #12]
 8002962:	9b03      	ldr	r3, [sp, #12]
 8002964:	4298      	cmp	r0, r3
 8002966:	bfb8      	it	lt
 8002968:	4618      	movlt	r0, r3
 800296a:	e7a6      	b.n	80028ba <_printf_i+0x15e>
 800296c:	2301      	movs	r3, #1
 800296e:	4632      	mov	r2, r6
 8002970:	4649      	mov	r1, r9
 8002972:	4640      	mov	r0, r8
 8002974:	47d0      	blx	sl
 8002976:	3001      	adds	r0, #1
 8002978:	d09d      	beq.n	80028b6 <_printf_i+0x15a>
 800297a:	3501      	adds	r5, #1
 800297c:	68e3      	ldr	r3, [r4, #12]
 800297e:	9903      	ldr	r1, [sp, #12]
 8002980:	1a5b      	subs	r3, r3, r1
 8002982:	42ab      	cmp	r3, r5
 8002984:	dcf2      	bgt.n	800296c <_printf_i+0x210>
 8002986:	e7eb      	b.n	8002960 <_printf_i+0x204>
 8002988:	2500      	movs	r5, #0
 800298a:	f104 0619 	add.w	r6, r4, #25
 800298e:	e7f5      	b.n	800297c <_printf_i+0x220>
 8002990:	08004a4a 	.word	0x08004a4a
 8002994:	08004a5b 	.word	0x08004a5b

08002998 <std>:
 8002998:	2300      	movs	r3, #0
 800299a:	b510      	push	{r4, lr}
 800299c:	4604      	mov	r4, r0
 800299e:	e9c0 3300 	strd	r3, r3, [r0]
 80029a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80029a6:	6083      	str	r3, [r0, #8]
 80029a8:	8181      	strh	r1, [r0, #12]
 80029aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80029ac:	81c2      	strh	r2, [r0, #14]
 80029ae:	6183      	str	r3, [r0, #24]
 80029b0:	4619      	mov	r1, r3
 80029b2:	2208      	movs	r2, #8
 80029b4:	305c      	adds	r0, #92	@ 0x5c
 80029b6:	f000 f8f4 	bl	8002ba2 <memset>
 80029ba:	4b0d      	ldr	r3, [pc, #52]	@ (80029f0 <std+0x58>)
 80029bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80029be:	4b0d      	ldr	r3, [pc, #52]	@ (80029f4 <std+0x5c>)
 80029c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80029c2:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <std+0x60>)
 80029c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80029c6:	4b0d      	ldr	r3, [pc, #52]	@ (80029fc <std+0x64>)
 80029c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80029ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002a00 <std+0x68>)
 80029cc:	6224      	str	r4, [r4, #32]
 80029ce:	429c      	cmp	r4, r3
 80029d0:	d006      	beq.n	80029e0 <std+0x48>
 80029d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80029d6:	4294      	cmp	r4, r2
 80029d8:	d002      	beq.n	80029e0 <std+0x48>
 80029da:	33d0      	adds	r3, #208	@ 0xd0
 80029dc:	429c      	cmp	r4, r3
 80029de:	d105      	bne.n	80029ec <std+0x54>
 80029e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80029e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80029e8:	f000 b958 	b.w	8002c9c <__retarget_lock_init_recursive>
 80029ec:	bd10      	pop	{r4, pc}
 80029ee:	bf00      	nop
 80029f0:	08002b1d 	.word	0x08002b1d
 80029f4:	08002b3f 	.word	0x08002b3f
 80029f8:	08002b77 	.word	0x08002b77
 80029fc:	08002b9b 	.word	0x08002b9b
 8002a00:	20000268 	.word	0x20000268

08002a04 <stdio_exit_handler>:
 8002a04:	4a02      	ldr	r2, [pc, #8]	@ (8002a10 <stdio_exit_handler+0xc>)
 8002a06:	4903      	ldr	r1, [pc, #12]	@ (8002a14 <stdio_exit_handler+0x10>)
 8002a08:	4803      	ldr	r0, [pc, #12]	@ (8002a18 <stdio_exit_handler+0x14>)
 8002a0a:	f000 b869 	b.w	8002ae0 <_fwalk_sglue>
 8002a0e:	bf00      	nop
 8002a10:	20000000 	.word	0x20000000
 8002a14:	08004355 	.word	0x08004355
 8002a18:	20000010 	.word	0x20000010

08002a1c <cleanup_stdio>:
 8002a1c:	6841      	ldr	r1, [r0, #4]
 8002a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a50 <cleanup_stdio+0x34>)
 8002a20:	4299      	cmp	r1, r3
 8002a22:	b510      	push	{r4, lr}
 8002a24:	4604      	mov	r4, r0
 8002a26:	d001      	beq.n	8002a2c <cleanup_stdio+0x10>
 8002a28:	f001 fc94 	bl	8004354 <_fflush_r>
 8002a2c:	68a1      	ldr	r1, [r4, #8]
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <cleanup_stdio+0x38>)
 8002a30:	4299      	cmp	r1, r3
 8002a32:	d002      	beq.n	8002a3a <cleanup_stdio+0x1e>
 8002a34:	4620      	mov	r0, r4
 8002a36:	f001 fc8d 	bl	8004354 <_fflush_r>
 8002a3a:	68e1      	ldr	r1, [r4, #12]
 8002a3c:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <cleanup_stdio+0x3c>)
 8002a3e:	4299      	cmp	r1, r3
 8002a40:	d004      	beq.n	8002a4c <cleanup_stdio+0x30>
 8002a42:	4620      	mov	r0, r4
 8002a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a48:	f001 bc84 	b.w	8004354 <_fflush_r>
 8002a4c:	bd10      	pop	{r4, pc}
 8002a4e:	bf00      	nop
 8002a50:	20000268 	.word	0x20000268
 8002a54:	200002d0 	.word	0x200002d0
 8002a58:	20000338 	.word	0x20000338

08002a5c <global_stdio_init.part.0>:
 8002a5c:	b510      	push	{r4, lr}
 8002a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8002a8c <global_stdio_init.part.0+0x30>)
 8002a60:	4c0b      	ldr	r4, [pc, #44]	@ (8002a90 <global_stdio_init.part.0+0x34>)
 8002a62:	4a0c      	ldr	r2, [pc, #48]	@ (8002a94 <global_stdio_init.part.0+0x38>)
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	4620      	mov	r0, r4
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	f7ff ff94 	bl	8002998 <std>
 8002a70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002a74:	2201      	movs	r2, #1
 8002a76:	2109      	movs	r1, #9
 8002a78:	f7ff ff8e 	bl	8002998 <std>
 8002a7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002a80:	2202      	movs	r2, #2
 8002a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002a86:	2112      	movs	r1, #18
 8002a88:	f7ff bf86 	b.w	8002998 <std>
 8002a8c:	200003a0 	.word	0x200003a0
 8002a90:	20000268 	.word	0x20000268
 8002a94:	08002a05 	.word	0x08002a05

08002a98 <__sfp_lock_acquire>:
 8002a98:	4801      	ldr	r0, [pc, #4]	@ (8002aa0 <__sfp_lock_acquire+0x8>)
 8002a9a:	f000 b900 	b.w	8002c9e <__retarget_lock_acquire_recursive>
 8002a9e:	bf00      	nop
 8002aa0:	200003a9 	.word	0x200003a9

08002aa4 <__sfp_lock_release>:
 8002aa4:	4801      	ldr	r0, [pc, #4]	@ (8002aac <__sfp_lock_release+0x8>)
 8002aa6:	f000 b8fb 	b.w	8002ca0 <__retarget_lock_release_recursive>
 8002aaa:	bf00      	nop
 8002aac:	200003a9 	.word	0x200003a9

08002ab0 <__sinit>:
 8002ab0:	b510      	push	{r4, lr}
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	f7ff fff0 	bl	8002a98 <__sfp_lock_acquire>
 8002ab8:	6a23      	ldr	r3, [r4, #32]
 8002aba:	b11b      	cbz	r3, 8002ac4 <__sinit+0x14>
 8002abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ac0:	f7ff bff0 	b.w	8002aa4 <__sfp_lock_release>
 8002ac4:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <__sinit+0x28>)
 8002ac6:	6223      	str	r3, [r4, #32]
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <__sinit+0x2c>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f5      	bne.n	8002abc <__sinit+0xc>
 8002ad0:	f7ff ffc4 	bl	8002a5c <global_stdio_init.part.0>
 8002ad4:	e7f2      	b.n	8002abc <__sinit+0xc>
 8002ad6:	bf00      	nop
 8002ad8:	08002a1d 	.word	0x08002a1d
 8002adc:	200003a0 	.word	0x200003a0

08002ae0 <_fwalk_sglue>:
 8002ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ae4:	4607      	mov	r7, r0
 8002ae6:	4688      	mov	r8, r1
 8002ae8:	4614      	mov	r4, r2
 8002aea:	2600      	movs	r6, #0
 8002aec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002af0:	f1b9 0901 	subs.w	r9, r9, #1
 8002af4:	d505      	bpl.n	8002b02 <_fwalk_sglue+0x22>
 8002af6:	6824      	ldr	r4, [r4, #0]
 8002af8:	2c00      	cmp	r4, #0
 8002afa:	d1f7      	bne.n	8002aec <_fwalk_sglue+0xc>
 8002afc:	4630      	mov	r0, r6
 8002afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b02:	89ab      	ldrh	r3, [r5, #12]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d907      	bls.n	8002b18 <_fwalk_sglue+0x38>
 8002b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002b0c:	3301      	adds	r3, #1
 8002b0e:	d003      	beq.n	8002b18 <_fwalk_sglue+0x38>
 8002b10:	4629      	mov	r1, r5
 8002b12:	4638      	mov	r0, r7
 8002b14:	47c0      	blx	r8
 8002b16:	4306      	orrs	r6, r0
 8002b18:	3568      	adds	r5, #104	@ 0x68
 8002b1a:	e7e9      	b.n	8002af0 <_fwalk_sglue+0x10>

08002b1c <__sread>:
 8002b1c:	b510      	push	{r4, lr}
 8002b1e:	460c      	mov	r4, r1
 8002b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b24:	f000 f86c 	bl	8002c00 <_read_r>
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	bfab      	itete	ge
 8002b2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002b2e:	89a3      	ldrhlt	r3, [r4, #12]
 8002b30:	181b      	addge	r3, r3, r0
 8002b32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002b36:	bfac      	ite	ge
 8002b38:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002b3a:	81a3      	strhlt	r3, [r4, #12]
 8002b3c:	bd10      	pop	{r4, pc}

08002b3e <__swrite>:
 8002b3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b42:	461f      	mov	r7, r3
 8002b44:	898b      	ldrh	r3, [r1, #12]
 8002b46:	05db      	lsls	r3, r3, #23
 8002b48:	4605      	mov	r5, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	4616      	mov	r6, r2
 8002b4e:	d505      	bpl.n	8002b5c <__swrite+0x1e>
 8002b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b54:	2302      	movs	r3, #2
 8002b56:	2200      	movs	r2, #0
 8002b58:	f000 f840 	bl	8002bdc <_lseek_r>
 8002b5c:	89a3      	ldrh	r3, [r4, #12]
 8002b5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b66:	81a3      	strh	r3, [r4, #12]
 8002b68:	4632      	mov	r2, r6
 8002b6a:	463b      	mov	r3, r7
 8002b6c:	4628      	mov	r0, r5
 8002b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b72:	f000 b857 	b.w	8002c24 <_write_r>

08002b76 <__sseek>:
 8002b76:	b510      	push	{r4, lr}
 8002b78:	460c      	mov	r4, r1
 8002b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b7e:	f000 f82d 	bl	8002bdc <_lseek_r>
 8002b82:	1c43      	adds	r3, r0, #1
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	bf15      	itete	ne
 8002b88:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002b8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002b8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002b92:	81a3      	strheq	r3, [r4, #12]
 8002b94:	bf18      	it	ne
 8002b96:	81a3      	strhne	r3, [r4, #12]
 8002b98:	bd10      	pop	{r4, pc}

08002b9a <__sclose>:
 8002b9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b9e:	f000 b80d 	b.w	8002bbc <_close_r>

08002ba2 <memset>:
 8002ba2:	4402      	add	r2, r0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d100      	bne.n	8002bac <memset+0xa>
 8002baa:	4770      	bx	lr
 8002bac:	f803 1b01 	strb.w	r1, [r3], #1
 8002bb0:	e7f9      	b.n	8002ba6 <memset+0x4>
	...

08002bb4 <_localeconv_r>:
 8002bb4:	4800      	ldr	r0, [pc, #0]	@ (8002bb8 <_localeconv_r+0x4>)
 8002bb6:	4770      	bx	lr
 8002bb8:	2000014c 	.word	0x2000014c

08002bbc <_close_r>:
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	4d06      	ldr	r5, [pc, #24]	@ (8002bd8 <_close_r+0x1c>)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	4608      	mov	r0, r1
 8002bc6:	602b      	str	r3, [r5, #0]
 8002bc8:	f7ff f970 	bl	8001eac <_close>
 8002bcc:	1c43      	adds	r3, r0, #1
 8002bce:	d102      	bne.n	8002bd6 <_close_r+0x1a>
 8002bd0:	682b      	ldr	r3, [r5, #0]
 8002bd2:	b103      	cbz	r3, 8002bd6 <_close_r+0x1a>
 8002bd4:	6023      	str	r3, [r4, #0]
 8002bd6:	bd38      	pop	{r3, r4, r5, pc}
 8002bd8:	200003a4 	.word	0x200003a4

08002bdc <_lseek_r>:
 8002bdc:	b538      	push	{r3, r4, r5, lr}
 8002bde:	4d07      	ldr	r5, [pc, #28]	@ (8002bfc <_lseek_r+0x20>)
 8002be0:	4604      	mov	r4, r0
 8002be2:	4608      	mov	r0, r1
 8002be4:	4611      	mov	r1, r2
 8002be6:	2200      	movs	r2, #0
 8002be8:	602a      	str	r2, [r5, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f7ff f985 	bl	8001efa <_lseek>
 8002bf0:	1c43      	adds	r3, r0, #1
 8002bf2:	d102      	bne.n	8002bfa <_lseek_r+0x1e>
 8002bf4:	682b      	ldr	r3, [r5, #0]
 8002bf6:	b103      	cbz	r3, 8002bfa <_lseek_r+0x1e>
 8002bf8:	6023      	str	r3, [r4, #0]
 8002bfa:	bd38      	pop	{r3, r4, r5, pc}
 8002bfc:	200003a4 	.word	0x200003a4

08002c00 <_read_r>:
 8002c00:	b538      	push	{r3, r4, r5, lr}
 8002c02:	4d07      	ldr	r5, [pc, #28]	@ (8002c20 <_read_r+0x20>)
 8002c04:	4604      	mov	r4, r0
 8002c06:	4608      	mov	r0, r1
 8002c08:	4611      	mov	r1, r2
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	602a      	str	r2, [r5, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f7ff f913 	bl	8001e3a <_read>
 8002c14:	1c43      	adds	r3, r0, #1
 8002c16:	d102      	bne.n	8002c1e <_read_r+0x1e>
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	b103      	cbz	r3, 8002c1e <_read_r+0x1e>
 8002c1c:	6023      	str	r3, [r4, #0]
 8002c1e:	bd38      	pop	{r3, r4, r5, pc}
 8002c20:	200003a4 	.word	0x200003a4

08002c24 <_write_r>:
 8002c24:	b538      	push	{r3, r4, r5, lr}
 8002c26:	4d07      	ldr	r5, [pc, #28]	@ (8002c44 <_write_r+0x20>)
 8002c28:	4604      	mov	r4, r0
 8002c2a:	4608      	mov	r0, r1
 8002c2c:	4611      	mov	r1, r2
 8002c2e:	2200      	movs	r2, #0
 8002c30:	602a      	str	r2, [r5, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f7ff f91e 	bl	8001e74 <_write>
 8002c38:	1c43      	adds	r3, r0, #1
 8002c3a:	d102      	bne.n	8002c42 <_write_r+0x1e>
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	b103      	cbz	r3, 8002c42 <_write_r+0x1e>
 8002c40:	6023      	str	r3, [r4, #0]
 8002c42:	bd38      	pop	{r3, r4, r5, pc}
 8002c44:	200003a4 	.word	0x200003a4

08002c48 <__errno>:
 8002c48:	4b01      	ldr	r3, [pc, #4]	@ (8002c50 <__errno+0x8>)
 8002c4a:	6818      	ldr	r0, [r3, #0]
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	2000000c 	.word	0x2000000c

08002c54 <__libc_init_array>:
 8002c54:	b570      	push	{r4, r5, r6, lr}
 8002c56:	4d0d      	ldr	r5, [pc, #52]	@ (8002c8c <__libc_init_array+0x38>)
 8002c58:	4c0d      	ldr	r4, [pc, #52]	@ (8002c90 <__libc_init_array+0x3c>)
 8002c5a:	1b64      	subs	r4, r4, r5
 8002c5c:	10a4      	asrs	r4, r4, #2
 8002c5e:	2600      	movs	r6, #0
 8002c60:	42a6      	cmp	r6, r4
 8002c62:	d109      	bne.n	8002c78 <__libc_init_array+0x24>
 8002c64:	4d0b      	ldr	r5, [pc, #44]	@ (8002c94 <__libc_init_array+0x40>)
 8002c66:	4c0c      	ldr	r4, [pc, #48]	@ (8002c98 <__libc_init_array+0x44>)
 8002c68:	f001 fec2 	bl	80049f0 <_init>
 8002c6c:	1b64      	subs	r4, r4, r5
 8002c6e:	10a4      	asrs	r4, r4, #2
 8002c70:	2600      	movs	r6, #0
 8002c72:	42a6      	cmp	r6, r4
 8002c74:	d105      	bne.n	8002c82 <__libc_init_array+0x2e>
 8002c76:	bd70      	pop	{r4, r5, r6, pc}
 8002c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7c:	4798      	blx	r3
 8002c7e:	3601      	adds	r6, #1
 8002c80:	e7ee      	b.n	8002c60 <__libc_init_array+0xc>
 8002c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c86:	4798      	blx	r3
 8002c88:	3601      	adds	r6, #1
 8002c8a:	e7f2      	b.n	8002c72 <__libc_init_array+0x1e>
 8002c8c:	08004db4 	.word	0x08004db4
 8002c90:	08004db4 	.word	0x08004db4
 8002c94:	08004db4 	.word	0x08004db4
 8002c98:	08004db8 	.word	0x08004db8

08002c9c <__retarget_lock_init_recursive>:
 8002c9c:	4770      	bx	lr

08002c9e <__retarget_lock_acquire_recursive>:
 8002c9e:	4770      	bx	lr

08002ca0 <__retarget_lock_release_recursive>:
 8002ca0:	4770      	bx	lr

08002ca2 <quorem>:
 8002ca2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca6:	6903      	ldr	r3, [r0, #16]
 8002ca8:	690c      	ldr	r4, [r1, #16]
 8002caa:	42a3      	cmp	r3, r4
 8002cac:	4607      	mov	r7, r0
 8002cae:	db7e      	blt.n	8002dae <quorem+0x10c>
 8002cb0:	3c01      	subs	r4, #1
 8002cb2:	f101 0814 	add.w	r8, r1, #20
 8002cb6:	00a3      	lsls	r3, r4, #2
 8002cb8:	f100 0514 	add.w	r5, r0, #20
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002ccc:	3301      	adds	r3, #1
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002cd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cd8:	d32e      	bcc.n	8002d38 <quorem+0x96>
 8002cda:	f04f 0a00 	mov.w	sl, #0
 8002cde:	46c4      	mov	ip, r8
 8002ce0:	46ae      	mov	lr, r5
 8002ce2:	46d3      	mov	fp, sl
 8002ce4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002ce8:	b298      	uxth	r0, r3
 8002cea:	fb06 a000 	mla	r0, r6, r0, sl
 8002cee:	0c02      	lsrs	r2, r0, #16
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	fb06 2303 	mla	r3, r6, r3, r2
 8002cf6:	f8de 2000 	ldr.w	r2, [lr]
 8002cfa:	b280      	uxth	r0, r0
 8002cfc:	b292      	uxth	r2, r2
 8002cfe:	1a12      	subs	r2, r2, r0
 8002d00:	445a      	add	r2, fp
 8002d02:	f8de 0000 	ldr.w	r0, [lr]
 8002d06:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002d10:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002d14:	b292      	uxth	r2, r2
 8002d16:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002d1a:	45e1      	cmp	r9, ip
 8002d1c:	f84e 2b04 	str.w	r2, [lr], #4
 8002d20:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002d24:	d2de      	bcs.n	8002ce4 <quorem+0x42>
 8002d26:	9b00      	ldr	r3, [sp, #0]
 8002d28:	58eb      	ldr	r3, [r5, r3]
 8002d2a:	b92b      	cbnz	r3, 8002d38 <quorem+0x96>
 8002d2c:	9b01      	ldr	r3, [sp, #4]
 8002d2e:	3b04      	subs	r3, #4
 8002d30:	429d      	cmp	r5, r3
 8002d32:	461a      	mov	r2, r3
 8002d34:	d32f      	bcc.n	8002d96 <quorem+0xf4>
 8002d36:	613c      	str	r4, [r7, #16]
 8002d38:	4638      	mov	r0, r7
 8002d3a:	f001 f97f 	bl	800403c <__mcmp>
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	db25      	blt.n	8002d8e <quorem+0xec>
 8002d42:	4629      	mov	r1, r5
 8002d44:	2000      	movs	r0, #0
 8002d46:	f858 2b04 	ldr.w	r2, [r8], #4
 8002d4a:	f8d1 c000 	ldr.w	ip, [r1]
 8002d4e:	fa1f fe82 	uxth.w	lr, r2
 8002d52:	fa1f f38c 	uxth.w	r3, ip
 8002d56:	eba3 030e 	sub.w	r3, r3, lr
 8002d5a:	4403      	add	r3, r0
 8002d5c:	0c12      	lsrs	r2, r2, #16
 8002d5e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002d62:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d6c:	45c1      	cmp	r9, r8
 8002d6e:	f841 3b04 	str.w	r3, [r1], #4
 8002d72:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002d76:	d2e6      	bcs.n	8002d46 <quorem+0xa4>
 8002d78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d7c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d80:	b922      	cbnz	r2, 8002d8c <quorem+0xea>
 8002d82:	3b04      	subs	r3, #4
 8002d84:	429d      	cmp	r5, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	d30b      	bcc.n	8002da2 <quorem+0x100>
 8002d8a:	613c      	str	r4, [r7, #16]
 8002d8c:	3601      	adds	r6, #1
 8002d8e:	4630      	mov	r0, r6
 8002d90:	b003      	add	sp, #12
 8002d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d96:	6812      	ldr	r2, [r2, #0]
 8002d98:	3b04      	subs	r3, #4
 8002d9a:	2a00      	cmp	r2, #0
 8002d9c:	d1cb      	bne.n	8002d36 <quorem+0x94>
 8002d9e:	3c01      	subs	r4, #1
 8002da0:	e7c6      	b.n	8002d30 <quorem+0x8e>
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	3b04      	subs	r3, #4
 8002da6:	2a00      	cmp	r2, #0
 8002da8:	d1ef      	bne.n	8002d8a <quorem+0xe8>
 8002daa:	3c01      	subs	r4, #1
 8002dac:	e7ea      	b.n	8002d84 <quorem+0xe2>
 8002dae:	2000      	movs	r0, #0
 8002db0:	e7ee      	b.n	8002d90 <quorem+0xee>
 8002db2:	0000      	movs	r0, r0
 8002db4:	0000      	movs	r0, r0
	...

08002db8 <_dtoa_r>:
 8002db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dbc:	69c7      	ldr	r7, [r0, #28]
 8002dbe:	b097      	sub	sp, #92	@ 0x5c
 8002dc0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8002dc4:	ec55 4b10 	vmov	r4, r5, d0
 8002dc8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8002dca:	9107      	str	r1, [sp, #28]
 8002dcc:	4681      	mov	r9, r0
 8002dce:	920c      	str	r2, [sp, #48]	@ 0x30
 8002dd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8002dd2:	b97f      	cbnz	r7, 8002df4 <_dtoa_r+0x3c>
 8002dd4:	2010      	movs	r0, #16
 8002dd6:	f000 fe09 	bl	80039ec <malloc>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	f8c9 001c 	str.w	r0, [r9, #28]
 8002de0:	b920      	cbnz	r0, 8002dec <_dtoa_r+0x34>
 8002de2:	4ba9      	ldr	r3, [pc, #676]	@ (8003088 <_dtoa_r+0x2d0>)
 8002de4:	21ef      	movs	r1, #239	@ 0xef
 8002de6:	48a9      	ldr	r0, [pc, #676]	@ (800308c <_dtoa_r+0x2d4>)
 8002de8:	f001 fafa 	bl	80043e0 <__assert_func>
 8002dec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002df0:	6007      	str	r7, [r0, #0]
 8002df2:	60c7      	str	r7, [r0, #12]
 8002df4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002df8:	6819      	ldr	r1, [r3, #0]
 8002dfa:	b159      	cbz	r1, 8002e14 <_dtoa_r+0x5c>
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	604a      	str	r2, [r1, #4]
 8002e00:	2301      	movs	r3, #1
 8002e02:	4093      	lsls	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
 8002e06:	4648      	mov	r0, r9
 8002e08:	f000 fee6 	bl	8003bd8 <_Bfree>
 8002e0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]
 8002e14:	1e2b      	subs	r3, r5, #0
 8002e16:	bfb9      	ittee	lt
 8002e18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002e1c:	9305      	strlt	r3, [sp, #20]
 8002e1e:	2300      	movge	r3, #0
 8002e20:	6033      	strge	r3, [r6, #0]
 8002e22:	9f05      	ldr	r7, [sp, #20]
 8002e24:	4b9a      	ldr	r3, [pc, #616]	@ (8003090 <_dtoa_r+0x2d8>)
 8002e26:	bfbc      	itt	lt
 8002e28:	2201      	movlt	r2, #1
 8002e2a:	6032      	strlt	r2, [r6, #0]
 8002e2c:	43bb      	bics	r3, r7
 8002e2e:	d112      	bne.n	8002e56 <_dtoa_r+0x9e>
 8002e30:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002e32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002e3c:	4323      	orrs	r3, r4
 8002e3e:	f000 855a 	beq.w	80038f6 <_dtoa_r+0xb3e>
 8002e42:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002e44:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80030a4 <_dtoa_r+0x2ec>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 855c 	beq.w	8003906 <_dtoa_r+0xb4e>
 8002e4e:	f10a 0303 	add.w	r3, sl, #3
 8002e52:	f000 bd56 	b.w	8003902 <_dtoa_r+0xb4a>
 8002e56:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	ec51 0b17 	vmov	r0, r1, d7
 8002e60:	2300      	movs	r3, #0
 8002e62:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002e66:	f7fd fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e6a:	4680      	mov	r8, r0
 8002e6c:	b158      	cbz	r0, 8002e86 <_dtoa_r+0xce>
 8002e6e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002e70:	2301      	movs	r3, #1
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002e76:	b113      	cbz	r3, 8002e7e <_dtoa_r+0xc6>
 8002e78:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8002e7a:	4b86      	ldr	r3, [pc, #536]	@ (8003094 <_dtoa_r+0x2dc>)
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80030a8 <_dtoa_r+0x2f0>
 8002e82:	f000 bd40 	b.w	8003906 <_dtoa_r+0xb4e>
 8002e86:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8002e8a:	aa14      	add	r2, sp, #80	@ 0x50
 8002e8c:	a915      	add	r1, sp, #84	@ 0x54
 8002e8e:	4648      	mov	r0, r9
 8002e90:	f001 f984 	bl	800419c <__d2b>
 8002e94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002e98:	9002      	str	r0, [sp, #8]
 8002e9a:	2e00      	cmp	r6, #0
 8002e9c:	d078      	beq.n	8002f90 <_dtoa_r+0x1d8>
 8002e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002ea0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8002ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002eac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002eb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002eb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002eb8:	4619      	mov	r1, r3
 8002eba:	2200      	movs	r2, #0
 8002ebc:	4b76      	ldr	r3, [pc, #472]	@ (8003098 <_dtoa_r+0x2e0>)
 8002ebe:	f7fd f9e3 	bl	8000288 <__aeabi_dsub>
 8002ec2:	a36b      	add	r3, pc, #428	@ (adr r3, 8003070 <_dtoa_r+0x2b8>)
 8002ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ec8:	f7fd fb96 	bl	80005f8 <__aeabi_dmul>
 8002ecc:	a36a      	add	r3, pc, #424	@ (adr r3, 8003078 <_dtoa_r+0x2c0>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd f9db 	bl	800028c <__adddf3>
 8002ed6:	4604      	mov	r4, r0
 8002ed8:	4630      	mov	r0, r6
 8002eda:	460d      	mov	r5, r1
 8002edc:	f7fd fb22 	bl	8000524 <__aeabi_i2d>
 8002ee0:	a367      	add	r3, pc, #412	@ (adr r3, 8003080 <_dtoa_r+0x2c8>)
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	f7fd fb87 	bl	80005f8 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	f7fd f9cb 	bl	800028c <__adddf3>
 8002ef6:	4604      	mov	r4, r0
 8002ef8:	460d      	mov	r5, r1
 8002efa:	f7fd fe2d 	bl	8000b58 <__aeabi_d2iz>
 8002efe:	2200      	movs	r2, #0
 8002f00:	4607      	mov	r7, r0
 8002f02:	2300      	movs	r3, #0
 8002f04:	4620      	mov	r0, r4
 8002f06:	4629      	mov	r1, r5
 8002f08:	f7fd fde8 	bl	8000adc <__aeabi_dcmplt>
 8002f0c:	b140      	cbz	r0, 8002f20 <_dtoa_r+0x168>
 8002f0e:	4638      	mov	r0, r7
 8002f10:	f7fd fb08 	bl	8000524 <__aeabi_i2d>
 8002f14:	4622      	mov	r2, r4
 8002f16:	462b      	mov	r3, r5
 8002f18:	f7fd fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 8002f1c:	b900      	cbnz	r0, 8002f20 <_dtoa_r+0x168>
 8002f1e:	3f01      	subs	r7, #1
 8002f20:	2f16      	cmp	r7, #22
 8002f22:	d852      	bhi.n	8002fca <_dtoa_r+0x212>
 8002f24:	4b5d      	ldr	r3, [pc, #372]	@ (800309c <_dtoa_r+0x2e4>)
 8002f26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002f32:	f7fd fdd3 	bl	8000adc <__aeabi_dcmplt>
 8002f36:	2800      	cmp	r0, #0
 8002f38:	d049      	beq.n	8002fce <_dtoa_r+0x216>
 8002f3a:	3f01      	subs	r7, #1
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8002f40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002f42:	1b9b      	subs	r3, r3, r6
 8002f44:	1e5a      	subs	r2, r3, #1
 8002f46:	bf45      	ittet	mi
 8002f48:	f1c3 0301 	rsbmi	r3, r3, #1
 8002f4c:	9300      	strmi	r3, [sp, #0]
 8002f4e:	2300      	movpl	r3, #0
 8002f50:	2300      	movmi	r3, #0
 8002f52:	9206      	str	r2, [sp, #24]
 8002f54:	bf54      	ite	pl
 8002f56:	9300      	strpl	r3, [sp, #0]
 8002f58:	9306      	strmi	r3, [sp, #24]
 8002f5a:	2f00      	cmp	r7, #0
 8002f5c:	db39      	blt.n	8002fd2 <_dtoa_r+0x21a>
 8002f5e:	9b06      	ldr	r3, [sp, #24]
 8002f60:	970d      	str	r7, [sp, #52]	@ 0x34
 8002f62:	443b      	add	r3, r7
 8002f64:	9306      	str	r3, [sp, #24]
 8002f66:	2300      	movs	r3, #0
 8002f68:	9308      	str	r3, [sp, #32]
 8002f6a:	9b07      	ldr	r3, [sp, #28]
 8002f6c:	2b09      	cmp	r3, #9
 8002f6e:	d863      	bhi.n	8003038 <_dtoa_r+0x280>
 8002f70:	2b05      	cmp	r3, #5
 8002f72:	bfc4      	itt	gt
 8002f74:	3b04      	subgt	r3, #4
 8002f76:	9307      	strgt	r3, [sp, #28]
 8002f78:	9b07      	ldr	r3, [sp, #28]
 8002f7a:	f1a3 0302 	sub.w	r3, r3, #2
 8002f7e:	bfcc      	ite	gt
 8002f80:	2400      	movgt	r4, #0
 8002f82:	2401      	movle	r4, #1
 8002f84:	2b03      	cmp	r3, #3
 8002f86:	d863      	bhi.n	8003050 <_dtoa_r+0x298>
 8002f88:	e8df f003 	tbb	[pc, r3]
 8002f8c:	2b375452 	.word	0x2b375452
 8002f90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8002f94:	441e      	add	r6, r3
 8002f96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002f9a:	2b20      	cmp	r3, #32
 8002f9c:	bfc1      	itttt	gt
 8002f9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002fa2:	409f      	lslgt	r7, r3
 8002fa4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002fa8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002fac:	bfd6      	itet	le
 8002fae:	f1c3 0320 	rsble	r3, r3, #32
 8002fb2:	ea47 0003 	orrgt.w	r0, r7, r3
 8002fb6:	fa04 f003 	lslle.w	r0, r4, r3
 8002fba:	f7fd faa3 	bl	8000504 <__aeabi_ui2d>
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002fc4:	3e01      	subs	r6, #1
 8002fc6:	9212      	str	r2, [sp, #72]	@ 0x48
 8002fc8:	e776      	b.n	8002eb8 <_dtoa_r+0x100>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e7b7      	b.n	8002f3e <_dtoa_r+0x186>
 8002fce:	9010      	str	r0, [sp, #64]	@ 0x40
 8002fd0:	e7b6      	b.n	8002f40 <_dtoa_r+0x188>
 8002fd2:	9b00      	ldr	r3, [sp, #0]
 8002fd4:	1bdb      	subs	r3, r3, r7
 8002fd6:	9300      	str	r3, [sp, #0]
 8002fd8:	427b      	negs	r3, r7
 8002fda:	9308      	str	r3, [sp, #32]
 8002fdc:	2300      	movs	r3, #0
 8002fde:	930d      	str	r3, [sp, #52]	@ 0x34
 8002fe0:	e7c3      	b.n	8002f6a <_dtoa_r+0x1b2>
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fe6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002fe8:	eb07 0b03 	add.w	fp, r7, r3
 8002fec:	f10b 0301 	add.w	r3, fp, #1
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	9303      	str	r3, [sp, #12]
 8002ff4:	bfb8      	it	lt
 8002ff6:	2301      	movlt	r3, #1
 8002ff8:	e006      	b.n	8003008 <_dtoa_r+0x250>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002ffe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003000:	2b00      	cmp	r3, #0
 8003002:	dd28      	ble.n	8003056 <_dtoa_r+0x29e>
 8003004:	469b      	mov	fp, r3
 8003006:	9303      	str	r3, [sp, #12]
 8003008:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800300c:	2100      	movs	r1, #0
 800300e:	2204      	movs	r2, #4
 8003010:	f102 0514 	add.w	r5, r2, #20
 8003014:	429d      	cmp	r5, r3
 8003016:	d926      	bls.n	8003066 <_dtoa_r+0x2ae>
 8003018:	6041      	str	r1, [r0, #4]
 800301a:	4648      	mov	r0, r9
 800301c:	f000 fd9c 	bl	8003b58 <_Balloc>
 8003020:	4682      	mov	sl, r0
 8003022:	2800      	cmp	r0, #0
 8003024:	d142      	bne.n	80030ac <_dtoa_r+0x2f4>
 8003026:	4b1e      	ldr	r3, [pc, #120]	@ (80030a0 <_dtoa_r+0x2e8>)
 8003028:	4602      	mov	r2, r0
 800302a:	f240 11af 	movw	r1, #431	@ 0x1af
 800302e:	e6da      	b.n	8002de6 <_dtoa_r+0x2e>
 8003030:	2300      	movs	r3, #0
 8003032:	e7e3      	b.n	8002ffc <_dtoa_r+0x244>
 8003034:	2300      	movs	r3, #0
 8003036:	e7d5      	b.n	8002fe4 <_dtoa_r+0x22c>
 8003038:	2401      	movs	r4, #1
 800303a:	2300      	movs	r3, #0
 800303c:	9307      	str	r3, [sp, #28]
 800303e:	9409      	str	r4, [sp, #36]	@ 0x24
 8003040:	f04f 3bff 	mov.w	fp, #4294967295
 8003044:	2200      	movs	r2, #0
 8003046:	f8cd b00c 	str.w	fp, [sp, #12]
 800304a:	2312      	movs	r3, #18
 800304c:	920c      	str	r2, [sp, #48]	@ 0x30
 800304e:	e7db      	b.n	8003008 <_dtoa_r+0x250>
 8003050:	2301      	movs	r3, #1
 8003052:	9309      	str	r3, [sp, #36]	@ 0x24
 8003054:	e7f4      	b.n	8003040 <_dtoa_r+0x288>
 8003056:	f04f 0b01 	mov.w	fp, #1
 800305a:	f8cd b00c 	str.w	fp, [sp, #12]
 800305e:	465b      	mov	r3, fp
 8003060:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003064:	e7d0      	b.n	8003008 <_dtoa_r+0x250>
 8003066:	3101      	adds	r1, #1
 8003068:	0052      	lsls	r2, r2, #1
 800306a:	e7d1      	b.n	8003010 <_dtoa_r+0x258>
 800306c:	f3af 8000 	nop.w
 8003070:	636f4361 	.word	0x636f4361
 8003074:	3fd287a7 	.word	0x3fd287a7
 8003078:	8b60c8b3 	.word	0x8b60c8b3
 800307c:	3fc68a28 	.word	0x3fc68a28
 8003080:	509f79fb 	.word	0x509f79fb
 8003084:	3fd34413 	.word	0x3fd34413
 8003088:	08004a79 	.word	0x08004a79
 800308c:	08004a90 	.word	0x08004a90
 8003090:	7ff00000 	.word	0x7ff00000
 8003094:	08004a49 	.word	0x08004a49
 8003098:	3ff80000 	.word	0x3ff80000
 800309c:	08004be0 	.word	0x08004be0
 80030a0:	08004ae8 	.word	0x08004ae8
 80030a4:	08004a75 	.word	0x08004a75
 80030a8:	08004a48 	.word	0x08004a48
 80030ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80030b0:	6018      	str	r0, [r3, #0]
 80030b2:	9b03      	ldr	r3, [sp, #12]
 80030b4:	2b0e      	cmp	r3, #14
 80030b6:	f200 80a1 	bhi.w	80031fc <_dtoa_r+0x444>
 80030ba:	2c00      	cmp	r4, #0
 80030bc:	f000 809e 	beq.w	80031fc <_dtoa_r+0x444>
 80030c0:	2f00      	cmp	r7, #0
 80030c2:	dd33      	ble.n	800312c <_dtoa_r+0x374>
 80030c4:	4b9c      	ldr	r3, [pc, #624]	@ (8003338 <_dtoa_r+0x580>)
 80030c6:	f007 020f 	and.w	r2, r7, #15
 80030ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80030ce:	ed93 7b00 	vldr	d7, [r3]
 80030d2:	05f8      	lsls	r0, r7, #23
 80030d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80030d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80030dc:	d516      	bpl.n	800310c <_dtoa_r+0x354>
 80030de:	4b97      	ldr	r3, [pc, #604]	@ (800333c <_dtoa_r+0x584>)
 80030e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80030e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80030e8:	f7fd fbb0 	bl	800084c <__aeabi_ddiv>
 80030ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030f0:	f004 040f 	and.w	r4, r4, #15
 80030f4:	2603      	movs	r6, #3
 80030f6:	4d91      	ldr	r5, [pc, #580]	@ (800333c <_dtoa_r+0x584>)
 80030f8:	b954      	cbnz	r4, 8003110 <_dtoa_r+0x358>
 80030fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80030fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003102:	f7fd fba3 	bl	800084c <__aeabi_ddiv>
 8003106:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800310a:	e028      	b.n	800315e <_dtoa_r+0x3a6>
 800310c:	2602      	movs	r6, #2
 800310e:	e7f2      	b.n	80030f6 <_dtoa_r+0x33e>
 8003110:	07e1      	lsls	r1, r4, #31
 8003112:	d508      	bpl.n	8003126 <_dtoa_r+0x36e>
 8003114:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003118:	e9d5 2300 	ldrd	r2, r3, [r5]
 800311c:	f7fd fa6c 	bl	80005f8 <__aeabi_dmul>
 8003120:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003124:	3601      	adds	r6, #1
 8003126:	1064      	asrs	r4, r4, #1
 8003128:	3508      	adds	r5, #8
 800312a:	e7e5      	b.n	80030f8 <_dtoa_r+0x340>
 800312c:	f000 80af 	beq.w	800328e <_dtoa_r+0x4d6>
 8003130:	427c      	negs	r4, r7
 8003132:	4b81      	ldr	r3, [pc, #516]	@ (8003338 <_dtoa_r+0x580>)
 8003134:	4d81      	ldr	r5, [pc, #516]	@ (800333c <_dtoa_r+0x584>)
 8003136:	f004 020f 	and.w	r2, r4, #15
 800313a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800313e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003142:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003146:	f7fd fa57 	bl	80005f8 <__aeabi_dmul>
 800314a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800314e:	1124      	asrs	r4, r4, #4
 8003150:	2300      	movs	r3, #0
 8003152:	2602      	movs	r6, #2
 8003154:	2c00      	cmp	r4, #0
 8003156:	f040 808f 	bne.w	8003278 <_dtoa_r+0x4c0>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1d3      	bne.n	8003106 <_dtoa_r+0x34e>
 800315e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003160:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 8094 	beq.w	8003292 <_dtoa_r+0x4da>
 800316a:	4b75      	ldr	r3, [pc, #468]	@ (8003340 <_dtoa_r+0x588>)
 800316c:	2200      	movs	r2, #0
 800316e:	4620      	mov	r0, r4
 8003170:	4629      	mov	r1, r5
 8003172:	f7fd fcb3 	bl	8000adc <__aeabi_dcmplt>
 8003176:	2800      	cmp	r0, #0
 8003178:	f000 808b 	beq.w	8003292 <_dtoa_r+0x4da>
 800317c:	9b03      	ldr	r3, [sp, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 8087 	beq.w	8003292 <_dtoa_r+0x4da>
 8003184:	f1bb 0f00 	cmp.w	fp, #0
 8003188:	dd34      	ble.n	80031f4 <_dtoa_r+0x43c>
 800318a:	4620      	mov	r0, r4
 800318c:	4b6d      	ldr	r3, [pc, #436]	@ (8003344 <_dtoa_r+0x58c>)
 800318e:	2200      	movs	r2, #0
 8003190:	4629      	mov	r1, r5
 8003192:	f7fd fa31 	bl	80005f8 <__aeabi_dmul>
 8003196:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800319a:	f107 38ff 	add.w	r8, r7, #4294967295
 800319e:	3601      	adds	r6, #1
 80031a0:	465c      	mov	r4, fp
 80031a2:	4630      	mov	r0, r6
 80031a4:	f7fd f9be 	bl	8000524 <__aeabi_i2d>
 80031a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031ac:	f7fd fa24 	bl	80005f8 <__aeabi_dmul>
 80031b0:	4b65      	ldr	r3, [pc, #404]	@ (8003348 <_dtoa_r+0x590>)
 80031b2:	2200      	movs	r2, #0
 80031b4:	f7fd f86a 	bl	800028c <__adddf3>
 80031b8:	4605      	mov	r5, r0
 80031ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d16a      	bne.n	8003298 <_dtoa_r+0x4e0>
 80031c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031c6:	4b61      	ldr	r3, [pc, #388]	@ (800334c <_dtoa_r+0x594>)
 80031c8:	2200      	movs	r2, #0
 80031ca:	f7fd f85d 	bl	8000288 <__aeabi_dsub>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031d6:	462a      	mov	r2, r5
 80031d8:	4633      	mov	r3, r6
 80031da:	f7fd fc9d 	bl	8000b18 <__aeabi_dcmpgt>
 80031de:	2800      	cmp	r0, #0
 80031e0:	f040 8298 	bne.w	8003714 <_dtoa_r+0x95c>
 80031e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031e8:	462a      	mov	r2, r5
 80031ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80031ee:	f7fd fc75 	bl	8000adc <__aeabi_dcmplt>
 80031f2:	bb38      	cbnz	r0, 8003244 <_dtoa_r+0x48c>
 80031f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80031f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80031fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f2c0 8157 	blt.w	80034b2 <_dtoa_r+0x6fa>
 8003204:	2f0e      	cmp	r7, #14
 8003206:	f300 8154 	bgt.w	80034b2 <_dtoa_r+0x6fa>
 800320a:	4b4b      	ldr	r3, [pc, #300]	@ (8003338 <_dtoa_r+0x580>)
 800320c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003210:	ed93 7b00 	vldr	d7, [r3]
 8003214:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003216:	2b00      	cmp	r3, #0
 8003218:	ed8d 7b00 	vstr	d7, [sp]
 800321c:	f280 80e5 	bge.w	80033ea <_dtoa_r+0x632>
 8003220:	9b03      	ldr	r3, [sp, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	f300 80e1 	bgt.w	80033ea <_dtoa_r+0x632>
 8003228:	d10c      	bne.n	8003244 <_dtoa_r+0x48c>
 800322a:	4b48      	ldr	r3, [pc, #288]	@ (800334c <_dtoa_r+0x594>)
 800322c:	2200      	movs	r2, #0
 800322e:	ec51 0b17 	vmov	r0, r1, d7
 8003232:	f7fd f9e1 	bl	80005f8 <__aeabi_dmul>
 8003236:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800323a:	f7fd fc63 	bl	8000b04 <__aeabi_dcmpge>
 800323e:	2800      	cmp	r0, #0
 8003240:	f000 8266 	beq.w	8003710 <_dtoa_r+0x958>
 8003244:	2400      	movs	r4, #0
 8003246:	4625      	mov	r5, r4
 8003248:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800324a:	4656      	mov	r6, sl
 800324c:	ea6f 0803 	mvn.w	r8, r3
 8003250:	2700      	movs	r7, #0
 8003252:	4621      	mov	r1, r4
 8003254:	4648      	mov	r0, r9
 8003256:	f000 fcbf 	bl	8003bd8 <_Bfree>
 800325a:	2d00      	cmp	r5, #0
 800325c:	f000 80bd 	beq.w	80033da <_dtoa_r+0x622>
 8003260:	b12f      	cbz	r7, 800326e <_dtoa_r+0x4b6>
 8003262:	42af      	cmp	r7, r5
 8003264:	d003      	beq.n	800326e <_dtoa_r+0x4b6>
 8003266:	4639      	mov	r1, r7
 8003268:	4648      	mov	r0, r9
 800326a:	f000 fcb5 	bl	8003bd8 <_Bfree>
 800326e:	4629      	mov	r1, r5
 8003270:	4648      	mov	r0, r9
 8003272:	f000 fcb1 	bl	8003bd8 <_Bfree>
 8003276:	e0b0      	b.n	80033da <_dtoa_r+0x622>
 8003278:	07e2      	lsls	r2, r4, #31
 800327a:	d505      	bpl.n	8003288 <_dtoa_r+0x4d0>
 800327c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003280:	f7fd f9ba 	bl	80005f8 <__aeabi_dmul>
 8003284:	3601      	adds	r6, #1
 8003286:	2301      	movs	r3, #1
 8003288:	1064      	asrs	r4, r4, #1
 800328a:	3508      	adds	r5, #8
 800328c:	e762      	b.n	8003154 <_dtoa_r+0x39c>
 800328e:	2602      	movs	r6, #2
 8003290:	e765      	b.n	800315e <_dtoa_r+0x3a6>
 8003292:	9c03      	ldr	r4, [sp, #12]
 8003294:	46b8      	mov	r8, r7
 8003296:	e784      	b.n	80031a2 <_dtoa_r+0x3ea>
 8003298:	4b27      	ldr	r3, [pc, #156]	@ (8003338 <_dtoa_r+0x580>)
 800329a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800329c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80032a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80032a4:	4454      	add	r4, sl
 80032a6:	2900      	cmp	r1, #0
 80032a8:	d054      	beq.n	8003354 <_dtoa_r+0x59c>
 80032aa:	4929      	ldr	r1, [pc, #164]	@ (8003350 <_dtoa_r+0x598>)
 80032ac:	2000      	movs	r0, #0
 80032ae:	f7fd facd 	bl	800084c <__aeabi_ddiv>
 80032b2:	4633      	mov	r3, r6
 80032b4:	462a      	mov	r2, r5
 80032b6:	f7fc ffe7 	bl	8000288 <__aeabi_dsub>
 80032ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80032be:	4656      	mov	r6, sl
 80032c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032c4:	f7fd fc48 	bl	8000b58 <__aeabi_d2iz>
 80032c8:	4605      	mov	r5, r0
 80032ca:	f7fd f92b 	bl	8000524 <__aeabi_i2d>
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032d6:	f7fc ffd7 	bl	8000288 <__aeabi_dsub>
 80032da:	3530      	adds	r5, #48	@ 0x30
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032e4:	f806 5b01 	strb.w	r5, [r6], #1
 80032e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80032ec:	f7fd fbf6 	bl	8000adc <__aeabi_dcmplt>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d172      	bne.n	80033da <_dtoa_r+0x622>
 80032f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032f8:	4911      	ldr	r1, [pc, #68]	@ (8003340 <_dtoa_r+0x588>)
 80032fa:	2000      	movs	r0, #0
 80032fc:	f7fc ffc4 	bl	8000288 <__aeabi_dsub>
 8003300:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003304:	f7fd fbea 	bl	8000adc <__aeabi_dcmplt>
 8003308:	2800      	cmp	r0, #0
 800330a:	f040 80b4 	bne.w	8003476 <_dtoa_r+0x6be>
 800330e:	42a6      	cmp	r6, r4
 8003310:	f43f af70 	beq.w	80031f4 <_dtoa_r+0x43c>
 8003314:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8003318:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <_dtoa_r+0x58c>)
 800331a:	2200      	movs	r2, #0
 800331c:	f7fd f96c 	bl	80005f8 <__aeabi_dmul>
 8003320:	4b08      	ldr	r3, [pc, #32]	@ (8003344 <_dtoa_r+0x58c>)
 8003322:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003326:	2200      	movs	r2, #0
 8003328:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800332c:	f7fd f964 	bl	80005f8 <__aeabi_dmul>
 8003330:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003334:	e7c4      	b.n	80032c0 <_dtoa_r+0x508>
 8003336:	bf00      	nop
 8003338:	08004be0 	.word	0x08004be0
 800333c:	08004bb8 	.word	0x08004bb8
 8003340:	3ff00000 	.word	0x3ff00000
 8003344:	40240000 	.word	0x40240000
 8003348:	401c0000 	.word	0x401c0000
 800334c:	40140000 	.word	0x40140000
 8003350:	3fe00000 	.word	0x3fe00000
 8003354:	4631      	mov	r1, r6
 8003356:	4628      	mov	r0, r5
 8003358:	f7fd f94e 	bl	80005f8 <__aeabi_dmul>
 800335c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003360:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003362:	4656      	mov	r6, sl
 8003364:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003368:	f7fd fbf6 	bl	8000b58 <__aeabi_d2iz>
 800336c:	4605      	mov	r5, r0
 800336e:	f7fd f8d9 	bl	8000524 <__aeabi_i2d>
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800337a:	f7fc ff85 	bl	8000288 <__aeabi_dsub>
 800337e:	3530      	adds	r5, #48	@ 0x30
 8003380:	f806 5b01 	strb.w	r5, [r6], #1
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	42a6      	cmp	r6, r4
 800338a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	d124      	bne.n	80033de <_dtoa_r+0x626>
 8003394:	4baf      	ldr	r3, [pc, #700]	@ (8003654 <_dtoa_r+0x89c>)
 8003396:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800339a:	f7fc ff77 	bl	800028c <__adddf3>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80033a6:	f7fd fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d163      	bne.n	8003476 <_dtoa_r+0x6be>
 80033ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80033b2:	49a8      	ldr	r1, [pc, #672]	@ (8003654 <_dtoa_r+0x89c>)
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7fc ff67 	bl	8000288 <__aeabi_dsub>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80033c2:	f7fd fb8b 	bl	8000adc <__aeabi_dcmplt>
 80033c6:	2800      	cmp	r0, #0
 80033c8:	f43f af14 	beq.w	80031f4 <_dtoa_r+0x43c>
 80033cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80033ce:	1e73      	subs	r3, r6, #1
 80033d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80033d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80033d6:	2b30      	cmp	r3, #48	@ 0x30
 80033d8:	d0f8      	beq.n	80033cc <_dtoa_r+0x614>
 80033da:	4647      	mov	r7, r8
 80033dc:	e03b      	b.n	8003456 <_dtoa_r+0x69e>
 80033de:	4b9e      	ldr	r3, [pc, #632]	@ (8003658 <_dtoa_r+0x8a0>)
 80033e0:	f7fd f90a 	bl	80005f8 <__aeabi_dmul>
 80033e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033e8:	e7bc      	b.n	8003364 <_dtoa_r+0x5ac>
 80033ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80033ee:	4656      	mov	r6, sl
 80033f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033f4:	4620      	mov	r0, r4
 80033f6:	4629      	mov	r1, r5
 80033f8:	f7fd fa28 	bl	800084c <__aeabi_ddiv>
 80033fc:	f7fd fbac 	bl	8000b58 <__aeabi_d2iz>
 8003400:	4680      	mov	r8, r0
 8003402:	f7fd f88f 	bl	8000524 <__aeabi_i2d>
 8003406:	e9dd 2300 	ldrd	r2, r3, [sp]
 800340a:	f7fd f8f5 	bl	80005f8 <__aeabi_dmul>
 800340e:	4602      	mov	r2, r0
 8003410:	460b      	mov	r3, r1
 8003412:	4620      	mov	r0, r4
 8003414:	4629      	mov	r1, r5
 8003416:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800341a:	f7fc ff35 	bl	8000288 <__aeabi_dsub>
 800341e:	f806 4b01 	strb.w	r4, [r6], #1
 8003422:	9d03      	ldr	r5, [sp, #12]
 8003424:	eba6 040a 	sub.w	r4, r6, sl
 8003428:	42a5      	cmp	r5, r4
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	d133      	bne.n	8003498 <_dtoa_r+0x6e0>
 8003430:	f7fc ff2c 	bl	800028c <__adddf3>
 8003434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003438:	4604      	mov	r4, r0
 800343a:	460d      	mov	r5, r1
 800343c:	f7fd fb6c 	bl	8000b18 <__aeabi_dcmpgt>
 8003440:	b9c0      	cbnz	r0, 8003474 <_dtoa_r+0x6bc>
 8003442:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003446:	4620      	mov	r0, r4
 8003448:	4629      	mov	r1, r5
 800344a:	f7fd fb3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800344e:	b110      	cbz	r0, 8003456 <_dtoa_r+0x69e>
 8003450:	f018 0f01 	tst.w	r8, #1
 8003454:	d10e      	bne.n	8003474 <_dtoa_r+0x6bc>
 8003456:	9902      	ldr	r1, [sp, #8]
 8003458:	4648      	mov	r0, r9
 800345a:	f000 fbbd 	bl	8003bd8 <_Bfree>
 800345e:	2300      	movs	r3, #0
 8003460:	7033      	strb	r3, [r6, #0]
 8003462:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003464:	3701      	adds	r7, #1
 8003466:	601f      	str	r7, [r3, #0]
 8003468:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 824b 	beq.w	8003906 <_dtoa_r+0xb4e>
 8003470:	601e      	str	r6, [r3, #0]
 8003472:	e248      	b.n	8003906 <_dtoa_r+0xb4e>
 8003474:	46b8      	mov	r8, r7
 8003476:	4633      	mov	r3, r6
 8003478:	461e      	mov	r6, r3
 800347a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800347e:	2a39      	cmp	r2, #57	@ 0x39
 8003480:	d106      	bne.n	8003490 <_dtoa_r+0x6d8>
 8003482:	459a      	cmp	sl, r3
 8003484:	d1f8      	bne.n	8003478 <_dtoa_r+0x6c0>
 8003486:	2230      	movs	r2, #48	@ 0x30
 8003488:	f108 0801 	add.w	r8, r8, #1
 800348c:	f88a 2000 	strb.w	r2, [sl]
 8003490:	781a      	ldrb	r2, [r3, #0]
 8003492:	3201      	adds	r2, #1
 8003494:	701a      	strb	r2, [r3, #0]
 8003496:	e7a0      	b.n	80033da <_dtoa_r+0x622>
 8003498:	4b6f      	ldr	r3, [pc, #444]	@ (8003658 <_dtoa_r+0x8a0>)
 800349a:	2200      	movs	r2, #0
 800349c:	f7fd f8ac 	bl	80005f8 <__aeabi_dmul>
 80034a0:	2200      	movs	r2, #0
 80034a2:	2300      	movs	r3, #0
 80034a4:	4604      	mov	r4, r0
 80034a6:	460d      	mov	r5, r1
 80034a8:	f7fd fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d09f      	beq.n	80033f0 <_dtoa_r+0x638>
 80034b0:	e7d1      	b.n	8003456 <_dtoa_r+0x69e>
 80034b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80034b4:	2a00      	cmp	r2, #0
 80034b6:	f000 80ea 	beq.w	800368e <_dtoa_r+0x8d6>
 80034ba:	9a07      	ldr	r2, [sp, #28]
 80034bc:	2a01      	cmp	r2, #1
 80034be:	f300 80cd 	bgt.w	800365c <_dtoa_r+0x8a4>
 80034c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80034c4:	2a00      	cmp	r2, #0
 80034c6:	f000 80c1 	beq.w	800364c <_dtoa_r+0x894>
 80034ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80034ce:	9c08      	ldr	r4, [sp, #32]
 80034d0:	9e00      	ldr	r6, [sp, #0]
 80034d2:	9a00      	ldr	r2, [sp, #0]
 80034d4:	441a      	add	r2, r3
 80034d6:	9200      	str	r2, [sp, #0]
 80034d8:	9a06      	ldr	r2, [sp, #24]
 80034da:	2101      	movs	r1, #1
 80034dc:	441a      	add	r2, r3
 80034de:	4648      	mov	r0, r9
 80034e0:	9206      	str	r2, [sp, #24]
 80034e2:	f000 fc2d 	bl	8003d40 <__i2b>
 80034e6:	4605      	mov	r5, r0
 80034e8:	b166      	cbz	r6, 8003504 <_dtoa_r+0x74c>
 80034ea:	9b06      	ldr	r3, [sp, #24]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	dd09      	ble.n	8003504 <_dtoa_r+0x74c>
 80034f0:	42b3      	cmp	r3, r6
 80034f2:	9a00      	ldr	r2, [sp, #0]
 80034f4:	bfa8      	it	ge
 80034f6:	4633      	movge	r3, r6
 80034f8:	1ad2      	subs	r2, r2, r3
 80034fa:	9200      	str	r2, [sp, #0]
 80034fc:	9a06      	ldr	r2, [sp, #24]
 80034fe:	1af6      	subs	r6, r6, r3
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	9306      	str	r3, [sp, #24]
 8003504:	9b08      	ldr	r3, [sp, #32]
 8003506:	b30b      	cbz	r3, 800354c <_dtoa_r+0x794>
 8003508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 80c6 	beq.w	800369c <_dtoa_r+0x8e4>
 8003510:	2c00      	cmp	r4, #0
 8003512:	f000 80c0 	beq.w	8003696 <_dtoa_r+0x8de>
 8003516:	4629      	mov	r1, r5
 8003518:	4622      	mov	r2, r4
 800351a:	4648      	mov	r0, r9
 800351c:	f000 fcc8 	bl	8003eb0 <__pow5mult>
 8003520:	9a02      	ldr	r2, [sp, #8]
 8003522:	4601      	mov	r1, r0
 8003524:	4605      	mov	r5, r0
 8003526:	4648      	mov	r0, r9
 8003528:	f000 fc20 	bl	8003d6c <__multiply>
 800352c:	9902      	ldr	r1, [sp, #8]
 800352e:	4680      	mov	r8, r0
 8003530:	4648      	mov	r0, r9
 8003532:	f000 fb51 	bl	8003bd8 <_Bfree>
 8003536:	9b08      	ldr	r3, [sp, #32]
 8003538:	1b1b      	subs	r3, r3, r4
 800353a:	9308      	str	r3, [sp, #32]
 800353c:	f000 80b1 	beq.w	80036a2 <_dtoa_r+0x8ea>
 8003540:	9a08      	ldr	r2, [sp, #32]
 8003542:	4641      	mov	r1, r8
 8003544:	4648      	mov	r0, r9
 8003546:	f000 fcb3 	bl	8003eb0 <__pow5mult>
 800354a:	9002      	str	r0, [sp, #8]
 800354c:	2101      	movs	r1, #1
 800354e:	4648      	mov	r0, r9
 8003550:	f000 fbf6 	bl	8003d40 <__i2b>
 8003554:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003556:	4604      	mov	r4, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 81d8 	beq.w	800390e <_dtoa_r+0xb56>
 800355e:	461a      	mov	r2, r3
 8003560:	4601      	mov	r1, r0
 8003562:	4648      	mov	r0, r9
 8003564:	f000 fca4 	bl	8003eb0 <__pow5mult>
 8003568:	9b07      	ldr	r3, [sp, #28]
 800356a:	2b01      	cmp	r3, #1
 800356c:	4604      	mov	r4, r0
 800356e:	f300 809f 	bgt.w	80036b0 <_dtoa_r+0x8f8>
 8003572:	9b04      	ldr	r3, [sp, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	f040 8097 	bne.w	80036a8 <_dtoa_r+0x8f0>
 800357a:	9b05      	ldr	r3, [sp, #20]
 800357c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003580:	2b00      	cmp	r3, #0
 8003582:	f040 8093 	bne.w	80036ac <_dtoa_r+0x8f4>
 8003586:	9b05      	ldr	r3, [sp, #20]
 8003588:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800358c:	0d1b      	lsrs	r3, r3, #20
 800358e:	051b      	lsls	r3, r3, #20
 8003590:	b133      	cbz	r3, 80035a0 <_dtoa_r+0x7e8>
 8003592:	9b00      	ldr	r3, [sp, #0]
 8003594:	3301      	adds	r3, #1
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	9b06      	ldr	r3, [sp, #24]
 800359a:	3301      	adds	r3, #1
 800359c:	9306      	str	r3, [sp, #24]
 800359e:	2301      	movs	r3, #1
 80035a0:	9308      	str	r3, [sp, #32]
 80035a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 81b8 	beq.w	800391a <_dtoa_r+0xb62>
 80035aa:	6923      	ldr	r3, [r4, #16]
 80035ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80035b0:	6918      	ldr	r0, [r3, #16]
 80035b2:	f000 fb79 	bl	8003ca8 <__hi0bits>
 80035b6:	f1c0 0020 	rsb	r0, r0, #32
 80035ba:	9b06      	ldr	r3, [sp, #24]
 80035bc:	4418      	add	r0, r3
 80035be:	f010 001f 	ands.w	r0, r0, #31
 80035c2:	f000 8082 	beq.w	80036ca <_dtoa_r+0x912>
 80035c6:	f1c0 0320 	rsb	r3, r0, #32
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	dd73      	ble.n	80036b6 <_dtoa_r+0x8fe>
 80035ce:	9b00      	ldr	r3, [sp, #0]
 80035d0:	f1c0 001c 	rsb	r0, r0, #28
 80035d4:	4403      	add	r3, r0
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	9b06      	ldr	r3, [sp, #24]
 80035da:	4403      	add	r3, r0
 80035dc:	4406      	add	r6, r0
 80035de:	9306      	str	r3, [sp, #24]
 80035e0:	9b00      	ldr	r3, [sp, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	dd05      	ble.n	80035f2 <_dtoa_r+0x83a>
 80035e6:	9902      	ldr	r1, [sp, #8]
 80035e8:	461a      	mov	r2, r3
 80035ea:	4648      	mov	r0, r9
 80035ec:	f000 fcba 	bl	8003f64 <__lshift>
 80035f0:	9002      	str	r0, [sp, #8]
 80035f2:	9b06      	ldr	r3, [sp, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dd05      	ble.n	8003604 <_dtoa_r+0x84c>
 80035f8:	4621      	mov	r1, r4
 80035fa:	461a      	mov	r2, r3
 80035fc:	4648      	mov	r0, r9
 80035fe:	f000 fcb1 	bl	8003f64 <__lshift>
 8003602:	4604      	mov	r4, r0
 8003604:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	d061      	beq.n	80036ce <_dtoa_r+0x916>
 800360a:	9802      	ldr	r0, [sp, #8]
 800360c:	4621      	mov	r1, r4
 800360e:	f000 fd15 	bl	800403c <__mcmp>
 8003612:	2800      	cmp	r0, #0
 8003614:	da5b      	bge.n	80036ce <_dtoa_r+0x916>
 8003616:	2300      	movs	r3, #0
 8003618:	9902      	ldr	r1, [sp, #8]
 800361a:	220a      	movs	r2, #10
 800361c:	4648      	mov	r0, r9
 800361e:	f000 fafd 	bl	8003c1c <__multadd>
 8003622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003624:	9002      	str	r0, [sp, #8]
 8003626:	f107 38ff 	add.w	r8, r7, #4294967295
 800362a:	2b00      	cmp	r3, #0
 800362c:	f000 8177 	beq.w	800391e <_dtoa_r+0xb66>
 8003630:	4629      	mov	r1, r5
 8003632:	2300      	movs	r3, #0
 8003634:	220a      	movs	r2, #10
 8003636:	4648      	mov	r0, r9
 8003638:	f000 faf0 	bl	8003c1c <__multadd>
 800363c:	f1bb 0f00 	cmp.w	fp, #0
 8003640:	4605      	mov	r5, r0
 8003642:	dc6f      	bgt.n	8003724 <_dtoa_r+0x96c>
 8003644:	9b07      	ldr	r3, [sp, #28]
 8003646:	2b02      	cmp	r3, #2
 8003648:	dc49      	bgt.n	80036de <_dtoa_r+0x926>
 800364a:	e06b      	b.n	8003724 <_dtoa_r+0x96c>
 800364c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800364e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003652:	e73c      	b.n	80034ce <_dtoa_r+0x716>
 8003654:	3fe00000 	.word	0x3fe00000
 8003658:	40240000 	.word	0x40240000
 800365c:	9b03      	ldr	r3, [sp, #12]
 800365e:	1e5c      	subs	r4, r3, #1
 8003660:	9b08      	ldr	r3, [sp, #32]
 8003662:	42a3      	cmp	r3, r4
 8003664:	db09      	blt.n	800367a <_dtoa_r+0x8c2>
 8003666:	1b1c      	subs	r4, r3, r4
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f6bf af30 	bge.w	80034d0 <_dtoa_r+0x718>
 8003670:	9b00      	ldr	r3, [sp, #0]
 8003672:	9a03      	ldr	r2, [sp, #12]
 8003674:	1a9e      	subs	r6, r3, r2
 8003676:	2300      	movs	r3, #0
 8003678:	e72b      	b.n	80034d2 <_dtoa_r+0x71a>
 800367a:	9b08      	ldr	r3, [sp, #32]
 800367c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800367e:	9408      	str	r4, [sp, #32]
 8003680:	1ae3      	subs	r3, r4, r3
 8003682:	441a      	add	r2, r3
 8003684:	9e00      	ldr	r6, [sp, #0]
 8003686:	9b03      	ldr	r3, [sp, #12]
 8003688:	920d      	str	r2, [sp, #52]	@ 0x34
 800368a:	2400      	movs	r4, #0
 800368c:	e721      	b.n	80034d2 <_dtoa_r+0x71a>
 800368e:	9c08      	ldr	r4, [sp, #32]
 8003690:	9e00      	ldr	r6, [sp, #0]
 8003692:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003694:	e728      	b.n	80034e8 <_dtoa_r+0x730>
 8003696:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800369a:	e751      	b.n	8003540 <_dtoa_r+0x788>
 800369c:	9a08      	ldr	r2, [sp, #32]
 800369e:	9902      	ldr	r1, [sp, #8]
 80036a0:	e750      	b.n	8003544 <_dtoa_r+0x78c>
 80036a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80036a6:	e751      	b.n	800354c <_dtoa_r+0x794>
 80036a8:	2300      	movs	r3, #0
 80036aa:	e779      	b.n	80035a0 <_dtoa_r+0x7e8>
 80036ac:	9b04      	ldr	r3, [sp, #16]
 80036ae:	e777      	b.n	80035a0 <_dtoa_r+0x7e8>
 80036b0:	2300      	movs	r3, #0
 80036b2:	9308      	str	r3, [sp, #32]
 80036b4:	e779      	b.n	80035aa <_dtoa_r+0x7f2>
 80036b6:	d093      	beq.n	80035e0 <_dtoa_r+0x828>
 80036b8:	9a00      	ldr	r2, [sp, #0]
 80036ba:	331c      	adds	r3, #28
 80036bc:	441a      	add	r2, r3
 80036be:	9200      	str	r2, [sp, #0]
 80036c0:	9a06      	ldr	r2, [sp, #24]
 80036c2:	441a      	add	r2, r3
 80036c4:	441e      	add	r6, r3
 80036c6:	9206      	str	r2, [sp, #24]
 80036c8:	e78a      	b.n	80035e0 <_dtoa_r+0x828>
 80036ca:	4603      	mov	r3, r0
 80036cc:	e7f4      	b.n	80036b8 <_dtoa_r+0x900>
 80036ce:	9b03      	ldr	r3, [sp, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	46b8      	mov	r8, r7
 80036d4:	dc20      	bgt.n	8003718 <_dtoa_r+0x960>
 80036d6:	469b      	mov	fp, r3
 80036d8:	9b07      	ldr	r3, [sp, #28]
 80036da:	2b02      	cmp	r3, #2
 80036dc:	dd1e      	ble.n	800371c <_dtoa_r+0x964>
 80036de:	f1bb 0f00 	cmp.w	fp, #0
 80036e2:	f47f adb1 	bne.w	8003248 <_dtoa_r+0x490>
 80036e6:	4621      	mov	r1, r4
 80036e8:	465b      	mov	r3, fp
 80036ea:	2205      	movs	r2, #5
 80036ec:	4648      	mov	r0, r9
 80036ee:	f000 fa95 	bl	8003c1c <__multadd>
 80036f2:	4601      	mov	r1, r0
 80036f4:	4604      	mov	r4, r0
 80036f6:	9802      	ldr	r0, [sp, #8]
 80036f8:	f000 fca0 	bl	800403c <__mcmp>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	f77f ada3 	ble.w	8003248 <_dtoa_r+0x490>
 8003702:	4656      	mov	r6, sl
 8003704:	2331      	movs	r3, #49	@ 0x31
 8003706:	f806 3b01 	strb.w	r3, [r6], #1
 800370a:	f108 0801 	add.w	r8, r8, #1
 800370e:	e59f      	b.n	8003250 <_dtoa_r+0x498>
 8003710:	9c03      	ldr	r4, [sp, #12]
 8003712:	46b8      	mov	r8, r7
 8003714:	4625      	mov	r5, r4
 8003716:	e7f4      	b.n	8003702 <_dtoa_r+0x94a>
 8003718:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800371c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8101 	beq.w	8003926 <_dtoa_r+0xb6e>
 8003724:	2e00      	cmp	r6, #0
 8003726:	dd05      	ble.n	8003734 <_dtoa_r+0x97c>
 8003728:	4629      	mov	r1, r5
 800372a:	4632      	mov	r2, r6
 800372c:	4648      	mov	r0, r9
 800372e:	f000 fc19 	bl	8003f64 <__lshift>
 8003732:	4605      	mov	r5, r0
 8003734:	9b08      	ldr	r3, [sp, #32]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d05c      	beq.n	80037f4 <_dtoa_r+0xa3c>
 800373a:	6869      	ldr	r1, [r5, #4]
 800373c:	4648      	mov	r0, r9
 800373e:	f000 fa0b 	bl	8003b58 <_Balloc>
 8003742:	4606      	mov	r6, r0
 8003744:	b928      	cbnz	r0, 8003752 <_dtoa_r+0x99a>
 8003746:	4b82      	ldr	r3, [pc, #520]	@ (8003950 <_dtoa_r+0xb98>)
 8003748:	4602      	mov	r2, r0
 800374a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800374e:	f7ff bb4a 	b.w	8002de6 <_dtoa_r+0x2e>
 8003752:	692a      	ldr	r2, [r5, #16]
 8003754:	3202      	adds	r2, #2
 8003756:	0092      	lsls	r2, r2, #2
 8003758:	f105 010c 	add.w	r1, r5, #12
 800375c:	300c      	adds	r0, #12
 800375e:	f000 fe31 	bl	80043c4 <memcpy>
 8003762:	2201      	movs	r2, #1
 8003764:	4631      	mov	r1, r6
 8003766:	4648      	mov	r0, r9
 8003768:	f000 fbfc 	bl	8003f64 <__lshift>
 800376c:	f10a 0301 	add.w	r3, sl, #1
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	eb0a 030b 	add.w	r3, sl, fp
 8003776:	9308      	str	r3, [sp, #32]
 8003778:	9b04      	ldr	r3, [sp, #16]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	462f      	mov	r7, r5
 8003780:	9306      	str	r3, [sp, #24]
 8003782:	4605      	mov	r5, r0
 8003784:	9b00      	ldr	r3, [sp, #0]
 8003786:	9802      	ldr	r0, [sp, #8]
 8003788:	4621      	mov	r1, r4
 800378a:	f103 3bff 	add.w	fp, r3, #4294967295
 800378e:	f7ff fa88 	bl	8002ca2 <quorem>
 8003792:	4603      	mov	r3, r0
 8003794:	3330      	adds	r3, #48	@ 0x30
 8003796:	9003      	str	r0, [sp, #12]
 8003798:	4639      	mov	r1, r7
 800379a:	9802      	ldr	r0, [sp, #8]
 800379c:	9309      	str	r3, [sp, #36]	@ 0x24
 800379e:	f000 fc4d 	bl	800403c <__mcmp>
 80037a2:	462a      	mov	r2, r5
 80037a4:	9004      	str	r0, [sp, #16]
 80037a6:	4621      	mov	r1, r4
 80037a8:	4648      	mov	r0, r9
 80037aa:	f000 fc63 	bl	8004074 <__mdiff>
 80037ae:	68c2      	ldr	r2, [r0, #12]
 80037b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037b2:	4606      	mov	r6, r0
 80037b4:	bb02      	cbnz	r2, 80037f8 <_dtoa_r+0xa40>
 80037b6:	4601      	mov	r1, r0
 80037b8:	9802      	ldr	r0, [sp, #8]
 80037ba:	f000 fc3f 	bl	800403c <__mcmp>
 80037be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037c0:	4602      	mov	r2, r0
 80037c2:	4631      	mov	r1, r6
 80037c4:	4648      	mov	r0, r9
 80037c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80037c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80037ca:	f000 fa05 	bl	8003bd8 <_Bfree>
 80037ce:	9b07      	ldr	r3, [sp, #28]
 80037d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80037d2:	9e00      	ldr	r6, [sp, #0]
 80037d4:	ea42 0103 	orr.w	r1, r2, r3
 80037d8:	9b06      	ldr	r3, [sp, #24]
 80037da:	4319      	orrs	r1, r3
 80037dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037de:	d10d      	bne.n	80037fc <_dtoa_r+0xa44>
 80037e0:	2b39      	cmp	r3, #57	@ 0x39
 80037e2:	d027      	beq.n	8003834 <_dtoa_r+0xa7c>
 80037e4:	9a04      	ldr	r2, [sp, #16]
 80037e6:	2a00      	cmp	r2, #0
 80037e8:	dd01      	ble.n	80037ee <_dtoa_r+0xa36>
 80037ea:	9b03      	ldr	r3, [sp, #12]
 80037ec:	3331      	adds	r3, #49	@ 0x31
 80037ee:	f88b 3000 	strb.w	r3, [fp]
 80037f2:	e52e      	b.n	8003252 <_dtoa_r+0x49a>
 80037f4:	4628      	mov	r0, r5
 80037f6:	e7b9      	b.n	800376c <_dtoa_r+0x9b4>
 80037f8:	2201      	movs	r2, #1
 80037fa:	e7e2      	b.n	80037c2 <_dtoa_r+0xa0a>
 80037fc:	9904      	ldr	r1, [sp, #16]
 80037fe:	2900      	cmp	r1, #0
 8003800:	db04      	blt.n	800380c <_dtoa_r+0xa54>
 8003802:	9807      	ldr	r0, [sp, #28]
 8003804:	4301      	orrs	r1, r0
 8003806:	9806      	ldr	r0, [sp, #24]
 8003808:	4301      	orrs	r1, r0
 800380a:	d120      	bne.n	800384e <_dtoa_r+0xa96>
 800380c:	2a00      	cmp	r2, #0
 800380e:	ddee      	ble.n	80037ee <_dtoa_r+0xa36>
 8003810:	9902      	ldr	r1, [sp, #8]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2201      	movs	r2, #1
 8003816:	4648      	mov	r0, r9
 8003818:	f000 fba4 	bl	8003f64 <__lshift>
 800381c:	4621      	mov	r1, r4
 800381e:	9002      	str	r0, [sp, #8]
 8003820:	f000 fc0c 	bl	800403c <__mcmp>
 8003824:	2800      	cmp	r0, #0
 8003826:	9b00      	ldr	r3, [sp, #0]
 8003828:	dc02      	bgt.n	8003830 <_dtoa_r+0xa78>
 800382a:	d1e0      	bne.n	80037ee <_dtoa_r+0xa36>
 800382c:	07da      	lsls	r2, r3, #31
 800382e:	d5de      	bpl.n	80037ee <_dtoa_r+0xa36>
 8003830:	2b39      	cmp	r3, #57	@ 0x39
 8003832:	d1da      	bne.n	80037ea <_dtoa_r+0xa32>
 8003834:	2339      	movs	r3, #57	@ 0x39
 8003836:	f88b 3000 	strb.w	r3, [fp]
 800383a:	4633      	mov	r3, r6
 800383c:	461e      	mov	r6, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003844:	2a39      	cmp	r2, #57	@ 0x39
 8003846:	d04e      	beq.n	80038e6 <_dtoa_r+0xb2e>
 8003848:	3201      	adds	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e501      	b.n	8003252 <_dtoa_r+0x49a>
 800384e:	2a00      	cmp	r2, #0
 8003850:	dd03      	ble.n	800385a <_dtoa_r+0xaa2>
 8003852:	2b39      	cmp	r3, #57	@ 0x39
 8003854:	d0ee      	beq.n	8003834 <_dtoa_r+0xa7c>
 8003856:	3301      	adds	r3, #1
 8003858:	e7c9      	b.n	80037ee <_dtoa_r+0xa36>
 800385a:	9a00      	ldr	r2, [sp, #0]
 800385c:	9908      	ldr	r1, [sp, #32]
 800385e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003862:	428a      	cmp	r2, r1
 8003864:	d028      	beq.n	80038b8 <_dtoa_r+0xb00>
 8003866:	9902      	ldr	r1, [sp, #8]
 8003868:	2300      	movs	r3, #0
 800386a:	220a      	movs	r2, #10
 800386c:	4648      	mov	r0, r9
 800386e:	f000 f9d5 	bl	8003c1c <__multadd>
 8003872:	42af      	cmp	r7, r5
 8003874:	9002      	str	r0, [sp, #8]
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	f04f 020a 	mov.w	r2, #10
 800387e:	4639      	mov	r1, r7
 8003880:	4648      	mov	r0, r9
 8003882:	d107      	bne.n	8003894 <_dtoa_r+0xadc>
 8003884:	f000 f9ca 	bl	8003c1c <__multadd>
 8003888:	4607      	mov	r7, r0
 800388a:	4605      	mov	r5, r0
 800388c:	9b00      	ldr	r3, [sp, #0]
 800388e:	3301      	adds	r3, #1
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	e777      	b.n	8003784 <_dtoa_r+0x9cc>
 8003894:	f000 f9c2 	bl	8003c1c <__multadd>
 8003898:	4629      	mov	r1, r5
 800389a:	4607      	mov	r7, r0
 800389c:	2300      	movs	r3, #0
 800389e:	220a      	movs	r2, #10
 80038a0:	4648      	mov	r0, r9
 80038a2:	f000 f9bb 	bl	8003c1c <__multadd>
 80038a6:	4605      	mov	r5, r0
 80038a8:	e7f0      	b.n	800388c <_dtoa_r+0xad4>
 80038aa:	f1bb 0f00 	cmp.w	fp, #0
 80038ae:	bfcc      	ite	gt
 80038b0:	465e      	movgt	r6, fp
 80038b2:	2601      	movle	r6, #1
 80038b4:	4456      	add	r6, sl
 80038b6:	2700      	movs	r7, #0
 80038b8:	9902      	ldr	r1, [sp, #8]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	2201      	movs	r2, #1
 80038be:	4648      	mov	r0, r9
 80038c0:	f000 fb50 	bl	8003f64 <__lshift>
 80038c4:	4621      	mov	r1, r4
 80038c6:	9002      	str	r0, [sp, #8]
 80038c8:	f000 fbb8 	bl	800403c <__mcmp>
 80038cc:	2800      	cmp	r0, #0
 80038ce:	dcb4      	bgt.n	800383a <_dtoa_r+0xa82>
 80038d0:	d102      	bne.n	80038d8 <_dtoa_r+0xb20>
 80038d2:	9b00      	ldr	r3, [sp, #0]
 80038d4:	07db      	lsls	r3, r3, #31
 80038d6:	d4b0      	bmi.n	800383a <_dtoa_r+0xa82>
 80038d8:	4633      	mov	r3, r6
 80038da:	461e      	mov	r6, r3
 80038dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038e0:	2a30      	cmp	r2, #48	@ 0x30
 80038e2:	d0fa      	beq.n	80038da <_dtoa_r+0xb22>
 80038e4:	e4b5      	b.n	8003252 <_dtoa_r+0x49a>
 80038e6:	459a      	cmp	sl, r3
 80038e8:	d1a8      	bne.n	800383c <_dtoa_r+0xa84>
 80038ea:	2331      	movs	r3, #49	@ 0x31
 80038ec:	f108 0801 	add.w	r8, r8, #1
 80038f0:	f88a 3000 	strb.w	r3, [sl]
 80038f4:	e4ad      	b.n	8003252 <_dtoa_r+0x49a>
 80038f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003954 <_dtoa_r+0xb9c>
 80038fc:	b11b      	cbz	r3, 8003906 <_dtoa_r+0xb4e>
 80038fe:	f10a 0308 	add.w	r3, sl, #8
 8003902:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4650      	mov	r0, sl
 8003908:	b017      	add	sp, #92	@ 0x5c
 800390a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800390e:	9b07      	ldr	r3, [sp, #28]
 8003910:	2b01      	cmp	r3, #1
 8003912:	f77f ae2e 	ble.w	8003572 <_dtoa_r+0x7ba>
 8003916:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003918:	9308      	str	r3, [sp, #32]
 800391a:	2001      	movs	r0, #1
 800391c:	e64d      	b.n	80035ba <_dtoa_r+0x802>
 800391e:	f1bb 0f00 	cmp.w	fp, #0
 8003922:	f77f aed9 	ble.w	80036d8 <_dtoa_r+0x920>
 8003926:	4656      	mov	r6, sl
 8003928:	9802      	ldr	r0, [sp, #8]
 800392a:	4621      	mov	r1, r4
 800392c:	f7ff f9b9 	bl	8002ca2 <quorem>
 8003930:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003934:	f806 3b01 	strb.w	r3, [r6], #1
 8003938:	eba6 020a 	sub.w	r2, r6, sl
 800393c:	4593      	cmp	fp, r2
 800393e:	ddb4      	ble.n	80038aa <_dtoa_r+0xaf2>
 8003940:	9902      	ldr	r1, [sp, #8]
 8003942:	2300      	movs	r3, #0
 8003944:	220a      	movs	r2, #10
 8003946:	4648      	mov	r0, r9
 8003948:	f000 f968 	bl	8003c1c <__multadd>
 800394c:	9002      	str	r0, [sp, #8]
 800394e:	e7eb      	b.n	8003928 <_dtoa_r+0xb70>
 8003950:	08004ae8 	.word	0x08004ae8
 8003954:	08004a6c 	.word	0x08004a6c

08003958 <_free_r>:
 8003958:	b538      	push	{r3, r4, r5, lr}
 800395a:	4605      	mov	r5, r0
 800395c:	2900      	cmp	r1, #0
 800395e:	d041      	beq.n	80039e4 <_free_r+0x8c>
 8003960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003964:	1f0c      	subs	r4, r1, #4
 8003966:	2b00      	cmp	r3, #0
 8003968:	bfb8      	it	lt
 800396a:	18e4      	addlt	r4, r4, r3
 800396c:	f000 f8e8 	bl	8003b40 <__malloc_lock>
 8003970:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <_free_r+0x90>)
 8003972:	6813      	ldr	r3, [r2, #0]
 8003974:	b933      	cbnz	r3, 8003984 <_free_r+0x2c>
 8003976:	6063      	str	r3, [r4, #4]
 8003978:	6014      	str	r4, [r2, #0]
 800397a:	4628      	mov	r0, r5
 800397c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003980:	f000 b8e4 	b.w	8003b4c <__malloc_unlock>
 8003984:	42a3      	cmp	r3, r4
 8003986:	d908      	bls.n	800399a <_free_r+0x42>
 8003988:	6820      	ldr	r0, [r4, #0]
 800398a:	1821      	adds	r1, r4, r0
 800398c:	428b      	cmp	r3, r1
 800398e:	bf01      	itttt	eq
 8003990:	6819      	ldreq	r1, [r3, #0]
 8003992:	685b      	ldreq	r3, [r3, #4]
 8003994:	1809      	addeq	r1, r1, r0
 8003996:	6021      	streq	r1, [r4, #0]
 8003998:	e7ed      	b.n	8003976 <_free_r+0x1e>
 800399a:	461a      	mov	r2, r3
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	b10b      	cbz	r3, 80039a4 <_free_r+0x4c>
 80039a0:	42a3      	cmp	r3, r4
 80039a2:	d9fa      	bls.n	800399a <_free_r+0x42>
 80039a4:	6811      	ldr	r1, [r2, #0]
 80039a6:	1850      	adds	r0, r2, r1
 80039a8:	42a0      	cmp	r0, r4
 80039aa:	d10b      	bne.n	80039c4 <_free_r+0x6c>
 80039ac:	6820      	ldr	r0, [r4, #0]
 80039ae:	4401      	add	r1, r0
 80039b0:	1850      	adds	r0, r2, r1
 80039b2:	4283      	cmp	r3, r0
 80039b4:	6011      	str	r1, [r2, #0]
 80039b6:	d1e0      	bne.n	800397a <_free_r+0x22>
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	6053      	str	r3, [r2, #4]
 80039be:	4408      	add	r0, r1
 80039c0:	6010      	str	r0, [r2, #0]
 80039c2:	e7da      	b.n	800397a <_free_r+0x22>
 80039c4:	d902      	bls.n	80039cc <_free_r+0x74>
 80039c6:	230c      	movs	r3, #12
 80039c8:	602b      	str	r3, [r5, #0]
 80039ca:	e7d6      	b.n	800397a <_free_r+0x22>
 80039cc:	6820      	ldr	r0, [r4, #0]
 80039ce:	1821      	adds	r1, r4, r0
 80039d0:	428b      	cmp	r3, r1
 80039d2:	bf04      	itt	eq
 80039d4:	6819      	ldreq	r1, [r3, #0]
 80039d6:	685b      	ldreq	r3, [r3, #4]
 80039d8:	6063      	str	r3, [r4, #4]
 80039da:	bf04      	itt	eq
 80039dc:	1809      	addeq	r1, r1, r0
 80039de:	6021      	streq	r1, [r4, #0]
 80039e0:	6054      	str	r4, [r2, #4]
 80039e2:	e7ca      	b.n	800397a <_free_r+0x22>
 80039e4:	bd38      	pop	{r3, r4, r5, pc}
 80039e6:	bf00      	nop
 80039e8:	200003b0 	.word	0x200003b0

080039ec <malloc>:
 80039ec:	4b02      	ldr	r3, [pc, #8]	@ (80039f8 <malloc+0xc>)
 80039ee:	4601      	mov	r1, r0
 80039f0:	6818      	ldr	r0, [r3, #0]
 80039f2:	f000 b825 	b.w	8003a40 <_malloc_r>
 80039f6:	bf00      	nop
 80039f8:	2000000c 	.word	0x2000000c

080039fc <sbrk_aligned>:
 80039fc:	b570      	push	{r4, r5, r6, lr}
 80039fe:	4e0f      	ldr	r6, [pc, #60]	@ (8003a3c <sbrk_aligned+0x40>)
 8003a00:	460c      	mov	r4, r1
 8003a02:	6831      	ldr	r1, [r6, #0]
 8003a04:	4605      	mov	r5, r0
 8003a06:	b911      	cbnz	r1, 8003a0e <sbrk_aligned+0x12>
 8003a08:	f000 fccc 	bl	80043a4 <_sbrk_r>
 8003a0c:	6030      	str	r0, [r6, #0]
 8003a0e:	4621      	mov	r1, r4
 8003a10:	4628      	mov	r0, r5
 8003a12:	f000 fcc7 	bl	80043a4 <_sbrk_r>
 8003a16:	1c43      	adds	r3, r0, #1
 8003a18:	d103      	bne.n	8003a22 <sbrk_aligned+0x26>
 8003a1a:	f04f 34ff 	mov.w	r4, #4294967295
 8003a1e:	4620      	mov	r0, r4
 8003a20:	bd70      	pop	{r4, r5, r6, pc}
 8003a22:	1cc4      	adds	r4, r0, #3
 8003a24:	f024 0403 	bic.w	r4, r4, #3
 8003a28:	42a0      	cmp	r0, r4
 8003a2a:	d0f8      	beq.n	8003a1e <sbrk_aligned+0x22>
 8003a2c:	1a21      	subs	r1, r4, r0
 8003a2e:	4628      	mov	r0, r5
 8003a30:	f000 fcb8 	bl	80043a4 <_sbrk_r>
 8003a34:	3001      	adds	r0, #1
 8003a36:	d1f2      	bne.n	8003a1e <sbrk_aligned+0x22>
 8003a38:	e7ef      	b.n	8003a1a <sbrk_aligned+0x1e>
 8003a3a:	bf00      	nop
 8003a3c:	200003ac 	.word	0x200003ac

08003a40 <_malloc_r>:
 8003a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a44:	1ccd      	adds	r5, r1, #3
 8003a46:	f025 0503 	bic.w	r5, r5, #3
 8003a4a:	3508      	adds	r5, #8
 8003a4c:	2d0c      	cmp	r5, #12
 8003a4e:	bf38      	it	cc
 8003a50:	250c      	movcc	r5, #12
 8003a52:	2d00      	cmp	r5, #0
 8003a54:	4606      	mov	r6, r0
 8003a56:	db01      	blt.n	8003a5c <_malloc_r+0x1c>
 8003a58:	42a9      	cmp	r1, r5
 8003a5a:	d904      	bls.n	8003a66 <_malloc_r+0x26>
 8003a5c:	230c      	movs	r3, #12
 8003a5e:	6033      	str	r3, [r6, #0]
 8003a60:	2000      	movs	r0, #0
 8003a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b3c <_malloc_r+0xfc>
 8003a6a:	f000 f869 	bl	8003b40 <__malloc_lock>
 8003a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a72:	461c      	mov	r4, r3
 8003a74:	bb44      	cbnz	r4, 8003ac8 <_malloc_r+0x88>
 8003a76:	4629      	mov	r1, r5
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f7ff ffbf 	bl	80039fc <sbrk_aligned>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	4604      	mov	r4, r0
 8003a82:	d158      	bne.n	8003b36 <_malloc_r+0xf6>
 8003a84:	f8d8 4000 	ldr.w	r4, [r8]
 8003a88:	4627      	mov	r7, r4
 8003a8a:	2f00      	cmp	r7, #0
 8003a8c:	d143      	bne.n	8003b16 <_malloc_r+0xd6>
 8003a8e:	2c00      	cmp	r4, #0
 8003a90:	d04b      	beq.n	8003b2a <_malloc_r+0xea>
 8003a92:	6823      	ldr	r3, [r4, #0]
 8003a94:	4639      	mov	r1, r7
 8003a96:	4630      	mov	r0, r6
 8003a98:	eb04 0903 	add.w	r9, r4, r3
 8003a9c:	f000 fc82 	bl	80043a4 <_sbrk_r>
 8003aa0:	4581      	cmp	r9, r0
 8003aa2:	d142      	bne.n	8003b2a <_malloc_r+0xea>
 8003aa4:	6821      	ldr	r1, [r4, #0]
 8003aa6:	1a6d      	subs	r5, r5, r1
 8003aa8:	4629      	mov	r1, r5
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f7ff ffa6 	bl	80039fc <sbrk_aligned>
 8003ab0:	3001      	adds	r0, #1
 8003ab2:	d03a      	beq.n	8003b2a <_malloc_r+0xea>
 8003ab4:	6823      	ldr	r3, [r4, #0]
 8003ab6:	442b      	add	r3, r5
 8003ab8:	6023      	str	r3, [r4, #0]
 8003aba:	f8d8 3000 	ldr.w	r3, [r8]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	bb62      	cbnz	r2, 8003b1c <_malloc_r+0xdc>
 8003ac2:	f8c8 7000 	str.w	r7, [r8]
 8003ac6:	e00f      	b.n	8003ae8 <_malloc_r+0xa8>
 8003ac8:	6822      	ldr	r2, [r4, #0]
 8003aca:	1b52      	subs	r2, r2, r5
 8003acc:	d420      	bmi.n	8003b10 <_malloc_r+0xd0>
 8003ace:	2a0b      	cmp	r2, #11
 8003ad0:	d917      	bls.n	8003b02 <_malloc_r+0xc2>
 8003ad2:	1961      	adds	r1, r4, r5
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	6025      	str	r5, [r4, #0]
 8003ad8:	bf18      	it	ne
 8003ada:	6059      	strne	r1, [r3, #4]
 8003adc:	6863      	ldr	r3, [r4, #4]
 8003ade:	bf08      	it	eq
 8003ae0:	f8c8 1000 	streq.w	r1, [r8]
 8003ae4:	5162      	str	r2, [r4, r5]
 8003ae6:	604b      	str	r3, [r1, #4]
 8003ae8:	4630      	mov	r0, r6
 8003aea:	f000 f82f 	bl	8003b4c <__malloc_unlock>
 8003aee:	f104 000b 	add.w	r0, r4, #11
 8003af2:	1d23      	adds	r3, r4, #4
 8003af4:	f020 0007 	bic.w	r0, r0, #7
 8003af8:	1ac2      	subs	r2, r0, r3
 8003afa:	bf1c      	itt	ne
 8003afc:	1a1b      	subne	r3, r3, r0
 8003afe:	50a3      	strne	r3, [r4, r2]
 8003b00:	e7af      	b.n	8003a62 <_malloc_r+0x22>
 8003b02:	6862      	ldr	r2, [r4, #4]
 8003b04:	42a3      	cmp	r3, r4
 8003b06:	bf0c      	ite	eq
 8003b08:	f8c8 2000 	streq.w	r2, [r8]
 8003b0c:	605a      	strne	r2, [r3, #4]
 8003b0e:	e7eb      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b10:	4623      	mov	r3, r4
 8003b12:	6864      	ldr	r4, [r4, #4]
 8003b14:	e7ae      	b.n	8003a74 <_malloc_r+0x34>
 8003b16:	463c      	mov	r4, r7
 8003b18:	687f      	ldr	r7, [r7, #4]
 8003b1a:	e7b6      	b.n	8003a8a <_malloc_r+0x4a>
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	42a3      	cmp	r3, r4
 8003b22:	d1fb      	bne.n	8003b1c <_malloc_r+0xdc>
 8003b24:	2300      	movs	r3, #0
 8003b26:	6053      	str	r3, [r2, #4]
 8003b28:	e7de      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b2a:	230c      	movs	r3, #12
 8003b2c:	6033      	str	r3, [r6, #0]
 8003b2e:	4630      	mov	r0, r6
 8003b30:	f000 f80c 	bl	8003b4c <__malloc_unlock>
 8003b34:	e794      	b.n	8003a60 <_malloc_r+0x20>
 8003b36:	6005      	str	r5, [r0, #0]
 8003b38:	e7d6      	b.n	8003ae8 <_malloc_r+0xa8>
 8003b3a:	bf00      	nop
 8003b3c:	200003b0 	.word	0x200003b0

08003b40 <__malloc_lock>:
 8003b40:	4801      	ldr	r0, [pc, #4]	@ (8003b48 <__malloc_lock+0x8>)
 8003b42:	f7ff b8ac 	b.w	8002c9e <__retarget_lock_acquire_recursive>
 8003b46:	bf00      	nop
 8003b48:	200003a8 	.word	0x200003a8

08003b4c <__malloc_unlock>:
 8003b4c:	4801      	ldr	r0, [pc, #4]	@ (8003b54 <__malloc_unlock+0x8>)
 8003b4e:	f7ff b8a7 	b.w	8002ca0 <__retarget_lock_release_recursive>
 8003b52:	bf00      	nop
 8003b54:	200003a8 	.word	0x200003a8

08003b58 <_Balloc>:
 8003b58:	b570      	push	{r4, r5, r6, lr}
 8003b5a:	69c6      	ldr	r6, [r0, #28]
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	460d      	mov	r5, r1
 8003b60:	b976      	cbnz	r6, 8003b80 <_Balloc+0x28>
 8003b62:	2010      	movs	r0, #16
 8003b64:	f7ff ff42 	bl	80039ec <malloc>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	61e0      	str	r0, [r4, #28]
 8003b6c:	b920      	cbnz	r0, 8003b78 <_Balloc+0x20>
 8003b6e:	4b18      	ldr	r3, [pc, #96]	@ (8003bd0 <_Balloc+0x78>)
 8003b70:	4818      	ldr	r0, [pc, #96]	@ (8003bd4 <_Balloc+0x7c>)
 8003b72:	216b      	movs	r1, #107	@ 0x6b
 8003b74:	f000 fc34 	bl	80043e0 <__assert_func>
 8003b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b7c:	6006      	str	r6, [r0, #0]
 8003b7e:	60c6      	str	r6, [r0, #12]
 8003b80:	69e6      	ldr	r6, [r4, #28]
 8003b82:	68f3      	ldr	r3, [r6, #12]
 8003b84:	b183      	cbz	r3, 8003ba8 <_Balloc+0x50>
 8003b86:	69e3      	ldr	r3, [r4, #28]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b8e:	b9b8      	cbnz	r0, 8003bc0 <_Balloc+0x68>
 8003b90:	2101      	movs	r1, #1
 8003b92:	fa01 f605 	lsl.w	r6, r1, r5
 8003b96:	1d72      	adds	r2, r6, #5
 8003b98:	0092      	lsls	r2, r2, #2
 8003b9a:	4620      	mov	r0, r4
 8003b9c:	f000 fc3e 	bl	800441c <_calloc_r>
 8003ba0:	b160      	cbz	r0, 8003bbc <_Balloc+0x64>
 8003ba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003ba6:	e00e      	b.n	8003bc6 <_Balloc+0x6e>
 8003ba8:	2221      	movs	r2, #33	@ 0x21
 8003baa:	2104      	movs	r1, #4
 8003bac:	4620      	mov	r0, r4
 8003bae:	f000 fc35 	bl	800441c <_calloc_r>
 8003bb2:	69e3      	ldr	r3, [r4, #28]
 8003bb4:	60f0      	str	r0, [r6, #12]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1e4      	bne.n	8003b86 <_Balloc+0x2e>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	bd70      	pop	{r4, r5, r6, pc}
 8003bc0:	6802      	ldr	r2, [r0, #0]
 8003bc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003bcc:	e7f7      	b.n	8003bbe <_Balloc+0x66>
 8003bce:	bf00      	nop
 8003bd0:	08004a79 	.word	0x08004a79
 8003bd4:	08004af9 	.word	0x08004af9

08003bd8 <_Bfree>:
 8003bd8:	b570      	push	{r4, r5, r6, lr}
 8003bda:	69c6      	ldr	r6, [r0, #28]
 8003bdc:	4605      	mov	r5, r0
 8003bde:	460c      	mov	r4, r1
 8003be0:	b976      	cbnz	r6, 8003c00 <_Bfree+0x28>
 8003be2:	2010      	movs	r0, #16
 8003be4:	f7ff ff02 	bl	80039ec <malloc>
 8003be8:	4602      	mov	r2, r0
 8003bea:	61e8      	str	r0, [r5, #28]
 8003bec:	b920      	cbnz	r0, 8003bf8 <_Bfree+0x20>
 8003bee:	4b09      	ldr	r3, [pc, #36]	@ (8003c14 <_Bfree+0x3c>)
 8003bf0:	4809      	ldr	r0, [pc, #36]	@ (8003c18 <_Bfree+0x40>)
 8003bf2:	218f      	movs	r1, #143	@ 0x8f
 8003bf4:	f000 fbf4 	bl	80043e0 <__assert_func>
 8003bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bfc:	6006      	str	r6, [r0, #0]
 8003bfe:	60c6      	str	r6, [r0, #12]
 8003c00:	b13c      	cbz	r4, 8003c12 <_Bfree+0x3a>
 8003c02:	69eb      	ldr	r3, [r5, #28]
 8003c04:	6862      	ldr	r2, [r4, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c0c:	6021      	str	r1, [r4, #0]
 8003c0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	08004a79 	.word	0x08004a79
 8003c18:	08004af9 	.word	0x08004af9

08003c1c <__multadd>:
 8003c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c20:	690d      	ldr	r5, [r1, #16]
 8003c22:	4607      	mov	r7, r0
 8003c24:	460c      	mov	r4, r1
 8003c26:	461e      	mov	r6, r3
 8003c28:	f101 0c14 	add.w	ip, r1, #20
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	f8dc 3000 	ldr.w	r3, [ip]
 8003c32:	b299      	uxth	r1, r3
 8003c34:	fb02 6101 	mla	r1, r2, r1, r6
 8003c38:	0c1e      	lsrs	r6, r3, #16
 8003c3a:	0c0b      	lsrs	r3, r1, #16
 8003c3c:	fb02 3306 	mla	r3, r2, r6, r3
 8003c40:	b289      	uxth	r1, r1
 8003c42:	3001      	adds	r0, #1
 8003c44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003c48:	4285      	cmp	r5, r0
 8003c4a:	f84c 1b04 	str.w	r1, [ip], #4
 8003c4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003c52:	dcec      	bgt.n	8003c2e <__multadd+0x12>
 8003c54:	b30e      	cbz	r6, 8003c9a <__multadd+0x7e>
 8003c56:	68a3      	ldr	r3, [r4, #8]
 8003c58:	42ab      	cmp	r3, r5
 8003c5a:	dc19      	bgt.n	8003c90 <__multadd+0x74>
 8003c5c:	6861      	ldr	r1, [r4, #4]
 8003c5e:	4638      	mov	r0, r7
 8003c60:	3101      	adds	r1, #1
 8003c62:	f7ff ff79 	bl	8003b58 <_Balloc>
 8003c66:	4680      	mov	r8, r0
 8003c68:	b928      	cbnz	r0, 8003c76 <__multadd+0x5a>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca0 <__multadd+0x84>)
 8003c6e:	480d      	ldr	r0, [pc, #52]	@ (8003ca4 <__multadd+0x88>)
 8003c70:	21ba      	movs	r1, #186	@ 0xba
 8003c72:	f000 fbb5 	bl	80043e0 <__assert_func>
 8003c76:	6922      	ldr	r2, [r4, #16]
 8003c78:	3202      	adds	r2, #2
 8003c7a:	f104 010c 	add.w	r1, r4, #12
 8003c7e:	0092      	lsls	r2, r2, #2
 8003c80:	300c      	adds	r0, #12
 8003c82:	f000 fb9f 	bl	80043c4 <memcpy>
 8003c86:	4621      	mov	r1, r4
 8003c88:	4638      	mov	r0, r7
 8003c8a:	f7ff ffa5 	bl	8003bd8 <_Bfree>
 8003c8e:	4644      	mov	r4, r8
 8003c90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c94:	3501      	adds	r5, #1
 8003c96:	615e      	str	r6, [r3, #20]
 8003c98:	6125      	str	r5, [r4, #16]
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ca0:	08004ae8 	.word	0x08004ae8
 8003ca4:	08004af9 	.word	0x08004af9

08003ca8 <__hi0bits>:
 8003ca8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003cac:	4603      	mov	r3, r0
 8003cae:	bf36      	itet	cc
 8003cb0:	0403      	lslcc	r3, r0, #16
 8003cb2:	2000      	movcs	r0, #0
 8003cb4:	2010      	movcc	r0, #16
 8003cb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003cba:	bf3c      	itt	cc
 8003cbc:	021b      	lslcc	r3, r3, #8
 8003cbe:	3008      	addcc	r0, #8
 8003cc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cc4:	bf3c      	itt	cc
 8003cc6:	011b      	lslcc	r3, r3, #4
 8003cc8:	3004      	addcc	r0, #4
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cce:	bf3c      	itt	cc
 8003cd0:	009b      	lslcc	r3, r3, #2
 8003cd2:	3002      	addcc	r0, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	db05      	blt.n	8003ce4 <__hi0bits+0x3c>
 8003cd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003cdc:	f100 0001 	add.w	r0, r0, #1
 8003ce0:	bf08      	it	eq
 8003ce2:	2020      	moveq	r0, #32
 8003ce4:	4770      	bx	lr

08003ce6 <__lo0bits>:
 8003ce6:	6803      	ldr	r3, [r0, #0]
 8003ce8:	4602      	mov	r2, r0
 8003cea:	f013 0007 	ands.w	r0, r3, #7
 8003cee:	d00b      	beq.n	8003d08 <__lo0bits+0x22>
 8003cf0:	07d9      	lsls	r1, r3, #31
 8003cf2:	d421      	bmi.n	8003d38 <__lo0bits+0x52>
 8003cf4:	0798      	lsls	r0, r3, #30
 8003cf6:	bf49      	itett	mi
 8003cf8:	085b      	lsrmi	r3, r3, #1
 8003cfa:	089b      	lsrpl	r3, r3, #2
 8003cfc:	2001      	movmi	r0, #1
 8003cfe:	6013      	strmi	r3, [r2, #0]
 8003d00:	bf5c      	itt	pl
 8003d02:	6013      	strpl	r3, [r2, #0]
 8003d04:	2002      	movpl	r0, #2
 8003d06:	4770      	bx	lr
 8003d08:	b299      	uxth	r1, r3
 8003d0a:	b909      	cbnz	r1, 8003d10 <__lo0bits+0x2a>
 8003d0c:	0c1b      	lsrs	r3, r3, #16
 8003d0e:	2010      	movs	r0, #16
 8003d10:	b2d9      	uxtb	r1, r3
 8003d12:	b909      	cbnz	r1, 8003d18 <__lo0bits+0x32>
 8003d14:	3008      	adds	r0, #8
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	0719      	lsls	r1, r3, #28
 8003d1a:	bf04      	itt	eq
 8003d1c:	091b      	lsreq	r3, r3, #4
 8003d1e:	3004      	addeq	r0, #4
 8003d20:	0799      	lsls	r1, r3, #30
 8003d22:	bf04      	itt	eq
 8003d24:	089b      	lsreq	r3, r3, #2
 8003d26:	3002      	addeq	r0, #2
 8003d28:	07d9      	lsls	r1, r3, #31
 8003d2a:	d403      	bmi.n	8003d34 <__lo0bits+0x4e>
 8003d2c:	085b      	lsrs	r3, r3, #1
 8003d2e:	f100 0001 	add.w	r0, r0, #1
 8003d32:	d003      	beq.n	8003d3c <__lo0bits+0x56>
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4770      	bx	lr
 8003d38:	2000      	movs	r0, #0
 8003d3a:	4770      	bx	lr
 8003d3c:	2020      	movs	r0, #32
 8003d3e:	4770      	bx	lr

08003d40 <__i2b>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	460c      	mov	r4, r1
 8003d44:	2101      	movs	r1, #1
 8003d46:	f7ff ff07 	bl	8003b58 <_Balloc>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	b928      	cbnz	r0, 8003d5a <__i2b+0x1a>
 8003d4e:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <__i2b+0x24>)
 8003d50:	4805      	ldr	r0, [pc, #20]	@ (8003d68 <__i2b+0x28>)
 8003d52:	f240 1145 	movw	r1, #325	@ 0x145
 8003d56:	f000 fb43 	bl	80043e0 <__assert_func>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	6144      	str	r4, [r0, #20]
 8003d5e:	6103      	str	r3, [r0, #16]
 8003d60:	bd10      	pop	{r4, pc}
 8003d62:	bf00      	nop
 8003d64:	08004ae8 	.word	0x08004ae8
 8003d68:	08004af9 	.word	0x08004af9

08003d6c <__multiply>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	4617      	mov	r7, r2
 8003d72:	690a      	ldr	r2, [r1, #16]
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	bfa8      	it	ge
 8003d7a:	463b      	movge	r3, r7
 8003d7c:	4689      	mov	r9, r1
 8003d7e:	bfa4      	itt	ge
 8003d80:	460f      	movge	r7, r1
 8003d82:	4699      	movge	r9, r3
 8003d84:	693d      	ldr	r5, [r7, #16]
 8003d86:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	eb05 060a 	add.w	r6, r5, sl
 8003d92:	42b3      	cmp	r3, r6
 8003d94:	b085      	sub	sp, #20
 8003d96:	bfb8      	it	lt
 8003d98:	3101      	addlt	r1, #1
 8003d9a:	f7ff fedd 	bl	8003b58 <_Balloc>
 8003d9e:	b930      	cbnz	r0, 8003dae <__multiply+0x42>
 8003da0:	4602      	mov	r2, r0
 8003da2:	4b41      	ldr	r3, [pc, #260]	@ (8003ea8 <__multiply+0x13c>)
 8003da4:	4841      	ldr	r0, [pc, #260]	@ (8003eac <__multiply+0x140>)
 8003da6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003daa:	f000 fb19 	bl	80043e0 <__assert_func>
 8003dae:	f100 0414 	add.w	r4, r0, #20
 8003db2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8003db6:	4623      	mov	r3, r4
 8003db8:	2200      	movs	r2, #0
 8003dba:	4573      	cmp	r3, lr
 8003dbc:	d320      	bcc.n	8003e00 <__multiply+0x94>
 8003dbe:	f107 0814 	add.w	r8, r7, #20
 8003dc2:	f109 0114 	add.w	r1, r9, #20
 8003dc6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8003dca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8003dce:	9302      	str	r3, [sp, #8]
 8003dd0:	1beb      	subs	r3, r5, r7
 8003dd2:	3b15      	subs	r3, #21
 8003dd4:	f023 0303 	bic.w	r3, r3, #3
 8003dd8:	3304      	adds	r3, #4
 8003dda:	3715      	adds	r7, #21
 8003ddc:	42bd      	cmp	r5, r7
 8003dde:	bf38      	it	cc
 8003de0:	2304      	movcc	r3, #4
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	9b02      	ldr	r3, [sp, #8]
 8003de6:	9103      	str	r1, [sp, #12]
 8003de8:	428b      	cmp	r3, r1
 8003dea:	d80c      	bhi.n	8003e06 <__multiply+0x9a>
 8003dec:	2e00      	cmp	r6, #0
 8003dee:	dd03      	ble.n	8003df8 <__multiply+0x8c>
 8003df0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d055      	beq.n	8003ea4 <__multiply+0x138>
 8003df8:	6106      	str	r6, [r0, #16]
 8003dfa:	b005      	add	sp, #20
 8003dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e00:	f843 2b04 	str.w	r2, [r3], #4
 8003e04:	e7d9      	b.n	8003dba <__multiply+0x4e>
 8003e06:	f8b1 a000 	ldrh.w	sl, [r1]
 8003e0a:	f1ba 0f00 	cmp.w	sl, #0
 8003e0e:	d01f      	beq.n	8003e50 <__multiply+0xe4>
 8003e10:	46c4      	mov	ip, r8
 8003e12:	46a1      	mov	r9, r4
 8003e14:	2700      	movs	r7, #0
 8003e16:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003e1a:	f8d9 3000 	ldr.w	r3, [r9]
 8003e1e:	fa1f fb82 	uxth.w	fp, r2
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	fb0a 330b 	mla	r3, sl, fp, r3
 8003e28:	443b      	add	r3, r7
 8003e2a:	f8d9 7000 	ldr.w	r7, [r9]
 8003e2e:	0c12      	lsrs	r2, r2, #16
 8003e30:	0c3f      	lsrs	r7, r7, #16
 8003e32:	fb0a 7202 	mla	r2, sl, r2, r7
 8003e36:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e40:	4565      	cmp	r5, ip
 8003e42:	f849 3b04 	str.w	r3, [r9], #4
 8003e46:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8003e4a:	d8e4      	bhi.n	8003e16 <__multiply+0xaa>
 8003e4c:	9b01      	ldr	r3, [sp, #4]
 8003e4e:	50e7      	str	r7, [r4, r3]
 8003e50:	9b03      	ldr	r3, [sp, #12]
 8003e52:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003e56:	3104      	adds	r1, #4
 8003e58:	f1b9 0f00 	cmp.w	r9, #0
 8003e5c:	d020      	beq.n	8003ea0 <__multiply+0x134>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	4647      	mov	r7, r8
 8003e62:	46a4      	mov	ip, r4
 8003e64:	f04f 0a00 	mov.w	sl, #0
 8003e68:	f8b7 b000 	ldrh.w	fp, [r7]
 8003e6c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8003e70:	fb09 220b 	mla	r2, r9, fp, r2
 8003e74:	4452      	add	r2, sl
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e7c:	f84c 3b04 	str.w	r3, [ip], #4
 8003e80:	f857 3b04 	ldr.w	r3, [r7], #4
 8003e84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e88:	f8bc 3000 	ldrh.w	r3, [ip]
 8003e8c:	fb09 330a 	mla	r3, r9, sl, r3
 8003e90:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8003e94:	42bd      	cmp	r5, r7
 8003e96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e9a:	d8e5      	bhi.n	8003e68 <__multiply+0xfc>
 8003e9c:	9a01      	ldr	r2, [sp, #4]
 8003e9e:	50a3      	str	r3, [r4, r2]
 8003ea0:	3404      	adds	r4, #4
 8003ea2:	e79f      	b.n	8003de4 <__multiply+0x78>
 8003ea4:	3e01      	subs	r6, #1
 8003ea6:	e7a1      	b.n	8003dec <__multiply+0x80>
 8003ea8:	08004ae8 	.word	0x08004ae8
 8003eac:	08004af9 	.word	0x08004af9

08003eb0 <__pow5mult>:
 8003eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003eb4:	4615      	mov	r5, r2
 8003eb6:	f012 0203 	ands.w	r2, r2, #3
 8003eba:	4607      	mov	r7, r0
 8003ebc:	460e      	mov	r6, r1
 8003ebe:	d007      	beq.n	8003ed0 <__pow5mult+0x20>
 8003ec0:	4c25      	ldr	r4, [pc, #148]	@ (8003f58 <__pow5mult+0xa8>)
 8003ec2:	3a01      	subs	r2, #1
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003eca:	f7ff fea7 	bl	8003c1c <__multadd>
 8003ece:	4606      	mov	r6, r0
 8003ed0:	10ad      	asrs	r5, r5, #2
 8003ed2:	d03d      	beq.n	8003f50 <__pow5mult+0xa0>
 8003ed4:	69fc      	ldr	r4, [r7, #28]
 8003ed6:	b97c      	cbnz	r4, 8003ef8 <__pow5mult+0x48>
 8003ed8:	2010      	movs	r0, #16
 8003eda:	f7ff fd87 	bl	80039ec <malloc>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	61f8      	str	r0, [r7, #28]
 8003ee2:	b928      	cbnz	r0, 8003ef0 <__pow5mult+0x40>
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f5c <__pow5mult+0xac>)
 8003ee6:	481e      	ldr	r0, [pc, #120]	@ (8003f60 <__pow5mult+0xb0>)
 8003ee8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003eec:	f000 fa78 	bl	80043e0 <__assert_func>
 8003ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ef4:	6004      	str	r4, [r0, #0]
 8003ef6:	60c4      	str	r4, [r0, #12]
 8003ef8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003efc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003f00:	b94c      	cbnz	r4, 8003f16 <__pow5mult+0x66>
 8003f02:	f240 2171 	movw	r1, #625	@ 0x271
 8003f06:	4638      	mov	r0, r7
 8003f08:	f7ff ff1a 	bl	8003d40 <__i2b>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003f12:	4604      	mov	r4, r0
 8003f14:	6003      	str	r3, [r0, #0]
 8003f16:	f04f 0900 	mov.w	r9, #0
 8003f1a:	07eb      	lsls	r3, r5, #31
 8003f1c:	d50a      	bpl.n	8003f34 <__pow5mult+0x84>
 8003f1e:	4631      	mov	r1, r6
 8003f20:	4622      	mov	r2, r4
 8003f22:	4638      	mov	r0, r7
 8003f24:	f7ff ff22 	bl	8003d6c <__multiply>
 8003f28:	4631      	mov	r1, r6
 8003f2a:	4680      	mov	r8, r0
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	f7ff fe53 	bl	8003bd8 <_Bfree>
 8003f32:	4646      	mov	r6, r8
 8003f34:	106d      	asrs	r5, r5, #1
 8003f36:	d00b      	beq.n	8003f50 <__pow5mult+0xa0>
 8003f38:	6820      	ldr	r0, [r4, #0]
 8003f3a:	b938      	cbnz	r0, 8003f4c <__pow5mult+0x9c>
 8003f3c:	4622      	mov	r2, r4
 8003f3e:	4621      	mov	r1, r4
 8003f40:	4638      	mov	r0, r7
 8003f42:	f7ff ff13 	bl	8003d6c <__multiply>
 8003f46:	6020      	str	r0, [r4, #0]
 8003f48:	f8c0 9000 	str.w	r9, [r0]
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	e7e4      	b.n	8003f1a <__pow5mult+0x6a>
 8003f50:	4630      	mov	r0, r6
 8003f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f56:	bf00      	nop
 8003f58:	08004bac 	.word	0x08004bac
 8003f5c:	08004a79 	.word	0x08004a79
 8003f60:	08004af9 	.word	0x08004af9

08003f64 <__lshift>:
 8003f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f68:	460c      	mov	r4, r1
 8003f6a:	6849      	ldr	r1, [r1, #4]
 8003f6c:	6923      	ldr	r3, [r4, #16]
 8003f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f72:	68a3      	ldr	r3, [r4, #8]
 8003f74:	4607      	mov	r7, r0
 8003f76:	4691      	mov	r9, r2
 8003f78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f7c:	f108 0601 	add.w	r6, r8, #1
 8003f80:	42b3      	cmp	r3, r6
 8003f82:	db0b      	blt.n	8003f9c <__lshift+0x38>
 8003f84:	4638      	mov	r0, r7
 8003f86:	f7ff fde7 	bl	8003b58 <_Balloc>
 8003f8a:	4605      	mov	r5, r0
 8003f8c:	b948      	cbnz	r0, 8003fa2 <__lshift+0x3e>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	4b28      	ldr	r3, [pc, #160]	@ (8004034 <__lshift+0xd0>)
 8003f92:	4829      	ldr	r0, [pc, #164]	@ (8004038 <__lshift+0xd4>)
 8003f94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003f98:	f000 fa22 	bl	80043e0 <__assert_func>
 8003f9c:	3101      	adds	r1, #1
 8003f9e:	005b      	lsls	r3, r3, #1
 8003fa0:	e7ee      	b.n	8003f80 <__lshift+0x1c>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	f100 0114 	add.w	r1, r0, #20
 8003fa8:	f100 0210 	add.w	r2, r0, #16
 8003fac:	4618      	mov	r0, r3
 8003fae:	4553      	cmp	r3, sl
 8003fb0:	db33      	blt.n	800401a <__lshift+0xb6>
 8003fb2:	6920      	ldr	r0, [r4, #16]
 8003fb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003fb8:	f104 0314 	add.w	r3, r4, #20
 8003fbc:	f019 091f 	ands.w	r9, r9, #31
 8003fc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003fc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003fc8:	d02b      	beq.n	8004022 <__lshift+0xbe>
 8003fca:	f1c9 0e20 	rsb	lr, r9, #32
 8003fce:	468a      	mov	sl, r1
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	fa00 f009 	lsl.w	r0, r0, r9
 8003fd8:	4310      	orrs	r0, r2
 8003fda:	f84a 0b04 	str.w	r0, [sl], #4
 8003fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe2:	459c      	cmp	ip, r3
 8003fe4:	fa22 f20e 	lsr.w	r2, r2, lr
 8003fe8:	d8f3      	bhi.n	8003fd2 <__lshift+0x6e>
 8003fea:	ebac 0304 	sub.w	r3, ip, r4
 8003fee:	3b15      	subs	r3, #21
 8003ff0:	f023 0303 	bic.w	r3, r3, #3
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	f104 0015 	add.w	r0, r4, #21
 8003ffa:	4560      	cmp	r0, ip
 8003ffc:	bf88      	it	hi
 8003ffe:	2304      	movhi	r3, #4
 8004000:	50ca      	str	r2, [r1, r3]
 8004002:	b10a      	cbz	r2, 8004008 <__lshift+0xa4>
 8004004:	f108 0602 	add.w	r6, r8, #2
 8004008:	3e01      	subs	r6, #1
 800400a:	4638      	mov	r0, r7
 800400c:	612e      	str	r6, [r5, #16]
 800400e:	4621      	mov	r1, r4
 8004010:	f7ff fde2 	bl	8003bd8 <_Bfree>
 8004014:	4628      	mov	r0, r5
 8004016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800401a:	f842 0f04 	str.w	r0, [r2, #4]!
 800401e:	3301      	adds	r3, #1
 8004020:	e7c5      	b.n	8003fae <__lshift+0x4a>
 8004022:	3904      	subs	r1, #4
 8004024:	f853 2b04 	ldr.w	r2, [r3], #4
 8004028:	f841 2f04 	str.w	r2, [r1, #4]!
 800402c:	459c      	cmp	ip, r3
 800402e:	d8f9      	bhi.n	8004024 <__lshift+0xc0>
 8004030:	e7ea      	b.n	8004008 <__lshift+0xa4>
 8004032:	bf00      	nop
 8004034:	08004ae8 	.word	0x08004ae8
 8004038:	08004af9 	.word	0x08004af9

0800403c <__mcmp>:
 800403c:	690a      	ldr	r2, [r1, #16]
 800403e:	4603      	mov	r3, r0
 8004040:	6900      	ldr	r0, [r0, #16]
 8004042:	1a80      	subs	r0, r0, r2
 8004044:	b530      	push	{r4, r5, lr}
 8004046:	d10e      	bne.n	8004066 <__mcmp+0x2a>
 8004048:	3314      	adds	r3, #20
 800404a:	3114      	adds	r1, #20
 800404c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004050:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004054:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004058:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800405c:	4295      	cmp	r5, r2
 800405e:	d003      	beq.n	8004068 <__mcmp+0x2c>
 8004060:	d205      	bcs.n	800406e <__mcmp+0x32>
 8004062:	f04f 30ff 	mov.w	r0, #4294967295
 8004066:	bd30      	pop	{r4, r5, pc}
 8004068:	42a3      	cmp	r3, r4
 800406a:	d3f3      	bcc.n	8004054 <__mcmp+0x18>
 800406c:	e7fb      	b.n	8004066 <__mcmp+0x2a>
 800406e:	2001      	movs	r0, #1
 8004070:	e7f9      	b.n	8004066 <__mcmp+0x2a>
	...

08004074 <__mdiff>:
 8004074:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004078:	4689      	mov	r9, r1
 800407a:	4606      	mov	r6, r0
 800407c:	4611      	mov	r1, r2
 800407e:	4648      	mov	r0, r9
 8004080:	4614      	mov	r4, r2
 8004082:	f7ff ffdb 	bl	800403c <__mcmp>
 8004086:	1e05      	subs	r5, r0, #0
 8004088:	d112      	bne.n	80040b0 <__mdiff+0x3c>
 800408a:	4629      	mov	r1, r5
 800408c:	4630      	mov	r0, r6
 800408e:	f7ff fd63 	bl	8003b58 <_Balloc>
 8004092:	4602      	mov	r2, r0
 8004094:	b928      	cbnz	r0, 80040a2 <__mdiff+0x2e>
 8004096:	4b3f      	ldr	r3, [pc, #252]	@ (8004194 <__mdiff+0x120>)
 8004098:	f240 2137 	movw	r1, #567	@ 0x237
 800409c:	483e      	ldr	r0, [pc, #248]	@ (8004198 <__mdiff+0x124>)
 800409e:	f000 f99f 	bl	80043e0 <__assert_func>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80040a8:	4610      	mov	r0, r2
 80040aa:	b003      	add	sp, #12
 80040ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040b0:	bfbc      	itt	lt
 80040b2:	464b      	movlt	r3, r9
 80040b4:	46a1      	movlt	r9, r4
 80040b6:	4630      	mov	r0, r6
 80040b8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80040bc:	bfba      	itte	lt
 80040be:	461c      	movlt	r4, r3
 80040c0:	2501      	movlt	r5, #1
 80040c2:	2500      	movge	r5, #0
 80040c4:	f7ff fd48 	bl	8003b58 <_Balloc>
 80040c8:	4602      	mov	r2, r0
 80040ca:	b918      	cbnz	r0, 80040d4 <__mdiff+0x60>
 80040cc:	4b31      	ldr	r3, [pc, #196]	@ (8004194 <__mdiff+0x120>)
 80040ce:	f240 2145 	movw	r1, #581	@ 0x245
 80040d2:	e7e3      	b.n	800409c <__mdiff+0x28>
 80040d4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80040d8:	6926      	ldr	r6, [r4, #16]
 80040da:	60c5      	str	r5, [r0, #12]
 80040dc:	f109 0310 	add.w	r3, r9, #16
 80040e0:	f109 0514 	add.w	r5, r9, #20
 80040e4:	f104 0e14 	add.w	lr, r4, #20
 80040e8:	f100 0b14 	add.w	fp, r0, #20
 80040ec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80040f0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	46d9      	mov	r9, fp
 80040f8:	f04f 0c00 	mov.w	ip, #0
 80040fc:	9b01      	ldr	r3, [sp, #4]
 80040fe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8004102:	f853 af04 	ldr.w	sl, [r3, #4]!
 8004106:	9301      	str	r3, [sp, #4]
 8004108:	fa1f f38a 	uxth.w	r3, sl
 800410c:	4619      	mov	r1, r3
 800410e:	b283      	uxth	r3, r0
 8004110:	1acb      	subs	r3, r1, r3
 8004112:	0c00      	lsrs	r0, r0, #16
 8004114:	4463      	add	r3, ip
 8004116:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800411a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800411e:	b29b      	uxth	r3, r3
 8004120:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8004124:	4576      	cmp	r6, lr
 8004126:	f849 3b04 	str.w	r3, [r9], #4
 800412a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800412e:	d8e5      	bhi.n	80040fc <__mdiff+0x88>
 8004130:	1b33      	subs	r3, r6, r4
 8004132:	3b15      	subs	r3, #21
 8004134:	f023 0303 	bic.w	r3, r3, #3
 8004138:	3415      	adds	r4, #21
 800413a:	3304      	adds	r3, #4
 800413c:	42a6      	cmp	r6, r4
 800413e:	bf38      	it	cc
 8004140:	2304      	movcc	r3, #4
 8004142:	441d      	add	r5, r3
 8004144:	445b      	add	r3, fp
 8004146:	461e      	mov	r6, r3
 8004148:	462c      	mov	r4, r5
 800414a:	4544      	cmp	r4, r8
 800414c:	d30e      	bcc.n	800416c <__mdiff+0xf8>
 800414e:	f108 0103 	add.w	r1, r8, #3
 8004152:	1b49      	subs	r1, r1, r5
 8004154:	f021 0103 	bic.w	r1, r1, #3
 8004158:	3d03      	subs	r5, #3
 800415a:	45a8      	cmp	r8, r5
 800415c:	bf38      	it	cc
 800415e:	2100      	movcc	r1, #0
 8004160:	440b      	add	r3, r1
 8004162:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004166:	b191      	cbz	r1, 800418e <__mdiff+0x11a>
 8004168:	6117      	str	r7, [r2, #16]
 800416a:	e79d      	b.n	80040a8 <__mdiff+0x34>
 800416c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004170:	46e6      	mov	lr, ip
 8004172:	0c08      	lsrs	r0, r1, #16
 8004174:	fa1c fc81 	uxtah	ip, ip, r1
 8004178:	4471      	add	r1, lr
 800417a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800417e:	b289      	uxth	r1, r1
 8004180:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004184:	f846 1b04 	str.w	r1, [r6], #4
 8004188:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800418c:	e7dd      	b.n	800414a <__mdiff+0xd6>
 800418e:	3f01      	subs	r7, #1
 8004190:	e7e7      	b.n	8004162 <__mdiff+0xee>
 8004192:	bf00      	nop
 8004194:	08004ae8 	.word	0x08004ae8
 8004198:	08004af9 	.word	0x08004af9

0800419c <__d2b>:
 800419c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80041a0:	460f      	mov	r7, r1
 80041a2:	2101      	movs	r1, #1
 80041a4:	ec59 8b10 	vmov	r8, r9, d0
 80041a8:	4616      	mov	r6, r2
 80041aa:	f7ff fcd5 	bl	8003b58 <_Balloc>
 80041ae:	4604      	mov	r4, r0
 80041b0:	b930      	cbnz	r0, 80041c0 <__d2b+0x24>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4b23      	ldr	r3, [pc, #140]	@ (8004244 <__d2b+0xa8>)
 80041b6:	4824      	ldr	r0, [pc, #144]	@ (8004248 <__d2b+0xac>)
 80041b8:	f240 310f 	movw	r1, #783	@ 0x30f
 80041bc:	f000 f910 	bl	80043e0 <__assert_func>
 80041c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80041c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80041c8:	b10d      	cbz	r5, 80041ce <__d2b+0x32>
 80041ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	f1b8 0300 	subs.w	r3, r8, #0
 80041d4:	d023      	beq.n	800421e <__d2b+0x82>
 80041d6:	4668      	mov	r0, sp
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	f7ff fd84 	bl	8003ce6 <__lo0bits>
 80041de:	e9dd 1200 	ldrd	r1, r2, [sp]
 80041e2:	b1d0      	cbz	r0, 800421a <__d2b+0x7e>
 80041e4:	f1c0 0320 	rsb	r3, r0, #32
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	430b      	orrs	r3, r1
 80041ee:	40c2      	lsrs	r2, r0
 80041f0:	6163      	str	r3, [r4, #20]
 80041f2:	9201      	str	r2, [sp, #4]
 80041f4:	9b01      	ldr	r3, [sp, #4]
 80041f6:	61a3      	str	r3, [r4, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf0c      	ite	eq
 80041fc:	2201      	moveq	r2, #1
 80041fe:	2202      	movne	r2, #2
 8004200:	6122      	str	r2, [r4, #16]
 8004202:	b1a5      	cbz	r5, 800422e <__d2b+0x92>
 8004204:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8004208:	4405      	add	r5, r0
 800420a:	603d      	str	r5, [r7, #0]
 800420c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8004210:	6030      	str	r0, [r6, #0]
 8004212:	4620      	mov	r0, r4
 8004214:	b003      	add	sp, #12
 8004216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800421a:	6161      	str	r1, [r4, #20]
 800421c:	e7ea      	b.n	80041f4 <__d2b+0x58>
 800421e:	a801      	add	r0, sp, #4
 8004220:	f7ff fd61 	bl	8003ce6 <__lo0bits>
 8004224:	9b01      	ldr	r3, [sp, #4]
 8004226:	6163      	str	r3, [r4, #20]
 8004228:	3020      	adds	r0, #32
 800422a:	2201      	movs	r2, #1
 800422c:	e7e8      	b.n	8004200 <__d2b+0x64>
 800422e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004232:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004236:	6038      	str	r0, [r7, #0]
 8004238:	6918      	ldr	r0, [r3, #16]
 800423a:	f7ff fd35 	bl	8003ca8 <__hi0bits>
 800423e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004242:	e7e5      	b.n	8004210 <__d2b+0x74>
 8004244:	08004ae8 	.word	0x08004ae8
 8004248:	08004af9 	.word	0x08004af9

0800424c <__sflush_r>:
 800424c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004254:	0716      	lsls	r6, r2, #28
 8004256:	4605      	mov	r5, r0
 8004258:	460c      	mov	r4, r1
 800425a:	d454      	bmi.n	8004306 <__sflush_r+0xba>
 800425c:	684b      	ldr	r3, [r1, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	dc02      	bgt.n	8004268 <__sflush_r+0x1c>
 8004262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	dd48      	ble.n	80042fa <__sflush_r+0xae>
 8004268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800426a:	2e00      	cmp	r6, #0
 800426c:	d045      	beq.n	80042fa <__sflush_r+0xae>
 800426e:	2300      	movs	r3, #0
 8004270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004274:	682f      	ldr	r7, [r5, #0]
 8004276:	6a21      	ldr	r1, [r4, #32]
 8004278:	602b      	str	r3, [r5, #0]
 800427a:	d030      	beq.n	80042de <__sflush_r+0x92>
 800427c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800427e:	89a3      	ldrh	r3, [r4, #12]
 8004280:	0759      	lsls	r1, r3, #29
 8004282:	d505      	bpl.n	8004290 <__sflush_r+0x44>
 8004284:	6863      	ldr	r3, [r4, #4]
 8004286:	1ad2      	subs	r2, r2, r3
 8004288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800428a:	b10b      	cbz	r3, 8004290 <__sflush_r+0x44>
 800428c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	2300      	movs	r3, #0
 8004292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004294:	6a21      	ldr	r1, [r4, #32]
 8004296:	4628      	mov	r0, r5
 8004298:	47b0      	blx	r6
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	89a3      	ldrh	r3, [r4, #12]
 800429e:	d106      	bne.n	80042ae <__sflush_r+0x62>
 80042a0:	6829      	ldr	r1, [r5, #0]
 80042a2:	291d      	cmp	r1, #29
 80042a4:	d82b      	bhi.n	80042fe <__sflush_r+0xb2>
 80042a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004350 <__sflush_r+0x104>)
 80042a8:	40ca      	lsrs	r2, r1
 80042aa:	07d6      	lsls	r6, r2, #31
 80042ac:	d527      	bpl.n	80042fe <__sflush_r+0xb2>
 80042ae:	2200      	movs	r2, #0
 80042b0:	6062      	str	r2, [r4, #4]
 80042b2:	04d9      	lsls	r1, r3, #19
 80042b4:	6922      	ldr	r2, [r4, #16]
 80042b6:	6022      	str	r2, [r4, #0]
 80042b8:	d504      	bpl.n	80042c4 <__sflush_r+0x78>
 80042ba:	1c42      	adds	r2, r0, #1
 80042bc:	d101      	bne.n	80042c2 <__sflush_r+0x76>
 80042be:	682b      	ldr	r3, [r5, #0]
 80042c0:	b903      	cbnz	r3, 80042c4 <__sflush_r+0x78>
 80042c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80042c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042c6:	602f      	str	r7, [r5, #0]
 80042c8:	b1b9      	cbz	r1, 80042fa <__sflush_r+0xae>
 80042ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042ce:	4299      	cmp	r1, r3
 80042d0:	d002      	beq.n	80042d8 <__sflush_r+0x8c>
 80042d2:	4628      	mov	r0, r5
 80042d4:	f7ff fb40 	bl	8003958 <_free_r>
 80042d8:	2300      	movs	r3, #0
 80042da:	6363      	str	r3, [r4, #52]	@ 0x34
 80042dc:	e00d      	b.n	80042fa <__sflush_r+0xae>
 80042de:	2301      	movs	r3, #1
 80042e0:	4628      	mov	r0, r5
 80042e2:	47b0      	blx	r6
 80042e4:	4602      	mov	r2, r0
 80042e6:	1c50      	adds	r0, r2, #1
 80042e8:	d1c9      	bne.n	800427e <__sflush_r+0x32>
 80042ea:	682b      	ldr	r3, [r5, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0c6      	beq.n	800427e <__sflush_r+0x32>
 80042f0:	2b1d      	cmp	r3, #29
 80042f2:	d001      	beq.n	80042f8 <__sflush_r+0xac>
 80042f4:	2b16      	cmp	r3, #22
 80042f6:	d11e      	bne.n	8004336 <__sflush_r+0xea>
 80042f8:	602f      	str	r7, [r5, #0]
 80042fa:	2000      	movs	r0, #0
 80042fc:	e022      	b.n	8004344 <__sflush_r+0xf8>
 80042fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004302:	b21b      	sxth	r3, r3
 8004304:	e01b      	b.n	800433e <__sflush_r+0xf2>
 8004306:	690f      	ldr	r7, [r1, #16]
 8004308:	2f00      	cmp	r7, #0
 800430a:	d0f6      	beq.n	80042fa <__sflush_r+0xae>
 800430c:	0793      	lsls	r3, r2, #30
 800430e:	680e      	ldr	r6, [r1, #0]
 8004310:	bf08      	it	eq
 8004312:	694b      	ldreq	r3, [r1, #20]
 8004314:	600f      	str	r7, [r1, #0]
 8004316:	bf18      	it	ne
 8004318:	2300      	movne	r3, #0
 800431a:	eba6 0807 	sub.w	r8, r6, r7
 800431e:	608b      	str	r3, [r1, #8]
 8004320:	f1b8 0f00 	cmp.w	r8, #0
 8004324:	dde9      	ble.n	80042fa <__sflush_r+0xae>
 8004326:	6a21      	ldr	r1, [r4, #32]
 8004328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800432a:	4643      	mov	r3, r8
 800432c:	463a      	mov	r2, r7
 800432e:	4628      	mov	r0, r5
 8004330:	47b0      	blx	r6
 8004332:	2800      	cmp	r0, #0
 8004334:	dc08      	bgt.n	8004348 <__sflush_r+0xfc>
 8004336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800433e:	81a3      	strh	r3, [r4, #12]
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004348:	4407      	add	r7, r0
 800434a:	eba8 0800 	sub.w	r8, r8, r0
 800434e:	e7e7      	b.n	8004320 <__sflush_r+0xd4>
 8004350:	20400001 	.word	0x20400001

08004354 <_fflush_r>:
 8004354:	b538      	push	{r3, r4, r5, lr}
 8004356:	690b      	ldr	r3, [r1, #16]
 8004358:	4605      	mov	r5, r0
 800435a:	460c      	mov	r4, r1
 800435c:	b913      	cbnz	r3, 8004364 <_fflush_r+0x10>
 800435e:	2500      	movs	r5, #0
 8004360:	4628      	mov	r0, r5
 8004362:	bd38      	pop	{r3, r4, r5, pc}
 8004364:	b118      	cbz	r0, 800436e <_fflush_r+0x1a>
 8004366:	6a03      	ldr	r3, [r0, #32]
 8004368:	b90b      	cbnz	r3, 800436e <_fflush_r+0x1a>
 800436a:	f7fe fba1 	bl	8002ab0 <__sinit>
 800436e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f3      	beq.n	800435e <_fflush_r+0xa>
 8004376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004378:	07d0      	lsls	r0, r2, #31
 800437a:	d404      	bmi.n	8004386 <_fflush_r+0x32>
 800437c:	0599      	lsls	r1, r3, #22
 800437e:	d402      	bmi.n	8004386 <_fflush_r+0x32>
 8004380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004382:	f7fe fc8c 	bl	8002c9e <__retarget_lock_acquire_recursive>
 8004386:	4628      	mov	r0, r5
 8004388:	4621      	mov	r1, r4
 800438a:	f7ff ff5f 	bl	800424c <__sflush_r>
 800438e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004390:	07da      	lsls	r2, r3, #31
 8004392:	4605      	mov	r5, r0
 8004394:	d4e4      	bmi.n	8004360 <_fflush_r+0xc>
 8004396:	89a3      	ldrh	r3, [r4, #12]
 8004398:	059b      	lsls	r3, r3, #22
 800439a:	d4e1      	bmi.n	8004360 <_fflush_r+0xc>
 800439c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800439e:	f7fe fc7f 	bl	8002ca0 <__retarget_lock_release_recursive>
 80043a2:	e7dd      	b.n	8004360 <_fflush_r+0xc>

080043a4 <_sbrk_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4d06      	ldr	r5, [pc, #24]	@ (80043c0 <_sbrk_r+0x1c>)
 80043a8:	2300      	movs	r3, #0
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	602b      	str	r3, [r5, #0]
 80043b0:	f7fd fdb0 	bl	8001f14 <_sbrk>
 80043b4:	1c43      	adds	r3, r0, #1
 80043b6:	d102      	bne.n	80043be <_sbrk_r+0x1a>
 80043b8:	682b      	ldr	r3, [r5, #0]
 80043ba:	b103      	cbz	r3, 80043be <_sbrk_r+0x1a>
 80043bc:	6023      	str	r3, [r4, #0]
 80043be:	bd38      	pop	{r3, r4, r5, pc}
 80043c0:	200003a4 	.word	0x200003a4

080043c4 <memcpy>:
 80043c4:	440a      	add	r2, r1
 80043c6:	4291      	cmp	r1, r2
 80043c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043cc:	d100      	bne.n	80043d0 <memcpy+0xc>
 80043ce:	4770      	bx	lr
 80043d0:	b510      	push	{r4, lr}
 80043d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80043d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80043da:	4291      	cmp	r1, r2
 80043dc:	d1f9      	bne.n	80043d2 <memcpy+0xe>
 80043de:	bd10      	pop	{r4, pc}

080043e0 <__assert_func>:
 80043e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80043e2:	4614      	mov	r4, r2
 80043e4:	461a      	mov	r2, r3
 80043e6:	4b09      	ldr	r3, [pc, #36]	@ (800440c <__assert_func+0x2c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4605      	mov	r5, r0
 80043ec:	68d8      	ldr	r0, [r3, #12]
 80043ee:	b14c      	cbz	r4, 8004404 <__assert_func+0x24>
 80043f0:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <__assert_func+0x30>)
 80043f2:	9100      	str	r1, [sp, #0]
 80043f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80043f8:	4906      	ldr	r1, [pc, #24]	@ (8004414 <__assert_func+0x34>)
 80043fa:	462b      	mov	r3, r5
 80043fc:	f000 f842 	bl	8004484 <fiprintf>
 8004400:	f000 f852 	bl	80044a8 <abort>
 8004404:	4b04      	ldr	r3, [pc, #16]	@ (8004418 <__assert_func+0x38>)
 8004406:	461c      	mov	r4, r3
 8004408:	e7f3      	b.n	80043f2 <__assert_func+0x12>
 800440a:	bf00      	nop
 800440c:	2000000c 	.word	0x2000000c
 8004410:	08004b5c 	.word	0x08004b5c
 8004414:	08004b69 	.word	0x08004b69
 8004418:	08004b97 	.word	0x08004b97

0800441c <_calloc_r>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	fba1 5402 	umull	r5, r4, r1, r2
 8004422:	b934      	cbnz	r4, 8004432 <_calloc_r+0x16>
 8004424:	4629      	mov	r1, r5
 8004426:	f7ff fb0b 	bl	8003a40 <_malloc_r>
 800442a:	4606      	mov	r6, r0
 800442c:	b928      	cbnz	r0, 800443a <_calloc_r+0x1e>
 800442e:	4630      	mov	r0, r6
 8004430:	bd70      	pop	{r4, r5, r6, pc}
 8004432:	220c      	movs	r2, #12
 8004434:	6002      	str	r2, [r0, #0]
 8004436:	2600      	movs	r6, #0
 8004438:	e7f9      	b.n	800442e <_calloc_r+0x12>
 800443a:	462a      	mov	r2, r5
 800443c:	4621      	mov	r1, r4
 800443e:	f7fe fbb0 	bl	8002ba2 <memset>
 8004442:	e7f4      	b.n	800442e <_calloc_r+0x12>

08004444 <__ascii_mbtowc>:
 8004444:	b082      	sub	sp, #8
 8004446:	b901      	cbnz	r1, 800444a <__ascii_mbtowc+0x6>
 8004448:	a901      	add	r1, sp, #4
 800444a:	b142      	cbz	r2, 800445e <__ascii_mbtowc+0x1a>
 800444c:	b14b      	cbz	r3, 8004462 <__ascii_mbtowc+0x1e>
 800444e:	7813      	ldrb	r3, [r2, #0]
 8004450:	600b      	str	r3, [r1, #0]
 8004452:	7812      	ldrb	r2, [r2, #0]
 8004454:	1e10      	subs	r0, r2, #0
 8004456:	bf18      	it	ne
 8004458:	2001      	movne	r0, #1
 800445a:	b002      	add	sp, #8
 800445c:	4770      	bx	lr
 800445e:	4610      	mov	r0, r2
 8004460:	e7fb      	b.n	800445a <__ascii_mbtowc+0x16>
 8004462:	f06f 0001 	mvn.w	r0, #1
 8004466:	e7f8      	b.n	800445a <__ascii_mbtowc+0x16>

08004468 <__ascii_wctomb>:
 8004468:	4603      	mov	r3, r0
 800446a:	4608      	mov	r0, r1
 800446c:	b141      	cbz	r1, 8004480 <__ascii_wctomb+0x18>
 800446e:	2aff      	cmp	r2, #255	@ 0xff
 8004470:	d904      	bls.n	800447c <__ascii_wctomb+0x14>
 8004472:	228a      	movs	r2, #138	@ 0x8a
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	f04f 30ff 	mov.w	r0, #4294967295
 800447a:	4770      	bx	lr
 800447c:	700a      	strb	r2, [r1, #0]
 800447e:	2001      	movs	r0, #1
 8004480:	4770      	bx	lr
	...

08004484 <fiprintf>:
 8004484:	b40e      	push	{r1, r2, r3}
 8004486:	b503      	push	{r0, r1, lr}
 8004488:	4601      	mov	r1, r0
 800448a:	ab03      	add	r3, sp, #12
 800448c:	4805      	ldr	r0, [pc, #20]	@ (80044a4 <fiprintf+0x20>)
 800448e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004492:	6800      	ldr	r0, [r0, #0]
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	f000 f837 	bl	8004508 <_vfiprintf_r>
 800449a:	b002      	add	sp, #8
 800449c:	f85d eb04 	ldr.w	lr, [sp], #4
 80044a0:	b003      	add	sp, #12
 80044a2:	4770      	bx	lr
 80044a4:	2000000c 	.word	0x2000000c

080044a8 <abort>:
 80044a8:	b508      	push	{r3, lr}
 80044aa:	2006      	movs	r0, #6
 80044ac:	f000 fa00 	bl	80048b0 <raise>
 80044b0:	2001      	movs	r0, #1
 80044b2:	f7fd fcb7 	bl	8001e24 <_exit>

080044b6 <__sfputc_r>:
 80044b6:	6893      	ldr	r3, [r2, #8]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	b410      	push	{r4}
 80044be:	6093      	str	r3, [r2, #8]
 80044c0:	da08      	bge.n	80044d4 <__sfputc_r+0x1e>
 80044c2:	6994      	ldr	r4, [r2, #24]
 80044c4:	42a3      	cmp	r3, r4
 80044c6:	db01      	blt.n	80044cc <__sfputc_r+0x16>
 80044c8:	290a      	cmp	r1, #10
 80044ca:	d103      	bne.n	80044d4 <__sfputc_r+0x1e>
 80044cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044d0:	f000 b932 	b.w	8004738 <__swbuf_r>
 80044d4:	6813      	ldr	r3, [r2, #0]
 80044d6:	1c58      	adds	r0, r3, #1
 80044d8:	6010      	str	r0, [r2, #0]
 80044da:	7019      	strb	r1, [r3, #0]
 80044dc:	4608      	mov	r0, r1
 80044de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <__sfputs_r>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	4606      	mov	r6, r0
 80044e8:	460f      	mov	r7, r1
 80044ea:	4614      	mov	r4, r2
 80044ec:	18d5      	adds	r5, r2, r3
 80044ee:	42ac      	cmp	r4, r5
 80044f0:	d101      	bne.n	80044f6 <__sfputs_r+0x12>
 80044f2:	2000      	movs	r0, #0
 80044f4:	e007      	b.n	8004506 <__sfputs_r+0x22>
 80044f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fa:	463a      	mov	r2, r7
 80044fc:	4630      	mov	r0, r6
 80044fe:	f7ff ffda 	bl	80044b6 <__sfputc_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	d1f3      	bne.n	80044ee <__sfputs_r+0xa>
 8004506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004508 <_vfiprintf_r>:
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	460d      	mov	r5, r1
 800450e:	b09d      	sub	sp, #116	@ 0x74
 8004510:	4614      	mov	r4, r2
 8004512:	4698      	mov	r8, r3
 8004514:	4606      	mov	r6, r0
 8004516:	b118      	cbz	r0, 8004520 <_vfiprintf_r+0x18>
 8004518:	6a03      	ldr	r3, [r0, #32]
 800451a:	b90b      	cbnz	r3, 8004520 <_vfiprintf_r+0x18>
 800451c:	f7fe fac8 	bl	8002ab0 <__sinit>
 8004520:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004522:	07d9      	lsls	r1, r3, #31
 8004524:	d405      	bmi.n	8004532 <_vfiprintf_r+0x2a>
 8004526:	89ab      	ldrh	r3, [r5, #12]
 8004528:	059a      	lsls	r2, r3, #22
 800452a:	d402      	bmi.n	8004532 <_vfiprintf_r+0x2a>
 800452c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800452e:	f7fe fbb6 	bl	8002c9e <__retarget_lock_acquire_recursive>
 8004532:	89ab      	ldrh	r3, [r5, #12]
 8004534:	071b      	lsls	r3, r3, #28
 8004536:	d501      	bpl.n	800453c <_vfiprintf_r+0x34>
 8004538:	692b      	ldr	r3, [r5, #16]
 800453a:	b99b      	cbnz	r3, 8004564 <_vfiprintf_r+0x5c>
 800453c:	4629      	mov	r1, r5
 800453e:	4630      	mov	r0, r6
 8004540:	f000 f938 	bl	80047b4 <__swsetup_r>
 8004544:	b170      	cbz	r0, 8004564 <_vfiprintf_r+0x5c>
 8004546:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004548:	07dc      	lsls	r4, r3, #31
 800454a:	d504      	bpl.n	8004556 <_vfiprintf_r+0x4e>
 800454c:	f04f 30ff 	mov.w	r0, #4294967295
 8004550:	b01d      	add	sp, #116	@ 0x74
 8004552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004556:	89ab      	ldrh	r3, [r5, #12]
 8004558:	0598      	lsls	r0, r3, #22
 800455a:	d4f7      	bmi.n	800454c <_vfiprintf_r+0x44>
 800455c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800455e:	f7fe fb9f 	bl	8002ca0 <__retarget_lock_release_recursive>
 8004562:	e7f3      	b.n	800454c <_vfiprintf_r+0x44>
 8004564:	2300      	movs	r3, #0
 8004566:	9309      	str	r3, [sp, #36]	@ 0x24
 8004568:	2320      	movs	r3, #32
 800456a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800456e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004572:	2330      	movs	r3, #48	@ 0x30
 8004574:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004724 <_vfiprintf_r+0x21c>
 8004578:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800457c:	f04f 0901 	mov.w	r9, #1
 8004580:	4623      	mov	r3, r4
 8004582:	469a      	mov	sl, r3
 8004584:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004588:	b10a      	cbz	r2, 800458e <_vfiprintf_r+0x86>
 800458a:	2a25      	cmp	r2, #37	@ 0x25
 800458c:	d1f9      	bne.n	8004582 <_vfiprintf_r+0x7a>
 800458e:	ebba 0b04 	subs.w	fp, sl, r4
 8004592:	d00b      	beq.n	80045ac <_vfiprintf_r+0xa4>
 8004594:	465b      	mov	r3, fp
 8004596:	4622      	mov	r2, r4
 8004598:	4629      	mov	r1, r5
 800459a:	4630      	mov	r0, r6
 800459c:	f7ff ffa2 	bl	80044e4 <__sfputs_r>
 80045a0:	3001      	adds	r0, #1
 80045a2:	f000 80a7 	beq.w	80046f4 <_vfiprintf_r+0x1ec>
 80045a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045a8:	445a      	add	r2, fp
 80045aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80045ac:	f89a 3000 	ldrb.w	r3, [sl]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 809f 	beq.w	80046f4 <_vfiprintf_r+0x1ec>
 80045b6:	2300      	movs	r3, #0
 80045b8:	f04f 32ff 	mov.w	r2, #4294967295
 80045bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045c0:	f10a 0a01 	add.w	sl, sl, #1
 80045c4:	9304      	str	r3, [sp, #16]
 80045c6:	9307      	str	r3, [sp, #28]
 80045c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80045ce:	4654      	mov	r4, sl
 80045d0:	2205      	movs	r2, #5
 80045d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045d6:	4853      	ldr	r0, [pc, #332]	@ (8004724 <_vfiprintf_r+0x21c>)
 80045d8:	f7fb fdfa 	bl	80001d0 <memchr>
 80045dc:	9a04      	ldr	r2, [sp, #16]
 80045de:	b9d8      	cbnz	r0, 8004618 <_vfiprintf_r+0x110>
 80045e0:	06d1      	lsls	r1, r2, #27
 80045e2:	bf44      	itt	mi
 80045e4:	2320      	movmi	r3, #32
 80045e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045ea:	0713      	lsls	r3, r2, #28
 80045ec:	bf44      	itt	mi
 80045ee:	232b      	movmi	r3, #43	@ 0x2b
 80045f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045f4:	f89a 3000 	ldrb.w	r3, [sl]
 80045f8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045fa:	d015      	beq.n	8004628 <_vfiprintf_r+0x120>
 80045fc:	9a07      	ldr	r2, [sp, #28]
 80045fe:	4654      	mov	r4, sl
 8004600:	2000      	movs	r0, #0
 8004602:	f04f 0c0a 	mov.w	ip, #10
 8004606:	4621      	mov	r1, r4
 8004608:	f811 3b01 	ldrb.w	r3, [r1], #1
 800460c:	3b30      	subs	r3, #48	@ 0x30
 800460e:	2b09      	cmp	r3, #9
 8004610:	d94b      	bls.n	80046aa <_vfiprintf_r+0x1a2>
 8004612:	b1b0      	cbz	r0, 8004642 <_vfiprintf_r+0x13a>
 8004614:	9207      	str	r2, [sp, #28]
 8004616:	e014      	b.n	8004642 <_vfiprintf_r+0x13a>
 8004618:	eba0 0308 	sub.w	r3, r0, r8
 800461c:	fa09 f303 	lsl.w	r3, r9, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	9304      	str	r3, [sp, #16]
 8004624:	46a2      	mov	sl, r4
 8004626:	e7d2      	b.n	80045ce <_vfiprintf_r+0xc6>
 8004628:	9b03      	ldr	r3, [sp, #12]
 800462a:	1d19      	adds	r1, r3, #4
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	9103      	str	r1, [sp, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	bfbb      	ittet	lt
 8004634:	425b      	neglt	r3, r3
 8004636:	f042 0202 	orrlt.w	r2, r2, #2
 800463a:	9307      	strge	r3, [sp, #28]
 800463c:	9307      	strlt	r3, [sp, #28]
 800463e:	bfb8      	it	lt
 8004640:	9204      	strlt	r2, [sp, #16]
 8004642:	7823      	ldrb	r3, [r4, #0]
 8004644:	2b2e      	cmp	r3, #46	@ 0x2e
 8004646:	d10a      	bne.n	800465e <_vfiprintf_r+0x156>
 8004648:	7863      	ldrb	r3, [r4, #1]
 800464a:	2b2a      	cmp	r3, #42	@ 0x2a
 800464c:	d132      	bne.n	80046b4 <_vfiprintf_r+0x1ac>
 800464e:	9b03      	ldr	r3, [sp, #12]
 8004650:	1d1a      	adds	r2, r3, #4
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	9203      	str	r2, [sp, #12]
 8004656:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800465a:	3402      	adds	r4, #2
 800465c:	9305      	str	r3, [sp, #20]
 800465e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004734 <_vfiprintf_r+0x22c>
 8004662:	7821      	ldrb	r1, [r4, #0]
 8004664:	2203      	movs	r2, #3
 8004666:	4650      	mov	r0, sl
 8004668:	f7fb fdb2 	bl	80001d0 <memchr>
 800466c:	b138      	cbz	r0, 800467e <_vfiprintf_r+0x176>
 800466e:	9b04      	ldr	r3, [sp, #16]
 8004670:	eba0 000a 	sub.w	r0, r0, sl
 8004674:	2240      	movs	r2, #64	@ 0x40
 8004676:	4082      	lsls	r2, r0
 8004678:	4313      	orrs	r3, r2
 800467a:	3401      	adds	r4, #1
 800467c:	9304      	str	r3, [sp, #16]
 800467e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004682:	4829      	ldr	r0, [pc, #164]	@ (8004728 <_vfiprintf_r+0x220>)
 8004684:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004688:	2206      	movs	r2, #6
 800468a:	f7fb fda1 	bl	80001d0 <memchr>
 800468e:	2800      	cmp	r0, #0
 8004690:	d03f      	beq.n	8004712 <_vfiprintf_r+0x20a>
 8004692:	4b26      	ldr	r3, [pc, #152]	@ (800472c <_vfiprintf_r+0x224>)
 8004694:	bb1b      	cbnz	r3, 80046de <_vfiprintf_r+0x1d6>
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	3307      	adds	r3, #7
 800469a:	f023 0307 	bic.w	r3, r3, #7
 800469e:	3308      	adds	r3, #8
 80046a0:	9303      	str	r3, [sp, #12]
 80046a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046a4:	443b      	add	r3, r7
 80046a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80046a8:	e76a      	b.n	8004580 <_vfiprintf_r+0x78>
 80046aa:	fb0c 3202 	mla	r2, ip, r2, r3
 80046ae:	460c      	mov	r4, r1
 80046b0:	2001      	movs	r0, #1
 80046b2:	e7a8      	b.n	8004606 <_vfiprintf_r+0xfe>
 80046b4:	2300      	movs	r3, #0
 80046b6:	3401      	adds	r4, #1
 80046b8:	9305      	str	r3, [sp, #20]
 80046ba:	4619      	mov	r1, r3
 80046bc:	f04f 0c0a 	mov.w	ip, #10
 80046c0:	4620      	mov	r0, r4
 80046c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046c6:	3a30      	subs	r2, #48	@ 0x30
 80046c8:	2a09      	cmp	r2, #9
 80046ca:	d903      	bls.n	80046d4 <_vfiprintf_r+0x1cc>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d0c6      	beq.n	800465e <_vfiprintf_r+0x156>
 80046d0:	9105      	str	r1, [sp, #20]
 80046d2:	e7c4      	b.n	800465e <_vfiprintf_r+0x156>
 80046d4:	fb0c 2101 	mla	r1, ip, r1, r2
 80046d8:	4604      	mov	r4, r0
 80046da:	2301      	movs	r3, #1
 80046dc:	e7f0      	b.n	80046c0 <_vfiprintf_r+0x1b8>
 80046de:	ab03      	add	r3, sp, #12
 80046e0:	9300      	str	r3, [sp, #0]
 80046e2:	462a      	mov	r2, r5
 80046e4:	4b12      	ldr	r3, [pc, #72]	@ (8004730 <_vfiprintf_r+0x228>)
 80046e6:	a904      	add	r1, sp, #16
 80046e8:	4630      	mov	r0, r6
 80046ea:	f7fd fd9f 	bl	800222c <_printf_float>
 80046ee:	4607      	mov	r7, r0
 80046f0:	1c78      	adds	r0, r7, #1
 80046f2:	d1d6      	bne.n	80046a2 <_vfiprintf_r+0x19a>
 80046f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046f6:	07d9      	lsls	r1, r3, #31
 80046f8:	d405      	bmi.n	8004706 <_vfiprintf_r+0x1fe>
 80046fa:	89ab      	ldrh	r3, [r5, #12]
 80046fc:	059a      	lsls	r2, r3, #22
 80046fe:	d402      	bmi.n	8004706 <_vfiprintf_r+0x1fe>
 8004700:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004702:	f7fe facd 	bl	8002ca0 <__retarget_lock_release_recursive>
 8004706:	89ab      	ldrh	r3, [r5, #12]
 8004708:	065b      	lsls	r3, r3, #25
 800470a:	f53f af1f 	bmi.w	800454c <_vfiprintf_r+0x44>
 800470e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004710:	e71e      	b.n	8004550 <_vfiprintf_r+0x48>
 8004712:	ab03      	add	r3, sp, #12
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	462a      	mov	r2, r5
 8004718:	4b05      	ldr	r3, [pc, #20]	@ (8004730 <_vfiprintf_r+0x228>)
 800471a:	a904      	add	r1, sp, #16
 800471c:	4630      	mov	r0, r6
 800471e:	f7fe f81d 	bl	800275c <_printf_i>
 8004722:	e7e4      	b.n	80046ee <_vfiprintf_r+0x1e6>
 8004724:	08004b98 	.word	0x08004b98
 8004728:	08004ba2 	.word	0x08004ba2
 800472c:	0800222d 	.word	0x0800222d
 8004730:	080044e5 	.word	0x080044e5
 8004734:	08004b9e 	.word	0x08004b9e

08004738 <__swbuf_r>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	460e      	mov	r6, r1
 800473c:	4614      	mov	r4, r2
 800473e:	4605      	mov	r5, r0
 8004740:	b118      	cbz	r0, 800474a <__swbuf_r+0x12>
 8004742:	6a03      	ldr	r3, [r0, #32]
 8004744:	b90b      	cbnz	r3, 800474a <__swbuf_r+0x12>
 8004746:	f7fe f9b3 	bl	8002ab0 <__sinit>
 800474a:	69a3      	ldr	r3, [r4, #24]
 800474c:	60a3      	str	r3, [r4, #8]
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	071a      	lsls	r2, r3, #28
 8004752:	d501      	bpl.n	8004758 <__swbuf_r+0x20>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	b943      	cbnz	r3, 800476a <__swbuf_r+0x32>
 8004758:	4621      	mov	r1, r4
 800475a:	4628      	mov	r0, r5
 800475c:	f000 f82a 	bl	80047b4 <__swsetup_r>
 8004760:	b118      	cbz	r0, 800476a <__swbuf_r+0x32>
 8004762:	f04f 37ff 	mov.w	r7, #4294967295
 8004766:	4638      	mov	r0, r7
 8004768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800476a:	6823      	ldr	r3, [r4, #0]
 800476c:	6922      	ldr	r2, [r4, #16]
 800476e:	1a98      	subs	r0, r3, r2
 8004770:	6963      	ldr	r3, [r4, #20]
 8004772:	b2f6      	uxtb	r6, r6
 8004774:	4283      	cmp	r3, r0
 8004776:	4637      	mov	r7, r6
 8004778:	dc05      	bgt.n	8004786 <__swbuf_r+0x4e>
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f7ff fde9 	bl	8004354 <_fflush_r>
 8004782:	2800      	cmp	r0, #0
 8004784:	d1ed      	bne.n	8004762 <__swbuf_r+0x2a>
 8004786:	68a3      	ldr	r3, [r4, #8]
 8004788:	3b01      	subs	r3, #1
 800478a:	60a3      	str	r3, [r4, #8]
 800478c:	6823      	ldr	r3, [r4, #0]
 800478e:	1c5a      	adds	r2, r3, #1
 8004790:	6022      	str	r2, [r4, #0]
 8004792:	701e      	strb	r6, [r3, #0]
 8004794:	6962      	ldr	r2, [r4, #20]
 8004796:	1c43      	adds	r3, r0, #1
 8004798:	429a      	cmp	r2, r3
 800479a:	d004      	beq.n	80047a6 <__swbuf_r+0x6e>
 800479c:	89a3      	ldrh	r3, [r4, #12]
 800479e:	07db      	lsls	r3, r3, #31
 80047a0:	d5e1      	bpl.n	8004766 <__swbuf_r+0x2e>
 80047a2:	2e0a      	cmp	r6, #10
 80047a4:	d1df      	bne.n	8004766 <__swbuf_r+0x2e>
 80047a6:	4621      	mov	r1, r4
 80047a8:	4628      	mov	r0, r5
 80047aa:	f7ff fdd3 	bl	8004354 <_fflush_r>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d0d9      	beq.n	8004766 <__swbuf_r+0x2e>
 80047b2:	e7d6      	b.n	8004762 <__swbuf_r+0x2a>

080047b4 <__swsetup_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4b29      	ldr	r3, [pc, #164]	@ (800485c <__swsetup_r+0xa8>)
 80047b8:	4605      	mov	r5, r0
 80047ba:	6818      	ldr	r0, [r3, #0]
 80047bc:	460c      	mov	r4, r1
 80047be:	b118      	cbz	r0, 80047c8 <__swsetup_r+0x14>
 80047c0:	6a03      	ldr	r3, [r0, #32]
 80047c2:	b90b      	cbnz	r3, 80047c8 <__swsetup_r+0x14>
 80047c4:	f7fe f974 	bl	8002ab0 <__sinit>
 80047c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047cc:	0719      	lsls	r1, r3, #28
 80047ce:	d422      	bmi.n	8004816 <__swsetup_r+0x62>
 80047d0:	06da      	lsls	r2, r3, #27
 80047d2:	d407      	bmi.n	80047e4 <__swsetup_r+0x30>
 80047d4:	2209      	movs	r2, #9
 80047d6:	602a      	str	r2, [r5, #0]
 80047d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047dc:	81a3      	strh	r3, [r4, #12]
 80047de:	f04f 30ff 	mov.w	r0, #4294967295
 80047e2:	e033      	b.n	800484c <__swsetup_r+0x98>
 80047e4:	0758      	lsls	r0, r3, #29
 80047e6:	d512      	bpl.n	800480e <__swsetup_r+0x5a>
 80047e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047ea:	b141      	cbz	r1, 80047fe <__swsetup_r+0x4a>
 80047ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047f0:	4299      	cmp	r1, r3
 80047f2:	d002      	beq.n	80047fa <__swsetup_r+0x46>
 80047f4:	4628      	mov	r0, r5
 80047f6:	f7ff f8af 	bl	8003958 <_free_r>
 80047fa:	2300      	movs	r3, #0
 80047fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80047fe:	89a3      	ldrh	r3, [r4, #12]
 8004800:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004804:	81a3      	strh	r3, [r4, #12]
 8004806:	2300      	movs	r3, #0
 8004808:	6063      	str	r3, [r4, #4]
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f043 0308 	orr.w	r3, r3, #8
 8004814:	81a3      	strh	r3, [r4, #12]
 8004816:	6923      	ldr	r3, [r4, #16]
 8004818:	b94b      	cbnz	r3, 800482e <__swsetup_r+0x7a>
 800481a:	89a3      	ldrh	r3, [r4, #12]
 800481c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004824:	d003      	beq.n	800482e <__swsetup_r+0x7a>
 8004826:	4621      	mov	r1, r4
 8004828:	4628      	mov	r0, r5
 800482a:	f000 f883 	bl	8004934 <__smakebuf_r>
 800482e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004832:	f013 0201 	ands.w	r2, r3, #1
 8004836:	d00a      	beq.n	800484e <__swsetup_r+0x9a>
 8004838:	2200      	movs	r2, #0
 800483a:	60a2      	str	r2, [r4, #8]
 800483c:	6962      	ldr	r2, [r4, #20]
 800483e:	4252      	negs	r2, r2
 8004840:	61a2      	str	r2, [r4, #24]
 8004842:	6922      	ldr	r2, [r4, #16]
 8004844:	b942      	cbnz	r2, 8004858 <__swsetup_r+0xa4>
 8004846:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800484a:	d1c5      	bne.n	80047d8 <__swsetup_r+0x24>
 800484c:	bd38      	pop	{r3, r4, r5, pc}
 800484e:	0799      	lsls	r1, r3, #30
 8004850:	bf58      	it	pl
 8004852:	6962      	ldrpl	r2, [r4, #20]
 8004854:	60a2      	str	r2, [r4, #8]
 8004856:	e7f4      	b.n	8004842 <__swsetup_r+0x8e>
 8004858:	2000      	movs	r0, #0
 800485a:	e7f7      	b.n	800484c <__swsetup_r+0x98>
 800485c:	2000000c 	.word	0x2000000c

08004860 <_raise_r>:
 8004860:	291f      	cmp	r1, #31
 8004862:	b538      	push	{r3, r4, r5, lr}
 8004864:	4605      	mov	r5, r0
 8004866:	460c      	mov	r4, r1
 8004868:	d904      	bls.n	8004874 <_raise_r+0x14>
 800486a:	2316      	movs	r3, #22
 800486c:	6003      	str	r3, [r0, #0]
 800486e:	f04f 30ff 	mov.w	r0, #4294967295
 8004872:	bd38      	pop	{r3, r4, r5, pc}
 8004874:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004876:	b112      	cbz	r2, 800487e <_raise_r+0x1e>
 8004878:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800487c:	b94b      	cbnz	r3, 8004892 <_raise_r+0x32>
 800487e:	4628      	mov	r0, r5
 8004880:	f000 f830 	bl	80048e4 <_getpid_r>
 8004884:	4622      	mov	r2, r4
 8004886:	4601      	mov	r1, r0
 8004888:	4628      	mov	r0, r5
 800488a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800488e:	f000 b817 	b.w	80048c0 <_kill_r>
 8004892:	2b01      	cmp	r3, #1
 8004894:	d00a      	beq.n	80048ac <_raise_r+0x4c>
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	d103      	bne.n	80048a2 <_raise_r+0x42>
 800489a:	2316      	movs	r3, #22
 800489c:	6003      	str	r3, [r0, #0]
 800489e:	2001      	movs	r0, #1
 80048a0:	e7e7      	b.n	8004872 <_raise_r+0x12>
 80048a2:	2100      	movs	r1, #0
 80048a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80048a8:	4620      	mov	r0, r4
 80048aa:	4798      	blx	r3
 80048ac:	2000      	movs	r0, #0
 80048ae:	e7e0      	b.n	8004872 <_raise_r+0x12>

080048b0 <raise>:
 80048b0:	4b02      	ldr	r3, [pc, #8]	@ (80048bc <raise+0xc>)
 80048b2:	4601      	mov	r1, r0
 80048b4:	6818      	ldr	r0, [r3, #0]
 80048b6:	f7ff bfd3 	b.w	8004860 <_raise_r>
 80048ba:	bf00      	nop
 80048bc:	2000000c 	.word	0x2000000c

080048c0 <_kill_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	4d07      	ldr	r5, [pc, #28]	@ (80048e0 <_kill_r+0x20>)
 80048c4:	2300      	movs	r3, #0
 80048c6:	4604      	mov	r4, r0
 80048c8:	4608      	mov	r0, r1
 80048ca:	4611      	mov	r1, r2
 80048cc:	602b      	str	r3, [r5, #0]
 80048ce:	f7fd fa99 	bl	8001e04 <_kill>
 80048d2:	1c43      	adds	r3, r0, #1
 80048d4:	d102      	bne.n	80048dc <_kill_r+0x1c>
 80048d6:	682b      	ldr	r3, [r5, #0]
 80048d8:	b103      	cbz	r3, 80048dc <_kill_r+0x1c>
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	bd38      	pop	{r3, r4, r5, pc}
 80048de:	bf00      	nop
 80048e0:	200003a4 	.word	0x200003a4

080048e4 <_getpid_r>:
 80048e4:	f7fd ba86 	b.w	8001df4 <_getpid>

080048e8 <__swhatbuf_r>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	460c      	mov	r4, r1
 80048ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048f0:	2900      	cmp	r1, #0
 80048f2:	b096      	sub	sp, #88	@ 0x58
 80048f4:	4615      	mov	r5, r2
 80048f6:	461e      	mov	r6, r3
 80048f8:	da0d      	bge.n	8004916 <__swhatbuf_r+0x2e>
 80048fa:	89a3      	ldrh	r3, [r4, #12]
 80048fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004900:	f04f 0100 	mov.w	r1, #0
 8004904:	bf14      	ite	ne
 8004906:	2340      	movne	r3, #64	@ 0x40
 8004908:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800490c:	2000      	movs	r0, #0
 800490e:	6031      	str	r1, [r6, #0]
 8004910:	602b      	str	r3, [r5, #0]
 8004912:	b016      	add	sp, #88	@ 0x58
 8004914:	bd70      	pop	{r4, r5, r6, pc}
 8004916:	466a      	mov	r2, sp
 8004918:	f000 f848 	bl	80049ac <_fstat_r>
 800491c:	2800      	cmp	r0, #0
 800491e:	dbec      	blt.n	80048fa <__swhatbuf_r+0x12>
 8004920:	9901      	ldr	r1, [sp, #4]
 8004922:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004926:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800492a:	4259      	negs	r1, r3
 800492c:	4159      	adcs	r1, r3
 800492e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004932:	e7eb      	b.n	800490c <__swhatbuf_r+0x24>

08004934 <__smakebuf_r>:
 8004934:	898b      	ldrh	r3, [r1, #12]
 8004936:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004938:	079d      	lsls	r5, r3, #30
 800493a:	4606      	mov	r6, r0
 800493c:	460c      	mov	r4, r1
 800493e:	d507      	bpl.n	8004950 <__smakebuf_r+0x1c>
 8004940:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004944:	6023      	str	r3, [r4, #0]
 8004946:	6123      	str	r3, [r4, #16]
 8004948:	2301      	movs	r3, #1
 800494a:	6163      	str	r3, [r4, #20]
 800494c:	b003      	add	sp, #12
 800494e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004950:	ab01      	add	r3, sp, #4
 8004952:	466a      	mov	r2, sp
 8004954:	f7ff ffc8 	bl	80048e8 <__swhatbuf_r>
 8004958:	9f00      	ldr	r7, [sp, #0]
 800495a:	4605      	mov	r5, r0
 800495c:	4639      	mov	r1, r7
 800495e:	4630      	mov	r0, r6
 8004960:	f7ff f86e 	bl	8003a40 <_malloc_r>
 8004964:	b948      	cbnz	r0, 800497a <__smakebuf_r+0x46>
 8004966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800496a:	059a      	lsls	r2, r3, #22
 800496c:	d4ee      	bmi.n	800494c <__smakebuf_r+0x18>
 800496e:	f023 0303 	bic.w	r3, r3, #3
 8004972:	f043 0302 	orr.w	r3, r3, #2
 8004976:	81a3      	strh	r3, [r4, #12]
 8004978:	e7e2      	b.n	8004940 <__smakebuf_r+0xc>
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	6020      	str	r0, [r4, #0]
 800497e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004982:	81a3      	strh	r3, [r4, #12]
 8004984:	9b01      	ldr	r3, [sp, #4]
 8004986:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800498a:	b15b      	cbz	r3, 80049a4 <__smakebuf_r+0x70>
 800498c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004990:	4630      	mov	r0, r6
 8004992:	f000 f81d 	bl	80049d0 <_isatty_r>
 8004996:	b128      	cbz	r0, 80049a4 <__smakebuf_r+0x70>
 8004998:	89a3      	ldrh	r3, [r4, #12]
 800499a:	f023 0303 	bic.w	r3, r3, #3
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	81a3      	strh	r3, [r4, #12]
 80049a4:	89a3      	ldrh	r3, [r4, #12]
 80049a6:	431d      	orrs	r5, r3
 80049a8:	81a5      	strh	r5, [r4, #12]
 80049aa:	e7cf      	b.n	800494c <__smakebuf_r+0x18>

080049ac <_fstat_r>:
 80049ac:	b538      	push	{r3, r4, r5, lr}
 80049ae:	4d07      	ldr	r5, [pc, #28]	@ (80049cc <_fstat_r+0x20>)
 80049b0:	2300      	movs	r3, #0
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	602b      	str	r3, [r5, #0]
 80049ba:	f7fd fa83 	bl	8001ec4 <_fstat>
 80049be:	1c43      	adds	r3, r0, #1
 80049c0:	d102      	bne.n	80049c8 <_fstat_r+0x1c>
 80049c2:	682b      	ldr	r3, [r5, #0]
 80049c4:	b103      	cbz	r3, 80049c8 <_fstat_r+0x1c>
 80049c6:	6023      	str	r3, [r4, #0]
 80049c8:	bd38      	pop	{r3, r4, r5, pc}
 80049ca:	bf00      	nop
 80049cc:	200003a4 	.word	0x200003a4

080049d0 <_isatty_r>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	4d06      	ldr	r5, [pc, #24]	@ (80049ec <_isatty_r+0x1c>)
 80049d4:	2300      	movs	r3, #0
 80049d6:	4604      	mov	r4, r0
 80049d8:	4608      	mov	r0, r1
 80049da:	602b      	str	r3, [r5, #0]
 80049dc:	f7fd fa82 	bl	8001ee4 <_isatty>
 80049e0:	1c43      	adds	r3, r0, #1
 80049e2:	d102      	bne.n	80049ea <_isatty_r+0x1a>
 80049e4:	682b      	ldr	r3, [r5, #0]
 80049e6:	b103      	cbz	r3, 80049ea <_isatty_r+0x1a>
 80049e8:	6023      	str	r3, [r4, #0]
 80049ea:	bd38      	pop	{r3, r4, r5, pc}
 80049ec:	200003a4 	.word	0x200003a4

080049f0 <_init>:
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	bf00      	nop
 80049f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049f6:	bc08      	pop	{r3}
 80049f8:	469e      	mov	lr, r3
 80049fa:	4770      	bx	lr

080049fc <_fini>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr
