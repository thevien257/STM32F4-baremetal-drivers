
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020dc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800226c  0800226c  0000326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800230c  0800230c  00004064  2**0
                  CONTENTS
  4 .ARM          00000008  0800230c  0800230c  0000330c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002314  08002314  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002314  08002314  00003314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002318  08002318  00003318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800231c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004064  2**0
                  CONTENTS
 10 .bss          0000023c  20000064  20000064  00004064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002a0  200002a0  00004064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001451  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000058b  00000000  00000000  000054e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000120  00000000  00000000  00005a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c0  00000000  00000000  00005b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002af5  00000000  00000000  00005c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000025fe  00000000  00000000  00008745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000930f  00000000  00000000  0000ad43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00014052  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e50  00000000  00000000  00014098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00014ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002254 	.word	0x08002254

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08002254 	.word	0x08002254

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 8000280:	b4b0      	push	{r4, r5, r7}
 8000282:	b08f      	sub	sp, #60	@ 0x3c
 8000284:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 8000286:	4b2c      	ldr	r3, [pc, #176]	@ (8000338 <Get_APB1_Clock_Speed+0xb8>)
 8000288:	f107 0410 	add.w	r4, r7, #16
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 800029a:	4b28      	ldr	r3, [pc, #160]	@ (800033c <Get_APB1_Clock_Speed+0xbc>)
 800029c:	463c      	mov	r4, r7
 800029e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 80002a4:	4b26      	ldr	r3, [pc, #152]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 0303 	and.w	r3, r3, #3
 80002b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 80002b4:	4b22      	ldr	r3, [pc, #136]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	091b      	lsrs	r3, r3, #4
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 030f 	and.w	r3, r3, #15
 80002c0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 80002c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	0a9b      	lsrs	r3, r3, #10
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	f003 0307 	and.w	r3, r3, #7
 80002d0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 80002d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80002dc:	2b07      	cmp	r3, #7
 80002de:	d908      	bls.n	80002f2 <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 80002e0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80002e4:	3b08      	subs	r3, #8
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	3338      	adds	r3, #56	@ 0x38
 80002ea:	443b      	add	r3, r7
 80002ec:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80002f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 80002f6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	d908      	bls.n	8000310 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 80002fe:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000302:	3b04      	subs	r3, #4
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	3338      	adds	r3, #56	@ 0x38
 8000308:	443b      	add	r3, r7
 800030a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800030e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000314:	2b00      	cmp	r3, #0
 8000316:	d109      	bne.n	800032c <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000318:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <Get_APB1_Clock_Speed+0xc4>)
 800031c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000320:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000322:	fb92 f3f3 	sdiv	r3, r2, r3
 8000326:	461a      	mov	r2, r3
 8000328:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <Get_APB1_Clock_Speed+0xc8>)
 800032a:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 800032c:	bf00      	nop
 800032e:	373c      	adds	r7, #60	@ 0x3c
 8000330:	46bd      	mov	sp, r7
 8000332:	bcb0      	pop	{r4, r5, r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	0800226c 	.word	0x0800226c
 800033c:	0800228c 	.word	0x0800228c
 8000340:	40023800 	.word	0x40023800
 8000344:	00f42400 	.word	0x00f42400
 8000348:	20000080 	.word	0x20000080

0800034c <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a8f      	ldr	r2, [pc, #572]	@ (8000598 <GPIO_INIT+0x24c>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_INIT+0x20>
		GPIOA_EN();
 800035e:	4b8f      	ldr	r3, [pc, #572]	@ (800059c <GPIO_INIT+0x250>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a8e      	ldr	r2, [pc, #568]	@ (800059c <GPIO_INIT+0x250>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
 800036a:	e05e      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a8b      	ldr	r2, [pc, #556]	@ (80005a0 <GPIO_INIT+0x254>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_INIT+0x38>
		GPIOB_EN();
 8000376:	4b89      	ldr	r3, [pc, #548]	@ (800059c <GPIO_INIT+0x250>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a88      	ldr	r2, [pc, #544]	@ (800059c <GPIO_INIT+0x250>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
 8000382:	e052      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a86      	ldr	r2, [pc, #536]	@ (80005a4 <GPIO_INIT+0x258>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_INIT+0x50>
		GPIOC_EN();
 800038e:	4b83      	ldr	r3, [pc, #524]	@ (800059c <GPIO_INIT+0x250>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000392:	4a82      	ldr	r2, [pc, #520]	@ (800059c <GPIO_INIT+0x250>)
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	6313      	str	r3, [r2, #48]	@ 0x30
 800039a:	e046      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a81      	ldr	r2, [pc, #516]	@ (80005a8 <GPIO_INIT+0x25c>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_INIT+0x68>
		GPIOD_EN();
 80003a6:	4b7d      	ldr	r3, [pc, #500]	@ (800059c <GPIO_INIT+0x250>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a7c      	ldr	r2, [pc, #496]	@ (800059c <GPIO_INIT+0x250>)
 80003ac:	f043 0308 	orr.w	r3, r3, #8
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003b2:	e03a      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a7c      	ldr	r2, [pc, #496]	@ (80005ac <GPIO_INIT+0x260>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_INIT+0x80>
		GPIOE_EN();
 80003be:	4b77      	ldr	r3, [pc, #476]	@ (800059c <GPIO_INIT+0x250>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a76      	ldr	r2, [pc, #472]	@ (800059c <GPIO_INIT+0x250>)
 80003c4:	f043 0310 	orr.w	r3, r3, #16
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003ca:	e02e      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a77      	ldr	r2, [pc, #476]	@ (80005b0 <GPIO_INIT+0x264>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_INIT+0x98>
		GPIOF_EN();
 80003d6:	4b71      	ldr	r3, [pc, #452]	@ (800059c <GPIO_INIT+0x250>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	4a70      	ldr	r2, [pc, #448]	@ (800059c <GPIO_INIT+0x250>)
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003e2:	e022      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a72      	ldr	r2, [pc, #456]	@ (80005b4 <GPIO_INIT+0x268>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_INIT+0xb0>
		GPIOG_EN();
 80003ee:	4b6b      	ldr	r3, [pc, #428]	@ (800059c <GPIO_INIT+0x250>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a6a      	ldr	r2, [pc, #424]	@ (800059c <GPIO_INIT+0x250>)
 80003f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003fa:	e016      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a6d      	ldr	r2, [pc, #436]	@ (80005b8 <GPIO_INIT+0x26c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_INIT+0xc8>
		GPIOH_EN();
 8000406:	4b65      	ldr	r3, [pc, #404]	@ (800059c <GPIO_INIT+0x250>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040a:	4a64      	ldr	r2, [pc, #400]	@ (800059c <GPIO_INIT+0x250>)
 800040c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000410:	6313      	str	r3, [r2, #48]	@ 0x30
 8000412:	e00a      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a68      	ldr	r2, [pc, #416]	@ (80005bc <GPIO_INIT+0x270>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d105      	bne.n	800042a <GPIO_INIT+0xde>
		GPIOI_EN();
 800041e:	4b5f      	ldr	r3, [pc, #380]	@ (800059c <GPIO_INIT+0x250>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a5e      	ldr	r2, [pc, #376]	@ (800059c <GPIO_INIT+0x250>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	2103      	movs	r1, #3
 8000438:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 800043c:	43db      	mvns	r3, r3
 800043e:	4619      	mov	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	400a      	ands	r2, r1
 8000446:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	2103      	movs	r1, #3
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 800045a:	43db      	mvns	r3, r3
 800045c:	4619      	mov	r1, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	400a      	ands	r2, r1
 8000464:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68da      	ldr	r2, [r3, #12]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	799b      	ldrb	r3, [r3, #6]
 8000470:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	430a      	orrs	r2, r1
 8000484:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	2b02      	cmp	r3, #2
 800048c:	f200 8098 	bhi.w	80005c0 <GPIO_INIT+0x274>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	795b      	ldrb	r3, [r3, #5]
 800049a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	4619      	mov	r1, r3
 80004bc:	2303      	movs	r3, #3
 80004be:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80004c0:	43db      	mvns	r3, r3
 80004c2:	4619      	mov	r1, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	400a      	ands	r2, r1
 80004ca:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	7a1b      	ldrb	r3, [r3, #8]
 80004d6:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	430a      	orrs	r2, r1
 80004e8:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	791b      	ldrb	r3, [r3, #4]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	2103      	movs	r1, #3
 80004f8:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 80004fc:	43db      	mvns	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	400a      	ands	r2, r1
 8000506:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	79db      	ldrb	r3, [r3, #7]
 8000512:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	430a      	orrs	r2, r1
 8000526:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	2b02      	cmp	r3, #2
 800052e:	f040 80ea 	bne.w	8000706 <GPIO_INIT+0x3ba>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 8000536:	08db      	lsrs	r3, r3, #3
 8000538:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	f003 0307 	and.w	r3, r3, #7
 8000542:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	7b7a      	ldrb	r2, [r7, #13]
 800054a:	3208      	adds	r2, #8
 800054c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< gpioHandle->pin_number);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	461a      	mov	r2, r3
 8000556:	2303      	movs	r3, #3
 8000558:	4093      	lsls	r3, r2
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 800055a:	43db      	mvns	r3, r3
 800055c:	4618      	mov	r0, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	7b7a      	ldrb	r2, [r7, #13]
 8000564:	4001      	ands	r1, r0
 8000566:	3208      	adds	r2, #8
 8000568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	7b7a      	ldrb	r2, [r7, #13]
 8000572:	3208      	adds	r2, #8
 8000574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7a5b      	ldrb	r3, [r3, #9]
 800057c:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 800057e:	7b3b      	ldrb	r3, [r7, #12]
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	7b7a      	ldrb	r2, [r7, #13]
 800058e:	4301      	orrs	r1, r0
 8000590:	3208      	adds	r2, #8
 8000592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 8000596:	e0b6      	b.n	8000706 <GPIO_INIT+0x3ba>
 8000598:	40020000 	.word	0x40020000
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020400 	.word	0x40020400
 80005a4:	40020800 	.word	0x40020800
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40021400 	.word	0x40021400
 80005b4:	40021800 	.word	0x40021800
 80005b8:	40021c00 	.word	0x40021c00
 80005bc:	40022000 	.word	0x40022000
		SYSCFG_EN();
 80005c0:	4b54      	ldr	r3, [pc, #336]	@ (8000714 <GPIO_INIT+0x3c8>)
 80005c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c4:	4a53      	ldr	r2, [pc, #332]	@ (8000714 <GPIO_INIT+0x3c8>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ca:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	2b06      	cmp	r3, #6
 80005d2:	d12e      	bne.n	8000632 <GPIO_INIT+0x2e6>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80005d4:	4b50      	ldr	r3, [pc, #320]	@ (8000718 <GPIO_INIT+0x3cc>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a4c      	ldr	r2, [pc, #304]	@ (8000718 <GPIO_INIT+0x3cc>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 80005ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000718 <GPIO_INIT+0x3cc>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	43d2      	mvns	r2, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a46      	ldr	r2, [pc, #280]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000600:	400b      	ands	r3, r1
 8000602:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000604:	4b44      	ldr	r3, [pc, #272]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	4611      	mov	r1, r2
 800060e:	2201      	movs	r2, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	4611      	mov	r1, r2
 8000614:	4a40      	ldr	r2, [pc, #256]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000616:	430b      	orrs	r3, r1
 8000618:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 800061a:	4b3f      	ldr	r3, [pc, #252]	@ (8000718 <GPIO_INIT+0x3cc>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	7912      	ldrb	r2, [r2, #4]
 8000622:	4611      	mov	r1, r2
 8000624:	2201      	movs	r2, #1
 8000626:	408a      	lsls	r2, r1
 8000628:	4611      	mov	r1, r2
 800062a:	4a3b      	ldr	r2, [pc, #236]	@ (8000718 <GPIO_INIT+0x3cc>)
 800062c:	430b      	orrs	r3, r1
 800062e:	60d3      	str	r3, [r2, #12]
 8000630:	e036      	b.n	80006a0 <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	2b05      	cmp	r3, #5
 8000638:	d117      	bne.n	800066a <GPIO_INIT+0x31e>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 800063a:	4b37      	ldr	r3, [pc, #220]	@ (8000718 <GPIO_INIT+0x3cc>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7912      	ldrb	r2, [r2, #4]
 8000642:	4611      	mov	r1, r2
 8000644:	2201      	movs	r2, #1
 8000646:	408a      	lsls	r2, r1
 8000648:	43d2      	mvns	r2, r2
 800064a:	4611      	mov	r1, r2
 800064c:	4a32      	ldr	r2, [pc, #200]	@ (8000718 <GPIO_INIT+0x3cc>)
 800064e:	400b      	ands	r3, r1
 8000650:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000652:	4b31      	ldr	r3, [pc, #196]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	7912      	ldrb	r2, [r2, #4]
 800065a:	4611      	mov	r1, r2
 800065c:	2201      	movs	r2, #1
 800065e:	408a      	lsls	r2, r1
 8000660:	4611      	mov	r1, r2
 8000662:	4a2d      	ldr	r2, [pc, #180]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000664:	430b      	orrs	r3, r1
 8000666:	60d3      	str	r3, [r2, #12]
 8000668:	e01a      	b.n	80006a0 <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d116      	bne.n	80006a0 <GPIO_INIT+0x354>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	4611      	mov	r1, r2
 800067c:	2201      	movs	r2, #1
 800067e:	408a      	lsls	r2, r1
 8000680:	43d2      	mvns	r2, r2
 8000682:	4611      	mov	r1, r2
 8000684:	4a24      	ldr	r2, [pc, #144]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000686:	400b      	ands	r3, r1
 8000688:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <GPIO_INIT+0x3cc>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	4611      	mov	r1, r2
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <GPIO_INIT+0x3cc>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	089b      	lsrs	r3, r3, #2
 80006a6:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 80006b2:	4a1a      	ldr	r2, [pc, #104]	@ (800071c <GPIO_INIT+0x3d0>)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3302      	adds	r3, #2
 80006b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7a9b      	ldrb	r3, [r3, #10]
 80006c0:	4619      	mov	r1, r3
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	4913      	ldr	r1, [pc, #76]	@ (800071c <GPIO_INIT+0x3d0>)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	4302      	orrs	r2, r0
 80006d2:	3302      	adds	r3, #2
 80006d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <GPIO_INIT+0x3cc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	43d2      	mvns	r2, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000718 <GPIO_INIT+0x3cc>)
 80006ec:	400b      	ands	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <GPIO_INIT+0x3cc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	7912      	ldrb	r2, [r2, #4]
 80006f8:	4611      	mov	r1, r2
 80006fa:	2201      	movs	r2, #1
 80006fc:	408a      	lsls	r2, r1
 80006fe:	4611      	mov	r1, r2
 8000700:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000702:	430b      	orrs	r3, r1
 8000704:	6013      	str	r3, [r2, #0]
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40013c00 	.word	0x40013c00
 800071c:	40013800 	.word	0x40013800

08000720 <GPIO_INPUT>:

uint8_t GPIO_INPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
	uint8_t val = ((gpiox->IDR >> gpio_pins) & GPIO_BIT_1_Mask);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691a      	ldr	r2, [r3, #16]
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	fa22 f303 	lsr.w	r3, r2, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	73fb      	strb	r3, [r7, #15]
	return val;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <I2C_INIT>:
#include <stm32f4xx_cus_i2c.h>

void I2C_INIT(I2C_Handle_TypeDef *i2c_handle) {
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if (i2c_handle->I2Cx == I2C1) {
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a7b      	ldr	r2, [pc, #492]	@ (8000948 <I2C_INIT+0x1fc>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <I2C_INIT+0x20>
		I2C1_EN();
 800075e:	4b7b      	ldr	r3, [pc, #492]	@ (800094c <I2C_INIT+0x200>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a7a      	ldr	r2, [pc, #488]	@ (800094c <I2C_INIT+0x200>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
 800076a:	e016      	b.n	800079a <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C2) {
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a77      	ldr	r2, [pc, #476]	@ (8000950 <I2C_INIT+0x204>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <I2C_INIT+0x38>
		I2C2_EN();
 8000776:	4b75      	ldr	r3, [pc, #468]	@ (800094c <I2C_INIT+0x200>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077a:	4a74      	ldr	r2, [pc, #464]	@ (800094c <I2C_INIT+0x200>)
 800077c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000780:	6413      	str	r3, [r2, #64]	@ 0x40
 8000782:	e00a      	b.n	800079a <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C3) {
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a72      	ldr	r2, [pc, #456]	@ (8000954 <I2C_INIT+0x208>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d105      	bne.n	800079a <I2C_INIT+0x4e>
		I2C3_EN();
 800078e:	4b6f      	ldr	r3, [pc, #444]	@ (800094c <I2C_INIT+0x200>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000792:	4a6e      	ldr	r2, [pc, #440]	@ (800094c <I2C_INIT+0x200>)
 8000794:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000798:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	Get_APB1_Clock_Speed();
 800079a:	f7ff fd71 	bl	8000280 <Get_APB1_Clock_Speed>

	// Master mode
	if (i2c_handle->MasterOrSlave == I2C_Master_Mode) {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	f040 80b1 	bne.w	800090a <I2C_INIT+0x1be>
		// Peripheral Clock Frequency (16Mhz)
		i2c_handle->I2Cx->CR2 &= ~(Five_BIT_1 << 0);
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f022 021f 	bic.w	r2, r2, #31
 80007b6:	605a      	str	r2, [r3, #4]
		i2c_handle->I2Cx->CR2 |= (Shift_16_pos << 0);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f042 0210 	orr.w	r2, r2, #16
 80007c6:	605a      	str	r2, [r3, #4]

		// I2C Standard/Fast Mode
		i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_15_pos);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	69da      	ldr	r2, [r3, #28]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80007d6:	61da      	str	r2, [r3, #28]
		i2c_handle->I2Cx->CCR |= (i2c_handle->mode << Shift_15_pos);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	69d9      	ldr	r1, [r3, #28]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	791b      	ldrb	r3, [r3, #4]
 80007e2:	03da      	lsls	r2, r3, #15
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	430a      	orrs	r2, r1
 80007ea:	61da      	str	r2, [r3, #28]

		// Tscl = Thigh + Tlow
		if (i2c_handle->mode == I2C_Standard_Mode) {
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	791b      	ldrb	r3, [r3, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d120      	bne.n	8000836 <I2C_INIT+0xea>
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	69d9      	ldr	r1, [r3, #28]
					/ (2 * i2c_handle->scl_speed)) << 0);
 80007fa:	4b57      	ldr	r3, [pc, #348]	@ (8000958 <I2C_INIT+0x20c>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	005b      	lsls	r3, r3, #1
 8000804:	fbb2 f2f3 	udiv	r2, r2, r3
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	430a      	orrs	r2, r1
 800080e:	61da      	str	r2, [r3, #28]
			// Trise
			i2c_handle->I2Cx->TRISE = 0;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc / 1000000)) + 1;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	6a19      	ldr	r1, [r3, #32]
 800081e:	4b4e      	ldr	r3, [pc, #312]	@ (8000958 <I2C_INIT+0x20c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a4e      	ldr	r2, [pc, #312]	@ (800095c <I2C_INIT+0x210>)
 8000824:	fba2 2303 	umull	r2, r3, r2, r3
 8000828:	0c9b      	lsrs	r3, r3, #18
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	430a      	orrs	r2, r1
 8000832:	621a      	str	r2, [r3, #32]
 8000834:	e053      	b.n	80008de <I2C_INIT+0x192>
		} else if (i2c_handle->mode == I2C_Fast_Mode) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d14f      	bne.n	80008de <I2C_INIT+0x192>
			i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_14_pos);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	69da      	ldr	r2, [r3, #28]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800084c:	61da      	str	r2, [r3, #28]
			i2c_handle->I2Cx->CCR |= (i2c_handle->duty_cycle << Shift_14_pos);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	69d9      	ldr	r1, [r3, #28]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7b1b      	ldrb	r3, [r3, #12]
 8000858:	039a      	lsls	r2, r3, #14
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	430a      	orrs	r2, r1
 8000860:	61da      	str	r2, [r3, #28]
			if (i2c_handle->duty_cycle == I2C_Duty_Cycle_2) {
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7b1b      	ldrb	r3, [r3, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d110      	bne.n	800088c <I2C_INIT+0x140>
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	69d9      	ldr	r1, [r3, #28]
						/ (3 * i2c_handle->scl_speed)) << 0);
 8000870:	4b39      	ldr	r3, [pc, #228]	@ (8000958 <I2C_INIT+0x20c>)
 8000872:	6818      	ldr	r0, [r3, #0]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689a      	ldr	r2, [r3, #8]
 8000878:	4613      	mov	r3, r2
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	4413      	add	r3, r2
 800087e:	fbb0 f2f3 	udiv	r2, r0, r3
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	430a      	orrs	r2, r1
 8000888:	61da      	str	r2, [r3, #28]
 800088a:	e015      	b.n	80008b8 <I2C_INIT+0x16c>
			} else if (i2c_handle->duty_cycle == I2C_Duty_Cycle_16_9) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	7b1b      	ldrb	r3, [r3, #12]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d111      	bne.n	80008b8 <I2C_INIT+0x16c>
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	69d9      	ldr	r1, [r3, #28]
						/ (25 * i2c_handle->scl_speed)) << 0);
 800089a:	4b2f      	ldr	r3, [pc, #188]	@ (8000958 <I2C_INIT+0x20c>)
 800089c:	6818      	ldr	r0, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	689a      	ldr	r2, [r3, #8]
 80008a2:	4613      	mov	r3, r2
 80008a4:	009b      	lsls	r3, r3, #2
 80008a6:	4413      	add	r3, r2
 80008a8:	009a      	lsls	r2, r3, #2
 80008aa:	4413      	add	r3, r2
 80008ac:	fbb0 f2f3 	udiv	r2, r0, r3
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	430a      	orrs	r2, r1
 80008b6:	61da      	str	r2, [r3, #28]
			}
			// Trise
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	6a19      	ldr	r1, [r3, #32]
					* I2C_TRISE_MAX_FAST_MODE / 1000000000)) + 1;
 80008be:	4b26      	ldr	r3, [pc, #152]	@ (8000958 <I2C_INIT+0x20c>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80008c6:	fb02 f303 	mul.w	r3, r2, r3
 80008ca:	0a5b      	lsrs	r3, r3, #9
 80008cc:	4a24      	ldr	r2, [pc, #144]	@ (8000960 <I2C_INIT+0x214>)
 80008ce:	fba2 2303 	umull	r2, r3, r2, r3
 80008d2:	09db      	lsrs	r3, r3, #7
 80008d4:	1c5a      	adds	r2, r3, #1
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	430a      	orrs	r2, r1
 80008dc:	621a      	str	r2, [r3, #32]
		}

// Adress mode - 7 bit
		if (i2c_handle->address_select_bit == I2C_7_Bit_Adress) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	799b      	ldrb	r3, [r3, #6]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d109      	bne.n	80008fa <I2C_INIT+0x1ae>
			i2c_handle->I2Cx->OAR1 |= (i2c_handle->address << HIGH);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6899      	ldr	r1, [r3, #8]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	79db      	ldrb	r3, [r3, #7]
 80008f0:	005a      	lsls	r2, r3, #1
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	609a      	str	r2, [r3, #8]
		}
		i2c_handle->I2Cx->OAR1 |= (HIGH << Shift_14_pos);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000908:	609a      	str	r2, [r3, #8]
	}

	// Enable Peripheral
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_0_pos);
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	681a      	ldr	r2, [r3, #0]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f042 0201 	orr.w	r2, r2, #1
 8000918:	601a      	str	r2, [r3, #0]

	// ACK bit En
	i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000928:	601a      	str	r2, [r3, #0]
	i2c_handle->I2Cx->CR1 |= (i2c_handle->ack_en << Shift_10_pos);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	6819      	ldr	r1, [r3, #0]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	7b5b      	ldrb	r3, [r3, #13]
 8000934:	029a      	lsls	r2, r3, #10
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	430a      	orrs	r2, r1
 800093c:	601a      	str	r2, [r3, #0]
// Slave mode
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40005400 	.word	0x40005400
 800094c:	40023800 	.word	0x40023800
 8000950:	40005800 	.word	0x40005800
 8000954:	40005c00 	.word	0x40005c00
 8000958:	20000080 	.word	0x20000080
 800095c:	431bde83 	.word	0x431bde83
 8000960:	00044b83 	.word	0x00044b83

08000964 <I2C_Write>:

void I2C_Write(I2C_Handle_TypeDef *i2c_handle, uint8_t addr, uint8_t *data,
		uint32_t size, uint8_t sr) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	607a      	str	r2, [r7, #4]
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	460b      	mov	r3, r1
 8000972:	72fb      	strb	r3, [r7, #11]
	// Setting start_bit
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_8_pos);
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000982:	601a      	str	r2, [r3, #0]

	while (!((i2c_handle->I2Cx->SR1 >> Shift_0_pos) & HIGH))
 8000984:	bf00      	nop
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	f003 0301 	and.w	r3, r3, #1
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f8      	beq.n	8000986 <I2C_Write+0x22>
		;

	// Clear Start bit by reading SR1 register
	uint32_t read;
	read = i2c_handle->I2Cx->SR1;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	695b      	ldr	r3, [r3, #20]
 800099a:	613b      	str	r3, [r7, #16]
	(void) read;
	I2C_Address(i2c_handle, addr, I2C_WRITE_BIT);
 800099c:	7afb      	ldrb	r3, [r7, #11]
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f000 f8f4 	bl	8000b90 <I2C_Address>

	// Check Address matched or not
	while (!((i2c_handle->I2Cx->SR1 >> Shift_1_pos) & HIGH))
 80009a8:	bf00      	nop
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	f003 0301 	and.w	r3, r3, #1
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f7      	beq.n	80009aa <I2C_Write+0x46>
		;

	read = i2c_handle->I2Cx->SR1;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	613b      	str	r3, [r7, #16]
	read = i2c_handle->I2Cx->SR2;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	613b      	str	r3, [r7, #16]
	(void) read;

	// LSB first for example uint8_t *data = {H, E, L, L, O}
	for (uint32_t i = 0; i < size; i++) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
 80009ce:	e012      	b.n	80009f6 <I2C_Write+0x92>
		// Wait for data register is empty
		while (!((i2c_handle->I2Cx->SR1 >> Shift_7_pos) & HIGH))
 80009d0:	bf00      	nop
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	695b      	ldr	r3, [r3, #20]
 80009d8:	09db      	lsrs	r3, r3, #7
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d0f7      	beq.n	80009d2 <I2C_Write+0x6e>
			;
		i2c_handle->I2Cx->DR = data[i];
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	4413      	add	r3, r2
 80009e8:	781a      	ldrb	r2, [r3, #0]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	611a      	str	r2, [r3, #16]
	for (uint32_t i = 0; i < size; i++) {
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	3301      	adds	r3, #1
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697a      	ldr	r2, [r7, #20]
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d3e8      	bcc.n	80009d0 <I2C_Write+0x6c>
	}

	// Wait for TXE = 1: Data register is empty
	while (!((i2c_handle->I2Cx->SR1 >> Shift_7_pos) & HIGH))
 80009fe:	bf00      	nop
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	09db      	lsrs	r3, r3, #7
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0f7      	beq.n	8000a00 <I2C_Write+0x9c>
		;
	// Wait for BTF = 1: Data byTe transfer succeeded
	while (!((i2c_handle->I2Cx->SR1 >> Shift_2_pos) & HIGH))
 8000a10:	bf00      	nop
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	089b      	lsrs	r3, r3, #2
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d0f7      	beq.n	8000a12 <I2C_Write+0xae>
		;

	// Stop request
	if (sr == I2C_SR_DIS) {
 8000a22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d107      	bne.n	8000a3a <I2C_Write+0xd6>
		i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a38:	601a      	str	r2, [r3, #0]
	}
}
 8000a3a:	bf00      	nop
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <I2C_Read>:

void I2C_Read(I2C_Handle_TypeDef *i2c_handle, uint8_t addr, uint8_t *data,
		uint8_t size, uint8_t sr) {
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	607a      	str	r2, [r7, #4]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	460b      	mov	r3, r1
 8000a50:	72fb      	strb	r3, [r7, #11]
 8000a52:	4613      	mov	r3, r2
 8000a54:	72bb      	strb	r3, [r7, #10]

	// Setting start_bit
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_8_pos);
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a64:	601a      	str	r2, [r3, #0]

	while (!((i2c_handle->I2Cx->SR1 >> Shift_0_pos) & HIGH))
 8000a66:	bf00      	nop
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f8      	beq.n	8000a68 <I2C_Read+0x26>
		;

	// Clear Start bit by reading SR1 register
	uint32_t read;
	read = i2c_handle->I2Cx->SR1;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	695b      	ldr	r3, [r3, #20]
 8000a7c:	613b      	str	r3, [r7, #16]
	(void) read;
	I2C_Address(i2c_handle, addr, I2C_READ_BIT);
 8000a7e:	7afb      	ldrb	r3, [r7, #11]
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	68f8      	ldr	r0, [r7, #12]
 8000a86:	f000 f883 	bl	8000b90 <I2C_Address>

	// Check Address matched or not
	while (!((i2c_handle->I2Cx->SR1 >> Shift_1_pos) & HIGH))
 8000a8a:	bf00      	nop
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	695b      	ldr	r3, [r3, #20]
 8000a92:	085b      	lsrs	r3, r3, #1
 8000a94:	f003 0301 	and.w	r3, r3, #1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d0f7      	beq.n	8000a8c <I2C_Read+0x4a>
		;

	if (size == 1) {
 8000a9c:	7abb      	ldrb	r3, [r7, #10]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d12b      	bne.n	8000afa <I2C_Read+0xb8>

		// Set ACK LOW
		i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000ab0:	601a      	str	r2, [r3, #0]

		//Clear ADDR Flag
		read = i2c_handle->I2Cx->SR1;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	613b      	str	r3, [r7, #16]
		read = i2c_handle->I2Cx->SR2;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	613b      	str	r3, [r7, #16]
		(void) read;

		// Wait for data register is not empty (Receiver)
		while (!((i2c_handle->I2Cx->SR1 >> Shift_6_pos) & HIGH))
 8000ac2:	bf00      	nop
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	099b      	lsrs	r3, r3, #6
 8000acc:	f003 0301 	and.w	r3, r3, #1
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d0f7      	beq.n	8000ac4 <I2C_Read+0x82>
			;

		if (sr == I2C_SR_DIS) {
 8000ad4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d107      	bne.n	8000aec <I2C_Read+0xaa>
			// Stop request
			i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000aea:	601a      	str	r2, [r3, #0]
		}

		//Read data
		data[0] = i2c_handle->I2Cx->DR;
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	691b      	ldr	r3, [r3, #16]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	701a      	strb	r2, [r3, #0]
 8000af8:	e03e      	b.n	8000b78 <I2C_Read+0x136>

	} else if (size > 1) {
 8000afa:	7abb      	ldrb	r3, [r7, #10]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d93b      	bls.n	8000b78 <I2C_Read+0x136>
		//Clear ADDR Flag
		read = i2c_handle->I2Cx->SR1;
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	695b      	ldr	r3, [r3, #20]
 8000b06:	613b      	str	r3, [r7, #16]
		read = i2c_handle->I2Cx->SR2;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	699b      	ldr	r3, [r3, #24]
 8000b0e:	613b      	str	r3, [r7, #16]
		(void) read;
		for (uint32_t i = 0; i < size; i++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
 8000b14:	e02c      	b.n	8000b70 <I2C_Read+0x12e>
			// Wait for data register is not empty (Receiver)
			while (!((i2c_handle->I2Cx->SR1 >> Shift_6_pos) & HIGH))
 8000b16:	bf00      	nop
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	099b      	lsrs	r3, r3, #6
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f7      	beq.n	8000b18 <I2C_Read+0xd6>
				;
			if ((size - i) == 1) {
 8000b28:	7aba      	ldrb	r2, [r7, #10]
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	1ad3      	subs	r3, r2, r3
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d113      	bne.n	8000b5a <I2C_Read+0x118>

				// Set ACK LOW
				i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b40:	601a      	str	r2, [r3, #0]

				if (sr == I2C_SR_DIS) {
 8000b42:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d107      	bne.n	8000b5a <I2C_Read+0x118>
					// Stop request
					i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b58:	601a      	str	r2, [r3, #0]
				}
			}
			data[i] = i2c_handle->I2Cx->DR;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6919      	ldr	r1, [r3, #16]
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	4413      	add	r3, r2
 8000b66:	b2ca      	uxtb	r2, r1
 8000b68:	701a      	strb	r2, [r3, #0]
		for (uint32_t i = 0; i < size; i++) {
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	7abb      	ldrb	r3, [r7, #10]
 8000b72:	697a      	ldr	r2, [r7, #20]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d3ce      	bcc.n	8000b16 <I2C_Read+0xd4>
		}
	}

	// SET ACK again
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_10_pos);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b86:	601a      	str	r2, [r3, #0]

}
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <I2C_Address>:

void I2C_Address(I2C_Handle_TypeDef *i2c_handle, uint8_t addr, uint8_t rnw) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	70fb      	strb	r3, [r7, #3]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	70bb      	strb	r3, [r7, #2]
	uint8_t slave_addr = addr << 1;
 8000ba0:	78fb      	ldrb	r3, [r7, #3]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
	if (rnw == I2C_WRITE_BIT) {
 8000ba6:	78bb      	ldrb	r3, [r7, #2]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d104      	bne.n	8000bb6 <I2C_Address+0x26>
		slave_addr &= ~(HIGH);
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	f023 0301 	bic.w	r3, r3, #1
 8000bb2:	73fb      	strb	r3, [r7, #15]
 8000bb4:	e006      	b.n	8000bc4 <I2C_Address+0x34>
	} else if (rnw == I2C_READ_BIT) {
 8000bb6:	78bb      	ldrb	r3, [r7, #2]
 8000bb8:	2b01      	cmp	r3, #1
 8000bba:	d103      	bne.n	8000bc4 <I2C_Address+0x34>
		slave_addr |= (HIGH);
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	73fb      	strb	r3, [r7, #15]
	}

	i2c_handle->I2Cx->DR = slave_addr;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	7bfa      	ldrb	r2, [r7, #15]
 8000bca:	611a      	str	r2, [r3, #16]

}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <main>:
uint8_t buffer[] = { };
uint8_t commandCode;
uint8_t readInput;
uint8_t len;

int main(void) {
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af02      	add	r7, sp, #8
	GPIO_USER_INIT();
 8000bde:	f000 f879 	bl	8000cd4 <GPIO_USER_INIT>
	I2C_USER_INIT();
 8000be2:	f000 f855 	bl	8000c90 <I2C_USER_INIT>

	initialise_monitor_handles();
 8000be6:	f000 fb2b 	bl	8001240 <initialise_monitor_handles>

	printf("Application is running\n");
 8000bea:	4821      	ldr	r0, [pc, #132]	@ (8000c70 <main+0x98>)
 8000bec:	f000 fcd0 	bl	8001590 <puts>
	while (1) {
		readInput = GPIO_INPUT(GPIOA, GPIO_PIN_0);
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4820      	ldr	r0, [pc, #128]	@ (8000c74 <main+0x9c>)
 8000bf4:	f7ff fd94 	bl	8000720 <GPIO_INPUT>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000c78 <main+0xa0>)
 8000bfe:	701a      	strb	r2, [r3, #0]
		if (readInput == HIGH) {
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <main+0xa0>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d1f3      	bne.n	8000bf0 <main+0x18>
			commandCode = 0x51;
 8000c08:	4b1c      	ldr	r3, [pc, #112]	@ (8000c7c <main+0xa4>)
 8000c0a:	2251      	movs	r2, #81	@ 0x51
 8000c0c:	701a      	strb	r2, [r3, #0]
			I2C_Write(&I2C_Handle, SLAVE_ADDR, &commandCode, 1, I2C_SR_EN);
 8000c0e:	2301      	movs	r3, #1
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	2301      	movs	r3, #1
 8000c14:	4a19      	ldr	r2, [pc, #100]	@ (8000c7c <main+0xa4>)
 8000c16:	2168      	movs	r1, #104	@ 0x68
 8000c18:	4819      	ldr	r0, [pc, #100]	@ (8000c80 <main+0xa8>)
 8000c1a:	f7ff fea3 	bl	8000964 <I2C_Write>

			I2C_Read(&I2C_Handle, SLAVE_ADDR, &len, 1, I2C_SR_EN);
 8000c1e:	2301      	movs	r3, #1
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	2301      	movs	r3, #1
 8000c24:	4a17      	ldr	r2, [pc, #92]	@ (8000c84 <main+0xac>)
 8000c26:	2168      	movs	r1, #104	@ 0x68
 8000c28:	4815      	ldr	r0, [pc, #84]	@ (8000c80 <main+0xa8>)
 8000c2a:	f7ff ff0a 	bl	8000a42 <I2C_Read>

			commandCode = 0x52;
 8000c2e:	4b13      	ldr	r3, [pc, #76]	@ (8000c7c <main+0xa4>)
 8000c30:	2252      	movs	r2, #82	@ 0x52
 8000c32:	701a      	strb	r2, [r3, #0]

			I2C_Write(&I2C_Handle, SLAVE_ADDR, &commandCode, 1, I2C_SR_EN);
 8000c34:	2301      	movs	r3, #1
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	2301      	movs	r3, #1
 8000c3a:	4a10      	ldr	r2, [pc, #64]	@ (8000c7c <main+0xa4>)
 8000c3c:	2168      	movs	r1, #104	@ 0x68
 8000c3e:	4810      	ldr	r0, [pc, #64]	@ (8000c80 <main+0xa8>)
 8000c40:	f7ff fe90 	bl	8000964 <I2C_Write>

			I2C_Read(&I2C_Handle, SLAVE_ADDR, buffer, len, I2C_SR_DIS);
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <main+0xac>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	9200      	str	r2, [sp, #0]
 8000c4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c88 <main+0xb0>)
 8000c4e:	2168      	movs	r1, #104	@ 0x68
 8000c50:	480b      	ldr	r0, [pc, #44]	@ (8000c80 <main+0xa8>)
 8000c52:	f7ff fef6 	bl	8000a42 <I2C_Read>

			buffer[len + 1] = '\0';
 8000c56:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <main+0xac>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c88 <main+0xb0>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	54d1      	strb	r1, [r2, r3]

			printf("Data : %s", buffer);
 8000c62:	4909      	ldr	r1, [pc, #36]	@ (8000c88 <main+0xb0>)
 8000c64:	4809      	ldr	r0, [pc, #36]	@ (8000c8c <main+0xb4>)
 8000c66:	f000 fc2b 	bl	80014c0 <iprintf>

			while (1)
 8000c6a:	bf00      	nop
 8000c6c:	e7fd      	b.n	8000c6a <main+0x92>
 8000c6e:	bf00      	nop
 8000c70:	0800229c 	.word	0x0800229c
 8000c74:	40020000 	.word	0x40020000
 8000c78:	200000a1 	.word	0x200000a1
 8000c7c:	200000a0 	.word	0x200000a0
 8000c80:	20000084 	.word	0x20000084
 8000c84:	200000a2 	.word	0x200000a2
 8000c88:	200000a0 	.word	0x200000a0
 8000c8c:	080022b4 	.word	0x080022b4

08000c90 <I2C_USER_INIT>:
				;
		}
	}
}

void I2C_USER_INIT(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
	I2C_Handle.I2Cx = I2C1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <I2C_USER_INIT+0x38>)
 8000c96:	4a0d      	ldr	r2, [pc, #52]	@ (8000ccc <I2C_USER_INIT+0x3c>)
 8000c98:	601a      	str	r2, [r3, #0]
	I2C_Handle.MasterOrSlave = I2C_Master_Mode;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <I2C_USER_INIT+0x38>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	715a      	strb	r2, [r3, #5]
	I2C_Handle.ack_en = I2C_ACK_EN;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	@ (8000cc8 <I2C_USER_INIT+0x38>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	735a      	strb	r2, [r3, #13]
	I2C_Handle.address = 0x61;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <I2C_USER_INIT+0x38>)
 8000ca8:	2261      	movs	r2, #97	@ 0x61
 8000caa:	71da      	strb	r2, [r3, #7]
	I2C_Handle.address_select_bit = I2C_7_Bit_Adress;
 8000cac:	4b06      	ldr	r3, [pc, #24]	@ (8000cc8 <I2C_USER_INIT+0x38>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	719a      	strb	r2, [r3, #6]
	I2C_Handle.mode = I2C_Standard_Mode;
 8000cb2:	4b05      	ldr	r3, [pc, #20]	@ (8000cc8 <I2C_USER_INIT+0x38>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	711a      	strb	r2, [r3, #4]
	I2C_Handle.scl_speed = I2C_SCL_SPEED_100;
 8000cb8:	4b03      	ldr	r3, [pc, #12]	@ (8000cc8 <I2C_USER_INIT+0x38>)
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <I2C_USER_INIT+0x40>)
 8000cbc:	609a      	str	r2, [r3, #8]
	I2C_INIT(&I2C_Handle);
 8000cbe:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <I2C_USER_INIT+0x38>)
 8000cc0:	f7ff fd44 	bl	800074c <I2C_INIT>
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000084 	.word	0x20000084
 8000ccc:	40005400 	.word	0x40005400
 8000cd0:	000186a0 	.word	0x000186a0

08000cd4 <GPIO_USER_INIT>:

void GPIO_USER_INIT(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0

	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000cda:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <GPIO_USER_INIT+0x68>)
 8000cdc:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 8000cde:	4b16      	ldr	r3, [pc, #88]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000cea:	4b13      	ldr	r3, [pc, #76]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8000cf0:	4811      	ldr	r0, [pc, #68]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000cf2:	f7ff fb2b 	bl	800034c <GPIO_INIT>

	// PB6 - I2C1_SCL
	GPIO_Handle.GPIOX = GPIOB;
 8000cf6:	4b10      	ldr	r3, [pc, #64]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000cf8:	4a11      	ldr	r2, [pc, #68]	@ (8000d40 <GPIO_USER_INIT+0x6c>)
 8000cfa:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000d02:	4b0d      	ldr	r3, [pc, #52]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000d04:	2203      	movs	r2, #3
 8000d06:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_OD;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pin_number = GPIO_PIN_6;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000d10:	2206      	movs	r2, #6
 8000d12:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
 8000d14:	4b08      	ldr	r3, [pc, #32]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	719a      	strb	r2, [r3, #6]
	GPIO_Handle.alternate_function_select = GPIO_AF4;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	725a      	strb	r2, [r3, #9]
	GPIO_INIT(&GPIO_Handle);
 8000d20:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000d22:	f7ff fb13 	bl	800034c <GPIO_INIT>

	// PB9 - I2C1_SDA
	GPIO_Handle.pin_number = GPIO_PIN_9;
 8000d26:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000d28:	2209      	movs	r2, #9
 8000d2a:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <GPIO_USER_INIT+0x64>)
 8000d2e:	f7ff fb0d 	bl	800034c <GPIO_INIT>
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000094 	.word	0x20000094
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	40020400 	.word	0x40020400

08000d44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d4c:	4a14      	ldr	r2, [pc, #80]	@ (8000da0 <_sbrk+0x5c>)
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <_sbrk+0x60>)
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d58:	4b13      	ldr	r3, [pc, #76]	@ (8000da8 <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d102      	bne.n	8000d66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d60:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <_sbrk+0x64>)
 8000d62:	4a12      	ldr	r2, [pc, #72]	@ (8000dac <_sbrk+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d66:	4b10      	ldr	r3, [pc, #64]	@ (8000da8 <_sbrk+0x64>)
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d207      	bcs.n	8000d84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d74:	f000 fd3a 	bl	80017ec <__errno>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d82:	e009      	b.n	8000d98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8a:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	4a05      	ldr	r2, [pc, #20]	@ (8000da8 <_sbrk+0x64>)
 8000d94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d96:	68fb      	ldr	r3, [r7, #12]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3718      	adds	r7, #24
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20020000 	.word	0x20020000
 8000da4:	00000400 	.word	0x00000400
 8000da8:	200000a4 	.word	0x200000a4
 8000dac:	200002a0 	.word	0x200002a0

08000db0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db0:	480d      	ldr	r0, [pc, #52]	@ (8000de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000db2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	@ (8000dec <LoopForever+0x6>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	@ (8000df0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <LoopForever+0xe>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000dfc <LoopForever+0x16>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dde:	f000 fd0b 	bl	80017f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de2:	f7ff fef9 	bl	8000bd8 <main>

08000de6 <LoopForever>:

LoopForever:
  b LoopForever
 8000de6:	e7fe      	b.n	8000de6 <LoopForever>
  ldr   r0, =_estack
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000df4:	0800231c 	.word	0x0800231c
  ldr r2, =_sbss
 8000df8:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000dfc:	200002a0 	.word	0x200002a0

08000e00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <findslot>:
 8000e04:	4b0a      	ldr	r3, [pc, #40]	@ (8000e30 <findslot+0x2c>)
 8000e06:	b510      	push	{r4, lr}
 8000e08:	4604      	mov	r4, r0
 8000e0a:	6818      	ldr	r0, [r3, #0]
 8000e0c:	b118      	cbz	r0, 8000e16 <findslot+0x12>
 8000e0e:	6a03      	ldr	r3, [r0, #32]
 8000e10:	b90b      	cbnz	r3, 8000e16 <findslot+0x12>
 8000e12:	f000 fb1f 	bl	8001454 <__sinit>
 8000e16:	2c13      	cmp	r4, #19
 8000e18:	d807      	bhi.n	8000e2a <findslot+0x26>
 8000e1a:	4806      	ldr	r0, [pc, #24]	@ (8000e34 <findslot+0x30>)
 8000e1c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8000e20:	3201      	adds	r2, #1
 8000e22:	d002      	beq.n	8000e2a <findslot+0x26>
 8000e24:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8000e28:	bd10      	pop	{r4, pc}
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	e7fc      	b.n	8000e28 <findslot+0x24>
 8000e2e:	bf00      	nop
 8000e30:	20000014 	.word	0x20000014
 8000e34:	200000b4 	.word	0x200000b4

08000e38 <error>:
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	f000 fcd6 	bl	80017ec <__errno>
 8000e40:	2613      	movs	r6, #19
 8000e42:	4605      	mov	r5, r0
 8000e44:	2700      	movs	r7, #0
 8000e46:	4630      	mov	r0, r6
 8000e48:	4639      	mov	r1, r7
 8000e4a:	beab      	bkpt	0x00ab
 8000e4c:	4606      	mov	r6, r0
 8000e4e:	602e      	str	r6, [r5, #0]
 8000e50:	4620      	mov	r0, r4
 8000e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000e54 <checkerror>:
 8000e54:	1c43      	adds	r3, r0, #1
 8000e56:	d101      	bne.n	8000e5c <checkerror+0x8>
 8000e58:	f7ff bfee 	b.w	8000e38 <error>
 8000e5c:	4770      	bx	lr

08000e5e <_swiread>:
 8000e5e:	b530      	push	{r4, r5, lr}
 8000e60:	b085      	sub	sp, #20
 8000e62:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000e66:	9203      	str	r2, [sp, #12]
 8000e68:	2406      	movs	r4, #6
 8000e6a:	ad01      	add	r5, sp, #4
 8000e6c:	4620      	mov	r0, r4
 8000e6e:	4629      	mov	r1, r5
 8000e70:	beab      	bkpt	0x00ab
 8000e72:	4604      	mov	r4, r0
 8000e74:	4620      	mov	r0, r4
 8000e76:	f7ff ffed 	bl	8000e54 <checkerror>
 8000e7a:	b005      	add	sp, #20
 8000e7c:	bd30      	pop	{r4, r5, pc}

08000e7e <_read>:
 8000e7e:	b570      	push	{r4, r5, r6, lr}
 8000e80:	460e      	mov	r6, r1
 8000e82:	4614      	mov	r4, r2
 8000e84:	f7ff ffbe 	bl	8000e04 <findslot>
 8000e88:	4605      	mov	r5, r0
 8000e8a:	b930      	cbnz	r0, 8000e9a <_read+0x1c>
 8000e8c:	f000 fcae 	bl	80017ec <__errno>
 8000e90:	2309      	movs	r3, #9
 8000e92:	6003      	str	r3, [r0, #0]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	bd70      	pop	{r4, r5, r6, pc}
 8000e9a:	6800      	ldr	r0, [r0, #0]
 8000e9c:	4622      	mov	r2, r4
 8000e9e:	4631      	mov	r1, r6
 8000ea0:	f7ff ffdd 	bl	8000e5e <_swiread>
 8000ea4:	1c43      	adds	r3, r0, #1
 8000ea6:	d0f5      	beq.n	8000e94 <_read+0x16>
 8000ea8:	686b      	ldr	r3, [r5, #4]
 8000eaa:	1a20      	subs	r0, r4, r0
 8000eac:	4403      	add	r3, r0
 8000eae:	606b      	str	r3, [r5, #4]
 8000eb0:	e7f2      	b.n	8000e98 <_read+0x1a>

08000eb2 <_swilseek>:
 8000eb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000eb4:	460c      	mov	r4, r1
 8000eb6:	4616      	mov	r6, r2
 8000eb8:	f7ff ffa4 	bl	8000e04 <findslot>
 8000ebc:	4605      	mov	r5, r0
 8000ebe:	b940      	cbnz	r0, 8000ed2 <_swilseek+0x20>
 8000ec0:	f000 fc94 	bl	80017ec <__errno>
 8000ec4:	2309      	movs	r3, #9
 8000ec6:	6003      	str	r3, [r0, #0]
 8000ec8:	f04f 34ff 	mov.w	r4, #4294967295
 8000ecc:	4620      	mov	r0, r4
 8000ece:	b003      	add	sp, #12
 8000ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ed2:	2e02      	cmp	r6, #2
 8000ed4:	d903      	bls.n	8000ede <_swilseek+0x2c>
 8000ed6:	f000 fc89 	bl	80017ec <__errno>
 8000eda:	2316      	movs	r3, #22
 8000edc:	e7f3      	b.n	8000ec6 <_swilseek+0x14>
 8000ede:	2e01      	cmp	r6, #1
 8000ee0:	d112      	bne.n	8000f08 <_swilseek+0x56>
 8000ee2:	6843      	ldr	r3, [r0, #4]
 8000ee4:	18e4      	adds	r4, r4, r3
 8000ee6:	d4f6      	bmi.n	8000ed6 <_swilseek+0x24>
 8000ee8:	682b      	ldr	r3, [r5, #0]
 8000eea:	260a      	movs	r6, #10
 8000eec:	e9cd 3400 	strd	r3, r4, [sp]
 8000ef0:	466f      	mov	r7, sp
 8000ef2:	4630      	mov	r0, r6
 8000ef4:	4639      	mov	r1, r7
 8000ef6:	beab      	bkpt	0x00ab
 8000ef8:	4606      	mov	r6, r0
 8000efa:	4630      	mov	r0, r6
 8000efc:	f7ff ffaa 	bl	8000e54 <checkerror>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	dbe1      	blt.n	8000ec8 <_swilseek+0x16>
 8000f04:	606c      	str	r4, [r5, #4]
 8000f06:	e7e1      	b.n	8000ecc <_swilseek+0x1a>
 8000f08:	2e02      	cmp	r6, #2
 8000f0a:	6803      	ldr	r3, [r0, #0]
 8000f0c:	d1ec      	bne.n	8000ee8 <_swilseek+0x36>
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	260c      	movs	r6, #12
 8000f12:	466f      	mov	r7, sp
 8000f14:	4630      	mov	r0, r6
 8000f16:	4639      	mov	r1, r7
 8000f18:	beab      	bkpt	0x00ab
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	4630      	mov	r0, r6
 8000f1e:	f7ff ff99 	bl	8000e54 <checkerror>
 8000f22:	1c43      	adds	r3, r0, #1
 8000f24:	d0d0      	beq.n	8000ec8 <_swilseek+0x16>
 8000f26:	4404      	add	r4, r0
 8000f28:	e7de      	b.n	8000ee8 <_swilseek+0x36>

08000f2a <_lseek>:
 8000f2a:	f7ff bfc2 	b.w	8000eb2 <_swilseek>

08000f2e <_swiwrite>:
 8000f2e:	b530      	push	{r4, r5, lr}
 8000f30:	b085      	sub	sp, #20
 8000f32:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8000f36:	9203      	str	r2, [sp, #12]
 8000f38:	2405      	movs	r4, #5
 8000f3a:	ad01      	add	r5, sp, #4
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	4629      	mov	r1, r5
 8000f40:	beab      	bkpt	0x00ab
 8000f42:	4604      	mov	r4, r0
 8000f44:	4620      	mov	r0, r4
 8000f46:	f7ff ff85 	bl	8000e54 <checkerror>
 8000f4a:	b005      	add	sp, #20
 8000f4c:	bd30      	pop	{r4, r5, pc}

08000f4e <_write>:
 8000f4e:	b570      	push	{r4, r5, r6, lr}
 8000f50:	460e      	mov	r6, r1
 8000f52:	4615      	mov	r5, r2
 8000f54:	f7ff ff56 	bl	8000e04 <findslot>
 8000f58:	4604      	mov	r4, r0
 8000f5a:	b930      	cbnz	r0, 8000f6a <_write+0x1c>
 8000f5c:	f000 fc46 	bl	80017ec <__errno>
 8000f60:	2309      	movs	r3, #9
 8000f62:	6003      	str	r3, [r0, #0]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
 8000f6a:	6800      	ldr	r0, [r0, #0]
 8000f6c:	462a      	mov	r2, r5
 8000f6e:	4631      	mov	r1, r6
 8000f70:	f7ff ffdd 	bl	8000f2e <_swiwrite>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	dbf5      	blt.n	8000f64 <_write+0x16>
 8000f78:	6862      	ldr	r2, [r4, #4]
 8000f7a:	1ae8      	subs	r0, r5, r3
 8000f7c:	4402      	add	r2, r0
 8000f7e:	42ab      	cmp	r3, r5
 8000f80:	6062      	str	r2, [r4, #4]
 8000f82:	d1f1      	bne.n	8000f68 <_write+0x1a>
 8000f84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f7ff bf55 	b.w	8000e38 <error>

08000f8e <_swiclose>:
 8000f8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000f90:	2402      	movs	r4, #2
 8000f92:	9001      	str	r0, [sp, #4]
 8000f94:	ad01      	add	r5, sp, #4
 8000f96:	4620      	mov	r0, r4
 8000f98:	4629      	mov	r1, r5
 8000f9a:	beab      	bkpt	0x00ab
 8000f9c:	4604      	mov	r4, r0
 8000f9e:	4620      	mov	r0, r4
 8000fa0:	f7ff ff58 	bl	8000e54 <checkerror>
 8000fa4:	b003      	add	sp, #12
 8000fa6:	bd30      	pop	{r4, r5, pc}

08000fa8 <_close>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	4605      	mov	r5, r0
 8000fac:	f7ff ff2a 	bl	8000e04 <findslot>
 8000fb0:	4604      	mov	r4, r0
 8000fb2:	b930      	cbnz	r0, 8000fc2 <_close+0x1a>
 8000fb4:	f000 fc1a 	bl	80017ec <__errno>
 8000fb8:	2309      	movs	r3, #9
 8000fba:	6003      	str	r3, [r0, #0]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
 8000fc2:	3d01      	subs	r5, #1
 8000fc4:	2d01      	cmp	r5, #1
 8000fc6:	d809      	bhi.n	8000fdc <_close+0x34>
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <_close+0x48>)
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	691b      	ldr	r3, [r3, #16]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d104      	bne.n	8000fdc <_close+0x34>
 8000fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd6:	6003      	str	r3, [r0, #0]
 8000fd8:	2000      	movs	r0, #0
 8000fda:	e7f1      	b.n	8000fc0 <_close+0x18>
 8000fdc:	6820      	ldr	r0, [r4, #0]
 8000fde:	f7ff ffd6 	bl	8000f8e <_swiclose>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d1ec      	bne.n	8000fc0 <_close+0x18>
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	6023      	str	r3, [r4, #0]
 8000fec:	e7e8      	b.n	8000fc0 <_close+0x18>
 8000fee:	bf00      	nop
 8000ff0:	200000b4 	.word	0x200000b4

08000ff4 <_swistat>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	f7ff ff04 	bl	8000e04 <findslot>
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	b930      	cbnz	r0, 800100e <_swistat+0x1a>
 8001000:	f000 fbf4 	bl	80017ec <__errno>
 8001004:	2309      	movs	r3, #9
 8001006:	6003      	str	r3, [r0, #0]
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	bd70      	pop	{r4, r5, r6, pc}
 800100e:	6863      	ldr	r3, [r4, #4]
 8001010:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001014:	6063      	str	r3, [r4, #4]
 8001016:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800101a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800101c:	260c      	movs	r6, #12
 800101e:	4630      	mov	r0, r6
 8001020:	4629      	mov	r1, r5
 8001022:	beab      	bkpt	0x00ab
 8001024:	4605      	mov	r5, r0
 8001026:	4628      	mov	r0, r5
 8001028:	f7ff ff14 	bl	8000e54 <checkerror>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d0eb      	beq.n	8001008 <_swistat+0x14>
 8001030:	6120      	str	r0, [r4, #16]
 8001032:	2000      	movs	r0, #0
 8001034:	e7ea      	b.n	800100c <_swistat+0x18>

08001036 <_fstat>:
 8001036:	460b      	mov	r3, r1
 8001038:	b510      	push	{r4, lr}
 800103a:	2100      	movs	r1, #0
 800103c:	4604      	mov	r4, r0
 800103e:	2258      	movs	r2, #88	@ 0x58
 8001040:	4618      	mov	r0, r3
 8001042:	f000 fb85 	bl	8001750 <memset>
 8001046:	4601      	mov	r1, r0
 8001048:	4620      	mov	r0, r4
 800104a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800104e:	f7ff bfd1 	b.w	8000ff4 <_swistat>

08001052 <_stat>:
 8001052:	b538      	push	{r3, r4, r5, lr}
 8001054:	460d      	mov	r5, r1
 8001056:	4604      	mov	r4, r0
 8001058:	2258      	movs	r2, #88	@ 0x58
 800105a:	2100      	movs	r1, #0
 800105c:	4628      	mov	r0, r5
 800105e:	f000 fb77 	bl	8001750 <memset>
 8001062:	4620      	mov	r0, r4
 8001064:	2100      	movs	r1, #0
 8001066:	f000 f811 	bl	800108c <_swiopen>
 800106a:	1c43      	adds	r3, r0, #1
 800106c:	4604      	mov	r4, r0
 800106e:	d00b      	beq.n	8001088 <_stat+0x36>
 8001070:	686b      	ldr	r3, [r5, #4]
 8001072:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8001076:	606b      	str	r3, [r5, #4]
 8001078:	4629      	mov	r1, r5
 800107a:	f7ff ffbb 	bl	8000ff4 <_swistat>
 800107e:	4605      	mov	r5, r0
 8001080:	4620      	mov	r0, r4
 8001082:	f7ff ff91 	bl	8000fa8 <_close>
 8001086:	462c      	mov	r4, r5
 8001088:	4620      	mov	r0, r4
 800108a:	bd38      	pop	{r3, r4, r5, pc}

0800108c <_swiopen>:
 800108c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001090:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 800113c <_swiopen+0xb0>
 8001094:	b096      	sub	sp, #88	@ 0x58
 8001096:	4607      	mov	r7, r0
 8001098:	460e      	mov	r6, r1
 800109a:	2400      	movs	r4, #0
 800109c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80010a0:	3301      	adds	r3, #1
 80010a2:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80010a6:	d032      	beq.n	800110e <_swiopen+0x82>
 80010a8:	3401      	adds	r4, #1
 80010aa:	2c14      	cmp	r4, #20
 80010ac:	d1f6      	bne.n	800109c <_swiopen+0x10>
 80010ae:	f000 fb9d 	bl	80017ec <__errno>
 80010b2:	2318      	movs	r3, #24
 80010b4:	e03a      	b.n	800112c <_swiopen+0xa0>
 80010b6:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80010ba:	f240 6301 	movw	r3, #1537	@ 0x601
 80010be:	07b2      	lsls	r2, r6, #30
 80010c0:	bf48      	it	mi
 80010c2:	f045 0502 	orrmi.w	r5, r5, #2
 80010c6:	421e      	tst	r6, r3
 80010c8:	bf18      	it	ne
 80010ca:	f045 0504 	orrne.w	r5, r5, #4
 80010ce:	0733      	lsls	r3, r6, #28
 80010d0:	bf48      	it	mi
 80010d2:	f025 0504 	bicmi.w	r5, r5, #4
 80010d6:	4638      	mov	r0, r7
 80010d8:	bf48      	it	mi
 80010da:	f045 0508 	orrmi.w	r5, r5, #8
 80010de:	9700      	str	r7, [sp, #0]
 80010e0:	f7ff f876 	bl	80001d0 <strlen>
 80010e4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80010e8:	2501      	movs	r5, #1
 80010ea:	4628      	mov	r0, r5
 80010ec:	4651      	mov	r1, sl
 80010ee:	beab      	bkpt	0x00ab
 80010f0:	4605      	mov	r5, r0
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	db06      	blt.n	8001104 <_swiopen+0x78>
 80010f6:	44c8      	add	r8, r9
 80010f8:	2300      	movs	r3, #0
 80010fa:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 80010fe:	f8c8 3004 	str.w	r3, [r8, #4]
 8001102:	e016      	b.n	8001132 <_swiopen+0xa6>
 8001104:	4628      	mov	r0, r5
 8001106:	f7ff fe97 	bl	8000e38 <error>
 800110a:	4604      	mov	r4, r0
 800110c:	e011      	b.n	8001132 <_swiopen+0xa6>
 800110e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8001112:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8001116:	46ea      	mov	sl, sp
 8001118:	d1cd      	bne.n	80010b6 <_swiopen+0x2a>
 800111a:	4651      	mov	r1, sl
 800111c:	4638      	mov	r0, r7
 800111e:	f7ff ff98 	bl	8001052 <_stat>
 8001122:	3001      	adds	r0, #1
 8001124:	d0c7      	beq.n	80010b6 <_swiopen+0x2a>
 8001126:	f000 fb61 	bl	80017ec <__errno>
 800112a:	2311      	movs	r3, #17
 800112c:	6003      	str	r3, [r0, #0]
 800112e:	f04f 34ff 	mov.w	r4, #4294967295
 8001132:	4620      	mov	r0, r4
 8001134:	b016      	add	sp, #88	@ 0x58
 8001136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800113a:	bf00      	nop
 800113c:	200000b4 	.word	0x200000b4

08001140 <_get_semihosting_exts>:
 8001140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001144:	4606      	mov	r6, r0
 8001146:	460f      	mov	r7, r1
 8001148:	4829      	ldr	r0, [pc, #164]	@ (80011f0 <_get_semihosting_exts+0xb0>)
 800114a:	2100      	movs	r1, #0
 800114c:	4615      	mov	r5, r2
 800114e:	f7ff ff9d 	bl	800108c <_swiopen>
 8001152:	462a      	mov	r2, r5
 8001154:	4604      	mov	r4, r0
 8001156:	2100      	movs	r1, #0
 8001158:	4630      	mov	r0, r6
 800115a:	f000 faf9 	bl	8001750 <memset>
 800115e:	1c63      	adds	r3, r4, #1
 8001160:	d014      	beq.n	800118c <_get_semihosting_exts+0x4c>
 8001162:	4620      	mov	r0, r4
 8001164:	f7ff fe4e 	bl	8000e04 <findslot>
 8001168:	f04f 080c 	mov.w	r8, #12
 800116c:	4681      	mov	r9, r0
 800116e:	4640      	mov	r0, r8
 8001170:	4649      	mov	r1, r9
 8001172:	beab      	bkpt	0x00ab
 8001174:	4680      	mov	r8, r0
 8001176:	4640      	mov	r0, r8
 8001178:	f7ff fe6c 	bl	8000e54 <checkerror>
 800117c:	2803      	cmp	r0, #3
 800117e:	dd02      	ble.n	8001186 <_get_semihosting_exts+0x46>
 8001180:	1ec3      	subs	r3, r0, #3
 8001182:	42ab      	cmp	r3, r5
 8001184:	dc07      	bgt.n	8001196 <_get_semihosting_exts+0x56>
 8001186:	4620      	mov	r0, r4
 8001188:	f7ff ff0e 	bl	8000fa8 <_close>
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	b003      	add	sp, #12
 8001192:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001196:	2204      	movs	r2, #4
 8001198:	eb0d 0102 	add.w	r1, sp, r2
 800119c:	4620      	mov	r0, r4
 800119e:	f7ff fe6e 	bl	8000e7e <_read>
 80011a2:	2803      	cmp	r0, #3
 80011a4:	ddef      	ble.n	8001186 <_get_semihosting_exts+0x46>
 80011a6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80011aa:	2b53      	cmp	r3, #83	@ 0x53
 80011ac:	d1eb      	bne.n	8001186 <_get_semihosting_exts+0x46>
 80011ae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80011b2:	2b48      	cmp	r3, #72	@ 0x48
 80011b4:	d1e7      	bne.n	8001186 <_get_semihosting_exts+0x46>
 80011b6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80011ba:	2b46      	cmp	r3, #70	@ 0x46
 80011bc:	d1e3      	bne.n	8001186 <_get_semihosting_exts+0x46>
 80011be:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011c2:	2b42      	cmp	r3, #66	@ 0x42
 80011c4:	d1df      	bne.n	8001186 <_get_semihosting_exts+0x46>
 80011c6:	2201      	movs	r2, #1
 80011c8:	4639      	mov	r1, r7
 80011ca:	4620      	mov	r0, r4
 80011cc:	f7ff fe71 	bl	8000eb2 <_swilseek>
 80011d0:	2800      	cmp	r0, #0
 80011d2:	dbd8      	blt.n	8001186 <_get_semihosting_exts+0x46>
 80011d4:	462a      	mov	r2, r5
 80011d6:	4631      	mov	r1, r6
 80011d8:	4620      	mov	r0, r4
 80011da:	f7ff fe50 	bl	8000e7e <_read>
 80011de:	4605      	mov	r5, r0
 80011e0:	4620      	mov	r0, r4
 80011e2:	f7ff fee1 	bl	8000fa8 <_close>
 80011e6:	4628      	mov	r0, r5
 80011e8:	f7ff fe34 	bl	8000e54 <checkerror>
 80011ec:	e7d0      	b.n	8001190 <_get_semihosting_exts+0x50>
 80011ee:	bf00      	nop
 80011f0:	080022be 	.word	0x080022be

080011f4 <initialise_semihosting_exts>:
 80011f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011f6:	4d0a      	ldr	r5, [pc, #40]	@ (8001220 <initialise_semihosting_exts+0x2c>)
 80011f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001224 <initialise_semihosting_exts+0x30>)
 80011fa:	2100      	movs	r1, #0
 80011fc:	2201      	movs	r2, #1
 80011fe:	a801      	add	r0, sp, #4
 8001200:	6029      	str	r1, [r5, #0]
 8001202:	6022      	str	r2, [r4, #0]
 8001204:	f7ff ff9c 	bl	8001140 <_get_semihosting_exts>
 8001208:	2800      	cmp	r0, #0
 800120a:	dd07      	ble.n	800121c <initialise_semihosting_exts+0x28>
 800120c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001210:	f003 0201 	and.w	r2, r3, #1
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	602a      	str	r2, [r5, #0]
 800121a:	6023      	str	r3, [r4, #0]
 800121c:	b003      	add	sp, #12
 800121e:	bd30      	pop	{r4, r5, pc}
 8001220:	20000004 	.word	0x20000004
 8001224:	20000000 	.word	0x20000000

08001228 <_has_ext_stdout_stderr>:
 8001228:	b510      	push	{r4, lr}
 800122a:	4c04      	ldr	r4, [pc, #16]	@ (800123c <_has_ext_stdout_stderr+0x14>)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	2b00      	cmp	r3, #0
 8001230:	da01      	bge.n	8001236 <_has_ext_stdout_stderr+0xe>
 8001232:	f7ff ffdf 	bl	80011f4 <initialise_semihosting_exts>
 8001236:	6820      	ldr	r0, [r4, #0]
 8001238:	bd10      	pop	{r4, pc}
 800123a:	bf00      	nop
 800123c:	20000000 	.word	0x20000000

08001240 <initialise_monitor_handles>:
 8001240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001244:	b085      	sub	sp, #20
 8001246:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80012f8 <initialise_monitor_handles+0xb8>
 800124a:	f8cd 9004 	str.w	r9, [sp, #4]
 800124e:	2303      	movs	r3, #3
 8001250:	2400      	movs	r4, #0
 8001252:	9303      	str	r3, [sp, #12]
 8001254:	af01      	add	r7, sp, #4
 8001256:	9402      	str	r4, [sp, #8]
 8001258:	2501      	movs	r5, #1
 800125a:	4628      	mov	r0, r5
 800125c:	4639      	mov	r1, r7
 800125e:	beab      	bkpt	0x00ab
 8001260:	4605      	mov	r5, r0
 8001262:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80012fc <initialise_monitor_handles+0xbc>
 8001266:	4623      	mov	r3, r4
 8001268:	4c20      	ldr	r4, [pc, #128]	@ (80012ec <initialise_monitor_handles+0xac>)
 800126a:	f8c8 5000 	str.w	r5, [r8]
 800126e:	f04f 32ff 	mov.w	r2, #4294967295
 8001272:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001276:	3301      	adds	r3, #1
 8001278:	2b14      	cmp	r3, #20
 800127a:	d1fa      	bne.n	8001272 <initialise_monitor_handles+0x32>
 800127c:	f7ff ffd4 	bl	8001228 <_has_ext_stdout_stderr>
 8001280:	4d1b      	ldr	r5, [pc, #108]	@ (80012f0 <initialise_monitor_handles+0xb0>)
 8001282:	b1d0      	cbz	r0, 80012ba <initialise_monitor_handles+0x7a>
 8001284:	f04f 0a03 	mov.w	sl, #3
 8001288:	2304      	movs	r3, #4
 800128a:	f8cd 9004 	str.w	r9, [sp, #4]
 800128e:	2601      	movs	r6, #1
 8001290:	f8cd a00c 	str.w	sl, [sp, #12]
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	4630      	mov	r0, r6
 8001298:	4639      	mov	r1, r7
 800129a:	beab      	bkpt	0x00ab
 800129c:	4683      	mov	fp, r0
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <initialise_monitor_handles+0xb4>)
 80012a0:	f8cd 9004 	str.w	r9, [sp, #4]
 80012a4:	f8c3 b000 	str.w	fp, [r3]
 80012a8:	2308      	movs	r3, #8
 80012aa:	f8cd a00c 	str.w	sl, [sp, #12]
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4630      	mov	r0, r6
 80012b2:	4639      	mov	r1, r7
 80012b4:	beab      	bkpt	0x00ab
 80012b6:	4606      	mov	r6, r0
 80012b8:	602e      	str	r6, [r5, #0]
 80012ba:	682b      	ldr	r3, [r5, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	bf02      	ittt	eq
 80012c0:	4b0c      	ldreq	r3, [pc, #48]	@ (80012f4 <initialise_monitor_handles+0xb4>)
 80012c2:	681b      	ldreq	r3, [r3, #0]
 80012c4:	602b      	streq	r3, [r5, #0]
 80012c6:	2600      	movs	r6, #0
 80012c8:	f8d8 3000 	ldr.w	r3, [r8]
 80012cc:	6023      	str	r3, [r4, #0]
 80012ce:	6066      	str	r6, [r4, #4]
 80012d0:	f7ff ffaa 	bl	8001228 <_has_ext_stdout_stderr>
 80012d4:	b130      	cbz	r0, 80012e4 <initialise_monitor_handles+0xa4>
 80012d6:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <initialise_monitor_handles+0xb4>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80012de:	682b      	ldr	r3, [r5, #0]
 80012e0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80012e4:	b005      	add	sp, #20
 80012e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ea:	bf00      	nop
 80012ec:	200000b4 	.word	0x200000b4
 80012f0:	200000a8 	.word	0x200000a8
 80012f4:	200000ac 	.word	0x200000ac
 80012f8:	080022d4 	.word	0x080022d4
 80012fc:	200000b0 	.word	0x200000b0

08001300 <_isatty>:
 8001300:	b570      	push	{r4, r5, r6, lr}
 8001302:	f7ff fd7f 	bl	8000e04 <findslot>
 8001306:	2409      	movs	r4, #9
 8001308:	4605      	mov	r5, r0
 800130a:	b920      	cbnz	r0, 8001316 <_isatty+0x16>
 800130c:	f000 fa6e 	bl	80017ec <__errno>
 8001310:	6004      	str	r4, [r0, #0]
 8001312:	2000      	movs	r0, #0
 8001314:	bd70      	pop	{r4, r5, r6, pc}
 8001316:	4620      	mov	r0, r4
 8001318:	4629      	mov	r1, r5
 800131a:	beab      	bkpt	0x00ab
 800131c:	4604      	mov	r4, r0
 800131e:	2c01      	cmp	r4, #1
 8001320:	4620      	mov	r0, r4
 8001322:	d0f7      	beq.n	8001314 <_isatty+0x14>
 8001324:	f000 fa62 	bl	80017ec <__errno>
 8001328:	2513      	movs	r5, #19
 800132a:	4604      	mov	r4, r0
 800132c:	2600      	movs	r6, #0
 800132e:	4628      	mov	r0, r5
 8001330:	4631      	mov	r1, r6
 8001332:	beab      	bkpt	0x00ab
 8001334:	4605      	mov	r5, r0
 8001336:	6025      	str	r5, [r4, #0]
 8001338:	e7eb      	b.n	8001312 <_isatty+0x12>
	...

0800133c <std>:
 800133c:	2300      	movs	r3, #0
 800133e:	b510      	push	{r4, lr}
 8001340:	4604      	mov	r4, r0
 8001342:	e9c0 3300 	strd	r3, r3, [r0]
 8001346:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800134a:	6083      	str	r3, [r0, #8]
 800134c:	8181      	strh	r1, [r0, #12]
 800134e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001350:	81c2      	strh	r2, [r0, #14]
 8001352:	6183      	str	r3, [r0, #24]
 8001354:	4619      	mov	r1, r3
 8001356:	2208      	movs	r2, #8
 8001358:	305c      	adds	r0, #92	@ 0x5c
 800135a:	f000 f9f9 	bl	8001750 <memset>
 800135e:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <std+0x58>)
 8001360:	6263      	str	r3, [r4, #36]	@ 0x24
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <std+0x5c>)
 8001364:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001366:	4b0d      	ldr	r3, [pc, #52]	@ (800139c <std+0x60>)
 8001368:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800136a:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <std+0x64>)
 800136c:	6323      	str	r3, [r4, #48]	@ 0x30
 800136e:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <std+0x68>)
 8001370:	6224      	str	r4, [r4, #32]
 8001372:	429c      	cmp	r4, r3
 8001374:	d006      	beq.n	8001384 <std+0x48>
 8001376:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800137a:	4294      	cmp	r4, r2
 800137c:	d002      	beq.n	8001384 <std+0x48>
 800137e:	33d0      	adds	r3, #208	@ 0xd0
 8001380:	429c      	cmp	r4, r3
 8001382:	d105      	bne.n	8001390 <std+0x54>
 8001384:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001388:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800138c:	f000 ba58 	b.w	8001840 <__retarget_lock_init_recursive>
 8001390:	bd10      	pop	{r4, pc}
 8001392:	bf00      	nop
 8001394:	080015a1 	.word	0x080015a1
 8001398:	080015c3 	.word	0x080015c3
 800139c:	080015fb 	.word	0x080015fb
 80013a0:	0800161f 	.word	0x0800161f
 80013a4:	20000154 	.word	0x20000154

080013a8 <stdio_exit_handler>:
 80013a8:	4a02      	ldr	r2, [pc, #8]	@ (80013b4 <stdio_exit_handler+0xc>)
 80013aa:	4903      	ldr	r1, [pc, #12]	@ (80013b8 <stdio_exit_handler+0x10>)
 80013ac:	4803      	ldr	r0, [pc, #12]	@ (80013bc <stdio_exit_handler+0x14>)
 80013ae:	f000 b869 	b.w	8001484 <_fwalk_sglue>
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008
 80013b8:	080020dd 	.word	0x080020dd
 80013bc:	20000018 	.word	0x20000018

080013c0 <cleanup_stdio>:
 80013c0:	6841      	ldr	r1, [r0, #4]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <cleanup_stdio+0x34>)
 80013c4:	4299      	cmp	r1, r3
 80013c6:	b510      	push	{r4, lr}
 80013c8:	4604      	mov	r4, r0
 80013ca:	d001      	beq.n	80013d0 <cleanup_stdio+0x10>
 80013cc:	f000 fe86 	bl	80020dc <_fflush_r>
 80013d0:	68a1      	ldr	r1, [r4, #8]
 80013d2:	4b09      	ldr	r3, [pc, #36]	@ (80013f8 <cleanup_stdio+0x38>)
 80013d4:	4299      	cmp	r1, r3
 80013d6:	d002      	beq.n	80013de <cleanup_stdio+0x1e>
 80013d8:	4620      	mov	r0, r4
 80013da:	f000 fe7f 	bl	80020dc <_fflush_r>
 80013de:	68e1      	ldr	r1, [r4, #12]
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <cleanup_stdio+0x3c>)
 80013e2:	4299      	cmp	r1, r3
 80013e4:	d004      	beq.n	80013f0 <cleanup_stdio+0x30>
 80013e6:	4620      	mov	r0, r4
 80013e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013ec:	f000 be76 	b.w	80020dc <_fflush_r>
 80013f0:	bd10      	pop	{r4, pc}
 80013f2:	bf00      	nop
 80013f4:	20000154 	.word	0x20000154
 80013f8:	200001bc 	.word	0x200001bc
 80013fc:	20000224 	.word	0x20000224

08001400 <global_stdio_init.part.0>:
 8001400:	b510      	push	{r4, lr}
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <global_stdio_init.part.0+0x30>)
 8001404:	4c0b      	ldr	r4, [pc, #44]	@ (8001434 <global_stdio_init.part.0+0x34>)
 8001406:	4a0c      	ldr	r2, [pc, #48]	@ (8001438 <global_stdio_init.part.0+0x38>)
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	4620      	mov	r0, r4
 800140c:	2200      	movs	r2, #0
 800140e:	2104      	movs	r1, #4
 8001410:	f7ff ff94 	bl	800133c <std>
 8001414:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001418:	2201      	movs	r2, #1
 800141a:	2109      	movs	r1, #9
 800141c:	f7ff ff8e 	bl	800133c <std>
 8001420:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001424:	2202      	movs	r2, #2
 8001426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800142a:	2112      	movs	r1, #18
 800142c:	f7ff bf86 	b.w	800133c <std>
 8001430:	2000028c 	.word	0x2000028c
 8001434:	20000154 	.word	0x20000154
 8001438:	080013a9 	.word	0x080013a9

0800143c <__sfp_lock_acquire>:
 800143c:	4801      	ldr	r0, [pc, #4]	@ (8001444 <__sfp_lock_acquire+0x8>)
 800143e:	f000 ba00 	b.w	8001842 <__retarget_lock_acquire_recursive>
 8001442:	bf00      	nop
 8001444:	20000295 	.word	0x20000295

08001448 <__sfp_lock_release>:
 8001448:	4801      	ldr	r0, [pc, #4]	@ (8001450 <__sfp_lock_release+0x8>)
 800144a:	f000 b9fb 	b.w	8001844 <__retarget_lock_release_recursive>
 800144e:	bf00      	nop
 8001450:	20000295 	.word	0x20000295

08001454 <__sinit>:
 8001454:	b510      	push	{r4, lr}
 8001456:	4604      	mov	r4, r0
 8001458:	f7ff fff0 	bl	800143c <__sfp_lock_acquire>
 800145c:	6a23      	ldr	r3, [r4, #32]
 800145e:	b11b      	cbz	r3, 8001468 <__sinit+0x14>
 8001460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001464:	f7ff bff0 	b.w	8001448 <__sfp_lock_release>
 8001468:	4b04      	ldr	r3, [pc, #16]	@ (800147c <__sinit+0x28>)
 800146a:	6223      	str	r3, [r4, #32]
 800146c:	4b04      	ldr	r3, [pc, #16]	@ (8001480 <__sinit+0x2c>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f5      	bne.n	8001460 <__sinit+0xc>
 8001474:	f7ff ffc4 	bl	8001400 <global_stdio_init.part.0>
 8001478:	e7f2      	b.n	8001460 <__sinit+0xc>
 800147a:	bf00      	nop
 800147c:	080013c1 	.word	0x080013c1
 8001480:	2000028c 	.word	0x2000028c

08001484 <_fwalk_sglue>:
 8001484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001488:	4607      	mov	r7, r0
 800148a:	4688      	mov	r8, r1
 800148c:	4614      	mov	r4, r2
 800148e:	2600      	movs	r6, #0
 8001490:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001494:	f1b9 0901 	subs.w	r9, r9, #1
 8001498:	d505      	bpl.n	80014a6 <_fwalk_sglue+0x22>
 800149a:	6824      	ldr	r4, [r4, #0]
 800149c:	2c00      	cmp	r4, #0
 800149e:	d1f7      	bne.n	8001490 <_fwalk_sglue+0xc>
 80014a0:	4630      	mov	r0, r6
 80014a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014a6:	89ab      	ldrh	r3, [r5, #12]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d907      	bls.n	80014bc <_fwalk_sglue+0x38>
 80014ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014b0:	3301      	adds	r3, #1
 80014b2:	d003      	beq.n	80014bc <_fwalk_sglue+0x38>
 80014b4:	4629      	mov	r1, r5
 80014b6:	4638      	mov	r0, r7
 80014b8:	47c0      	blx	r8
 80014ba:	4306      	orrs	r6, r0
 80014bc:	3568      	adds	r5, #104	@ 0x68
 80014be:	e7e9      	b.n	8001494 <_fwalk_sglue+0x10>

080014c0 <iprintf>:
 80014c0:	b40f      	push	{r0, r1, r2, r3}
 80014c2:	b507      	push	{r0, r1, r2, lr}
 80014c4:	4906      	ldr	r1, [pc, #24]	@ (80014e0 <iprintf+0x20>)
 80014c6:	ab04      	add	r3, sp, #16
 80014c8:	6808      	ldr	r0, [r1, #0]
 80014ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80014ce:	6881      	ldr	r1, [r0, #8]
 80014d0:	9301      	str	r3, [sp, #4]
 80014d2:	f000 fadb 	bl	8001a8c <_vfiprintf_r>
 80014d6:	b003      	add	sp, #12
 80014d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80014dc:	b004      	add	sp, #16
 80014de:	4770      	bx	lr
 80014e0:	20000014 	.word	0x20000014

080014e4 <_puts_r>:
 80014e4:	6a03      	ldr	r3, [r0, #32]
 80014e6:	b570      	push	{r4, r5, r6, lr}
 80014e8:	6884      	ldr	r4, [r0, #8]
 80014ea:	4605      	mov	r5, r0
 80014ec:	460e      	mov	r6, r1
 80014ee:	b90b      	cbnz	r3, 80014f4 <_puts_r+0x10>
 80014f0:	f7ff ffb0 	bl	8001454 <__sinit>
 80014f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80014f6:	07db      	lsls	r3, r3, #31
 80014f8:	d405      	bmi.n	8001506 <_puts_r+0x22>
 80014fa:	89a3      	ldrh	r3, [r4, #12]
 80014fc:	0598      	lsls	r0, r3, #22
 80014fe:	d402      	bmi.n	8001506 <_puts_r+0x22>
 8001500:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001502:	f000 f99e 	bl	8001842 <__retarget_lock_acquire_recursive>
 8001506:	89a3      	ldrh	r3, [r4, #12]
 8001508:	0719      	lsls	r1, r3, #28
 800150a:	d502      	bpl.n	8001512 <_puts_r+0x2e>
 800150c:	6923      	ldr	r3, [r4, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d135      	bne.n	800157e <_puts_r+0x9a>
 8001512:	4621      	mov	r1, r4
 8001514:	4628      	mov	r0, r5
 8001516:	f000 f8c5 	bl	80016a4 <__swsetup_r>
 800151a:	b380      	cbz	r0, 800157e <_puts_r+0x9a>
 800151c:	f04f 35ff 	mov.w	r5, #4294967295
 8001520:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001522:	07da      	lsls	r2, r3, #31
 8001524:	d405      	bmi.n	8001532 <_puts_r+0x4e>
 8001526:	89a3      	ldrh	r3, [r4, #12]
 8001528:	059b      	lsls	r3, r3, #22
 800152a:	d402      	bmi.n	8001532 <_puts_r+0x4e>
 800152c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800152e:	f000 f989 	bl	8001844 <__retarget_lock_release_recursive>
 8001532:	4628      	mov	r0, r5
 8001534:	bd70      	pop	{r4, r5, r6, pc}
 8001536:	2b00      	cmp	r3, #0
 8001538:	da04      	bge.n	8001544 <_puts_r+0x60>
 800153a:	69a2      	ldr	r2, [r4, #24]
 800153c:	429a      	cmp	r2, r3
 800153e:	dc17      	bgt.n	8001570 <_puts_r+0x8c>
 8001540:	290a      	cmp	r1, #10
 8001542:	d015      	beq.n	8001570 <_puts_r+0x8c>
 8001544:	6823      	ldr	r3, [r4, #0]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	6022      	str	r2, [r4, #0]
 800154a:	7019      	strb	r1, [r3, #0]
 800154c:	68a3      	ldr	r3, [r4, #8]
 800154e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001552:	3b01      	subs	r3, #1
 8001554:	60a3      	str	r3, [r4, #8]
 8001556:	2900      	cmp	r1, #0
 8001558:	d1ed      	bne.n	8001536 <_puts_r+0x52>
 800155a:	2b00      	cmp	r3, #0
 800155c:	da11      	bge.n	8001582 <_puts_r+0x9e>
 800155e:	4622      	mov	r2, r4
 8001560:	210a      	movs	r1, #10
 8001562:	4628      	mov	r0, r5
 8001564:	f000 f85f 	bl	8001626 <__swbuf_r>
 8001568:	3001      	adds	r0, #1
 800156a:	d0d7      	beq.n	800151c <_puts_r+0x38>
 800156c:	250a      	movs	r5, #10
 800156e:	e7d7      	b.n	8001520 <_puts_r+0x3c>
 8001570:	4622      	mov	r2, r4
 8001572:	4628      	mov	r0, r5
 8001574:	f000 f857 	bl	8001626 <__swbuf_r>
 8001578:	3001      	adds	r0, #1
 800157a:	d1e7      	bne.n	800154c <_puts_r+0x68>
 800157c:	e7ce      	b.n	800151c <_puts_r+0x38>
 800157e:	3e01      	subs	r6, #1
 8001580:	e7e4      	b.n	800154c <_puts_r+0x68>
 8001582:	6823      	ldr	r3, [r4, #0]
 8001584:	1c5a      	adds	r2, r3, #1
 8001586:	6022      	str	r2, [r4, #0]
 8001588:	220a      	movs	r2, #10
 800158a:	701a      	strb	r2, [r3, #0]
 800158c:	e7ee      	b.n	800156c <_puts_r+0x88>
	...

08001590 <puts>:
 8001590:	4b02      	ldr	r3, [pc, #8]	@ (800159c <puts+0xc>)
 8001592:	4601      	mov	r1, r0
 8001594:	6818      	ldr	r0, [r3, #0]
 8001596:	f7ff bfa5 	b.w	80014e4 <_puts_r>
 800159a:	bf00      	nop
 800159c:	20000014 	.word	0x20000014

080015a0 <__sread>:
 80015a0:	b510      	push	{r4, lr}
 80015a2:	460c      	mov	r4, r1
 80015a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015a8:	f000 f8fc 	bl	80017a4 <_read_r>
 80015ac:	2800      	cmp	r0, #0
 80015ae:	bfab      	itete	ge
 80015b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80015b2:	89a3      	ldrhlt	r3, [r4, #12]
 80015b4:	181b      	addge	r3, r3, r0
 80015b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80015ba:	bfac      	ite	ge
 80015bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80015be:	81a3      	strhlt	r3, [r4, #12]
 80015c0:	bd10      	pop	{r4, pc}

080015c2 <__swrite>:
 80015c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80015c6:	461f      	mov	r7, r3
 80015c8:	898b      	ldrh	r3, [r1, #12]
 80015ca:	05db      	lsls	r3, r3, #23
 80015cc:	4605      	mov	r5, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	4616      	mov	r6, r2
 80015d2:	d505      	bpl.n	80015e0 <__swrite+0x1e>
 80015d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015d8:	2302      	movs	r3, #2
 80015da:	2200      	movs	r2, #0
 80015dc:	f000 f8d0 	bl	8001780 <_lseek_r>
 80015e0:	89a3      	ldrh	r3, [r4, #12]
 80015e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015ea:	81a3      	strh	r3, [r4, #12]
 80015ec:	4632      	mov	r2, r6
 80015ee:	463b      	mov	r3, r7
 80015f0:	4628      	mov	r0, r5
 80015f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80015f6:	f000 b8e7 	b.w	80017c8 <_write_r>

080015fa <__sseek>:
 80015fa:	b510      	push	{r4, lr}
 80015fc:	460c      	mov	r4, r1
 80015fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001602:	f000 f8bd 	bl	8001780 <_lseek_r>
 8001606:	1c43      	adds	r3, r0, #1
 8001608:	89a3      	ldrh	r3, [r4, #12]
 800160a:	bf15      	itete	ne
 800160c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800160e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001612:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001616:	81a3      	strheq	r3, [r4, #12]
 8001618:	bf18      	it	ne
 800161a:	81a3      	strhne	r3, [r4, #12]
 800161c:	bd10      	pop	{r4, pc}

0800161e <__sclose>:
 800161e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001622:	f000 b89d 	b.w	8001760 <_close_r>

08001626 <__swbuf_r>:
 8001626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001628:	460e      	mov	r6, r1
 800162a:	4614      	mov	r4, r2
 800162c:	4605      	mov	r5, r0
 800162e:	b118      	cbz	r0, 8001638 <__swbuf_r+0x12>
 8001630:	6a03      	ldr	r3, [r0, #32]
 8001632:	b90b      	cbnz	r3, 8001638 <__swbuf_r+0x12>
 8001634:	f7ff ff0e 	bl	8001454 <__sinit>
 8001638:	69a3      	ldr	r3, [r4, #24]
 800163a:	60a3      	str	r3, [r4, #8]
 800163c:	89a3      	ldrh	r3, [r4, #12]
 800163e:	071a      	lsls	r2, r3, #28
 8001640:	d501      	bpl.n	8001646 <__swbuf_r+0x20>
 8001642:	6923      	ldr	r3, [r4, #16]
 8001644:	b943      	cbnz	r3, 8001658 <__swbuf_r+0x32>
 8001646:	4621      	mov	r1, r4
 8001648:	4628      	mov	r0, r5
 800164a:	f000 f82b 	bl	80016a4 <__swsetup_r>
 800164e:	b118      	cbz	r0, 8001658 <__swbuf_r+0x32>
 8001650:	f04f 37ff 	mov.w	r7, #4294967295
 8001654:	4638      	mov	r0, r7
 8001656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001658:	6823      	ldr	r3, [r4, #0]
 800165a:	6922      	ldr	r2, [r4, #16]
 800165c:	1a98      	subs	r0, r3, r2
 800165e:	6963      	ldr	r3, [r4, #20]
 8001660:	b2f6      	uxtb	r6, r6
 8001662:	4283      	cmp	r3, r0
 8001664:	4637      	mov	r7, r6
 8001666:	dc05      	bgt.n	8001674 <__swbuf_r+0x4e>
 8001668:	4621      	mov	r1, r4
 800166a:	4628      	mov	r0, r5
 800166c:	f000 fd36 	bl	80020dc <_fflush_r>
 8001670:	2800      	cmp	r0, #0
 8001672:	d1ed      	bne.n	8001650 <__swbuf_r+0x2a>
 8001674:	68a3      	ldr	r3, [r4, #8]
 8001676:	3b01      	subs	r3, #1
 8001678:	60a3      	str	r3, [r4, #8]
 800167a:	6823      	ldr	r3, [r4, #0]
 800167c:	1c5a      	adds	r2, r3, #1
 800167e:	6022      	str	r2, [r4, #0]
 8001680:	701e      	strb	r6, [r3, #0]
 8001682:	6962      	ldr	r2, [r4, #20]
 8001684:	1c43      	adds	r3, r0, #1
 8001686:	429a      	cmp	r2, r3
 8001688:	d004      	beq.n	8001694 <__swbuf_r+0x6e>
 800168a:	89a3      	ldrh	r3, [r4, #12]
 800168c:	07db      	lsls	r3, r3, #31
 800168e:	d5e1      	bpl.n	8001654 <__swbuf_r+0x2e>
 8001690:	2e0a      	cmp	r6, #10
 8001692:	d1df      	bne.n	8001654 <__swbuf_r+0x2e>
 8001694:	4621      	mov	r1, r4
 8001696:	4628      	mov	r0, r5
 8001698:	f000 fd20 	bl	80020dc <_fflush_r>
 800169c:	2800      	cmp	r0, #0
 800169e:	d0d9      	beq.n	8001654 <__swbuf_r+0x2e>
 80016a0:	e7d6      	b.n	8001650 <__swbuf_r+0x2a>
	...

080016a4 <__swsetup_r>:
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4b29      	ldr	r3, [pc, #164]	@ (800174c <__swsetup_r+0xa8>)
 80016a8:	4605      	mov	r5, r0
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	460c      	mov	r4, r1
 80016ae:	b118      	cbz	r0, 80016b8 <__swsetup_r+0x14>
 80016b0:	6a03      	ldr	r3, [r0, #32]
 80016b2:	b90b      	cbnz	r3, 80016b8 <__swsetup_r+0x14>
 80016b4:	f7ff fece 	bl	8001454 <__sinit>
 80016b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016bc:	0719      	lsls	r1, r3, #28
 80016be:	d422      	bmi.n	8001706 <__swsetup_r+0x62>
 80016c0:	06da      	lsls	r2, r3, #27
 80016c2:	d407      	bmi.n	80016d4 <__swsetup_r+0x30>
 80016c4:	2209      	movs	r2, #9
 80016c6:	602a      	str	r2, [r5, #0]
 80016c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016cc:	81a3      	strh	r3, [r4, #12]
 80016ce:	f04f 30ff 	mov.w	r0, #4294967295
 80016d2:	e033      	b.n	800173c <__swsetup_r+0x98>
 80016d4:	0758      	lsls	r0, r3, #29
 80016d6:	d512      	bpl.n	80016fe <__swsetup_r+0x5a>
 80016d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016da:	b141      	cbz	r1, 80016ee <__swsetup_r+0x4a>
 80016dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80016e0:	4299      	cmp	r1, r3
 80016e2:	d002      	beq.n	80016ea <__swsetup_r+0x46>
 80016e4:	4628      	mov	r0, r5
 80016e6:	f000 f8af 	bl	8001848 <_free_r>
 80016ea:	2300      	movs	r3, #0
 80016ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80016ee:	89a3      	ldrh	r3, [r4, #12]
 80016f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80016f4:	81a3      	strh	r3, [r4, #12]
 80016f6:	2300      	movs	r3, #0
 80016f8:	6063      	str	r3, [r4, #4]
 80016fa:	6923      	ldr	r3, [r4, #16]
 80016fc:	6023      	str	r3, [r4, #0]
 80016fe:	89a3      	ldrh	r3, [r4, #12]
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	81a3      	strh	r3, [r4, #12]
 8001706:	6923      	ldr	r3, [r4, #16]
 8001708:	b94b      	cbnz	r3, 800171e <__swsetup_r+0x7a>
 800170a:	89a3      	ldrh	r3, [r4, #12]
 800170c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001710:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001714:	d003      	beq.n	800171e <__swsetup_r+0x7a>
 8001716:	4621      	mov	r1, r4
 8001718:	4628      	mov	r0, r5
 800171a:	f000 fd2d 	bl	8002178 <__smakebuf_r>
 800171e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001722:	f013 0201 	ands.w	r2, r3, #1
 8001726:	d00a      	beq.n	800173e <__swsetup_r+0x9a>
 8001728:	2200      	movs	r2, #0
 800172a:	60a2      	str	r2, [r4, #8]
 800172c:	6962      	ldr	r2, [r4, #20]
 800172e:	4252      	negs	r2, r2
 8001730:	61a2      	str	r2, [r4, #24]
 8001732:	6922      	ldr	r2, [r4, #16]
 8001734:	b942      	cbnz	r2, 8001748 <__swsetup_r+0xa4>
 8001736:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800173a:	d1c5      	bne.n	80016c8 <__swsetup_r+0x24>
 800173c:	bd38      	pop	{r3, r4, r5, pc}
 800173e:	0799      	lsls	r1, r3, #30
 8001740:	bf58      	it	pl
 8001742:	6962      	ldrpl	r2, [r4, #20]
 8001744:	60a2      	str	r2, [r4, #8]
 8001746:	e7f4      	b.n	8001732 <__swsetup_r+0x8e>
 8001748:	2000      	movs	r0, #0
 800174a:	e7f7      	b.n	800173c <__swsetup_r+0x98>
 800174c:	20000014 	.word	0x20000014

08001750 <memset>:
 8001750:	4402      	add	r2, r0
 8001752:	4603      	mov	r3, r0
 8001754:	4293      	cmp	r3, r2
 8001756:	d100      	bne.n	800175a <memset+0xa>
 8001758:	4770      	bx	lr
 800175a:	f803 1b01 	strb.w	r1, [r3], #1
 800175e:	e7f9      	b.n	8001754 <memset+0x4>

08001760 <_close_r>:
 8001760:	b538      	push	{r3, r4, r5, lr}
 8001762:	4d06      	ldr	r5, [pc, #24]	@ (800177c <_close_r+0x1c>)
 8001764:	2300      	movs	r3, #0
 8001766:	4604      	mov	r4, r0
 8001768:	4608      	mov	r0, r1
 800176a:	602b      	str	r3, [r5, #0]
 800176c:	f7ff fc1c 	bl	8000fa8 <_close>
 8001770:	1c43      	adds	r3, r0, #1
 8001772:	d102      	bne.n	800177a <_close_r+0x1a>
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	b103      	cbz	r3, 800177a <_close_r+0x1a>
 8001778:	6023      	str	r3, [r4, #0]
 800177a:	bd38      	pop	{r3, r4, r5, pc}
 800177c:	20000290 	.word	0x20000290

08001780 <_lseek_r>:
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	4d07      	ldr	r5, [pc, #28]	@ (80017a0 <_lseek_r+0x20>)
 8001784:	4604      	mov	r4, r0
 8001786:	4608      	mov	r0, r1
 8001788:	4611      	mov	r1, r2
 800178a:	2200      	movs	r2, #0
 800178c:	602a      	str	r2, [r5, #0]
 800178e:	461a      	mov	r2, r3
 8001790:	f7ff fbcb 	bl	8000f2a <_lseek>
 8001794:	1c43      	adds	r3, r0, #1
 8001796:	d102      	bne.n	800179e <_lseek_r+0x1e>
 8001798:	682b      	ldr	r3, [r5, #0]
 800179a:	b103      	cbz	r3, 800179e <_lseek_r+0x1e>
 800179c:	6023      	str	r3, [r4, #0]
 800179e:	bd38      	pop	{r3, r4, r5, pc}
 80017a0:	20000290 	.word	0x20000290

080017a4 <_read_r>:
 80017a4:	b538      	push	{r3, r4, r5, lr}
 80017a6:	4d07      	ldr	r5, [pc, #28]	@ (80017c4 <_read_r+0x20>)
 80017a8:	4604      	mov	r4, r0
 80017aa:	4608      	mov	r0, r1
 80017ac:	4611      	mov	r1, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	602a      	str	r2, [r5, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	f7ff fb63 	bl	8000e7e <_read>
 80017b8:	1c43      	adds	r3, r0, #1
 80017ba:	d102      	bne.n	80017c2 <_read_r+0x1e>
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	b103      	cbz	r3, 80017c2 <_read_r+0x1e>
 80017c0:	6023      	str	r3, [r4, #0]
 80017c2:	bd38      	pop	{r3, r4, r5, pc}
 80017c4:	20000290 	.word	0x20000290

080017c8 <_write_r>:
 80017c8:	b538      	push	{r3, r4, r5, lr}
 80017ca:	4d07      	ldr	r5, [pc, #28]	@ (80017e8 <_write_r+0x20>)
 80017cc:	4604      	mov	r4, r0
 80017ce:	4608      	mov	r0, r1
 80017d0:	4611      	mov	r1, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	602a      	str	r2, [r5, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	f7ff fbb9 	bl	8000f4e <_write>
 80017dc:	1c43      	adds	r3, r0, #1
 80017de:	d102      	bne.n	80017e6 <_write_r+0x1e>
 80017e0:	682b      	ldr	r3, [r5, #0]
 80017e2:	b103      	cbz	r3, 80017e6 <_write_r+0x1e>
 80017e4:	6023      	str	r3, [r4, #0]
 80017e6:	bd38      	pop	{r3, r4, r5, pc}
 80017e8:	20000290 	.word	0x20000290

080017ec <__errno>:
 80017ec:	4b01      	ldr	r3, [pc, #4]	@ (80017f4 <__errno+0x8>)
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	20000014 	.word	0x20000014

080017f8 <__libc_init_array>:
 80017f8:	b570      	push	{r4, r5, r6, lr}
 80017fa:	4d0d      	ldr	r5, [pc, #52]	@ (8001830 <__libc_init_array+0x38>)
 80017fc:	4c0d      	ldr	r4, [pc, #52]	@ (8001834 <__libc_init_array+0x3c>)
 80017fe:	1b64      	subs	r4, r4, r5
 8001800:	10a4      	asrs	r4, r4, #2
 8001802:	2600      	movs	r6, #0
 8001804:	42a6      	cmp	r6, r4
 8001806:	d109      	bne.n	800181c <__libc_init_array+0x24>
 8001808:	4d0b      	ldr	r5, [pc, #44]	@ (8001838 <__libc_init_array+0x40>)
 800180a:	4c0c      	ldr	r4, [pc, #48]	@ (800183c <__libc_init_array+0x44>)
 800180c:	f000 fd22 	bl	8002254 <_init>
 8001810:	1b64      	subs	r4, r4, r5
 8001812:	10a4      	asrs	r4, r4, #2
 8001814:	2600      	movs	r6, #0
 8001816:	42a6      	cmp	r6, r4
 8001818:	d105      	bne.n	8001826 <__libc_init_array+0x2e>
 800181a:	bd70      	pop	{r4, r5, r6, pc}
 800181c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001820:	4798      	blx	r3
 8001822:	3601      	adds	r6, #1
 8001824:	e7ee      	b.n	8001804 <__libc_init_array+0xc>
 8001826:	f855 3b04 	ldr.w	r3, [r5], #4
 800182a:	4798      	blx	r3
 800182c:	3601      	adds	r6, #1
 800182e:	e7f2      	b.n	8001816 <__libc_init_array+0x1e>
 8001830:	08002314 	.word	0x08002314
 8001834:	08002314 	.word	0x08002314
 8001838:	08002314 	.word	0x08002314
 800183c:	08002318 	.word	0x08002318

08001840 <__retarget_lock_init_recursive>:
 8001840:	4770      	bx	lr

08001842 <__retarget_lock_acquire_recursive>:
 8001842:	4770      	bx	lr

08001844 <__retarget_lock_release_recursive>:
 8001844:	4770      	bx	lr
	...

08001848 <_free_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4605      	mov	r5, r0
 800184c:	2900      	cmp	r1, #0
 800184e:	d041      	beq.n	80018d4 <_free_r+0x8c>
 8001850:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001854:	1f0c      	subs	r4, r1, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	bfb8      	it	lt
 800185a:	18e4      	addlt	r4, r4, r3
 800185c:	f000 f8e0 	bl	8001a20 <__malloc_lock>
 8001860:	4a1d      	ldr	r2, [pc, #116]	@ (80018d8 <_free_r+0x90>)
 8001862:	6813      	ldr	r3, [r2, #0]
 8001864:	b933      	cbnz	r3, 8001874 <_free_r+0x2c>
 8001866:	6063      	str	r3, [r4, #4]
 8001868:	6014      	str	r4, [r2, #0]
 800186a:	4628      	mov	r0, r5
 800186c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001870:	f000 b8dc 	b.w	8001a2c <__malloc_unlock>
 8001874:	42a3      	cmp	r3, r4
 8001876:	d908      	bls.n	800188a <_free_r+0x42>
 8001878:	6820      	ldr	r0, [r4, #0]
 800187a:	1821      	adds	r1, r4, r0
 800187c:	428b      	cmp	r3, r1
 800187e:	bf01      	itttt	eq
 8001880:	6819      	ldreq	r1, [r3, #0]
 8001882:	685b      	ldreq	r3, [r3, #4]
 8001884:	1809      	addeq	r1, r1, r0
 8001886:	6021      	streq	r1, [r4, #0]
 8001888:	e7ed      	b.n	8001866 <_free_r+0x1e>
 800188a:	461a      	mov	r2, r3
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	b10b      	cbz	r3, 8001894 <_free_r+0x4c>
 8001890:	42a3      	cmp	r3, r4
 8001892:	d9fa      	bls.n	800188a <_free_r+0x42>
 8001894:	6811      	ldr	r1, [r2, #0]
 8001896:	1850      	adds	r0, r2, r1
 8001898:	42a0      	cmp	r0, r4
 800189a:	d10b      	bne.n	80018b4 <_free_r+0x6c>
 800189c:	6820      	ldr	r0, [r4, #0]
 800189e:	4401      	add	r1, r0
 80018a0:	1850      	adds	r0, r2, r1
 80018a2:	4283      	cmp	r3, r0
 80018a4:	6011      	str	r1, [r2, #0]
 80018a6:	d1e0      	bne.n	800186a <_free_r+0x22>
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	6053      	str	r3, [r2, #4]
 80018ae:	4408      	add	r0, r1
 80018b0:	6010      	str	r0, [r2, #0]
 80018b2:	e7da      	b.n	800186a <_free_r+0x22>
 80018b4:	d902      	bls.n	80018bc <_free_r+0x74>
 80018b6:	230c      	movs	r3, #12
 80018b8:	602b      	str	r3, [r5, #0]
 80018ba:	e7d6      	b.n	800186a <_free_r+0x22>
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	1821      	adds	r1, r4, r0
 80018c0:	428b      	cmp	r3, r1
 80018c2:	bf04      	itt	eq
 80018c4:	6819      	ldreq	r1, [r3, #0]
 80018c6:	685b      	ldreq	r3, [r3, #4]
 80018c8:	6063      	str	r3, [r4, #4]
 80018ca:	bf04      	itt	eq
 80018cc:	1809      	addeq	r1, r1, r0
 80018ce:	6021      	streq	r1, [r4, #0]
 80018d0:	6054      	str	r4, [r2, #4]
 80018d2:	e7ca      	b.n	800186a <_free_r+0x22>
 80018d4:	bd38      	pop	{r3, r4, r5, pc}
 80018d6:	bf00      	nop
 80018d8:	2000029c 	.word	0x2000029c

080018dc <sbrk_aligned>:
 80018dc:	b570      	push	{r4, r5, r6, lr}
 80018de:	4e0f      	ldr	r6, [pc, #60]	@ (800191c <sbrk_aligned+0x40>)
 80018e0:	460c      	mov	r4, r1
 80018e2:	6831      	ldr	r1, [r6, #0]
 80018e4:	4605      	mov	r5, r0
 80018e6:	b911      	cbnz	r1, 80018ee <sbrk_aligned+0x12>
 80018e8:	f000 fca4 	bl	8002234 <_sbrk_r>
 80018ec:	6030      	str	r0, [r6, #0]
 80018ee:	4621      	mov	r1, r4
 80018f0:	4628      	mov	r0, r5
 80018f2:	f000 fc9f 	bl	8002234 <_sbrk_r>
 80018f6:	1c43      	adds	r3, r0, #1
 80018f8:	d103      	bne.n	8001902 <sbrk_aligned+0x26>
 80018fa:	f04f 34ff 	mov.w	r4, #4294967295
 80018fe:	4620      	mov	r0, r4
 8001900:	bd70      	pop	{r4, r5, r6, pc}
 8001902:	1cc4      	adds	r4, r0, #3
 8001904:	f024 0403 	bic.w	r4, r4, #3
 8001908:	42a0      	cmp	r0, r4
 800190a:	d0f8      	beq.n	80018fe <sbrk_aligned+0x22>
 800190c:	1a21      	subs	r1, r4, r0
 800190e:	4628      	mov	r0, r5
 8001910:	f000 fc90 	bl	8002234 <_sbrk_r>
 8001914:	3001      	adds	r0, #1
 8001916:	d1f2      	bne.n	80018fe <sbrk_aligned+0x22>
 8001918:	e7ef      	b.n	80018fa <sbrk_aligned+0x1e>
 800191a:	bf00      	nop
 800191c:	20000298 	.word	0x20000298

08001920 <_malloc_r>:
 8001920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001924:	1ccd      	adds	r5, r1, #3
 8001926:	f025 0503 	bic.w	r5, r5, #3
 800192a:	3508      	adds	r5, #8
 800192c:	2d0c      	cmp	r5, #12
 800192e:	bf38      	it	cc
 8001930:	250c      	movcc	r5, #12
 8001932:	2d00      	cmp	r5, #0
 8001934:	4606      	mov	r6, r0
 8001936:	db01      	blt.n	800193c <_malloc_r+0x1c>
 8001938:	42a9      	cmp	r1, r5
 800193a:	d904      	bls.n	8001946 <_malloc_r+0x26>
 800193c:	230c      	movs	r3, #12
 800193e:	6033      	str	r3, [r6, #0]
 8001940:	2000      	movs	r0, #0
 8001942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001946:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001a1c <_malloc_r+0xfc>
 800194a:	f000 f869 	bl	8001a20 <__malloc_lock>
 800194e:	f8d8 3000 	ldr.w	r3, [r8]
 8001952:	461c      	mov	r4, r3
 8001954:	bb44      	cbnz	r4, 80019a8 <_malloc_r+0x88>
 8001956:	4629      	mov	r1, r5
 8001958:	4630      	mov	r0, r6
 800195a:	f7ff ffbf 	bl	80018dc <sbrk_aligned>
 800195e:	1c43      	adds	r3, r0, #1
 8001960:	4604      	mov	r4, r0
 8001962:	d158      	bne.n	8001a16 <_malloc_r+0xf6>
 8001964:	f8d8 4000 	ldr.w	r4, [r8]
 8001968:	4627      	mov	r7, r4
 800196a:	2f00      	cmp	r7, #0
 800196c:	d143      	bne.n	80019f6 <_malloc_r+0xd6>
 800196e:	2c00      	cmp	r4, #0
 8001970:	d04b      	beq.n	8001a0a <_malloc_r+0xea>
 8001972:	6823      	ldr	r3, [r4, #0]
 8001974:	4639      	mov	r1, r7
 8001976:	4630      	mov	r0, r6
 8001978:	eb04 0903 	add.w	r9, r4, r3
 800197c:	f000 fc5a 	bl	8002234 <_sbrk_r>
 8001980:	4581      	cmp	r9, r0
 8001982:	d142      	bne.n	8001a0a <_malloc_r+0xea>
 8001984:	6821      	ldr	r1, [r4, #0]
 8001986:	1a6d      	subs	r5, r5, r1
 8001988:	4629      	mov	r1, r5
 800198a:	4630      	mov	r0, r6
 800198c:	f7ff ffa6 	bl	80018dc <sbrk_aligned>
 8001990:	3001      	adds	r0, #1
 8001992:	d03a      	beq.n	8001a0a <_malloc_r+0xea>
 8001994:	6823      	ldr	r3, [r4, #0]
 8001996:	442b      	add	r3, r5
 8001998:	6023      	str	r3, [r4, #0]
 800199a:	f8d8 3000 	ldr.w	r3, [r8]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	bb62      	cbnz	r2, 80019fc <_malloc_r+0xdc>
 80019a2:	f8c8 7000 	str.w	r7, [r8]
 80019a6:	e00f      	b.n	80019c8 <_malloc_r+0xa8>
 80019a8:	6822      	ldr	r2, [r4, #0]
 80019aa:	1b52      	subs	r2, r2, r5
 80019ac:	d420      	bmi.n	80019f0 <_malloc_r+0xd0>
 80019ae:	2a0b      	cmp	r2, #11
 80019b0:	d917      	bls.n	80019e2 <_malloc_r+0xc2>
 80019b2:	1961      	adds	r1, r4, r5
 80019b4:	42a3      	cmp	r3, r4
 80019b6:	6025      	str	r5, [r4, #0]
 80019b8:	bf18      	it	ne
 80019ba:	6059      	strne	r1, [r3, #4]
 80019bc:	6863      	ldr	r3, [r4, #4]
 80019be:	bf08      	it	eq
 80019c0:	f8c8 1000 	streq.w	r1, [r8]
 80019c4:	5162      	str	r2, [r4, r5]
 80019c6:	604b      	str	r3, [r1, #4]
 80019c8:	4630      	mov	r0, r6
 80019ca:	f000 f82f 	bl	8001a2c <__malloc_unlock>
 80019ce:	f104 000b 	add.w	r0, r4, #11
 80019d2:	1d23      	adds	r3, r4, #4
 80019d4:	f020 0007 	bic.w	r0, r0, #7
 80019d8:	1ac2      	subs	r2, r0, r3
 80019da:	bf1c      	itt	ne
 80019dc:	1a1b      	subne	r3, r3, r0
 80019de:	50a3      	strne	r3, [r4, r2]
 80019e0:	e7af      	b.n	8001942 <_malloc_r+0x22>
 80019e2:	6862      	ldr	r2, [r4, #4]
 80019e4:	42a3      	cmp	r3, r4
 80019e6:	bf0c      	ite	eq
 80019e8:	f8c8 2000 	streq.w	r2, [r8]
 80019ec:	605a      	strne	r2, [r3, #4]
 80019ee:	e7eb      	b.n	80019c8 <_malloc_r+0xa8>
 80019f0:	4623      	mov	r3, r4
 80019f2:	6864      	ldr	r4, [r4, #4]
 80019f4:	e7ae      	b.n	8001954 <_malloc_r+0x34>
 80019f6:	463c      	mov	r4, r7
 80019f8:	687f      	ldr	r7, [r7, #4]
 80019fa:	e7b6      	b.n	800196a <_malloc_r+0x4a>
 80019fc:	461a      	mov	r2, r3
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	42a3      	cmp	r3, r4
 8001a02:	d1fb      	bne.n	80019fc <_malloc_r+0xdc>
 8001a04:	2300      	movs	r3, #0
 8001a06:	6053      	str	r3, [r2, #4]
 8001a08:	e7de      	b.n	80019c8 <_malloc_r+0xa8>
 8001a0a:	230c      	movs	r3, #12
 8001a0c:	6033      	str	r3, [r6, #0]
 8001a0e:	4630      	mov	r0, r6
 8001a10:	f000 f80c 	bl	8001a2c <__malloc_unlock>
 8001a14:	e794      	b.n	8001940 <_malloc_r+0x20>
 8001a16:	6005      	str	r5, [r0, #0]
 8001a18:	e7d6      	b.n	80019c8 <_malloc_r+0xa8>
 8001a1a:	bf00      	nop
 8001a1c:	2000029c 	.word	0x2000029c

08001a20 <__malloc_lock>:
 8001a20:	4801      	ldr	r0, [pc, #4]	@ (8001a28 <__malloc_lock+0x8>)
 8001a22:	f7ff bf0e 	b.w	8001842 <__retarget_lock_acquire_recursive>
 8001a26:	bf00      	nop
 8001a28:	20000294 	.word	0x20000294

08001a2c <__malloc_unlock>:
 8001a2c:	4801      	ldr	r0, [pc, #4]	@ (8001a34 <__malloc_unlock+0x8>)
 8001a2e:	f7ff bf09 	b.w	8001844 <__retarget_lock_release_recursive>
 8001a32:	bf00      	nop
 8001a34:	20000294 	.word	0x20000294

08001a38 <__sfputc_r>:
 8001a38:	6893      	ldr	r3, [r2, #8]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	b410      	push	{r4}
 8001a40:	6093      	str	r3, [r2, #8]
 8001a42:	da08      	bge.n	8001a56 <__sfputc_r+0x1e>
 8001a44:	6994      	ldr	r4, [r2, #24]
 8001a46:	42a3      	cmp	r3, r4
 8001a48:	db01      	blt.n	8001a4e <__sfputc_r+0x16>
 8001a4a:	290a      	cmp	r1, #10
 8001a4c:	d103      	bne.n	8001a56 <__sfputc_r+0x1e>
 8001a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a52:	f7ff bde8 	b.w	8001626 <__swbuf_r>
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	1c58      	adds	r0, r3, #1
 8001a5a:	6010      	str	r0, [r2, #0]
 8001a5c:	7019      	strb	r1, [r3, #0]
 8001a5e:	4608      	mov	r0, r1
 8001a60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <__sfputs_r>:
 8001a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a68:	4606      	mov	r6, r0
 8001a6a:	460f      	mov	r7, r1
 8001a6c:	4614      	mov	r4, r2
 8001a6e:	18d5      	adds	r5, r2, r3
 8001a70:	42ac      	cmp	r4, r5
 8001a72:	d101      	bne.n	8001a78 <__sfputs_r+0x12>
 8001a74:	2000      	movs	r0, #0
 8001a76:	e007      	b.n	8001a88 <__sfputs_r+0x22>
 8001a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a7c:	463a      	mov	r2, r7
 8001a7e:	4630      	mov	r0, r6
 8001a80:	f7ff ffda 	bl	8001a38 <__sfputc_r>
 8001a84:	1c43      	adds	r3, r0, #1
 8001a86:	d1f3      	bne.n	8001a70 <__sfputs_r+0xa>
 8001a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001a8c <_vfiprintf_r>:
 8001a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a90:	460d      	mov	r5, r1
 8001a92:	b09d      	sub	sp, #116	@ 0x74
 8001a94:	4614      	mov	r4, r2
 8001a96:	4698      	mov	r8, r3
 8001a98:	4606      	mov	r6, r0
 8001a9a:	b118      	cbz	r0, 8001aa4 <_vfiprintf_r+0x18>
 8001a9c:	6a03      	ldr	r3, [r0, #32]
 8001a9e:	b90b      	cbnz	r3, 8001aa4 <_vfiprintf_r+0x18>
 8001aa0:	f7ff fcd8 	bl	8001454 <__sinit>
 8001aa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001aa6:	07d9      	lsls	r1, r3, #31
 8001aa8:	d405      	bmi.n	8001ab6 <_vfiprintf_r+0x2a>
 8001aaa:	89ab      	ldrh	r3, [r5, #12]
 8001aac:	059a      	lsls	r2, r3, #22
 8001aae:	d402      	bmi.n	8001ab6 <_vfiprintf_r+0x2a>
 8001ab0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ab2:	f7ff fec6 	bl	8001842 <__retarget_lock_acquire_recursive>
 8001ab6:	89ab      	ldrh	r3, [r5, #12]
 8001ab8:	071b      	lsls	r3, r3, #28
 8001aba:	d501      	bpl.n	8001ac0 <_vfiprintf_r+0x34>
 8001abc:	692b      	ldr	r3, [r5, #16]
 8001abe:	b99b      	cbnz	r3, 8001ae8 <_vfiprintf_r+0x5c>
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	4630      	mov	r0, r6
 8001ac4:	f7ff fdee 	bl	80016a4 <__swsetup_r>
 8001ac8:	b170      	cbz	r0, 8001ae8 <_vfiprintf_r+0x5c>
 8001aca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001acc:	07dc      	lsls	r4, r3, #31
 8001ace:	d504      	bpl.n	8001ada <_vfiprintf_r+0x4e>
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	b01d      	add	sp, #116	@ 0x74
 8001ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ada:	89ab      	ldrh	r3, [r5, #12]
 8001adc:	0598      	lsls	r0, r3, #22
 8001ade:	d4f7      	bmi.n	8001ad0 <_vfiprintf_r+0x44>
 8001ae0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ae2:	f7ff feaf 	bl	8001844 <__retarget_lock_release_recursive>
 8001ae6:	e7f3      	b.n	8001ad0 <_vfiprintf_r+0x44>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8001aec:	2320      	movs	r3, #32
 8001aee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001af2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001af6:	2330      	movs	r3, #48	@ 0x30
 8001af8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001ca8 <_vfiprintf_r+0x21c>
 8001afc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001b00:	f04f 0901 	mov.w	r9, #1
 8001b04:	4623      	mov	r3, r4
 8001b06:	469a      	mov	sl, r3
 8001b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001b0c:	b10a      	cbz	r2, 8001b12 <_vfiprintf_r+0x86>
 8001b0e:	2a25      	cmp	r2, #37	@ 0x25
 8001b10:	d1f9      	bne.n	8001b06 <_vfiprintf_r+0x7a>
 8001b12:	ebba 0b04 	subs.w	fp, sl, r4
 8001b16:	d00b      	beq.n	8001b30 <_vfiprintf_r+0xa4>
 8001b18:	465b      	mov	r3, fp
 8001b1a:	4622      	mov	r2, r4
 8001b1c:	4629      	mov	r1, r5
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f7ff ffa1 	bl	8001a66 <__sfputs_r>
 8001b24:	3001      	adds	r0, #1
 8001b26:	f000 80a7 	beq.w	8001c78 <_vfiprintf_r+0x1ec>
 8001b2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001b2c:	445a      	add	r2, fp
 8001b2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001b30:	f89a 3000 	ldrb.w	r3, [sl]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f000 809f 	beq.w	8001c78 <_vfiprintf_r+0x1ec>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b44:	f10a 0a01 	add.w	sl, sl, #1
 8001b48:	9304      	str	r3, [sp, #16]
 8001b4a:	9307      	str	r3, [sp, #28]
 8001b4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b50:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b52:	4654      	mov	r4, sl
 8001b54:	2205      	movs	r2, #5
 8001b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b5a:	4853      	ldr	r0, [pc, #332]	@ (8001ca8 <_vfiprintf_r+0x21c>)
 8001b5c:	f7fe fb40 	bl	80001e0 <memchr>
 8001b60:	9a04      	ldr	r2, [sp, #16]
 8001b62:	b9d8      	cbnz	r0, 8001b9c <_vfiprintf_r+0x110>
 8001b64:	06d1      	lsls	r1, r2, #27
 8001b66:	bf44      	itt	mi
 8001b68:	2320      	movmi	r3, #32
 8001b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b6e:	0713      	lsls	r3, r2, #28
 8001b70:	bf44      	itt	mi
 8001b72:	232b      	movmi	r3, #43	@ 0x2b
 8001b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b78:	f89a 3000 	ldrb.w	r3, [sl]
 8001b7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b7e:	d015      	beq.n	8001bac <_vfiprintf_r+0x120>
 8001b80:	9a07      	ldr	r2, [sp, #28]
 8001b82:	4654      	mov	r4, sl
 8001b84:	2000      	movs	r0, #0
 8001b86:	f04f 0c0a 	mov.w	ip, #10
 8001b8a:	4621      	mov	r1, r4
 8001b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b90:	3b30      	subs	r3, #48	@ 0x30
 8001b92:	2b09      	cmp	r3, #9
 8001b94:	d94b      	bls.n	8001c2e <_vfiprintf_r+0x1a2>
 8001b96:	b1b0      	cbz	r0, 8001bc6 <_vfiprintf_r+0x13a>
 8001b98:	9207      	str	r2, [sp, #28]
 8001b9a:	e014      	b.n	8001bc6 <_vfiprintf_r+0x13a>
 8001b9c:	eba0 0308 	sub.w	r3, r0, r8
 8001ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	9304      	str	r3, [sp, #16]
 8001ba8:	46a2      	mov	sl, r4
 8001baa:	e7d2      	b.n	8001b52 <_vfiprintf_r+0xc6>
 8001bac:	9b03      	ldr	r3, [sp, #12]
 8001bae:	1d19      	adds	r1, r3, #4
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	9103      	str	r1, [sp, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bfbb      	ittet	lt
 8001bb8:	425b      	neglt	r3, r3
 8001bba:	f042 0202 	orrlt.w	r2, r2, #2
 8001bbe:	9307      	strge	r3, [sp, #28]
 8001bc0:	9307      	strlt	r3, [sp, #28]
 8001bc2:	bfb8      	it	lt
 8001bc4:	9204      	strlt	r2, [sp, #16]
 8001bc6:	7823      	ldrb	r3, [r4, #0]
 8001bc8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001bca:	d10a      	bne.n	8001be2 <_vfiprintf_r+0x156>
 8001bcc:	7863      	ldrb	r3, [r4, #1]
 8001bce:	2b2a      	cmp	r3, #42	@ 0x2a
 8001bd0:	d132      	bne.n	8001c38 <_vfiprintf_r+0x1ac>
 8001bd2:	9b03      	ldr	r3, [sp, #12]
 8001bd4:	1d1a      	adds	r2, r3, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	9203      	str	r2, [sp, #12]
 8001bda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001bde:	3402      	adds	r4, #2
 8001be0:	9305      	str	r3, [sp, #20]
 8001be2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001cb8 <_vfiprintf_r+0x22c>
 8001be6:	7821      	ldrb	r1, [r4, #0]
 8001be8:	2203      	movs	r2, #3
 8001bea:	4650      	mov	r0, sl
 8001bec:	f7fe faf8 	bl	80001e0 <memchr>
 8001bf0:	b138      	cbz	r0, 8001c02 <_vfiprintf_r+0x176>
 8001bf2:	9b04      	ldr	r3, [sp, #16]
 8001bf4:	eba0 000a 	sub.w	r0, r0, sl
 8001bf8:	2240      	movs	r2, #64	@ 0x40
 8001bfa:	4082      	lsls	r2, r0
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	3401      	adds	r4, #1
 8001c00:	9304      	str	r3, [sp, #16]
 8001c02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c06:	4829      	ldr	r0, [pc, #164]	@ (8001cac <_vfiprintf_r+0x220>)
 8001c08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001c0c:	2206      	movs	r2, #6
 8001c0e:	f7fe fae7 	bl	80001e0 <memchr>
 8001c12:	2800      	cmp	r0, #0
 8001c14:	d03f      	beq.n	8001c96 <_vfiprintf_r+0x20a>
 8001c16:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <_vfiprintf_r+0x224>)
 8001c18:	bb1b      	cbnz	r3, 8001c62 <_vfiprintf_r+0x1d6>
 8001c1a:	9b03      	ldr	r3, [sp, #12]
 8001c1c:	3307      	adds	r3, #7
 8001c1e:	f023 0307 	bic.w	r3, r3, #7
 8001c22:	3308      	adds	r3, #8
 8001c24:	9303      	str	r3, [sp, #12]
 8001c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001c28:	443b      	add	r3, r7
 8001c2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c2c:	e76a      	b.n	8001b04 <_vfiprintf_r+0x78>
 8001c2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c32:	460c      	mov	r4, r1
 8001c34:	2001      	movs	r0, #1
 8001c36:	e7a8      	b.n	8001b8a <_vfiprintf_r+0xfe>
 8001c38:	2300      	movs	r3, #0
 8001c3a:	3401      	adds	r4, #1
 8001c3c:	9305      	str	r3, [sp, #20]
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f04f 0c0a 	mov.w	ip, #10
 8001c44:	4620      	mov	r0, r4
 8001c46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c4a:	3a30      	subs	r2, #48	@ 0x30
 8001c4c:	2a09      	cmp	r2, #9
 8001c4e:	d903      	bls.n	8001c58 <_vfiprintf_r+0x1cc>
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d0c6      	beq.n	8001be2 <_vfiprintf_r+0x156>
 8001c54:	9105      	str	r1, [sp, #20]
 8001c56:	e7c4      	b.n	8001be2 <_vfiprintf_r+0x156>
 8001c58:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c5c:	4604      	mov	r4, r0
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e7f0      	b.n	8001c44 <_vfiprintf_r+0x1b8>
 8001c62:	ab03      	add	r3, sp, #12
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	462a      	mov	r2, r5
 8001c68:	4b12      	ldr	r3, [pc, #72]	@ (8001cb4 <_vfiprintf_r+0x228>)
 8001c6a:	a904      	add	r1, sp, #16
 8001c6c:	4630      	mov	r0, r6
 8001c6e:	f3af 8000 	nop.w
 8001c72:	4607      	mov	r7, r0
 8001c74:	1c78      	adds	r0, r7, #1
 8001c76:	d1d6      	bne.n	8001c26 <_vfiprintf_r+0x19a>
 8001c78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c7a:	07d9      	lsls	r1, r3, #31
 8001c7c:	d405      	bmi.n	8001c8a <_vfiprintf_r+0x1fe>
 8001c7e:	89ab      	ldrh	r3, [r5, #12]
 8001c80:	059a      	lsls	r2, r3, #22
 8001c82:	d402      	bmi.n	8001c8a <_vfiprintf_r+0x1fe>
 8001c84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c86:	f7ff fddd 	bl	8001844 <__retarget_lock_release_recursive>
 8001c8a:	89ab      	ldrh	r3, [r5, #12]
 8001c8c:	065b      	lsls	r3, r3, #25
 8001c8e:	f53f af1f 	bmi.w	8001ad0 <_vfiprintf_r+0x44>
 8001c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c94:	e71e      	b.n	8001ad4 <_vfiprintf_r+0x48>
 8001c96:	ab03      	add	r3, sp, #12
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	462a      	mov	r2, r5
 8001c9c:	4b05      	ldr	r3, [pc, #20]	@ (8001cb4 <_vfiprintf_r+0x228>)
 8001c9e:	a904      	add	r1, sp, #16
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	f000 f879 	bl	8001d98 <_printf_i>
 8001ca6:	e7e4      	b.n	8001c72 <_vfiprintf_r+0x1e6>
 8001ca8:	080022d8 	.word	0x080022d8
 8001cac:	080022e2 	.word	0x080022e2
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	08001a67 	.word	0x08001a67
 8001cb8:	080022de 	.word	0x080022de

08001cbc <_printf_common>:
 8001cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001cc0:	4616      	mov	r6, r2
 8001cc2:	4698      	mov	r8, r3
 8001cc4:	688a      	ldr	r2, [r1, #8]
 8001cc6:	690b      	ldr	r3, [r1, #16]
 8001cc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	bfb8      	it	lt
 8001cd0:	4613      	movlt	r3, r2
 8001cd2:	6033      	str	r3, [r6, #0]
 8001cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001cd8:	4607      	mov	r7, r0
 8001cda:	460c      	mov	r4, r1
 8001cdc:	b10a      	cbz	r2, 8001ce2 <_printf_common+0x26>
 8001cde:	3301      	adds	r3, #1
 8001ce0:	6033      	str	r3, [r6, #0]
 8001ce2:	6823      	ldr	r3, [r4, #0]
 8001ce4:	0699      	lsls	r1, r3, #26
 8001ce6:	bf42      	ittt	mi
 8001ce8:	6833      	ldrmi	r3, [r6, #0]
 8001cea:	3302      	addmi	r3, #2
 8001cec:	6033      	strmi	r3, [r6, #0]
 8001cee:	6825      	ldr	r5, [r4, #0]
 8001cf0:	f015 0506 	ands.w	r5, r5, #6
 8001cf4:	d106      	bne.n	8001d04 <_printf_common+0x48>
 8001cf6:	f104 0a19 	add.w	sl, r4, #25
 8001cfa:	68e3      	ldr	r3, [r4, #12]
 8001cfc:	6832      	ldr	r2, [r6, #0]
 8001cfe:	1a9b      	subs	r3, r3, r2
 8001d00:	42ab      	cmp	r3, r5
 8001d02:	dc26      	bgt.n	8001d52 <_printf_common+0x96>
 8001d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001d08:	6822      	ldr	r2, [r4, #0]
 8001d0a:	3b00      	subs	r3, #0
 8001d0c:	bf18      	it	ne
 8001d0e:	2301      	movne	r3, #1
 8001d10:	0692      	lsls	r2, r2, #26
 8001d12:	d42b      	bmi.n	8001d6c <_printf_common+0xb0>
 8001d14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001d18:	4641      	mov	r1, r8
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	47c8      	blx	r9
 8001d1e:	3001      	adds	r0, #1
 8001d20:	d01e      	beq.n	8001d60 <_printf_common+0xa4>
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	6922      	ldr	r2, [r4, #16]
 8001d26:	f003 0306 	and.w	r3, r3, #6
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	bf02      	ittt	eq
 8001d2e:	68e5      	ldreq	r5, [r4, #12]
 8001d30:	6833      	ldreq	r3, [r6, #0]
 8001d32:	1aed      	subeq	r5, r5, r3
 8001d34:	68a3      	ldr	r3, [r4, #8]
 8001d36:	bf0c      	ite	eq
 8001d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d3c:	2500      	movne	r5, #0
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	bfc4      	itt	gt
 8001d42:	1a9b      	subgt	r3, r3, r2
 8001d44:	18ed      	addgt	r5, r5, r3
 8001d46:	2600      	movs	r6, #0
 8001d48:	341a      	adds	r4, #26
 8001d4a:	42b5      	cmp	r5, r6
 8001d4c:	d11a      	bne.n	8001d84 <_printf_common+0xc8>
 8001d4e:	2000      	movs	r0, #0
 8001d50:	e008      	b.n	8001d64 <_printf_common+0xa8>
 8001d52:	2301      	movs	r3, #1
 8001d54:	4652      	mov	r2, sl
 8001d56:	4641      	mov	r1, r8
 8001d58:	4638      	mov	r0, r7
 8001d5a:	47c8      	blx	r9
 8001d5c:	3001      	adds	r0, #1
 8001d5e:	d103      	bne.n	8001d68 <_printf_common+0xac>
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d68:	3501      	adds	r5, #1
 8001d6a:	e7c6      	b.n	8001cfa <_printf_common+0x3e>
 8001d6c:	18e1      	adds	r1, r4, r3
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	2030      	movs	r0, #48	@ 0x30
 8001d72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d76:	4422      	add	r2, r4
 8001d78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d80:	3302      	adds	r3, #2
 8001d82:	e7c7      	b.n	8001d14 <_printf_common+0x58>
 8001d84:	2301      	movs	r3, #1
 8001d86:	4622      	mov	r2, r4
 8001d88:	4641      	mov	r1, r8
 8001d8a:	4638      	mov	r0, r7
 8001d8c:	47c8      	blx	r9
 8001d8e:	3001      	adds	r0, #1
 8001d90:	d0e6      	beq.n	8001d60 <_printf_common+0xa4>
 8001d92:	3601      	adds	r6, #1
 8001d94:	e7d9      	b.n	8001d4a <_printf_common+0x8e>
	...

08001d98 <_printf_i>:
 8001d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d9c:	7e0f      	ldrb	r7, [r1, #24]
 8001d9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001da0:	2f78      	cmp	r7, #120	@ 0x78
 8001da2:	4691      	mov	r9, r2
 8001da4:	4680      	mov	r8, r0
 8001da6:	460c      	mov	r4, r1
 8001da8:	469a      	mov	sl, r3
 8001daa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001dae:	d807      	bhi.n	8001dc0 <_printf_i+0x28>
 8001db0:	2f62      	cmp	r7, #98	@ 0x62
 8001db2:	d80a      	bhi.n	8001dca <_printf_i+0x32>
 8001db4:	2f00      	cmp	r7, #0
 8001db6:	f000 80d1 	beq.w	8001f5c <_printf_i+0x1c4>
 8001dba:	2f58      	cmp	r7, #88	@ 0x58
 8001dbc:	f000 80b8 	beq.w	8001f30 <_printf_i+0x198>
 8001dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001dc8:	e03a      	b.n	8001e40 <_printf_i+0xa8>
 8001dca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001dce:	2b15      	cmp	r3, #21
 8001dd0:	d8f6      	bhi.n	8001dc0 <_printf_i+0x28>
 8001dd2:	a101      	add	r1, pc, #4	@ (adr r1, 8001dd8 <_printf_i+0x40>)
 8001dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001dd8:	08001e31 	.word	0x08001e31
 8001ddc:	08001e45 	.word	0x08001e45
 8001de0:	08001dc1 	.word	0x08001dc1
 8001de4:	08001dc1 	.word	0x08001dc1
 8001de8:	08001dc1 	.word	0x08001dc1
 8001dec:	08001dc1 	.word	0x08001dc1
 8001df0:	08001e45 	.word	0x08001e45
 8001df4:	08001dc1 	.word	0x08001dc1
 8001df8:	08001dc1 	.word	0x08001dc1
 8001dfc:	08001dc1 	.word	0x08001dc1
 8001e00:	08001dc1 	.word	0x08001dc1
 8001e04:	08001f43 	.word	0x08001f43
 8001e08:	08001e6f 	.word	0x08001e6f
 8001e0c:	08001efd 	.word	0x08001efd
 8001e10:	08001dc1 	.word	0x08001dc1
 8001e14:	08001dc1 	.word	0x08001dc1
 8001e18:	08001f65 	.word	0x08001f65
 8001e1c:	08001dc1 	.word	0x08001dc1
 8001e20:	08001e6f 	.word	0x08001e6f
 8001e24:	08001dc1 	.word	0x08001dc1
 8001e28:	08001dc1 	.word	0x08001dc1
 8001e2c:	08001f05 	.word	0x08001f05
 8001e30:	6833      	ldr	r3, [r6, #0]
 8001e32:	1d1a      	adds	r2, r3, #4
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	6032      	str	r2, [r6, #0]
 8001e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001e3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e40:	2301      	movs	r3, #1
 8001e42:	e09c      	b.n	8001f7e <_printf_i+0x1e6>
 8001e44:	6833      	ldr	r3, [r6, #0]
 8001e46:	6820      	ldr	r0, [r4, #0]
 8001e48:	1d19      	adds	r1, r3, #4
 8001e4a:	6031      	str	r1, [r6, #0]
 8001e4c:	0606      	lsls	r6, r0, #24
 8001e4e:	d501      	bpl.n	8001e54 <_printf_i+0xbc>
 8001e50:	681d      	ldr	r5, [r3, #0]
 8001e52:	e003      	b.n	8001e5c <_printf_i+0xc4>
 8001e54:	0645      	lsls	r5, r0, #25
 8001e56:	d5fb      	bpl.n	8001e50 <_printf_i+0xb8>
 8001e58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e5c:	2d00      	cmp	r5, #0
 8001e5e:	da03      	bge.n	8001e68 <_printf_i+0xd0>
 8001e60:	232d      	movs	r3, #45	@ 0x2d
 8001e62:	426d      	negs	r5, r5
 8001e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e68:	4858      	ldr	r0, [pc, #352]	@ (8001fcc <_printf_i+0x234>)
 8001e6a:	230a      	movs	r3, #10
 8001e6c:	e011      	b.n	8001e92 <_printf_i+0xfa>
 8001e6e:	6821      	ldr	r1, [r4, #0]
 8001e70:	6833      	ldr	r3, [r6, #0]
 8001e72:	0608      	lsls	r0, r1, #24
 8001e74:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e78:	d402      	bmi.n	8001e80 <_printf_i+0xe8>
 8001e7a:	0649      	lsls	r1, r1, #25
 8001e7c:	bf48      	it	mi
 8001e7e:	b2ad      	uxthmi	r5, r5
 8001e80:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e82:	4852      	ldr	r0, [pc, #328]	@ (8001fcc <_printf_i+0x234>)
 8001e84:	6033      	str	r3, [r6, #0]
 8001e86:	bf14      	ite	ne
 8001e88:	230a      	movne	r3, #10
 8001e8a:	2308      	moveq	r3, #8
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e92:	6866      	ldr	r6, [r4, #4]
 8001e94:	60a6      	str	r6, [r4, #8]
 8001e96:	2e00      	cmp	r6, #0
 8001e98:	db05      	blt.n	8001ea6 <_printf_i+0x10e>
 8001e9a:	6821      	ldr	r1, [r4, #0]
 8001e9c:	432e      	orrs	r6, r5
 8001e9e:	f021 0104 	bic.w	r1, r1, #4
 8001ea2:	6021      	str	r1, [r4, #0]
 8001ea4:	d04b      	beq.n	8001f3e <_printf_i+0x1a6>
 8001ea6:	4616      	mov	r6, r2
 8001ea8:	fbb5 f1f3 	udiv	r1, r5, r3
 8001eac:	fb03 5711 	mls	r7, r3, r1, r5
 8001eb0:	5dc7      	ldrb	r7, [r0, r7]
 8001eb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001eb6:	462f      	mov	r7, r5
 8001eb8:	42bb      	cmp	r3, r7
 8001eba:	460d      	mov	r5, r1
 8001ebc:	d9f4      	bls.n	8001ea8 <_printf_i+0x110>
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d10b      	bne.n	8001eda <_printf_i+0x142>
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	07df      	lsls	r7, r3, #31
 8001ec6:	d508      	bpl.n	8001eda <_printf_i+0x142>
 8001ec8:	6923      	ldr	r3, [r4, #16]
 8001eca:	6861      	ldr	r1, [r4, #4]
 8001ecc:	4299      	cmp	r1, r3
 8001ece:	bfde      	ittt	le
 8001ed0:	2330      	movle	r3, #48	@ 0x30
 8001ed2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001ed6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001eda:	1b92      	subs	r2, r2, r6
 8001edc:	6122      	str	r2, [r4, #16]
 8001ede:	f8cd a000 	str.w	sl, [sp]
 8001ee2:	464b      	mov	r3, r9
 8001ee4:	aa03      	add	r2, sp, #12
 8001ee6:	4621      	mov	r1, r4
 8001ee8:	4640      	mov	r0, r8
 8001eea:	f7ff fee7 	bl	8001cbc <_printf_common>
 8001eee:	3001      	adds	r0, #1
 8001ef0:	d14a      	bne.n	8001f88 <_printf_i+0x1f0>
 8001ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef6:	b004      	add	sp, #16
 8001ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	f043 0320 	orr.w	r3, r3, #32
 8001f02:	6023      	str	r3, [r4, #0]
 8001f04:	4832      	ldr	r0, [pc, #200]	@ (8001fd0 <_printf_i+0x238>)
 8001f06:	2778      	movs	r7, #120	@ 0x78
 8001f08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	6831      	ldr	r1, [r6, #0]
 8001f10:	061f      	lsls	r7, r3, #24
 8001f12:	f851 5b04 	ldr.w	r5, [r1], #4
 8001f16:	d402      	bmi.n	8001f1e <_printf_i+0x186>
 8001f18:	065f      	lsls	r7, r3, #25
 8001f1a:	bf48      	it	mi
 8001f1c:	b2ad      	uxthmi	r5, r5
 8001f1e:	6031      	str	r1, [r6, #0]
 8001f20:	07d9      	lsls	r1, r3, #31
 8001f22:	bf44      	itt	mi
 8001f24:	f043 0320 	orrmi.w	r3, r3, #32
 8001f28:	6023      	strmi	r3, [r4, #0]
 8001f2a:	b11d      	cbz	r5, 8001f34 <_printf_i+0x19c>
 8001f2c:	2310      	movs	r3, #16
 8001f2e:	e7ad      	b.n	8001e8c <_printf_i+0xf4>
 8001f30:	4826      	ldr	r0, [pc, #152]	@ (8001fcc <_printf_i+0x234>)
 8001f32:	e7e9      	b.n	8001f08 <_printf_i+0x170>
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	f023 0320 	bic.w	r3, r3, #32
 8001f3a:	6023      	str	r3, [r4, #0]
 8001f3c:	e7f6      	b.n	8001f2c <_printf_i+0x194>
 8001f3e:	4616      	mov	r6, r2
 8001f40:	e7bd      	b.n	8001ebe <_printf_i+0x126>
 8001f42:	6833      	ldr	r3, [r6, #0]
 8001f44:	6825      	ldr	r5, [r4, #0]
 8001f46:	6961      	ldr	r1, [r4, #20]
 8001f48:	1d18      	adds	r0, r3, #4
 8001f4a:	6030      	str	r0, [r6, #0]
 8001f4c:	062e      	lsls	r6, r5, #24
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	d501      	bpl.n	8001f56 <_printf_i+0x1be>
 8001f52:	6019      	str	r1, [r3, #0]
 8001f54:	e002      	b.n	8001f5c <_printf_i+0x1c4>
 8001f56:	0668      	lsls	r0, r5, #25
 8001f58:	d5fb      	bpl.n	8001f52 <_printf_i+0x1ba>
 8001f5a:	8019      	strh	r1, [r3, #0]
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	6123      	str	r3, [r4, #16]
 8001f60:	4616      	mov	r6, r2
 8001f62:	e7bc      	b.n	8001ede <_printf_i+0x146>
 8001f64:	6833      	ldr	r3, [r6, #0]
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	6032      	str	r2, [r6, #0]
 8001f6a:	681e      	ldr	r6, [r3, #0]
 8001f6c:	6862      	ldr	r2, [r4, #4]
 8001f6e:	2100      	movs	r1, #0
 8001f70:	4630      	mov	r0, r6
 8001f72:	f7fe f935 	bl	80001e0 <memchr>
 8001f76:	b108      	cbz	r0, 8001f7c <_printf_i+0x1e4>
 8001f78:	1b80      	subs	r0, r0, r6
 8001f7a:	6060      	str	r0, [r4, #4]
 8001f7c:	6863      	ldr	r3, [r4, #4]
 8001f7e:	6123      	str	r3, [r4, #16]
 8001f80:	2300      	movs	r3, #0
 8001f82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f86:	e7aa      	b.n	8001ede <_printf_i+0x146>
 8001f88:	6923      	ldr	r3, [r4, #16]
 8001f8a:	4632      	mov	r2, r6
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	4640      	mov	r0, r8
 8001f90:	47d0      	blx	sl
 8001f92:	3001      	adds	r0, #1
 8001f94:	d0ad      	beq.n	8001ef2 <_printf_i+0x15a>
 8001f96:	6823      	ldr	r3, [r4, #0]
 8001f98:	079b      	lsls	r3, r3, #30
 8001f9a:	d413      	bmi.n	8001fc4 <_printf_i+0x22c>
 8001f9c:	68e0      	ldr	r0, [r4, #12]
 8001f9e:	9b03      	ldr	r3, [sp, #12]
 8001fa0:	4298      	cmp	r0, r3
 8001fa2:	bfb8      	it	lt
 8001fa4:	4618      	movlt	r0, r3
 8001fa6:	e7a6      	b.n	8001ef6 <_printf_i+0x15e>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	4632      	mov	r2, r6
 8001fac:	4649      	mov	r1, r9
 8001fae:	4640      	mov	r0, r8
 8001fb0:	47d0      	blx	sl
 8001fb2:	3001      	adds	r0, #1
 8001fb4:	d09d      	beq.n	8001ef2 <_printf_i+0x15a>
 8001fb6:	3501      	adds	r5, #1
 8001fb8:	68e3      	ldr	r3, [r4, #12]
 8001fba:	9903      	ldr	r1, [sp, #12]
 8001fbc:	1a5b      	subs	r3, r3, r1
 8001fbe:	42ab      	cmp	r3, r5
 8001fc0:	dcf2      	bgt.n	8001fa8 <_printf_i+0x210>
 8001fc2:	e7eb      	b.n	8001f9c <_printf_i+0x204>
 8001fc4:	2500      	movs	r5, #0
 8001fc6:	f104 0619 	add.w	r6, r4, #25
 8001fca:	e7f5      	b.n	8001fb8 <_printf_i+0x220>
 8001fcc:	080022e9 	.word	0x080022e9
 8001fd0:	080022fa 	.word	0x080022fa

08001fd4 <__sflush_r>:
 8001fd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fdc:	0716      	lsls	r6, r2, #28
 8001fde:	4605      	mov	r5, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	d454      	bmi.n	800208e <__sflush_r+0xba>
 8001fe4:	684b      	ldr	r3, [r1, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	dc02      	bgt.n	8001ff0 <__sflush_r+0x1c>
 8001fea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dd48      	ble.n	8002082 <__sflush_r+0xae>
 8001ff0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ff2:	2e00      	cmp	r6, #0
 8001ff4:	d045      	beq.n	8002082 <__sflush_r+0xae>
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001ffc:	682f      	ldr	r7, [r5, #0]
 8001ffe:	6a21      	ldr	r1, [r4, #32]
 8002000:	602b      	str	r3, [r5, #0]
 8002002:	d030      	beq.n	8002066 <__sflush_r+0x92>
 8002004:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002006:	89a3      	ldrh	r3, [r4, #12]
 8002008:	0759      	lsls	r1, r3, #29
 800200a:	d505      	bpl.n	8002018 <__sflush_r+0x44>
 800200c:	6863      	ldr	r3, [r4, #4]
 800200e:	1ad2      	subs	r2, r2, r3
 8002010:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002012:	b10b      	cbz	r3, 8002018 <__sflush_r+0x44>
 8002014:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002016:	1ad2      	subs	r2, r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800201c:	6a21      	ldr	r1, [r4, #32]
 800201e:	4628      	mov	r0, r5
 8002020:	47b0      	blx	r6
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	d106      	bne.n	8002036 <__sflush_r+0x62>
 8002028:	6829      	ldr	r1, [r5, #0]
 800202a:	291d      	cmp	r1, #29
 800202c:	d82b      	bhi.n	8002086 <__sflush_r+0xb2>
 800202e:	4a2a      	ldr	r2, [pc, #168]	@ (80020d8 <__sflush_r+0x104>)
 8002030:	40ca      	lsrs	r2, r1
 8002032:	07d6      	lsls	r6, r2, #31
 8002034:	d527      	bpl.n	8002086 <__sflush_r+0xb2>
 8002036:	2200      	movs	r2, #0
 8002038:	6062      	str	r2, [r4, #4]
 800203a:	04d9      	lsls	r1, r3, #19
 800203c:	6922      	ldr	r2, [r4, #16]
 800203e:	6022      	str	r2, [r4, #0]
 8002040:	d504      	bpl.n	800204c <__sflush_r+0x78>
 8002042:	1c42      	adds	r2, r0, #1
 8002044:	d101      	bne.n	800204a <__sflush_r+0x76>
 8002046:	682b      	ldr	r3, [r5, #0]
 8002048:	b903      	cbnz	r3, 800204c <__sflush_r+0x78>
 800204a:	6560      	str	r0, [r4, #84]	@ 0x54
 800204c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800204e:	602f      	str	r7, [r5, #0]
 8002050:	b1b9      	cbz	r1, 8002082 <__sflush_r+0xae>
 8002052:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002056:	4299      	cmp	r1, r3
 8002058:	d002      	beq.n	8002060 <__sflush_r+0x8c>
 800205a:	4628      	mov	r0, r5
 800205c:	f7ff fbf4 	bl	8001848 <_free_r>
 8002060:	2300      	movs	r3, #0
 8002062:	6363      	str	r3, [r4, #52]	@ 0x34
 8002064:	e00d      	b.n	8002082 <__sflush_r+0xae>
 8002066:	2301      	movs	r3, #1
 8002068:	4628      	mov	r0, r5
 800206a:	47b0      	blx	r6
 800206c:	4602      	mov	r2, r0
 800206e:	1c50      	adds	r0, r2, #1
 8002070:	d1c9      	bne.n	8002006 <__sflush_r+0x32>
 8002072:	682b      	ldr	r3, [r5, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0c6      	beq.n	8002006 <__sflush_r+0x32>
 8002078:	2b1d      	cmp	r3, #29
 800207a:	d001      	beq.n	8002080 <__sflush_r+0xac>
 800207c:	2b16      	cmp	r3, #22
 800207e:	d11e      	bne.n	80020be <__sflush_r+0xea>
 8002080:	602f      	str	r7, [r5, #0]
 8002082:	2000      	movs	r0, #0
 8002084:	e022      	b.n	80020cc <__sflush_r+0xf8>
 8002086:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800208a:	b21b      	sxth	r3, r3
 800208c:	e01b      	b.n	80020c6 <__sflush_r+0xf2>
 800208e:	690f      	ldr	r7, [r1, #16]
 8002090:	2f00      	cmp	r7, #0
 8002092:	d0f6      	beq.n	8002082 <__sflush_r+0xae>
 8002094:	0793      	lsls	r3, r2, #30
 8002096:	680e      	ldr	r6, [r1, #0]
 8002098:	bf08      	it	eq
 800209a:	694b      	ldreq	r3, [r1, #20]
 800209c:	600f      	str	r7, [r1, #0]
 800209e:	bf18      	it	ne
 80020a0:	2300      	movne	r3, #0
 80020a2:	eba6 0807 	sub.w	r8, r6, r7
 80020a6:	608b      	str	r3, [r1, #8]
 80020a8:	f1b8 0f00 	cmp.w	r8, #0
 80020ac:	dde9      	ble.n	8002082 <__sflush_r+0xae>
 80020ae:	6a21      	ldr	r1, [r4, #32]
 80020b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80020b2:	4643      	mov	r3, r8
 80020b4:	463a      	mov	r2, r7
 80020b6:	4628      	mov	r0, r5
 80020b8:	47b0      	blx	r6
 80020ba:	2800      	cmp	r0, #0
 80020bc:	dc08      	bgt.n	80020d0 <__sflush_r+0xfc>
 80020be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020c6:	81a3      	strh	r3, [r4, #12]
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020d0:	4407      	add	r7, r0
 80020d2:	eba8 0800 	sub.w	r8, r8, r0
 80020d6:	e7e7      	b.n	80020a8 <__sflush_r+0xd4>
 80020d8:	20400001 	.word	0x20400001

080020dc <_fflush_r>:
 80020dc:	b538      	push	{r3, r4, r5, lr}
 80020de:	690b      	ldr	r3, [r1, #16]
 80020e0:	4605      	mov	r5, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	b913      	cbnz	r3, 80020ec <_fflush_r+0x10>
 80020e6:	2500      	movs	r5, #0
 80020e8:	4628      	mov	r0, r5
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	b118      	cbz	r0, 80020f6 <_fflush_r+0x1a>
 80020ee:	6a03      	ldr	r3, [r0, #32]
 80020f0:	b90b      	cbnz	r3, 80020f6 <_fflush_r+0x1a>
 80020f2:	f7ff f9af 	bl	8001454 <__sinit>
 80020f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f3      	beq.n	80020e6 <_fflush_r+0xa>
 80020fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002100:	07d0      	lsls	r0, r2, #31
 8002102:	d404      	bmi.n	800210e <_fflush_r+0x32>
 8002104:	0599      	lsls	r1, r3, #22
 8002106:	d402      	bmi.n	800210e <_fflush_r+0x32>
 8002108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800210a:	f7ff fb9a 	bl	8001842 <__retarget_lock_acquire_recursive>
 800210e:	4628      	mov	r0, r5
 8002110:	4621      	mov	r1, r4
 8002112:	f7ff ff5f 	bl	8001fd4 <__sflush_r>
 8002116:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002118:	07da      	lsls	r2, r3, #31
 800211a:	4605      	mov	r5, r0
 800211c:	d4e4      	bmi.n	80020e8 <_fflush_r+0xc>
 800211e:	89a3      	ldrh	r3, [r4, #12]
 8002120:	059b      	lsls	r3, r3, #22
 8002122:	d4e1      	bmi.n	80020e8 <_fflush_r+0xc>
 8002124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002126:	f7ff fb8d 	bl	8001844 <__retarget_lock_release_recursive>
 800212a:	e7dd      	b.n	80020e8 <_fflush_r+0xc>

0800212c <__swhatbuf_r>:
 800212c:	b570      	push	{r4, r5, r6, lr}
 800212e:	460c      	mov	r4, r1
 8002130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002134:	2900      	cmp	r1, #0
 8002136:	b096      	sub	sp, #88	@ 0x58
 8002138:	4615      	mov	r5, r2
 800213a:	461e      	mov	r6, r3
 800213c:	da0d      	bge.n	800215a <__swhatbuf_r+0x2e>
 800213e:	89a3      	ldrh	r3, [r4, #12]
 8002140:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002144:	f04f 0100 	mov.w	r1, #0
 8002148:	bf14      	ite	ne
 800214a:	2340      	movne	r3, #64	@ 0x40
 800214c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002150:	2000      	movs	r0, #0
 8002152:	6031      	str	r1, [r6, #0]
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	b016      	add	sp, #88	@ 0x58
 8002158:	bd70      	pop	{r4, r5, r6, pc}
 800215a:	466a      	mov	r2, sp
 800215c:	f000 f848 	bl	80021f0 <_fstat_r>
 8002160:	2800      	cmp	r0, #0
 8002162:	dbec      	blt.n	800213e <__swhatbuf_r+0x12>
 8002164:	9901      	ldr	r1, [sp, #4]
 8002166:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800216a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800216e:	4259      	negs	r1, r3
 8002170:	4159      	adcs	r1, r3
 8002172:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002176:	e7eb      	b.n	8002150 <__swhatbuf_r+0x24>

08002178 <__smakebuf_r>:
 8002178:	898b      	ldrh	r3, [r1, #12]
 800217a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800217c:	079d      	lsls	r5, r3, #30
 800217e:	4606      	mov	r6, r0
 8002180:	460c      	mov	r4, r1
 8002182:	d507      	bpl.n	8002194 <__smakebuf_r+0x1c>
 8002184:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002188:	6023      	str	r3, [r4, #0]
 800218a:	6123      	str	r3, [r4, #16]
 800218c:	2301      	movs	r3, #1
 800218e:	6163      	str	r3, [r4, #20]
 8002190:	b003      	add	sp, #12
 8002192:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002194:	ab01      	add	r3, sp, #4
 8002196:	466a      	mov	r2, sp
 8002198:	f7ff ffc8 	bl	800212c <__swhatbuf_r>
 800219c:	9f00      	ldr	r7, [sp, #0]
 800219e:	4605      	mov	r5, r0
 80021a0:	4639      	mov	r1, r7
 80021a2:	4630      	mov	r0, r6
 80021a4:	f7ff fbbc 	bl	8001920 <_malloc_r>
 80021a8:	b948      	cbnz	r0, 80021be <__smakebuf_r+0x46>
 80021aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021ae:	059a      	lsls	r2, r3, #22
 80021b0:	d4ee      	bmi.n	8002190 <__smakebuf_r+0x18>
 80021b2:	f023 0303 	bic.w	r3, r3, #3
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	81a3      	strh	r3, [r4, #12]
 80021bc:	e7e2      	b.n	8002184 <__smakebuf_r+0xc>
 80021be:	89a3      	ldrh	r3, [r4, #12]
 80021c0:	6020      	str	r0, [r4, #0]
 80021c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c6:	81a3      	strh	r3, [r4, #12]
 80021c8:	9b01      	ldr	r3, [sp, #4]
 80021ca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80021ce:	b15b      	cbz	r3, 80021e8 <__smakebuf_r+0x70>
 80021d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021d4:	4630      	mov	r0, r6
 80021d6:	f000 f81d 	bl	8002214 <_isatty_r>
 80021da:	b128      	cbz	r0, 80021e8 <__smakebuf_r+0x70>
 80021dc:	89a3      	ldrh	r3, [r4, #12]
 80021de:	f023 0303 	bic.w	r3, r3, #3
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	81a3      	strh	r3, [r4, #12]
 80021e8:	89a3      	ldrh	r3, [r4, #12]
 80021ea:	431d      	orrs	r5, r3
 80021ec:	81a5      	strh	r5, [r4, #12]
 80021ee:	e7cf      	b.n	8002190 <__smakebuf_r+0x18>

080021f0 <_fstat_r>:
 80021f0:	b538      	push	{r3, r4, r5, lr}
 80021f2:	4d07      	ldr	r5, [pc, #28]	@ (8002210 <_fstat_r+0x20>)
 80021f4:	2300      	movs	r3, #0
 80021f6:	4604      	mov	r4, r0
 80021f8:	4608      	mov	r0, r1
 80021fa:	4611      	mov	r1, r2
 80021fc:	602b      	str	r3, [r5, #0]
 80021fe:	f7fe ff1a 	bl	8001036 <_fstat>
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	d102      	bne.n	800220c <_fstat_r+0x1c>
 8002206:	682b      	ldr	r3, [r5, #0]
 8002208:	b103      	cbz	r3, 800220c <_fstat_r+0x1c>
 800220a:	6023      	str	r3, [r4, #0]
 800220c:	bd38      	pop	{r3, r4, r5, pc}
 800220e:	bf00      	nop
 8002210:	20000290 	.word	0x20000290

08002214 <_isatty_r>:
 8002214:	b538      	push	{r3, r4, r5, lr}
 8002216:	4d06      	ldr	r5, [pc, #24]	@ (8002230 <_isatty_r+0x1c>)
 8002218:	2300      	movs	r3, #0
 800221a:	4604      	mov	r4, r0
 800221c:	4608      	mov	r0, r1
 800221e:	602b      	str	r3, [r5, #0]
 8002220:	f7ff f86e 	bl	8001300 <_isatty>
 8002224:	1c43      	adds	r3, r0, #1
 8002226:	d102      	bne.n	800222e <_isatty_r+0x1a>
 8002228:	682b      	ldr	r3, [r5, #0]
 800222a:	b103      	cbz	r3, 800222e <_isatty_r+0x1a>
 800222c:	6023      	str	r3, [r4, #0]
 800222e:	bd38      	pop	{r3, r4, r5, pc}
 8002230:	20000290 	.word	0x20000290

08002234 <_sbrk_r>:
 8002234:	b538      	push	{r3, r4, r5, lr}
 8002236:	4d06      	ldr	r5, [pc, #24]	@ (8002250 <_sbrk_r+0x1c>)
 8002238:	2300      	movs	r3, #0
 800223a:	4604      	mov	r4, r0
 800223c:	4608      	mov	r0, r1
 800223e:	602b      	str	r3, [r5, #0]
 8002240:	f7fe fd80 	bl	8000d44 <_sbrk>
 8002244:	1c43      	adds	r3, r0, #1
 8002246:	d102      	bne.n	800224e <_sbrk_r+0x1a>
 8002248:	682b      	ldr	r3, [r5, #0]
 800224a:	b103      	cbz	r3, 800224e <_sbrk_r+0x1a>
 800224c:	6023      	str	r3, [r4, #0]
 800224e:	bd38      	pop	{r3, r4, r5, pc}
 8002250:	20000290 	.word	0x20000290

08002254 <_init>:
 8002254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002256:	bf00      	nop
 8002258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800225a:	bc08      	pop	{r3}
 800225c:	469e      	mov	lr, r3
 800225e:	4770      	bx	lr

08002260 <_fini>:
 8002260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002262:	bf00      	nop
 8002264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002266:	bc08      	pop	{r3}
 8002268:	469e      	mov	lr, r3
 800226a:	4770      	bx	lr
