
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002210  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080023a0  080023a0  000033a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002474  08002474  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002474  08002474  00003474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800247c  0800247c  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800247c  0800247c  0000347c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002480  08002480  00003480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08002484  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          000001c4  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000022c  2000022c  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00002064  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000082d  00000000  00000000  000060fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00006930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000018a  00000000  00000000  00006b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003bcd  00000000  00000000  00006cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000343c  00000000  00000000  0000a8b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c549  00000000  00000000  0000dcf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001a23c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f4c  00000000  00000000  0001a280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0001b1cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002388 	.word	0x08002388

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08002388 	.word	0x08002388

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 8000280:	b4b0      	push	{r4, r5, r7}
 8000282:	b08f      	sub	sp, #60	@ 0x3c
 8000284:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 8000286:	4b2c      	ldr	r3, [pc, #176]	@ (8000338 <Get_APB1_Clock_Speed+0xb8>)
 8000288:	f107 0410 	add.w	r4, r7, #16
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 800029a:	4b28      	ldr	r3, [pc, #160]	@ (800033c <Get_APB1_Clock_Speed+0xbc>)
 800029c:	463c      	mov	r4, r7
 800029e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 80002a4:	4b26      	ldr	r3, [pc, #152]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 0303 	and.w	r3, r3, #3
 80002b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 80002b4:	4b22      	ldr	r3, [pc, #136]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	091b      	lsrs	r3, r3, #4
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 030f 	and.w	r3, r3, #15
 80002c0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 80002c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	0a9b      	lsrs	r3, r3, #10
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	f003 0307 	and.w	r3, r3, #7
 80002d0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 80002d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80002dc:	2b07      	cmp	r3, #7
 80002de:	d908      	bls.n	80002f2 <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 80002e0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80002e4:	3b08      	subs	r3, #8
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	3338      	adds	r3, #56	@ 0x38
 80002ea:	443b      	add	r3, r7
 80002ec:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80002f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 80002f6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	d908      	bls.n	8000310 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 80002fe:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000302:	3b04      	subs	r3, #4
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	3338      	adds	r3, #56	@ 0x38
 8000308:	443b      	add	r3, r7
 800030a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800030e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000314:	2b00      	cmp	r3, #0
 8000316:	d109      	bne.n	800032c <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000318:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <Get_APB1_Clock_Speed+0xc4>)
 800031c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000320:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000322:	fb92 f3f3 	sdiv	r3, r2, r3
 8000326:	461a      	mov	r2, r3
 8000328:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <Get_APB1_Clock_Speed+0xc8>)
 800032a:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 800032c:	bf00      	nop
 800032e:	373c      	adds	r7, #60	@ 0x3c
 8000330:	46bd      	mov	sp, r7
 8000332:	bcb0      	pop	{r4, r5, r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	080023a0 	.word	0x080023a0
 800033c:	080023c0 	.word	0x080023c0
 8000340:	40023800 	.word	0x40023800
 8000344:	00f42400 	.word	0x00f42400
 8000348:	20000084 	.word	0x20000084

0800034c <Get_APB2_Clock_Speed>:

uint32_t APB2_Clock_Speed;

void Get_APB2_Clock_Speed() {
 800034c:	b4b0      	push	{r4, r5, r7}
 800034e:	b08f      	sub	sp, #60	@ 0x3c
 8000350:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 8000352:	4b2c      	ldr	r3, [pc, #176]	@ (8000404 <Get_APB2_Clock_Speed+0xb8>)
 8000354:	f107 0410 	add.w	r4, r7, #16
 8000358:	461d      	mov	r5, r3
 800035a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800035c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800035e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb2_prescaler_table[] = { 2, 4, 8, 16 };
 8000366:	4b28      	ldr	r3, [pc, #160]	@ (8000408 <Get_APB2_Clock_Speed+0xbc>)
 8000368:	463c      	mov	r4, r7
 800036a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800036c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 8000370:	4b26      	ldr	r3, [pc, #152]	@ (800040c <Get_APB2_Clock_Speed+0xc0>)
 8000372:	689b      	ldr	r3, [r3, #8]
 8000374:	089b      	lsrs	r3, r3, #2
 8000376:	b2db      	uxtb	r3, r3
 8000378:	f003 0303 	and.w	r3, r3, #3
 800037c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 8000380:	4b22      	ldr	r3, [pc, #136]	@ (800040c <Get_APB2_Clock_Speed+0xc0>)
 8000382:	689b      	ldr	r3, [r3, #8]
 8000384:	091b      	lsrs	r3, r3, #4
 8000386:	b2db      	uxtb	r3, r3
 8000388:	f003 030f 	and.w	r3, r3, #15
 800038c:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb2_pres = (RCC->CFGR >> 13) & 0x7; // APB2 prescaler is at bits 13-15
 8000390:	4b1e      	ldr	r3, [pc, #120]	@ (800040c <Get_APB2_Clock_Speed+0xc0>)
 8000392:	689b      	ldr	r3, [r3, #8]
 8000394:	0b5b      	lsrs	r3, r3, #13
 8000396:	b2db      	uxtb	r3, r3
 8000398:	f003 0307 	and.w	r3, r3, #7
 800039c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

	uint16_t ahb_pres = 1;
 80003a0:	2301      	movs	r3, #1
 80003a2:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 80003a4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80003a8:	2b07      	cmp	r3, #7
 80003aa:	d908      	bls.n	80003be <Get_APB2_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 80003ac:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80003b0:	3b08      	subs	r3, #8
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	3338      	adds	r3, #56	@ 0x38
 80003b6:	443b      	add	r3, r7
 80003b8:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80003bc:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}

	uint16_t apb2_pres = 1;
 80003be:	2301      	movs	r3, #1
 80003c0:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb2_pres >= 4) {
 80003c2:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d908      	bls.n	80003dc <Get_APB2_Clock_Speed+0x90>
		apb2_pres = apb2_prescaler_table[get_apb2_pres - 4];
 80003ca:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80003ce:	3b04      	subs	r3, #4
 80003d0:	009b      	lsls	r3, r3, #2
 80003d2:	3338      	adds	r3, #56	@ 0x38
 80003d4:	443b      	add	r3, r7
 80003d6:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80003da:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}

	if (get_system_clock == 0) {
 80003dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d109      	bne.n	80003f8 <Get_APB2_Clock_Speed+0xac>
		// HSI System Clock
		APB2_Clock_Speed = (Clock_SRC / ahb_pres) / apb2_pres;
 80003e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80003e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <Get_APB2_Clock_Speed+0xc4>)
 80003e8:	fb92 f2f3 	sdiv	r2, r2, r3
 80003ec:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80003ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80003f2:	461a      	mov	r2, r3
 80003f4:	4b07      	ldr	r3, [pc, #28]	@ (8000414 <Get_APB2_Clock_Speed+0xc8>)
 80003f6:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
		// HSE System Clock
	} else if (get_system_clock == 2) {
		// PLL System Clock
	}
}
 80003f8:	bf00      	nop
 80003fa:	373c      	adds	r7, #60	@ 0x3c
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bcb0      	pop	{r4, r5, r7}
 8000400:	4770      	bx	lr
 8000402:	bf00      	nop
 8000404:	080023a0 	.word	0x080023a0
 8000408:	080023c0 	.word	0x080023c0
 800040c:	40023800 	.word	0x40023800
 8000410:	00f42400 	.word	0x00f42400
 8000414:	20000088 	.word	0x20000088

08000418 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000418:	b480      	push	{r7}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a90      	ldr	r2, [pc, #576]	@ (8000668 <GPIO_INIT+0x250>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_INIT+0x20>
		GPIOA_EN();
 800042a:	4b90      	ldr	r3, [pc, #576]	@ (800066c <GPIO_INIT+0x254>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042e:	4a8f      	ldr	r2, [pc, #572]	@ (800066c <GPIO_INIT+0x254>)
 8000430:	f043 0301 	orr.w	r3, r3, #1
 8000434:	6313      	str	r3, [r2, #48]	@ 0x30
 8000436:	e05e      	b.n	80004f6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a8c      	ldr	r2, [pc, #560]	@ (8000670 <GPIO_INIT+0x258>)
 800043e:	4293      	cmp	r3, r2
 8000440:	d106      	bne.n	8000450 <GPIO_INIT+0x38>
		GPIOB_EN();
 8000442:	4b8a      	ldr	r3, [pc, #552]	@ (800066c <GPIO_INIT+0x254>)
 8000444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000446:	4a89      	ldr	r2, [pc, #548]	@ (800066c <GPIO_INIT+0x254>)
 8000448:	f043 0302 	orr.w	r3, r3, #2
 800044c:	6313      	str	r3, [r2, #48]	@ 0x30
 800044e:	e052      	b.n	80004f6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a87      	ldr	r2, [pc, #540]	@ (8000674 <GPIO_INIT+0x25c>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_INIT+0x50>
		GPIOC_EN();
 800045a:	4b84      	ldr	r3, [pc, #528]	@ (800066c <GPIO_INIT+0x254>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a83      	ldr	r2, [pc, #524]	@ (800066c <GPIO_INIT+0x254>)
 8000460:	f043 0304 	orr.w	r3, r3, #4
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
 8000466:	e046      	b.n	80004f6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a82      	ldr	r2, [pc, #520]	@ (8000678 <GPIO_INIT+0x260>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d106      	bne.n	8000480 <GPIO_INIT+0x68>
		GPIOD_EN();
 8000472:	4b7e      	ldr	r3, [pc, #504]	@ (800066c <GPIO_INIT+0x254>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	4a7d      	ldr	r2, [pc, #500]	@ (800066c <GPIO_INIT+0x254>)
 8000478:	f043 0308 	orr.w	r3, r3, #8
 800047c:	6313      	str	r3, [r2, #48]	@ 0x30
 800047e:	e03a      	b.n	80004f6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a7d      	ldr	r2, [pc, #500]	@ (800067c <GPIO_INIT+0x264>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_INIT+0x80>
		GPIOE_EN();
 800048a:	4b78      	ldr	r3, [pc, #480]	@ (800066c <GPIO_INIT+0x254>)
 800048c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048e:	4a77      	ldr	r2, [pc, #476]	@ (800066c <GPIO_INIT+0x254>)
 8000490:	f043 0310 	orr.w	r3, r3, #16
 8000494:	6313      	str	r3, [r2, #48]	@ 0x30
 8000496:	e02e      	b.n	80004f6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a78      	ldr	r2, [pc, #480]	@ (8000680 <GPIO_INIT+0x268>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_INIT+0x98>
		GPIOF_EN();
 80004a2:	4b72      	ldr	r3, [pc, #456]	@ (800066c <GPIO_INIT+0x254>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a6:	4a71      	ldr	r2, [pc, #452]	@ (800066c <GPIO_INIT+0x254>)
 80004a8:	f043 0320 	orr.w	r3, r3, #32
 80004ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ae:	e022      	b.n	80004f6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a73      	ldr	r2, [pc, #460]	@ (8000684 <GPIO_INIT+0x26c>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d106      	bne.n	80004c8 <GPIO_INIT+0xb0>
		GPIOG_EN();
 80004ba:	4b6c      	ldr	r3, [pc, #432]	@ (800066c <GPIO_INIT+0x254>)
 80004bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004be:	4a6b      	ldr	r2, [pc, #428]	@ (800066c <GPIO_INIT+0x254>)
 80004c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80004c6:	e016      	b.n	80004f6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a6e      	ldr	r2, [pc, #440]	@ (8000688 <GPIO_INIT+0x270>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_INIT+0xc8>
		GPIOH_EN();
 80004d2:	4b66      	ldr	r3, [pc, #408]	@ (800066c <GPIO_INIT+0x254>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a65      	ldr	r2, [pc, #404]	@ (800066c <GPIO_INIT+0x254>)
 80004d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	e00a      	b.n	80004f6 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a69      	ldr	r2, [pc, #420]	@ (800068c <GPIO_INIT+0x274>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d105      	bne.n	80004f6 <GPIO_INIT+0xde>
		GPIOI_EN();
 80004ea:	4b60      	ldr	r3, [pc, #384]	@ (800066c <GPIO_INIT+0x254>)
 80004ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ee:	4a5f      	ldr	r2, [pc, #380]	@ (800066c <GPIO_INIT+0x254>)
 80004f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80004f4:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	005b      	lsls	r3, r3, #1
 8000502:	2103      	movs	r1, #3
 8000504:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000508:	43db      	mvns	r3, r3
 800050a:	4619      	mov	r1, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	400a      	ands	r2, r1
 8000512:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	2103      	movs	r1, #3
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000526:	43db      	mvns	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	400a      	ands	r2, r1
 8000530:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68da      	ldr	r2, [r3, #12]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	799b      	ldrb	r3, [r3, #6]
 800053c:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	005b      	lsls	r3, r3, #1
 8000544:	fa01 f303 	lsl.w	r3, r1, r3
 8000548:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	430a      	orrs	r2, r1
 8000550:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	795b      	ldrb	r3, [r3, #5]
 8000556:	2b02      	cmp	r3, #2
 8000558:	f200 809a 	bhi.w	8000690 <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	fa01 f303 	lsl.w	r3, r1, r3
 8000572:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	430a      	orrs	r2, r1
 800057a:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	4619      	mov	r1, r3
 8000588:	2303      	movs	r3, #3
 800058a:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 800058c:	43db      	mvns	r3, r3
 800058e:	4619      	mov	r1, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	400a      	ands	r2, r1
 8000596:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	685a      	ldr	r2, [r3, #4]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	7a1b      	ldrb	r3, [r3, #8]
 80005a2:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	791b      	ldrb	r3, [r3, #4]
 80005a8:	fa01 f303 	lsl.w	r3, r1, r3
 80005ac:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	430a      	orrs	r2, r1
 80005b4:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	791b      	ldrb	r3, [r3, #4]
 80005c0:	005b      	lsls	r3, r3, #1
 80005c2:	2103      	movs	r1, #3
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 80005c8:	43db      	mvns	r3, r3
 80005ca:	4619      	mov	r1, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	400a      	ands	r2, r1
 80005d2:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	689a      	ldr	r2, [r3, #8]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	79db      	ldrb	r3, [r3, #7]
 80005de:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	791b      	ldrb	r3, [r3, #4]
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	430a      	orrs	r2, r1
 80005f2:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	795b      	ldrb	r3, [r3, #5]
 80005f8:	2b02      	cmp	r3, #2
 80005fa:	f040 80ec 	bne.w	80007d6 <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 8000602:	08db      	lsrs	r3, r3, #3
 8000604:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	f003 0307 	and.w	r3, r3, #7
 800060e:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	7b7a      	ldrb	r2, [r7, #13]
 8000616:	3208      	adds	r2, #8
 8000618:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	2203      	movs	r2, #3
 8000624:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000628:	43db      	mvns	r3, r3
 800062a:	4618      	mov	r0, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	7b7a      	ldrb	r2, [r7, #13]
 8000632:	4001      	ands	r1, r0
 8000634:	3208      	adds	r2, #8
 8000636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	7b7a      	ldrb	r2, [r7, #13]
 8000640:	3208      	adds	r2, #8
 8000642:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	7a5b      	ldrb	r3, [r3, #9]
 800064a:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 800064c:	7b3b      	ldrb	r3, [r7, #12]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	7b7a      	ldrb	r2, [r7, #13]
 800065c:	4301      	orrs	r1, r0
 800065e:	3208      	adds	r2, #8
 8000660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 8000664:	e0b7      	b.n	80007d6 <GPIO_INIT+0x3be>
 8000666:	bf00      	nop
 8000668:	40020000 	.word	0x40020000
 800066c:	40023800 	.word	0x40023800
 8000670:	40020400 	.word	0x40020400
 8000674:	40020800 	.word	0x40020800
 8000678:	40020c00 	.word	0x40020c00
 800067c:	40021000 	.word	0x40021000
 8000680:	40021400 	.word	0x40021400
 8000684:	40021800 	.word	0x40021800
 8000688:	40021c00 	.word	0x40021c00
 800068c:	40022000 	.word	0x40022000
		SYSCFG_EN();
 8000690:	4b54      	ldr	r3, [pc, #336]	@ (80007e4 <GPIO_INIT+0x3cc>)
 8000692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000694:	4a53      	ldr	r2, [pc, #332]	@ (80007e4 <GPIO_INIT+0x3cc>)
 8000696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069a:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	795b      	ldrb	r3, [r3, #5]
 80006a0:	2b06      	cmp	r3, #6
 80006a2:	d12e      	bne.n	8000702 <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80006a4:	4b50      	ldr	r3, [pc, #320]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	7912      	ldrb	r2, [r2, #4]
 80006ac:	4611      	mov	r1, r2
 80006ae:	2201      	movs	r2, #1
 80006b0:	408a      	lsls	r2, r1
 80006b2:	43d2      	mvns	r2, r2
 80006b4:	4611      	mov	r1, r2
 80006b6:	4a4c      	ldr	r2, [pc, #304]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80006b8:	400b      	ands	r3, r1
 80006ba:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 80006bc:	4b4a      	ldr	r3, [pc, #296]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80006be:	68db      	ldr	r3, [r3, #12]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	7912      	ldrb	r2, [r2, #4]
 80006c4:	4611      	mov	r1, r2
 80006c6:	2201      	movs	r2, #1
 80006c8:	408a      	lsls	r2, r1
 80006ca:	43d2      	mvns	r2, r2
 80006cc:	4611      	mov	r1, r2
 80006ce:	4a46      	ldr	r2, [pc, #280]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80006d0:	400b      	ands	r3, r1
 80006d2:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 80006d4:	4b44      	ldr	r3, [pc, #272]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80006d6:	689b      	ldr	r3, [r3, #8]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	7912      	ldrb	r2, [r2, #4]
 80006dc:	4611      	mov	r1, r2
 80006de:	2201      	movs	r2, #1
 80006e0:	408a      	lsls	r2, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	4a40      	ldr	r2, [pc, #256]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80006e6:	430b      	orrs	r3, r1
 80006e8:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 80006ea:	4b3f      	ldr	r3, [pc, #252]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80006ec:	68db      	ldr	r3, [r3, #12]
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	7912      	ldrb	r2, [r2, #4]
 80006f2:	4611      	mov	r1, r2
 80006f4:	2201      	movs	r2, #1
 80006f6:	408a      	lsls	r2, r1
 80006f8:	4611      	mov	r1, r2
 80006fa:	4a3b      	ldr	r2, [pc, #236]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80006fc:	430b      	orrs	r3, r1
 80006fe:	60d3      	str	r3, [r2, #12]
 8000700:	e036      	b.n	8000770 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	795b      	ldrb	r3, [r3, #5]
 8000706:	2b05      	cmp	r3, #5
 8000708:	d117      	bne.n	800073a <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 800070a:	4b37      	ldr	r3, [pc, #220]	@ (80007e8 <GPIO_INIT+0x3d0>)
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	687a      	ldr	r2, [r7, #4]
 8000710:	7912      	ldrb	r2, [r2, #4]
 8000712:	4611      	mov	r1, r2
 8000714:	2201      	movs	r2, #1
 8000716:	408a      	lsls	r2, r1
 8000718:	43d2      	mvns	r2, r2
 800071a:	4611      	mov	r1, r2
 800071c:	4a32      	ldr	r2, [pc, #200]	@ (80007e8 <GPIO_INIT+0x3d0>)
 800071e:	400b      	ands	r3, r1
 8000720:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000722:	4b31      	ldr	r3, [pc, #196]	@ (80007e8 <GPIO_INIT+0x3d0>)
 8000724:	68db      	ldr	r3, [r3, #12]
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	7912      	ldrb	r2, [r2, #4]
 800072a:	4611      	mov	r1, r2
 800072c:	2201      	movs	r2, #1
 800072e:	408a      	lsls	r2, r1
 8000730:	4611      	mov	r1, r2
 8000732:	4a2d      	ldr	r2, [pc, #180]	@ (80007e8 <GPIO_INIT+0x3d0>)
 8000734:	430b      	orrs	r3, r1
 8000736:	60d3      	str	r3, [r2, #12]
 8000738:	e01a      	b.n	8000770 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	795b      	ldrb	r3, [r3, #5]
 800073e:	2b04      	cmp	r3, #4
 8000740:	d116      	bne.n	8000770 <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000742:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <GPIO_INIT+0x3d0>)
 8000744:	689b      	ldr	r3, [r3, #8]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	7912      	ldrb	r2, [r2, #4]
 800074a:	4611      	mov	r1, r2
 800074c:	2201      	movs	r2, #1
 800074e:	408a      	lsls	r2, r1
 8000750:	43d2      	mvns	r2, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <GPIO_INIT+0x3d0>)
 8000756:	400b      	ands	r3, r1
 8000758:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 800075a:	4b23      	ldr	r3, [pc, #140]	@ (80007e8 <GPIO_INIT+0x3d0>)
 800075c:	689b      	ldr	r3, [r3, #8]
 800075e:	687a      	ldr	r2, [r7, #4]
 8000760:	7912      	ldrb	r2, [r2, #4]
 8000762:	4611      	mov	r1, r2
 8000764:	2201      	movs	r2, #1
 8000766:	408a      	lsls	r2, r1
 8000768:	4611      	mov	r1, r2
 800076a:	4a1f      	ldr	r2, [pc, #124]	@ (80007e8 <GPIO_INIT+0x3d0>)
 800076c:	430b      	orrs	r3, r1
 800076e:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	089b      	lsrs	r3, r3, #2
 8000776:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	f003 0303 	and.w	r3, r3, #3
 8000780:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 8000782:	4a1a      	ldr	r2, [pc, #104]	@ (80007ec <GPIO_INIT+0x3d4>)
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	3302      	adds	r3, #2
 8000788:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	7a9b      	ldrb	r3, [r3, #10]
 8000790:	4619      	mov	r1, r3
 8000792:	7bbb      	ldrb	r3, [r7, #14]
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	4618      	mov	r0, r3
 800079c:	4913      	ldr	r1, [pc, #76]	@ (80007ec <GPIO_INIT+0x3d4>)
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	4302      	orrs	r2, r0
 80007a2:	3302      	adds	r3, #2
 80007a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	687a      	ldr	r2, [r7, #4]
 80007ae:	7912      	ldrb	r2, [r2, #4]
 80007b0:	4611      	mov	r1, r2
 80007b2:	2201      	movs	r2, #1
 80007b4:	408a      	lsls	r2, r1
 80007b6:	43d2      	mvns	r2, r2
 80007b8:	4611      	mov	r1, r2
 80007ba:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80007bc:	400b      	ands	r3, r1
 80007be:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	7912      	ldrb	r2, [r2, #4]
 80007c8:	4611      	mov	r1, r2
 80007ca:	2201      	movs	r2, #1
 80007cc:	408a      	lsls	r2, r1
 80007ce:	4611      	mov	r1, r2
 80007d0:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <GPIO_INIT+0x3d0>)
 80007d2:	430b      	orrs	r3, r1
 80007d4:	6013      	str	r3, [r2, #0]
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40013c00 	.word	0x40013c00
 80007ec:	40013800 	.word	0x40013800

080007f0 <IRQ_Config>:
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 80007f0:	b480      	push	{r7}
 80007f2:	b087      	sub	sp, #28
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	460a      	mov	r2, r1
 80007fa:	71fb      	strb	r3, [r7, #7]
 80007fc:	4613      	mov	r3, r2
 80007fe:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	095b      	lsrs	r3, r3, #5
 8000804:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 8000806:	7dfb      	ldrb	r3, [r7, #23]
 8000808:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 800080a:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800080e:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 8000812:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 8000814:	7dfb      	ldrb	r3, [r7, #23]
 8000816:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <IRQ_Config+0x74>)
 800081a:	4413      	add	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 800081e:	79bb      	ldrb	r3, [r7, #6]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d10b      	bne.n	800083c <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 8000824:	693b      	ldr	r3, [r7, #16]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	79fa      	ldrb	r2, [r7, #7]
 800082a:	f002 021f 	and.w	r2, r2, #31
 800082e:	2101      	movs	r1, #1
 8000830:	fa01 f202 	lsl.w	r2, r1, r2
 8000834:	431a      	orrs	r2, r3
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 800083a:	e00d      	b.n	8000858 <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 800083c:	79bb      	ldrb	r3, [r7, #6]
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10a      	bne.n	8000858 <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	79fa      	ldrb	r2, [r7, #7]
 8000848:	f002 021f 	and.w	r2, r2, #31
 800084c:	2101      	movs	r1, #1
 800084e:	fa01 f202 	lsl.w	r2, r1, r2
 8000852:	431a      	orrs	r2, r3
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	601a      	str	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	371c      	adds	r7, #28
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr
 8000864:	e000e180 	.word	0xe000e180

08000868 <USART_INIT>:
USART_READY_IT, .rxBuffer = NULL, .rxLen = 0, .RxState = USART_READY_IT };

volatile uint8_t USART_txCompl = LOW;
volatile uint8_t USART_rxCompl = LOW;

void USART_INIT(USART_HandleTypedef *usart_handle) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	uint32_t clock = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	617b      	str	r3, [r7, #20]
	if (usart_handle->USARTx == USART1) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a67      	ldr	r2, [pc, #412]	@ (8000a18 <USART_INIT+0x1b0>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d106      	bne.n	800088c <USART_INIT+0x24>
		USART1_EN();
 800087e:	4b67      	ldr	r3, [pc, #412]	@ (8000a1c <USART_INIT+0x1b4>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	4a66      	ldr	r2, [pc, #408]	@ (8000a1c <USART_INIT+0x1b4>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	6453      	str	r3, [r2, #68]	@ 0x44
 800088a:	e052      	b.n	8000932 <USART_INIT+0xca>
	} else if (usart_handle->USARTx == USART2) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a63      	ldr	r2, [pc, #396]	@ (8000a20 <USART_INIT+0x1b8>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d106      	bne.n	80008a4 <USART_INIT+0x3c>
		USART2_EN();
 8000896:	4b61      	ldr	r3, [pc, #388]	@ (8000a1c <USART_INIT+0x1b4>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	4a60      	ldr	r2, [pc, #384]	@ (8000a1c <USART_INIT+0x1b4>)
 800089c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008a2:	e046      	b.n	8000932 <USART_INIT+0xca>
	} else if (usart_handle->USARTx == USART3) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a5e      	ldr	r2, [pc, #376]	@ (8000a24 <USART_INIT+0x1bc>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d106      	bne.n	80008bc <USART_INIT+0x54>
		USART3_EN();
 80008ae:	4b5b      	ldr	r3, [pc, #364]	@ (8000a1c <USART_INIT+0x1b4>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b2:	4a5a      	ldr	r2, [pc, #360]	@ (8000a1c <USART_INIT+0x1b4>)
 80008b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ba:	e03a      	b.n	8000932 <USART_INIT+0xca>
	} else if (usart_handle->USARTx == UART4) {
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a59      	ldr	r2, [pc, #356]	@ (8000a28 <USART_INIT+0x1c0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d106      	bne.n	80008d4 <USART_INIT+0x6c>
		UART4_EN();
 80008c6:	4b55      	ldr	r3, [pc, #340]	@ (8000a1c <USART_INIT+0x1b4>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a54      	ldr	r2, [pc, #336]	@ (8000a1c <USART_INIT+0x1b4>)
 80008cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d2:	e02e      	b.n	8000932 <USART_INIT+0xca>
	} else if (usart_handle->USARTx == UART5) {
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a54      	ldr	r2, [pc, #336]	@ (8000a2c <USART_INIT+0x1c4>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d106      	bne.n	80008ec <USART_INIT+0x84>
		UART5_EN();
 80008de:	4b4f      	ldr	r3, [pc, #316]	@ (8000a1c <USART_INIT+0x1b4>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e2:	4a4e      	ldr	r2, [pc, #312]	@ (8000a1c <USART_INIT+0x1b4>)
 80008e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80008ea:	e022      	b.n	8000932 <USART_INIT+0xca>
	} else if (usart_handle->USARTx == USART6) {
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a4f      	ldr	r2, [pc, #316]	@ (8000a30 <USART_INIT+0x1c8>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d106      	bne.n	8000904 <USART_INIT+0x9c>
		USART6_EN();
 80008f6:	4b49      	ldr	r3, [pc, #292]	@ (8000a1c <USART_INIT+0x1b4>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a48      	ldr	r2, [pc, #288]	@ (8000a1c <USART_INIT+0x1b4>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	e016      	b.n	8000932 <USART_INIT+0xca>
	} else if (usart_handle->USARTx == UART7) {
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a4a      	ldr	r2, [pc, #296]	@ (8000a34 <USART_INIT+0x1cc>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d106      	bne.n	800091c <USART_INIT+0xb4>
		UART7_EN();
 800090e:	4b43      	ldr	r3, [pc, #268]	@ (8000a1c <USART_INIT+0x1b4>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	4a42      	ldr	r2, [pc, #264]	@ (8000a1c <USART_INIT+0x1b4>)
 8000914:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000918:	6413      	str	r3, [r2, #64]	@ 0x40
 800091a:	e00a      	b.n	8000932 <USART_INIT+0xca>
	} else if (usart_handle->USARTx == UART8) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a45      	ldr	r2, [pc, #276]	@ (8000a38 <USART_INIT+0x1d0>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d105      	bne.n	8000932 <USART_INIT+0xca>
		UART8_EN();
 8000926:	4b3d      	ldr	r3, [pc, #244]	@ (8000a1c <USART_INIT+0x1b4>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a3c      	ldr	r2, [pc, #240]	@ (8000a1c <USART_INIT+0x1b4>)
 800092c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	// Determine which clock speed to use based on USART/UART instance
	if (usart_handle->USARTx == USART1 || usart_handle->USARTx == USART6) {
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a38      	ldr	r2, [pc, #224]	@ (8000a18 <USART_INIT+0x1b0>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d004      	beq.n	8000946 <USART_INIT+0xde>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a3b      	ldr	r2, [pc, #236]	@ (8000a30 <USART_INIT+0x1c8>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d105      	bne.n	8000952 <USART_INIT+0xea>
		// USART1 and USART6 are on APB2
		Get_APB2_Clock_Speed();
 8000946:	f7ff fd01 	bl	800034c <Get_APB2_Clock_Speed>
		clock = APB2_Clock_Speed;
 800094a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a3c <USART_INIT+0x1d4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e004      	b.n	800095c <USART_INIT+0xf4>
	} else {
		// USART2, USART3, UART4, UART5, UART7, UART8 are on APB1
		Get_APB1_Clock_Speed();
 8000952:	f7ff fc95 	bl	8000280 <Get_APB1_Clock_Speed>
		clock = SystemClockSrc;
 8000956:	4b3a      	ldr	r3, [pc, #232]	@ (8000a40 <USART_INIT+0x1d8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	617b      	str	r3, [r7, #20]
	}
// Enable FPU - CRITICAL for floating point operations
	SCB->CPACR |= ((3UL << 20) | (3UL << 22)); // Set CP10 and CP11 to Full Access
 800095c:	4b39      	ldr	r3, [pc, #228]	@ (8000a44 <USART_INIT+0x1dc>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000962:	4a38      	ldr	r2, [pc, #224]	@ (8000a44 <USART_INIT+0x1dc>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	__asm volatile ("DSB");
 800096c:	f3bf 8f4f 	dsb	sy
// Data Synchronization Barrier
	__asm volatile ("ISB");
 8000970:	f3bf 8f6f 	isb	sy
// Instruction Synchronization Barrier

	float USARTDIV = (float) clock
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	ee07 3a90 	vmov	s15, r3
 800097a:	eef8 6a67 	vcvt.f32.u32	s13, s15
			/ (8.0f * (2 - usart_handle->oversampling_mode)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	791b      	ldrb	r3, [r3, #4]
 8000982:	f1c3 0302 	rsb	r3, r3, #2
 8000986:	ee07 3a90 	vmov	s15, r3
 800098a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800098e:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8000992:	ee27 7a87 	vmul.f32	s14, s15, s14
					* usart_handle->baud_rate);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	ee07 3a90 	vmov	s15, r3
 800099e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009a2:	ee27 7a27 	vmul.f32	s14, s14, s15
	float USARTDIV = (float) clock
 80009a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80009aa:	edc7 7a03 	vstr	s15, [r7, #12]

// Extract mantissa (integer part)
	uint16_t DIV_Mantissa = (uint16_t) USARTDIV;
 80009ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80009b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009b6:	ee17 3a90 	vmov	r3, s15
 80009ba:	827b      	strh	r3, [r7, #18]

// Extract fraction and Round it to the nearest value
// For example: 9.92 + 0.5 = 10.42 --> Round to 10;
	uint16_t DIV_Fraction = (uint16_t) ((USARTDIV - DIV_Mantissa) * 8
 80009bc:	8a7b      	ldrh	r3, [r7, #18]
 80009be:	ee07 3a90 	vmov	s15, r3
 80009c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80009ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009ce:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80009d2:	ee27 7a87 	vmul.f32	s14, s15, s14
			* (2 - usart_handle->oversampling_mode) + 0.5f);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	f1c3 0302 	rsb	r3, r3, #2
 80009de:	ee07 3a90 	vmov	s15, r3
 80009e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ea:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80009ee:	ee77 7a87 	vadd.f32	s15, s15, s14
	uint16_t DIV_Fraction = (uint16_t) ((USARTDIV - DIV_Mantissa) * 8
 80009f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009f6:	ee17 3a90 	vmov	r3, s15
 80009fa:	823b      	strh	r3, [r7, #16]

// // Handle fraction overflow
	if (usart_handle->oversampling_mode == USART_OVERSAMPLING_16) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	791b      	ldrb	r3, [r3, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d121      	bne.n	8000a48 <USART_INIT+0x1e0>
		if (DIV_Fraction > 15) {
 8000a04:	8a3b      	ldrh	r3, [r7, #16]
 8000a06:	2b0f      	cmp	r3, #15
 8000a08:	d926      	bls.n	8000a58 <USART_INIT+0x1f0>
			DIV_Mantissa++;
 8000a0a:	8a7b      	ldrh	r3, [r7, #18]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	827b      	strh	r3, [r7, #18]
			DIV_Fraction = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	823b      	strh	r3, [r7, #16]
 8000a14:	e020      	b.n	8000a58 <USART_INIT+0x1f0>
 8000a16:	bf00      	nop
 8000a18:	40011000 	.word	0x40011000
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40004400 	.word	0x40004400
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40004c00 	.word	0x40004c00
 8000a2c:	40005000 	.word	0x40005000
 8000a30:	40011400 	.word	0x40011400
 8000a34:	40007800 	.word	0x40007800
 8000a38:	40007c00 	.word	0x40007c00
 8000a3c:	20000088 	.word	0x20000088
 8000a40:	20000084 	.word	0x20000084
 8000a44:	e000ed00 	.word	0xe000ed00
		}
	} else {
		if (DIV_Fraction > 7) {
 8000a48:	8a3b      	ldrh	r3, [r7, #16]
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	d904      	bls.n	8000a58 <USART_INIT+0x1f0>
			DIV_Mantissa++;
 8000a4e:	8a7b      	ldrh	r3, [r7, #18]
 8000a50:	3301      	adds	r3, #1
 8000a52:	827b      	strh	r3, [r7, #18]
			DIV_Fraction = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	823b      	strh	r3, [r7, #16]
		}
	}

	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_15_pos);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	68da      	ldr	r2, [r3, #12]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000a66:	60da      	str	r2, [r3, #12]
	usart_handle->USARTx->CR1 |= (usart_handle->oversampling_mode
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	68d9      	ldr	r1, [r3, #12]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	791b      	ldrb	r3, [r3, #4]
			<< Shift_15_pos);
 8000a72:	03da      	lsls	r2, r3, #15
	usart_handle->USARTx->CR1 |= (usart_handle->oversampling_mode
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	60da      	str	r2, [r3, #12]

	usart_handle->USARTx->BRR = 0;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
	usart_handle->USARTx->BRR |= (DIV_Fraction << Shift_0_pos);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	6899      	ldr	r1, [r3, #8]
 8000a8a:	8a3a      	ldrh	r2, [r7, #16]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	430a      	orrs	r2, r1
 8000a92:	609a      	str	r2, [r3, #8]
	usart_handle->USARTx->BRR |= (DIV_Mantissa << Shift_4_pos);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6899      	ldr	r1, [r3, #8]
 8000a9a:	8a7b      	ldrh	r3, [r7, #18]
 8000a9c:	011a      	lsls	r2, r3, #4
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	430a      	orrs	r2, r1
 8000aa4:	609a      	str	r2, [r3, #8]

	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_12_pos);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	68da      	ldr	r2, [r3, #12]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000ab4:	60da      	str	r2, [r3, #12]
	usart_handle->USARTx->CR1 |= (usart_handle->data_bits << Shift_12_pos);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	68d9      	ldr	r1, [r3, #12]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	795b      	ldrb	r3, [r3, #5]
 8000ac0:	031a      	lsls	r2, r3, #12
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	60da      	str	r2, [r3, #12]

	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_10_pos);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000ad8:	60da      	str	r2, [r3, #12]
	usart_handle->USARTx->CR1 |= (usart_handle->parity_control << Shift_10_pos);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	68d9      	ldr	r1, [r3, #12]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	799b      	ldrb	r3, [r3, #6]
 8000ae4:	029a      	lsls	r2, r3, #10
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	60da      	str	r2, [r3, #12]

	if (usart_handle->parity_control == USART_PARITY_ENABLE) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	799b      	ldrb	r3, [r3, #6]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d111      	bne.n	8000b1a <USART_INIT+0x2b2>
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_9_pos);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	68da      	ldr	r2, [r3, #12]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000b04:	60da      	str	r2, [r3, #12]
		usart_handle->USARTx->CR1 |= (usart_handle->parity_selection
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	68d9      	ldr	r1, [r3, #12]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	79db      	ldrb	r3, [r3, #7]
				<< Shift_9_pos);
 8000b10:	025a      	lsls	r2, r3, #9
		usart_handle->USARTx->CR1 |= (usart_handle->parity_selection
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	60da      	str	r2, [r3, #12]
	}

	usart_handle->USARTx->CR2 &= ~(GPIO_BIT_11_Mask << Shift_12_pos);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	691a      	ldr	r2, [r3, #16]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8000b28:	611a      	str	r2, [r3, #16]
	usart_handle->USARTx->CR2 |= (usart_handle->stop_bits << Shift_12_pos);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6919      	ldr	r1, [r3, #16]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	7a1b      	ldrb	r3, [r3, #8]
 8000b34:	031a      	lsls	r2, r3, #12
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	611a      	str	r2, [r3, #16]

// Clock Synchronous Enable or Not
	usart_handle->USARTx->CR2 &= ~(HIGH << Shift_11_pos);
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	691a      	ldr	r2, [r3, #16]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b4c:	611a      	str	r2, [r3, #16]
	usart_handle->USARTx->CR2 |= (usart_handle->usart_mode << Shift_11_pos);
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	6919      	ldr	r1, [r3, #16]
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	7c1b      	ldrb	r3, [r3, #16]
 8000b58:	02da      	lsls	r2, r3, #11
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	430a      	orrs	r2, r1
 8000b60:	611a      	str	r2, [r3, #16]

	if (usart_handle->usart_mode == USART_MODE_SYNC) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7c1b      	ldrb	r3, [r3, #16]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d125      	bne.n	8000bb6 <USART_INIT+0x34e>
		usart_handle->USARTx->CR2 &= ~(BIT_111_MASK << Shift_8_pos);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	691a      	ldr	r2, [r3, #16]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000b78:	611a      	str	r2, [r3, #16]
		usart_handle->USARTx->CR2 |= (usart_handle->last_bit_clock_pulse
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	6919      	ldr	r1, [r3, #16]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	7cdb      	ldrb	r3, [r3, #19]
				<< Shift_8_pos);
 8000b84:	021a      	lsls	r2, r3, #8
		usart_handle->USARTx->CR2 |= (usart_handle->last_bit_clock_pulse
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	611a      	str	r2, [r3, #16]
		usart_handle->USARTx->CR2 |= (usart_handle->usart_cpha << Shift_9_pos);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6919      	ldr	r1, [r3, #16]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	7c9b      	ldrb	r3, [r3, #18]
 8000b98:	025a      	lsls	r2, r3, #9
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	430a      	orrs	r2, r1
 8000ba0:	611a      	str	r2, [r3, #16]
		usart_handle->USARTx->CR2 |= (usart_handle->usart_cpol << Shift_10_pos);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	6919      	ldr	r1, [r3, #16]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	7c5b      	ldrb	r3, [r3, #17]
 8000bac:	029a      	lsls	r2, r3, #10
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	430a      	orrs	r2, r1
 8000bb4:	611a      	str	r2, [r3, #16]
	 STM32 checks CTS before transmitting
	 If CTS is high (not ready), transmission is paused by hardware
	 When CTS goes low (ready), transmission resumes automatically*/

// Hardware control flow
	usart_handle->USARTx->CR3 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	695a      	ldr	r2, [r3, #20]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8000bc4:	615a      	str	r2, [r3, #20]
	if (usart_handle->usart_hardware_flow_control != USART_HW_FLOW_CTRL_NONE) {
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7d1b      	ldrb	r3, [r3, #20]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d009      	beq.n	8000be2 <USART_INIT+0x37a>
		usart_handle->USARTx->CR3 |= (usart_handle->usart_hardware_flow_control
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6959      	ldr	r1, [r3, #20]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7d1b      	ldrb	r3, [r3, #20]
				<< 8);
 8000bd8:	021a      	lsls	r2, r3, #8
		usart_handle->USARTx->CR3 |= (usart_handle->usart_hardware_flow_control
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	615a      	str	r2, [r3, #20]
	}

// Enable Peripheral
	USART_ENABLE(usart_handle, HIGH);
 8000be2:	2101      	movs	r1, #1
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 f805 	bl	8000bf4 <USART_ENABLE>
}
 8000bea:	bf00      	nop
 8000bec:	3718      	adds	r7, #24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop

08000bf4 <USART_ENABLE>:

void USART_ENABLE(USART_HandleTypedef *usart_handle, uint8_t EnOrDis) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	460b      	mov	r3, r1
 8000bfe:	70fb      	strb	r3, [r7, #3]
	if (EnOrDis == HIGH) {
 8000c00:	78fb      	ldrb	r3, [r7, #3]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d109      	bne.n	8000c1a <USART_ENABLE+0x26>
		usart_handle->USARTx->CR1 |= (EnOrDis << Shift_13_pos);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	68d9      	ldr	r1, [r3, #12]
 8000c0c:	78fb      	ldrb	r3, [r7, #3]
 8000c0e:	035a      	lsls	r2, r3, #13
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	60da      	str	r2, [r3, #12]
	} else {
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_13_pos);
	}
}
 8000c18:	e007      	b.n	8000c2a <USART_ENABLE+0x36>
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_13_pos);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8000c28:	60da      	str	r2, [r3, #12]
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <UART_TRANSMIT_ENABLE>:

void UART_TRANSMIT_ENABLE(USART_HandleTypedef *usart_handle, uint8_t EnOrDis) {
 8000c36:	b480      	push	{r7}
 8000c38:	b083      	sub	sp, #12
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	70fb      	strb	r3, [r7, #3]
	if (EnOrDis == HIGH) {
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d109      	bne.n	8000c5c <UART_TRANSMIT_ENABLE+0x26>
		usart_handle->USARTx->CR1 |= (EnOrDis << Shift_3_pos);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68d9      	ldr	r1, [r3, #12]
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	00da      	lsls	r2, r3, #3
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	430a      	orrs	r2, r1
 8000c58:	60da      	str	r2, [r3, #12]
	} else {
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_3_pos);
	}
}
 8000c5a:	e007      	b.n	8000c6c <UART_TRANSMIT_ENABLE+0x36>
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_3_pos);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68da      	ldr	r2, [r3, #12]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0208 	bic.w	r2, r2, #8
 8000c6a:	60da      	str	r2, [r3, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <UART_RECEIVER_ENABLE>:
	while (!((usart_handle->USARTx->SR >> Shift_6_pos) & 0x1))
		;
	UART_TRANSMIT_ENABLE(usart_handle, LOW);
}

void UART_RECEIVER_ENABLE(USART_HandleTypedef *usart_handle, uint8_t EnOrDis) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	70fb      	strb	r3, [r7, #3]
	if (EnOrDis == HIGH) {
 8000c84:	78fb      	ldrb	r3, [r7, #3]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d109      	bne.n	8000c9e <UART_RECEIVER_ENABLE+0x26>
		usart_handle->USARTx->CR1 |= (EnOrDis << Shift_2_pos);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68d9      	ldr	r1, [r3, #12]
 8000c90:	78fb      	ldrb	r3, [r7, #3]
 8000c92:	009a      	lsls	r2, r3, #2
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	60da      	str	r2, [r3, #12]
	} else {
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_2_pos);
	}
}
 8000c9c:	e007      	b.n	8000cae <UART_RECEIVER_ENABLE+0x36>
		usart_handle->USARTx->CR1 &= ~(HIGH << Shift_2_pos);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	f022 0204 	bic.w	r2, r2, #4
 8000cac:	60da      	str	r2, [r3, #12]
}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <USART_write_IT>:
		;
	UART_RECEIVER_ENABLE(usart_handle, LOW);
}

uint8_t USART_write_IT(USART_HandleTypedef *usart_handle, uint8_t *data,
		uint32_t size) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	uint8_t state = USART_handleIT.TxState;
 8000cc8:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <USART_write_IT+0x5c>)
 8000cca:	7c1b      	ldrb	r3, [r3, #16]
 8000ccc:	75fb      	strb	r3, [r7, #23]

	if (state == USART_READY_IT) {
 8000cce:	7dfb      	ldrb	r3, [r7, #23]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d11c      	bne.n	8000d0e <USART_write_IT+0x52>
		USART_handleIT.TxState = USART_BUSY_TX_IT;
 8000cd4:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <USART_write_IT+0x5c>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	741a      	strb	r2, [r3, #16]
		USART_handleIT.txBuffer = data;
 8000cda:	4a0f      	ldr	r2, [pc, #60]	@ (8000d18 <USART_write_IT+0x5c>)
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	6013      	str	r3, [r2, #0]
		USART_handleIT.txLen = size;
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <USART_write_IT+0x5c>)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6093      	str	r3, [r2, #8]
		UART_TRANSMIT_ENABLE(usart_handle, HIGH);
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff ffa4 	bl	8000c36 <UART_TRANSMIT_ENABLE>

		// TXEIE: TXE interrupt enable
		usart_handle->USARTx->CR1 |= (HIGH << Shift_7_pos);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000cfc:	60da      	str	r2, [r3, #12]

		// TCIE: Transmission complete interrupt enable
		usart_handle->USARTx->CR1 |= (HIGH << Shift_6_pos);
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d0c:	60da      	str	r2, [r3, #12]
	}

	return state;
 8000d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3718      	adds	r7, #24
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000008c 	.word	0x2000008c

08000d1c <USART_read_IT>:
uint8_t USART_read_IT(USART_HandleTypedef *usart_handle, uint8_t *data,
		uint32_t size) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
	uint8_t state = USART_handleIT.RxState;
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <USART_read_IT+0x4c>)
 8000d2a:	7c5b      	ldrb	r3, [r3, #17]
 8000d2c:	75fb      	strb	r3, [r7, #23]

	if (state == USART_READY_IT) {
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d114      	bne.n	8000d5e <USART_read_IT+0x42>
		USART_handleIT.RxState = USART_BUSY_RX_IT;
 8000d34:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <USART_read_IT+0x4c>)
 8000d36:	2202      	movs	r2, #2
 8000d38:	745a      	strb	r2, [r3, #17]
		USART_handleIT.rxBuffer = data;
 8000d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d68 <USART_read_IT+0x4c>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	6053      	str	r3, [r2, #4]
		USART_handleIT.rxLen = size;
 8000d40:	4a09      	ldr	r2, [pc, #36]	@ (8000d68 <USART_read_IT+0x4c>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60d3      	str	r3, [r2, #12]
		UART_RECEIVER_ENABLE(usart_handle, HIGH);
 8000d46:	2101      	movs	r1, #1
 8000d48:	68f8      	ldr	r0, [r7, #12]
 8000d4a:	f7ff ff95 	bl	8000c78 <UART_RECEIVER_ENABLE>

		// RXNEIE: RXNE interrupt enable
		usart_handle->USARTx->CR1 |= (HIGH << Shift_5_pos);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	68da      	ldr	r2, [r3, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f042 0220 	orr.w	r2, r2, #32
 8000d5c:	60da      	str	r2, [r3, #12]
	}

	return state;
 8000d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3718      	adds	r7, #24
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	2000008c 	.word	0x2000008c

08000d6c <USART_close_transmit>:

static void USART_close_transmit(USART_HandleTypedef *usart_handle) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	USART_handleIT.TxState = USART_READY_IT;
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <USART_close_transmit+0x70>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	741a      	strb	r2, [r3, #16]
	USART_handleIT.txBuffer = NULL;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	@ (8000ddc <USART_close_transmit+0x70>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
	USART_handleIT.txLen = 0;
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <USART_close_transmit+0x70>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
	UART_TRANSMIT_ENABLE(usart_handle, LOW);
 8000d86:	2100      	movs	r1, #0
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff54 	bl	8000c36 <UART_TRANSMIT_ENABLE>

// Clear TC Flag
	usart_handle->USARTx->SR &= ~(HIGH << Shift_6_pos);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d9c:	601a      	str	r2, [r3, #0]

// TXEIE: TXE interrupt enable
	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_7_pos);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68da      	ldr	r2, [r3, #12]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000dac:	60da      	str	r2, [r3, #12]

// TCIE: Transmission complete interrupt enable
	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_6_pos);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	68da      	ldr	r2, [r3, #12]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000dbc:	60da      	str	r2, [r3, #12]

// Disable CTS interrupt
	usart_handle->USARTx->CR3 &= ~(HIGH << Shift_10_pos);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	695a      	ldr	r2, [r3, #20]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000dcc:	615a      	str	r2, [r3, #20]

	USART_txCompl = 1;
 8000dce:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <USART_close_transmit+0x74>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	701a      	strb	r2, [r3, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000008c 	.word	0x2000008c
 8000de0:	200000a0 	.word	0x200000a0

08000de4 <USART_close_receiver>:

static void USART_close_receiver(USART_HandleTypedef *usart_handle) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	USART_handleIT.RxState = USART_READY_IT;
 8000dec:	4b0d      	ldr	r3, [pc, #52]	@ (8000e24 <USART_close_receiver+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	745a      	strb	r2, [r3, #17]
	USART_handleIT.rxBuffer = NULL;
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <USART_close_receiver+0x40>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
	USART_handleIT.rxLen = 0;
 8000df8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e24 <USART_close_receiver+0x40>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	60da      	str	r2, [r3, #12]
	UART_RECEIVER_ENABLE(usart_handle, LOW);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff39 	bl	8000c78 <UART_RECEIVER_ENABLE>

// Bit 5  RXNEIE: RXNE interrupt enable
	usart_handle->USARTx->CR1 &= ~(HIGH << Shift_5_pos);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f022 0220 	bic.w	r2, r2, #32
 8000e14:	60da      	str	r2, [r3, #12]

	USART_rxCompl = 1;
 8000e16:	4b04      	ldr	r3, [pc, #16]	@ (8000e28 <USART_close_receiver+0x44>)
 8000e18:	2201      	movs	r2, #1
 8000e1a:	701a      	strb	r2, [r3, #0]
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000008c 	.word	0x2000008c
 8000e28:	200000a1 	.word	0x200000a1

08000e2c <USART_send_data_IT>:

static void USART_send_data_IT(USART_HandleTypedef *usart_handle) {
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
	if (USART_handleIT.txLen > 0) {
 8000e34:	4b31      	ldr	r3, [pc, #196]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e36:	689b      	ldr	r3, [r3, #8]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d059      	beq.n	8000ef0 <USART_send_data_IT+0xc4>
		// When transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
		// the value written in the MSB (bit 7 or bit 8 depending on the data length)
		// has no effect because it is replaced by the parity.
		if (usart_handle->data_bits == USART_9_DATA_BITS) {
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	795b      	ldrb	r3, [r3, #5]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d12d      	bne.n	8000ea0 <USART_send_data_IT+0x74>
			if (usart_handle->parity_control == USART_PARITY_DISABLE) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	799b      	ldrb	r3, [r3, #6]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d118      	bne.n	8000e7e <USART_send_data_IT+0x52>
				 | 0x20000004 | 0xAA  | LSB of third character  |
				 | 0x20000005 | 0x00  | MSB of third character  |

				 */
				usart_handle->USARTx->DR =
						(*((uint16_t*) USART_handleIT.txBuffer)
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	881b      	ldrh	r3, [r3, #0]
								& (uint16_t) 0x1FF); // Write 9-bit data
 8000e52:	461a      	mov	r2, r3
				usart_handle->USARTx->DR =
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
								& (uint16_t) 0x1FF); // Write 9-bit data
 8000e58:	f3c2 0208 	ubfx	r2, r2, #0, #9
				usart_handle->USARTx->DR =
 8000e5c:	605a      	str	r2, [r3, #4]
				USART_handleIT.txBuffer++;
 8000e5e:	4b27      	ldr	r3, [pc, #156]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a25      	ldr	r2, [pc, #148]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e66:	6013      	str	r3, [r2, #0]
				USART_handleIT.txBuffer++;
 8000e68:	4b24      	ldr	r3, [pc, #144]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	4a23      	ldr	r2, [pc, #140]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e70:	6013      	str	r3, [r2, #0]
				USART_handleIT.txLen -= 2;
 8000e72:	4b22      	ldr	r3, [pc, #136]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	3b02      	subs	r3, #2
 8000e78:	4a20      	ldr	r2, [pc, #128]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e7a:	6093      	str	r3, [r2, #8]
				USART_handleIT.txLen -= 1;
			}
		}
	}

}
 8000e7c:	e038      	b.n	8000ef0 <USART_send_data_IT+0xc4>
				usart_handle->USARTx->DR = (*(USART_handleIT.txBuffer)
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	781a      	ldrb	r2, [r3, #0]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
				USART_handleIT.txBuffer++;
 8000e8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	4a1a      	ldr	r2, [pc, #104]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e92:	6013      	str	r3, [r2, #0]
				USART_handleIT.txLen -= 1;
 8000e94:	4b19      	ldr	r3, [pc, #100]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	3b01      	subs	r3, #1
 8000e9a:	4a18      	ldr	r2, [pc, #96]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000e9c:	6093      	str	r3, [r2, #8]
}
 8000e9e:	e027      	b.n	8000ef0 <USART_send_data_IT+0xc4>
			if (usart_handle->parity_control == USART_PARITY_DISABLE) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	799b      	ldrb	r3, [r3, #6]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d110      	bne.n	8000eca <USART_send_data_IT+0x9e>
				usart_handle->USARTx->DR = (uint8_t) (*(USART_handleIT.txBuffer)
 8000ea8:	4b14      	ldr	r3, [pc, #80]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
				USART_handleIT.txBuffer++;
 8000eb4:	4b11      	ldr	r3, [pc, #68]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	4a10      	ldr	r2, [pc, #64]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000ebc:	6013      	str	r3, [r2, #0]
				USART_handleIT.txLen -= 1;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000ec0:	689b      	ldr	r3, [r3, #8]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000ec6:	6093      	str	r3, [r2, #8]
}
 8000ec8:	e012      	b.n	8000ef0 <USART_send_data_IT+0xc4>
				usart_handle->USARTx->DR = (uint8_t) (*(USART_handleIT.txBuffer)
 8000eca:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000eda:	605a      	str	r2, [r3, #4]
				USART_handleIT.txBuffer++;
 8000edc:	4b07      	ldr	r3, [pc, #28]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a06      	ldr	r2, [pc, #24]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000ee4:	6013      	str	r3, [r2, #0]
				USART_handleIT.txLen -= 1;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	4a03      	ldr	r2, [pc, #12]	@ (8000efc <USART_send_data_IT+0xd0>)
 8000eee:	6093      	str	r3, [r2, #8]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	2000008c 	.word	0x2000008c

08000f00 <USART_receive_data_IT>:

static void USART_receive_data_IT(USART_HandleTypedef *usart_handle) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	if (USART_handleIT.rxLen > 0) {
 8000f08:	4b36      	ldr	r3, [pc, #216]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d05d      	beq.n	8000fcc <USART_receive_data_IT+0xcc>
		if (usart_handle->data_bits == USART_9_DATA_BITS) {
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	795b      	ldrb	r3, [r3, #5]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d12f      	bne.n	8000f78 <USART_receive_data_IT+0x78>
			if (usart_handle->parity_control == USART_PARITY_DISABLE) {
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	799b      	ldrb	r3, [r3, #6]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d119      	bne.n	8000f54 <USART_receive_data_IT+0x54>
				 | 0x20000004 | 0xAA  | LSB of third character  |
				 | 0x20000005 | 0x00  | MSB of third character  |

				 */
				*((uint16_t*) (USART_handleIT.rxBuffer)) =
						(usart_handle->USARTx->DR & (uint16_t) 0x1FF);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	b29a      	uxth	r2, r3
				*((uint16_t*) (USART_handleIT.rxBuffer)) =
 8000f28:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
						(usart_handle->USARTx->DR & (uint16_t) 0x1FF);
 8000f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000f30:	b292      	uxth	r2, r2
				*((uint16_t*) (USART_handleIT.rxBuffer)) =
 8000f32:	801a      	strh	r2, [r3, #0]
				USART_handleIT.rxBuffer++;
 8000f34:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f3c:	6053      	str	r3, [r2, #4]
				USART_handleIT.rxBuffer++;
 8000f3e:	4b29      	ldr	r3, [pc, #164]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	3301      	adds	r3, #1
 8000f44:	4a27      	ldr	r2, [pc, #156]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f46:	6053      	str	r3, [r2, #4]
				USART_handleIT.rxLen -= 2;
 8000f48:	4b26      	ldr	r3, [pc, #152]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	3b02      	subs	r3, #2
 8000f4e:	4a25      	ldr	r2, [pc, #148]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f50:	60d3      	str	r3, [r2, #12]
 8000f52:	e03b      	b.n	8000fcc <USART_receive_data_IT+0xcc>
			} else {
				*(USART_handleIT.rxBuffer) = (usart_handle->USARTx->DR
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	b2d2      	uxtb	r2, r2
 8000f60:	701a      	strb	r2, [r3, #0]
						& (uint8_t) 0xFF);
				USART_handleIT.rxBuffer++;
 8000f62:	4b20      	ldr	r3, [pc, #128]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	3301      	adds	r3, #1
 8000f68:	4a1e      	ldr	r2, [pc, #120]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f6a:	6053      	str	r3, [r2, #4]
				USART_handleIT.rxLen -= 1;
 8000f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	3b01      	subs	r3, #1
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f74:	60d3      	str	r3, [r2, #12]
 8000f76:	e029      	b.n	8000fcc <USART_receive_data_IT+0xcc>
			}
		} else {
			if (usart_handle->parity_control == USART_PARITY_DISABLE) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	799b      	ldrb	r3, [r3, #6]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d111      	bne.n	8000fa4 <USART_receive_data_IT+0xa4>
				*(USART_handleIT.rxBuffer) = (uint8_t) (usart_handle->USARTx->DR
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	685a      	ldr	r2, [r3, #4]
 8000f86:	4b17      	ldr	r3, [pc, #92]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	701a      	strb	r2, [r3, #0]
						& (uint8_t) 0xFF); // Write 8-bit data
				USART_handleIT.rxBuffer++;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	3301      	adds	r3, #1
 8000f94:	4a13      	ldr	r2, [pc, #76]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f96:	6053      	str	r3, [r2, #4]
				USART_handleIT.rxLen -= 1;
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	4a11      	ldr	r2, [pc, #68]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000fa0:	60d3      	str	r3, [r2, #12]
 8000fa2:	e013      	b.n	8000fcc <USART_receive_data_IT+0xcc>
			} else {
				*(USART_handleIT.rxBuffer) = (uint8_t) (usart_handle->USARTx->DR
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8000fb4:	b2d2      	uxtb	r2, r2
 8000fb6:	701a      	strb	r2, [r3, #0]
						& (uint8_t) 0x7F); // Write 8-bit data
				USART_handleIT.rxBuffer++;
 8000fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a09      	ldr	r2, [pc, #36]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000fc0:	6053      	str	r3, [r2, #4]
				USART_handleIT.rxLen -= 1;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	4a06      	ldr	r2, [pc, #24]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000fca:	60d3      	str	r3, [r2, #12]
			}
		}
	}
	if (USART_handleIT.rxLen == 0) {
 8000fcc:	4b05      	ldr	r3, [pc, #20]	@ (8000fe4 <USART_receive_data_IT+0xe4>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d102      	bne.n	8000fda <USART_receive_data_IT+0xda>
		USART_close_receiver(usart_handle);
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff ff05 	bl	8000de4 <USART_close_receiver>
	}
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	2000008c 	.word	0x2000008c

08000fe8 <USART_Handle_IT>:

void USART_Handle_IT(USART_HandleTypedef *usart_handle) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

// TC: Transmission complete
	if ((usart_handle->USARTx->SR >> Shift_6_pos) & 0x1) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	099b      	lsrs	r3, r3, #6
 8000ff8:	f003 0301 	and.w	r3, r3, #1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d00a      	beq.n	8001016 <USART_Handle_IT+0x2e>
		if (USART_handleIT.TxState == USART_BUSY_TX_IT) {
 8001000:	4b16      	ldr	r3, [pc, #88]	@ (800105c <USART_Handle_IT+0x74>)
 8001002:	7c1b      	ldrb	r3, [r3, #16]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d106      	bne.n	8001016 <USART_Handle_IT+0x2e>
			if (USART_handleIT.txLen == 0) {
 8001008:	4b14      	ldr	r3, [pc, #80]	@ (800105c <USART_Handle_IT+0x74>)
 800100a:	689b      	ldr	r3, [r3, #8]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <USART_Handle_IT+0x2e>
				USART_close_transmit(usart_handle);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff feab 	bl	8000d6c <USART_close_transmit>
			}
		}
	}

// TXE: Transmit data register empty
	if ((usart_handle->USARTx->SR >> Shift_7_pos) & 0x1) {
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	09db      	lsrs	r3, r3, #7
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <USART_Handle_IT+0x4c>
		if (USART_handleIT.TxState == USART_BUSY_TX_IT) {
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <USART_Handle_IT+0x74>)
 8001028:	7c1b      	ldrb	r3, [r3, #16]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d102      	bne.n	8001034 <USART_Handle_IT+0x4c>
			USART_send_data_IT(usart_handle);
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fefc 	bl	8000e2c <USART_send_data_IT>
		}
	}

// RXNE: Read data register not empty
	if ((usart_handle->USARTx->SR >> Shift_5_pos) & 0x1) {
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	095b      	lsrs	r3, r3, #5
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <USART_Handle_IT+0x6a>
		if (USART_handleIT.RxState == USART_BUSY_RX_IT) {
 8001044:	4b05      	ldr	r3, [pc, #20]	@ (800105c <USART_Handle_IT+0x74>)
 8001046:	7c5b      	ldrb	r3, [r3, #17]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d102      	bne.n	8001052 <USART_Handle_IT+0x6a>
			USART_receive_data_IT(usart_handle);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff57 	bl	8000f00 <USART_receive_data_IT>
		}
	}
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	2000008c 	.word	0x2000008c

08001060 <delay>:
// Reply from SPI slave stored here
char rx_buf[16];

uint32_t cnt = 0;

void delay(void) {
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
	for (uint32_t i = 0; i < 500000 / 2; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	e002      	b.n	8001072 <delay+0x12>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3301      	adds	r3, #1
 8001070:	607b      	str	r3, [r7, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a04      	ldr	r2, [pc, #16]	@ (8001088 <delay+0x28>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d9f8      	bls.n	800106c <delay+0xc>
		;
}
 800107a:	bf00      	nop
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	0003d08f 	.word	0x0003d08f

0800108c <main>:

int main(void) {
 800108c:	b598      	push	{r3, r4, r7, lr}
 800108e:	af00      	add	r7, sp, #0
	GPIO_USER_INIT();
 8001090:	f000 f8b0 	bl	80011f4 <GPIO_USER_INIT>
	USART_USER_INIT();
 8001094:	f000 f880 	bl	8001198 <USART_USER_INIT>
	IRQ_Config(USART1_IRQ37, HIGH);  // USART1 IRQ
 8001098:	2101      	movs	r1, #1
 800109a:	2025      	movs	r0, #37	@ 0x25
 800109c:	f7ff fba8 	bl	80007f0 <IRQ_Config>

	printf("USART1 Synchronous Master Started\n");
 80010a0:	4833      	ldr	r0, [pc, #204]	@ (8001170 <main+0xe4>)
 80010a2:	f000 fb0f 	bl	80016c4 <puts>

	while (1) {
		delay();
 80010a6:	f7ff ffdb 	bl	8001060 <delay>

		USART_rxCompl = 0;
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <main+0xe8>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
		USART_txCompl = 0;
 80010b0:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <main+0xec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]

		cnt = cnt % 3;
 80010b6:	4b31      	ldr	r3, [pc, #196]	@ (800117c <main+0xf0>)
 80010b8:	6819      	ldr	r1, [r3, #0]
 80010ba:	4b31      	ldr	r3, [pc, #196]	@ (8001180 <main+0xf4>)
 80010bc:	fba3 2301 	umull	r2, r3, r3, r1
 80010c0:	085a      	lsrs	r2, r3, #1
 80010c2:	4613      	mov	r3, r2
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	1aca      	subs	r2, r1, r3
 80010ca:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <main+0xf0>)
 80010cc:	601a      	str	r2, [r3, #0]

		memset(rx_buf, 0, sizeof(rx_buf));
 80010ce:	2210      	movs	r2, #16
 80010d0:	2100      	movs	r1, #0
 80010d2:	482c      	ldr	r0, [pc, #176]	@ (8001184 <main+0xf8>)
 80010d4:	f000 fbd6 	bl	8001884 <memset>

		// In synchronous mode, we must transmit to receive
		// Setup simultaneous TX and RX (like SPI full-duplex)
		while (USART_read_IT(&USART_Handle, (uint8_t*) rx_buf, strlen(msg[cnt]))
 80010d8:	bf00      	nop
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <main+0xf0>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a2a      	ldr	r2, [pc, #168]	@ (8001188 <main+0xfc>)
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f873 	bl	80001d0 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4925      	ldr	r1, [pc, #148]	@ (8001184 <main+0xf8>)
 80010f0:	4826      	ldr	r0, [pc, #152]	@ (800118c <main+0x100>)
 80010f2:	f7ff fe13 	bl	8000d1c <USART_read_IT>
 80010f6:	4603      	mov	r3, r0
				!= USART_READY_IT)
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d1ee      	bne.n	80010da <main+0x4e>
			;

		while (USART_write_IT(&USART_Handle, (uint8_t*) msg[cnt],
 80010fc:	bf00      	nop
 80010fe:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <main+0xf0>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a21      	ldr	r2, [pc, #132]	@ (8001188 <main+0xfc>)
 8001104:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
				strlen(msg[cnt])) != USART_READY_IT)
 8001108:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <main+0xf0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1e      	ldr	r2, [pc, #120]	@ (8001188 <main+0xfc>)
 800110e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f85c 	bl	80001d0 <strlen>
 8001118:	4603      	mov	r3, r0
		while (USART_write_IT(&USART_Handle, (uint8_t*) msg[cnt],
 800111a:	461a      	mov	r2, r3
 800111c:	4621      	mov	r1, r4
 800111e:	481b      	ldr	r0, [pc, #108]	@ (800118c <main+0x100>)
 8001120:	f7ff fdcc 	bl	8000cbc <USART_write_IT>
 8001124:	4603      	mov	r3, r0
				strlen(msg[cnt])) != USART_READY_IT)
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1e9      	bne.n	80010fe <main+0x72>
			;

		// Wait for transmission complete
		while (USART_txCompl == 0)
 800112a:	bf00      	nop
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <main+0xec>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	2b00      	cmp	r3, #0
 8001134:	d0fa      	beq.n	800112c <main+0xa0>
			;

		printf("Sent: %s\n", msg[cnt]);
 8001136:	4b11      	ldr	r3, [pc, #68]	@ (800117c <main+0xf0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a13      	ldr	r2, [pc, #76]	@ (8001188 <main+0xfc>)
 800113c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001140:	4619      	mov	r1, r3
 8001142:	4813      	ldr	r0, [pc, #76]	@ (8001190 <main+0x104>)
 8001144:	f000 fa56 	bl	80015f4 <iprintf>

		// Wait for reception complete
		while (USART_rxCompl == 0)
 8001148:	bf00      	nop
 800114a:	4b0a      	ldr	r3, [pc, #40]	@ (8001174 <main+0xe8>)
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	b2db      	uxtb	r3, r3
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0fa      	beq.n	800114a <main+0xbe>
			;

		rx_buf[15] = '\0';  // Null terminate
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <main+0xf8>)
 8001156:	2200      	movs	r2, #0
 8001158:	73da      	strb	r2, [r3, #15]
		printf("Received: %s\n\n", rx_buf);
 800115a:	490a      	ldr	r1, [pc, #40]	@ (8001184 <main+0xf8>)
 800115c:	480d      	ldr	r0, [pc, #52]	@ (8001194 <main+0x108>)
 800115e:	f000 fa49 	bl	80015f4 <iprintf>

		cnt++;
 8001162:	4b06      	ldr	r3, [pc, #24]	@ (800117c <main+0xf0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	3301      	adds	r3, #1
 8001168:	4a04      	ldr	r2, [pc, #16]	@ (800117c <main+0xf0>)
 800116a:	6013      	str	r3, [r2, #0]
		delay();
 800116c:	e79b      	b.n	80010a6 <main+0x1a>
 800116e:	bf00      	nop
 8001170:	08002400 	.word	0x08002400
 8001174:	200000a1 	.word	0x200000a1
 8001178:	200000a0 	.word	0x200000a0
 800117c:	200000d8 	.word	0x200000d8
 8001180:	aaaaaaab 	.word	0xaaaaaaab
 8001184:	200000c8 	.word	0x200000c8
 8001188:	20000000 	.word	0x20000000
 800118c:	200000a4 	.word	0x200000a4
 8001190:	08002424 	.word	0x08002424
 8001194:	08002430 	.word	0x08002430

08001198 <USART_USER_INIT>:
	}

	return 0;
}

void USART_USER_INIT() {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	USART_Handle.USARTx = USART1;                           // Changed to USART1
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <USART_USER_INIT+0x54>)
 800119e:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <USART_USER_INIT+0x58>)
 80011a0:	601a      	str	r2, [r3, #0]
	USART_Handle.baud_rate = USART_BAUD_115200;
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <USART_USER_INIT+0x54>)
 80011a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a8:	60da      	str	r2, [r3, #12]
	USART_Handle.data_bits = USART_8_DATA_BITS;
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <USART_USER_INIT+0x54>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	715a      	strb	r2, [r3, #5]
	USART_Handle.stop_bits = USART_1_STOP_BIT;
 80011b0:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <USART_USER_INIT+0x54>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	721a      	strb	r2, [r3, #8]
	USART_Handle.oversampling_mode = USART_OVERSAMPLING_16;
 80011b6:	4b0d      	ldr	r3, [pc, #52]	@ (80011ec <USART_USER_INIT+0x54>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	711a      	strb	r2, [r3, #4]
	USART_Handle.parity_control = USART_PARITY_DISABLE;
 80011bc:	4b0b      	ldr	r3, [pc, #44]	@ (80011ec <USART_USER_INIT+0x54>)
 80011be:	2200      	movs	r2, #0
 80011c0:	719a      	strb	r2, [r3, #6]
	USART_Handle.usart_mode = USART_MODE_SYNC;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <USART_USER_INIT+0x54>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	741a      	strb	r2, [r3, #16]
	USART_Handle.usart_cpol = USART_POLARITY_LOW;                    // CPOL = 0
 80011c8:	4b08      	ldr	r3, [pc, #32]	@ (80011ec <USART_USER_INIT+0x54>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	745a      	strb	r2, [r3, #17]
	USART_Handle.usart_cpha = USART_PHASE_1EDGE;                     // CPHA = 0
 80011ce:	4b07      	ldr	r3, [pc, #28]	@ (80011ec <USART_USER_INIT+0x54>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	749a      	strb	r2, [r3, #18]
	USART_Handle.last_bit_clock_pulse = 0x1;         // Clock pulse for last bit
 80011d4:	4b05      	ldr	r3, [pc, #20]	@ (80011ec <USART_USER_INIT+0x54>)
 80011d6:	2201      	movs	r2, #1
 80011d8:	74da      	strb	r2, [r3, #19]

	USART_Handle.usart_hardware_flow_control = USART_HW_FLOW_CTRL_NONE;
 80011da:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <USART_USER_INIT+0x54>)
 80011dc:	2200      	movs	r2, #0
 80011de:	751a      	strb	r2, [r3, #20]
	USART_INIT(&USART_Handle);
 80011e0:	4802      	ldr	r0, [pc, #8]	@ (80011ec <USART_USER_INIT+0x54>)
 80011e2:	f7ff fb41 	bl	8000868 <USART_INIT>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200000a4 	.word	0x200000a4
 80011f0:	40011000 	.word	0x40011000

080011f4 <GPIO_USER_INIT>:

void GPIO_USER_INIT() {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
	// USART1 pins - Use PB6/PB7 instead of PA9/PA10
	GPIO_Handle.GPIOX = GPIOB;  // Changed from GPIOA
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <GPIO_USER_INIT+0x70>)
 80011fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001268 <GPIO_USER_INIT+0x74>)
 80011fc:	601a      	str	r2, [r3, #0]
	GPIO_Handle.alternate_function_select = GPIO_AF7;
 80011fe:	4b19      	ldr	r3, [pc, #100]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001200:	2207      	movs	r2, #7
 8001202:	725a      	strb	r2, [r3, #9]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8001204:	4b17      	ldr	r3, [pc, #92]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001206:	2202      	movs	r2, #2
 8001208:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <GPIO_USER_INIT+0x70>)
 800120c:	2203      	movs	r2, #3
 800120e:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_PP;
 8001210:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001212:	2200      	movs	r2, #0
 8001214:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
 8001216:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001218:	2201      	movs	r2, #1
 800121a:	719a      	strb	r2, [r3, #6]

	GPIO_Handle.pin_number = GPIO_PIN_6;   // TX
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <GPIO_USER_INIT+0x70>)
 800121e:	2206      	movs	r2, #6
 8001220:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8001222:	4810      	ldr	r0, [pc, #64]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001224:	f7ff f8f8 	bl	8000418 <GPIO_INIT>
	GPIO_Handle.pin_number = GPIO_PIN_7;   // RX
 8001228:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <GPIO_USER_INIT+0x70>)
 800122a:	2207      	movs	r2, #7
 800122c:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 800122e:	480d      	ldr	r0, [pc, #52]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001230:	f7ff f8f2 	bl	8000418 <GPIO_INIT>

	// For synchronous mode, you might need CK on another pin
	// Check datasheet for USART1_CK alternate pin
	// Possibly PB5 or PA8 depending on your board
	GPIO_Handle.GPIOX = GPIOA;
 8001234:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001236:	4a0d      	ldr	r2, [pc, #52]	@ (800126c <GPIO_USER_INIT+0x78>)
 8001238:	601a      	str	r2, [r3, #0]
	GPIO_Handle.pin_number = GPIO_PIN_8;   // CK
 800123a:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <GPIO_USER_INIT+0x70>)
 800123c:	2208      	movs	r2, #8
 800123e:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8001240:	4808      	ldr	r0, [pc, #32]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001242:	f7ff f8e9 	bl	8000418 <GPIO_INIT>

	// User button (PA0)
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001248:	2200      	movs	r2, #0
 800124a:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 800124c:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <GPIO_USER_INIT+0x70>)
 800124e:	2200      	movs	r2, #0
 8001250:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <GPIO_USER_INIT+0x70>)
 8001254:	2200      	movs	r2, #0
 8001256:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8001258:	4802      	ldr	r0, [pc, #8]	@ (8001264 <GPIO_USER_INIT+0x70>)
 800125a:	f7ff f8dd 	bl	8000418 <GPIO_INIT>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	200000bc 	.word	0x200000bc
 8001268:	40020400 	.word	0x40020400
 800126c:	40020000 	.word	0x40020000

08001270 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {                           // Changed handler name
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	USART_Handle_IT(&USART_Handle);
 8001274:	4802      	ldr	r0, [pc, #8]	@ (8001280 <USART1_IRQHandler+0x10>)
 8001276:	f7ff feb7 	bl	8000fe8 <USART_Handle_IT>
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200000a4 	.word	0x200000a4

08001284 <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <ITM_SendChar+0x48>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a0e      	ldr	r2, [pc, #56]	@ (80012cc <ITM_SendChar+0x48>)
 8001294:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001298:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <ITM_SendChar+0x4c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a0c      	ldr	r2, [pc, #48]	@ (80012d0 <ITM_SendChar+0x4c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 80012a6:	bf00      	nop
 80012a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f8      	beq.n	80012a8 <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80012b6:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	6013      	str	r3, [r2, #0]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000edfc 	.word	0xe000edfc
 80012d0:	e0000e00 	.word	0xe0000e00

080012d4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	e00a      	b.n	80012fc <_read+0x28>
		*ptr++ = __io_getchar();
 80012e6:	f3af 8000 	nop.w
 80012ea:	4601      	mov	r1, r0
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	1c5a      	adds	r2, r3, #1
 80012f0:	60ba      	str	r2, [r7, #8]
 80012f2:	b2ca      	uxtb	r2, r1
 80012f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	3301      	adds	r3, #1
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697a      	ldr	r2, [r7, #20]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	429a      	cmp	r2, r3
 8001302:	dbf0      	blt.n	80012e6 <_read+0x12>
	}

	return len;
 8001304:	687b      	ldr	r3, [r7, #4]
}
 8001306:	4618      	mov	r0, r3
 8001308:	3718      	adds	r7, #24
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e009      	b.n	8001334 <_write+0x26>
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	1c5a      	adds	r2, r3, #1
 8001324:	60ba      	str	r2, [r7, #8]
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ffab 	bl	8001284 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	3301      	adds	r3, #1
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	429a      	cmp	r2, r3
 800133a:	dbf1      	blt.n	8001320 <_write+0x12>
	}
	return len;
 800133c:	687b      	ldr	r3, [r7, #4]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <_close>:

int _close(int file) {
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_fstat>:

int _fstat(int file, struct stat *st) {
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800136e:	605a      	str	r2, [r3, #4]
	return 0;
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <_isatty>:

int _isatty(int file) {
 800137e:	b480      	push	{r7}
 8001380:	b083      	sub	sp, #12
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001386:	2301      	movs	r3, #1
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3714      	adds	r7, #20
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
	...

080013b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b8:	4a14      	ldr	r2, [pc, #80]	@ (800140c <_sbrk+0x5c>)
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <_sbrk+0x60>)
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c4:	4b13      	ldr	r3, [pc, #76]	@ (8001414 <_sbrk+0x64>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d102      	bne.n	80013d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <_sbrk+0x64>)
 80013ce:	4a12      	ldr	r2, [pc, #72]	@ (8001418 <_sbrk+0x68>)
 80013d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d2:	4b10      	ldr	r3, [pc, #64]	@ (8001414 <_sbrk+0x64>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d207      	bcs.n	80013f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e0:	f000 fa9e 	bl	8001920 <__errno>
 80013e4:	4603      	mov	r3, r0
 80013e6:	220c      	movs	r2, #12
 80013e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e009      	b.n	8001404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f0:	4b08      	ldr	r3, [pc, #32]	@ (8001414 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f6:	4b07      	ldr	r3, [pc, #28]	@ (8001414 <_sbrk+0x64>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	4a05      	ldr	r2, [pc, #20]	@ (8001414 <_sbrk+0x64>)
 8001400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001402:	68fb      	ldr	r3, [r7, #12]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3718      	adds	r7, #24
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20020000 	.word	0x20020000
 8001410:	00000400 	.word	0x00000400
 8001414:	200000dc 	.word	0x200000dc
 8001418:	20000230 	.word	0x20000230

0800141c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800141e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001420:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001424:	480c      	ldr	r0, [pc, #48]	@ (8001458 <LoopForever+0x6>)
  ldr r1, =_edata
 8001426:	490d      	ldr	r1, [pc, #52]	@ (800145c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <LoopForever+0xe>)
  movs r3, #0
 800142a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800142c:	e002      	b.n	8001434 <LoopCopyDataInit>

0800142e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800142e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001430:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001432:	3304      	adds	r3, #4

08001434 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001434:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001436:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001438:	d3f9      	bcc.n	800142e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143a:	4a0a      	ldr	r2, [pc, #40]	@ (8001464 <LoopForever+0x12>)
  ldr r4, =_ebss
 800143c:	4c0a      	ldr	r4, [pc, #40]	@ (8001468 <LoopForever+0x16>)
  movs r3, #0
 800143e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001440:	e001      	b.n	8001446 <LoopFillZerobss>

08001442 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001442:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001444:	3204      	adds	r2, #4

08001446 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001446:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001448:	d3fb      	bcc.n	8001442 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800144a:	f000 fa6f 	bl	800192c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800144e:	f7ff fe1d 	bl	800108c <main>

08001452 <LoopForever>:

LoopForever:
  b LoopForever
 8001452:	e7fe      	b.n	8001452 <LoopForever>
  ldr   r0, =_estack
 8001454:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800145c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001460:	08002484 	.word	0x08002484
  ldr r2, =_sbss
 8001464:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001468:	2000022c 	.word	0x2000022c

0800146c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800146c:	e7fe      	b.n	800146c <ADC_IRQHandler>
	...

08001470 <std>:
 8001470:	2300      	movs	r3, #0
 8001472:	b510      	push	{r4, lr}
 8001474:	4604      	mov	r4, r0
 8001476:	e9c0 3300 	strd	r3, r3, [r0]
 800147a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800147e:	6083      	str	r3, [r0, #8]
 8001480:	8181      	strh	r1, [r0, #12]
 8001482:	6643      	str	r3, [r0, #100]	@ 0x64
 8001484:	81c2      	strh	r2, [r0, #14]
 8001486:	6183      	str	r3, [r0, #24]
 8001488:	4619      	mov	r1, r3
 800148a:	2208      	movs	r2, #8
 800148c:	305c      	adds	r0, #92	@ 0x5c
 800148e:	f000 f9f9 	bl	8001884 <memset>
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <std+0x58>)
 8001494:	6263      	str	r3, [r4, #36]	@ 0x24
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <std+0x5c>)
 8001498:	62a3      	str	r3, [r4, #40]	@ 0x28
 800149a:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <std+0x60>)
 800149c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800149e:	4b0d      	ldr	r3, [pc, #52]	@ (80014d4 <std+0x64>)
 80014a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80014a2:	4b0d      	ldr	r3, [pc, #52]	@ (80014d8 <std+0x68>)
 80014a4:	6224      	str	r4, [r4, #32]
 80014a6:	429c      	cmp	r4, r3
 80014a8:	d006      	beq.n	80014b8 <std+0x48>
 80014aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80014ae:	4294      	cmp	r4, r2
 80014b0:	d002      	beq.n	80014b8 <std+0x48>
 80014b2:	33d0      	adds	r3, #208	@ 0xd0
 80014b4:	429c      	cmp	r4, r3
 80014b6:	d105      	bne.n	80014c4 <std+0x54>
 80014b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80014bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014c0:	f000 ba58 	b.w	8001974 <__retarget_lock_init_recursive>
 80014c4:	bd10      	pop	{r4, pc}
 80014c6:	bf00      	nop
 80014c8:	080016d5 	.word	0x080016d5
 80014cc:	080016f7 	.word	0x080016f7
 80014d0:	0800172f 	.word	0x0800172f
 80014d4:	08001753 	.word	0x08001753
 80014d8:	200000e0 	.word	0x200000e0

080014dc <stdio_exit_handler>:
 80014dc:	4a02      	ldr	r2, [pc, #8]	@ (80014e8 <stdio_exit_handler+0xc>)
 80014de:	4903      	ldr	r1, [pc, #12]	@ (80014ec <stdio_exit_handler+0x10>)
 80014e0:	4803      	ldr	r0, [pc, #12]	@ (80014f0 <stdio_exit_handler+0x14>)
 80014e2:	f000 b869 	b.w	80015b8 <_fwalk_sglue>
 80014e6:	bf00      	nop
 80014e8:	2000000c 	.word	0x2000000c
 80014ec:	08002211 	.word	0x08002211
 80014f0:	2000001c 	.word	0x2000001c

080014f4 <cleanup_stdio>:
 80014f4:	6841      	ldr	r1, [r0, #4]
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <cleanup_stdio+0x34>)
 80014f8:	4299      	cmp	r1, r3
 80014fa:	b510      	push	{r4, lr}
 80014fc:	4604      	mov	r4, r0
 80014fe:	d001      	beq.n	8001504 <cleanup_stdio+0x10>
 8001500:	f000 fe86 	bl	8002210 <_fflush_r>
 8001504:	68a1      	ldr	r1, [r4, #8]
 8001506:	4b09      	ldr	r3, [pc, #36]	@ (800152c <cleanup_stdio+0x38>)
 8001508:	4299      	cmp	r1, r3
 800150a:	d002      	beq.n	8001512 <cleanup_stdio+0x1e>
 800150c:	4620      	mov	r0, r4
 800150e:	f000 fe7f 	bl	8002210 <_fflush_r>
 8001512:	68e1      	ldr	r1, [r4, #12]
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <cleanup_stdio+0x3c>)
 8001516:	4299      	cmp	r1, r3
 8001518:	d004      	beq.n	8001524 <cleanup_stdio+0x30>
 800151a:	4620      	mov	r0, r4
 800151c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001520:	f000 be76 	b.w	8002210 <_fflush_r>
 8001524:	bd10      	pop	{r4, pc}
 8001526:	bf00      	nop
 8001528:	200000e0 	.word	0x200000e0
 800152c:	20000148 	.word	0x20000148
 8001530:	200001b0 	.word	0x200001b0

08001534 <global_stdio_init.part.0>:
 8001534:	b510      	push	{r4, lr}
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <global_stdio_init.part.0+0x30>)
 8001538:	4c0b      	ldr	r4, [pc, #44]	@ (8001568 <global_stdio_init.part.0+0x34>)
 800153a:	4a0c      	ldr	r2, [pc, #48]	@ (800156c <global_stdio_init.part.0+0x38>)
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	4620      	mov	r0, r4
 8001540:	2200      	movs	r2, #0
 8001542:	2104      	movs	r1, #4
 8001544:	f7ff ff94 	bl	8001470 <std>
 8001548:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800154c:	2201      	movs	r2, #1
 800154e:	2109      	movs	r1, #9
 8001550:	f7ff ff8e 	bl	8001470 <std>
 8001554:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001558:	2202      	movs	r2, #2
 800155a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800155e:	2112      	movs	r1, #18
 8001560:	f7ff bf86 	b.w	8001470 <std>
 8001564:	20000218 	.word	0x20000218
 8001568:	200000e0 	.word	0x200000e0
 800156c:	080014dd 	.word	0x080014dd

08001570 <__sfp_lock_acquire>:
 8001570:	4801      	ldr	r0, [pc, #4]	@ (8001578 <__sfp_lock_acquire+0x8>)
 8001572:	f000 ba00 	b.w	8001976 <__retarget_lock_acquire_recursive>
 8001576:	bf00      	nop
 8001578:	20000221 	.word	0x20000221

0800157c <__sfp_lock_release>:
 800157c:	4801      	ldr	r0, [pc, #4]	@ (8001584 <__sfp_lock_release+0x8>)
 800157e:	f000 b9fb 	b.w	8001978 <__retarget_lock_release_recursive>
 8001582:	bf00      	nop
 8001584:	20000221 	.word	0x20000221

08001588 <__sinit>:
 8001588:	b510      	push	{r4, lr}
 800158a:	4604      	mov	r4, r0
 800158c:	f7ff fff0 	bl	8001570 <__sfp_lock_acquire>
 8001590:	6a23      	ldr	r3, [r4, #32]
 8001592:	b11b      	cbz	r3, 800159c <__sinit+0x14>
 8001594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001598:	f7ff bff0 	b.w	800157c <__sfp_lock_release>
 800159c:	4b04      	ldr	r3, [pc, #16]	@ (80015b0 <__sinit+0x28>)
 800159e:	6223      	str	r3, [r4, #32]
 80015a0:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <__sinit+0x2c>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f5      	bne.n	8001594 <__sinit+0xc>
 80015a8:	f7ff ffc4 	bl	8001534 <global_stdio_init.part.0>
 80015ac:	e7f2      	b.n	8001594 <__sinit+0xc>
 80015ae:	bf00      	nop
 80015b0:	080014f5 	.word	0x080014f5
 80015b4:	20000218 	.word	0x20000218

080015b8 <_fwalk_sglue>:
 80015b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80015bc:	4607      	mov	r7, r0
 80015be:	4688      	mov	r8, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	2600      	movs	r6, #0
 80015c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80015c8:	f1b9 0901 	subs.w	r9, r9, #1
 80015cc:	d505      	bpl.n	80015da <_fwalk_sglue+0x22>
 80015ce:	6824      	ldr	r4, [r4, #0]
 80015d0:	2c00      	cmp	r4, #0
 80015d2:	d1f7      	bne.n	80015c4 <_fwalk_sglue+0xc>
 80015d4:	4630      	mov	r0, r6
 80015d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80015da:	89ab      	ldrh	r3, [r5, #12]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d907      	bls.n	80015f0 <_fwalk_sglue+0x38>
 80015e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80015e4:	3301      	adds	r3, #1
 80015e6:	d003      	beq.n	80015f0 <_fwalk_sglue+0x38>
 80015e8:	4629      	mov	r1, r5
 80015ea:	4638      	mov	r0, r7
 80015ec:	47c0      	blx	r8
 80015ee:	4306      	orrs	r6, r0
 80015f0:	3568      	adds	r5, #104	@ 0x68
 80015f2:	e7e9      	b.n	80015c8 <_fwalk_sglue+0x10>

080015f4 <iprintf>:
 80015f4:	b40f      	push	{r0, r1, r2, r3}
 80015f6:	b507      	push	{r0, r1, r2, lr}
 80015f8:	4906      	ldr	r1, [pc, #24]	@ (8001614 <iprintf+0x20>)
 80015fa:	ab04      	add	r3, sp, #16
 80015fc:	6808      	ldr	r0, [r1, #0]
 80015fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8001602:	6881      	ldr	r1, [r0, #8]
 8001604:	9301      	str	r3, [sp, #4]
 8001606:	f000 fadb 	bl	8001bc0 <_vfiprintf_r>
 800160a:	b003      	add	sp, #12
 800160c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001610:	b004      	add	sp, #16
 8001612:	4770      	bx	lr
 8001614:	20000018 	.word	0x20000018

08001618 <_puts_r>:
 8001618:	6a03      	ldr	r3, [r0, #32]
 800161a:	b570      	push	{r4, r5, r6, lr}
 800161c:	6884      	ldr	r4, [r0, #8]
 800161e:	4605      	mov	r5, r0
 8001620:	460e      	mov	r6, r1
 8001622:	b90b      	cbnz	r3, 8001628 <_puts_r+0x10>
 8001624:	f7ff ffb0 	bl	8001588 <__sinit>
 8001628:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800162a:	07db      	lsls	r3, r3, #31
 800162c:	d405      	bmi.n	800163a <_puts_r+0x22>
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	0598      	lsls	r0, r3, #22
 8001632:	d402      	bmi.n	800163a <_puts_r+0x22>
 8001634:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001636:	f000 f99e 	bl	8001976 <__retarget_lock_acquire_recursive>
 800163a:	89a3      	ldrh	r3, [r4, #12]
 800163c:	0719      	lsls	r1, r3, #28
 800163e:	d502      	bpl.n	8001646 <_puts_r+0x2e>
 8001640:	6923      	ldr	r3, [r4, #16]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d135      	bne.n	80016b2 <_puts_r+0x9a>
 8001646:	4621      	mov	r1, r4
 8001648:	4628      	mov	r0, r5
 800164a:	f000 f8c5 	bl	80017d8 <__swsetup_r>
 800164e:	b380      	cbz	r0, 80016b2 <_puts_r+0x9a>
 8001650:	f04f 35ff 	mov.w	r5, #4294967295
 8001654:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001656:	07da      	lsls	r2, r3, #31
 8001658:	d405      	bmi.n	8001666 <_puts_r+0x4e>
 800165a:	89a3      	ldrh	r3, [r4, #12]
 800165c:	059b      	lsls	r3, r3, #22
 800165e:	d402      	bmi.n	8001666 <_puts_r+0x4e>
 8001660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001662:	f000 f989 	bl	8001978 <__retarget_lock_release_recursive>
 8001666:	4628      	mov	r0, r5
 8001668:	bd70      	pop	{r4, r5, r6, pc}
 800166a:	2b00      	cmp	r3, #0
 800166c:	da04      	bge.n	8001678 <_puts_r+0x60>
 800166e:	69a2      	ldr	r2, [r4, #24]
 8001670:	429a      	cmp	r2, r3
 8001672:	dc17      	bgt.n	80016a4 <_puts_r+0x8c>
 8001674:	290a      	cmp	r1, #10
 8001676:	d015      	beq.n	80016a4 <_puts_r+0x8c>
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	1c5a      	adds	r2, r3, #1
 800167c:	6022      	str	r2, [r4, #0]
 800167e:	7019      	strb	r1, [r3, #0]
 8001680:	68a3      	ldr	r3, [r4, #8]
 8001682:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001686:	3b01      	subs	r3, #1
 8001688:	60a3      	str	r3, [r4, #8]
 800168a:	2900      	cmp	r1, #0
 800168c:	d1ed      	bne.n	800166a <_puts_r+0x52>
 800168e:	2b00      	cmp	r3, #0
 8001690:	da11      	bge.n	80016b6 <_puts_r+0x9e>
 8001692:	4622      	mov	r2, r4
 8001694:	210a      	movs	r1, #10
 8001696:	4628      	mov	r0, r5
 8001698:	f000 f85f 	bl	800175a <__swbuf_r>
 800169c:	3001      	adds	r0, #1
 800169e:	d0d7      	beq.n	8001650 <_puts_r+0x38>
 80016a0:	250a      	movs	r5, #10
 80016a2:	e7d7      	b.n	8001654 <_puts_r+0x3c>
 80016a4:	4622      	mov	r2, r4
 80016a6:	4628      	mov	r0, r5
 80016a8:	f000 f857 	bl	800175a <__swbuf_r>
 80016ac:	3001      	adds	r0, #1
 80016ae:	d1e7      	bne.n	8001680 <_puts_r+0x68>
 80016b0:	e7ce      	b.n	8001650 <_puts_r+0x38>
 80016b2:	3e01      	subs	r6, #1
 80016b4:	e7e4      	b.n	8001680 <_puts_r+0x68>
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	1c5a      	adds	r2, r3, #1
 80016ba:	6022      	str	r2, [r4, #0]
 80016bc:	220a      	movs	r2, #10
 80016be:	701a      	strb	r2, [r3, #0]
 80016c0:	e7ee      	b.n	80016a0 <_puts_r+0x88>
	...

080016c4 <puts>:
 80016c4:	4b02      	ldr	r3, [pc, #8]	@ (80016d0 <puts+0xc>)
 80016c6:	4601      	mov	r1, r0
 80016c8:	6818      	ldr	r0, [r3, #0]
 80016ca:	f7ff bfa5 	b.w	8001618 <_puts_r>
 80016ce:	bf00      	nop
 80016d0:	20000018 	.word	0x20000018

080016d4 <__sread>:
 80016d4:	b510      	push	{r4, lr}
 80016d6:	460c      	mov	r4, r1
 80016d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016dc:	f000 f8fc 	bl	80018d8 <_read_r>
 80016e0:	2800      	cmp	r0, #0
 80016e2:	bfab      	itete	ge
 80016e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80016e6:	89a3      	ldrhlt	r3, [r4, #12]
 80016e8:	181b      	addge	r3, r3, r0
 80016ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80016ee:	bfac      	ite	ge
 80016f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80016f2:	81a3      	strhlt	r3, [r4, #12]
 80016f4:	bd10      	pop	{r4, pc}

080016f6 <__swrite>:
 80016f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80016fa:	461f      	mov	r7, r3
 80016fc:	898b      	ldrh	r3, [r1, #12]
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	4605      	mov	r5, r0
 8001702:	460c      	mov	r4, r1
 8001704:	4616      	mov	r6, r2
 8001706:	d505      	bpl.n	8001714 <__swrite+0x1e>
 8001708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800170c:	2302      	movs	r3, #2
 800170e:	2200      	movs	r2, #0
 8001710:	f000 f8d0 	bl	80018b4 <_lseek_r>
 8001714:	89a3      	ldrh	r3, [r4, #12]
 8001716:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800171a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800171e:	81a3      	strh	r3, [r4, #12]
 8001720:	4632      	mov	r2, r6
 8001722:	463b      	mov	r3, r7
 8001724:	4628      	mov	r0, r5
 8001726:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	f000 b8e7 	b.w	80018fc <_write_r>

0800172e <__sseek>:
 800172e:	b510      	push	{r4, lr}
 8001730:	460c      	mov	r4, r1
 8001732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001736:	f000 f8bd 	bl	80018b4 <_lseek_r>
 800173a:	1c43      	adds	r3, r0, #1
 800173c:	89a3      	ldrh	r3, [r4, #12]
 800173e:	bf15      	itete	ne
 8001740:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001742:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001746:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800174a:	81a3      	strheq	r3, [r4, #12]
 800174c:	bf18      	it	ne
 800174e:	81a3      	strhne	r3, [r4, #12]
 8001750:	bd10      	pop	{r4, pc}

08001752 <__sclose>:
 8001752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001756:	f000 b89d 	b.w	8001894 <_close_r>

0800175a <__swbuf_r>:
 800175a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175c:	460e      	mov	r6, r1
 800175e:	4614      	mov	r4, r2
 8001760:	4605      	mov	r5, r0
 8001762:	b118      	cbz	r0, 800176c <__swbuf_r+0x12>
 8001764:	6a03      	ldr	r3, [r0, #32]
 8001766:	b90b      	cbnz	r3, 800176c <__swbuf_r+0x12>
 8001768:	f7ff ff0e 	bl	8001588 <__sinit>
 800176c:	69a3      	ldr	r3, [r4, #24]
 800176e:	60a3      	str	r3, [r4, #8]
 8001770:	89a3      	ldrh	r3, [r4, #12]
 8001772:	071a      	lsls	r2, r3, #28
 8001774:	d501      	bpl.n	800177a <__swbuf_r+0x20>
 8001776:	6923      	ldr	r3, [r4, #16]
 8001778:	b943      	cbnz	r3, 800178c <__swbuf_r+0x32>
 800177a:	4621      	mov	r1, r4
 800177c:	4628      	mov	r0, r5
 800177e:	f000 f82b 	bl	80017d8 <__swsetup_r>
 8001782:	b118      	cbz	r0, 800178c <__swbuf_r+0x32>
 8001784:	f04f 37ff 	mov.w	r7, #4294967295
 8001788:	4638      	mov	r0, r7
 800178a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	6922      	ldr	r2, [r4, #16]
 8001790:	1a98      	subs	r0, r3, r2
 8001792:	6963      	ldr	r3, [r4, #20]
 8001794:	b2f6      	uxtb	r6, r6
 8001796:	4283      	cmp	r3, r0
 8001798:	4637      	mov	r7, r6
 800179a:	dc05      	bgt.n	80017a8 <__swbuf_r+0x4e>
 800179c:	4621      	mov	r1, r4
 800179e:	4628      	mov	r0, r5
 80017a0:	f000 fd36 	bl	8002210 <_fflush_r>
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d1ed      	bne.n	8001784 <__swbuf_r+0x2a>
 80017a8:	68a3      	ldr	r3, [r4, #8]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	60a3      	str	r3, [r4, #8]
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	6022      	str	r2, [r4, #0]
 80017b4:	701e      	strb	r6, [r3, #0]
 80017b6:	6962      	ldr	r2, [r4, #20]
 80017b8:	1c43      	adds	r3, r0, #1
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d004      	beq.n	80017c8 <__swbuf_r+0x6e>
 80017be:	89a3      	ldrh	r3, [r4, #12]
 80017c0:	07db      	lsls	r3, r3, #31
 80017c2:	d5e1      	bpl.n	8001788 <__swbuf_r+0x2e>
 80017c4:	2e0a      	cmp	r6, #10
 80017c6:	d1df      	bne.n	8001788 <__swbuf_r+0x2e>
 80017c8:	4621      	mov	r1, r4
 80017ca:	4628      	mov	r0, r5
 80017cc:	f000 fd20 	bl	8002210 <_fflush_r>
 80017d0:	2800      	cmp	r0, #0
 80017d2:	d0d9      	beq.n	8001788 <__swbuf_r+0x2e>
 80017d4:	e7d6      	b.n	8001784 <__swbuf_r+0x2a>
	...

080017d8 <__swsetup_r>:
 80017d8:	b538      	push	{r3, r4, r5, lr}
 80017da:	4b29      	ldr	r3, [pc, #164]	@ (8001880 <__swsetup_r+0xa8>)
 80017dc:	4605      	mov	r5, r0
 80017de:	6818      	ldr	r0, [r3, #0]
 80017e0:	460c      	mov	r4, r1
 80017e2:	b118      	cbz	r0, 80017ec <__swsetup_r+0x14>
 80017e4:	6a03      	ldr	r3, [r0, #32]
 80017e6:	b90b      	cbnz	r3, 80017ec <__swsetup_r+0x14>
 80017e8:	f7ff fece 	bl	8001588 <__sinit>
 80017ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017f0:	0719      	lsls	r1, r3, #28
 80017f2:	d422      	bmi.n	800183a <__swsetup_r+0x62>
 80017f4:	06da      	lsls	r2, r3, #27
 80017f6:	d407      	bmi.n	8001808 <__swsetup_r+0x30>
 80017f8:	2209      	movs	r2, #9
 80017fa:	602a      	str	r2, [r5, #0]
 80017fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001800:	81a3      	strh	r3, [r4, #12]
 8001802:	f04f 30ff 	mov.w	r0, #4294967295
 8001806:	e033      	b.n	8001870 <__swsetup_r+0x98>
 8001808:	0758      	lsls	r0, r3, #29
 800180a:	d512      	bpl.n	8001832 <__swsetup_r+0x5a>
 800180c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800180e:	b141      	cbz	r1, 8001822 <__swsetup_r+0x4a>
 8001810:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001814:	4299      	cmp	r1, r3
 8001816:	d002      	beq.n	800181e <__swsetup_r+0x46>
 8001818:	4628      	mov	r0, r5
 800181a:	f000 f8af 	bl	800197c <_free_r>
 800181e:	2300      	movs	r3, #0
 8001820:	6363      	str	r3, [r4, #52]	@ 0x34
 8001822:	89a3      	ldrh	r3, [r4, #12]
 8001824:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001828:	81a3      	strh	r3, [r4, #12]
 800182a:	2300      	movs	r3, #0
 800182c:	6063      	str	r3, [r4, #4]
 800182e:	6923      	ldr	r3, [r4, #16]
 8001830:	6023      	str	r3, [r4, #0]
 8001832:	89a3      	ldrh	r3, [r4, #12]
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	81a3      	strh	r3, [r4, #12]
 800183a:	6923      	ldr	r3, [r4, #16]
 800183c:	b94b      	cbnz	r3, 8001852 <__swsetup_r+0x7a>
 800183e:	89a3      	ldrh	r3, [r4, #12]
 8001840:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001844:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001848:	d003      	beq.n	8001852 <__swsetup_r+0x7a>
 800184a:	4621      	mov	r1, r4
 800184c:	4628      	mov	r0, r5
 800184e:	f000 fd2d 	bl	80022ac <__smakebuf_r>
 8001852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001856:	f013 0201 	ands.w	r2, r3, #1
 800185a:	d00a      	beq.n	8001872 <__swsetup_r+0x9a>
 800185c:	2200      	movs	r2, #0
 800185e:	60a2      	str	r2, [r4, #8]
 8001860:	6962      	ldr	r2, [r4, #20]
 8001862:	4252      	negs	r2, r2
 8001864:	61a2      	str	r2, [r4, #24]
 8001866:	6922      	ldr	r2, [r4, #16]
 8001868:	b942      	cbnz	r2, 800187c <__swsetup_r+0xa4>
 800186a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800186e:	d1c5      	bne.n	80017fc <__swsetup_r+0x24>
 8001870:	bd38      	pop	{r3, r4, r5, pc}
 8001872:	0799      	lsls	r1, r3, #30
 8001874:	bf58      	it	pl
 8001876:	6962      	ldrpl	r2, [r4, #20]
 8001878:	60a2      	str	r2, [r4, #8]
 800187a:	e7f4      	b.n	8001866 <__swsetup_r+0x8e>
 800187c:	2000      	movs	r0, #0
 800187e:	e7f7      	b.n	8001870 <__swsetup_r+0x98>
 8001880:	20000018 	.word	0x20000018

08001884 <memset>:
 8001884:	4402      	add	r2, r0
 8001886:	4603      	mov	r3, r0
 8001888:	4293      	cmp	r3, r2
 800188a:	d100      	bne.n	800188e <memset+0xa>
 800188c:	4770      	bx	lr
 800188e:	f803 1b01 	strb.w	r1, [r3], #1
 8001892:	e7f9      	b.n	8001888 <memset+0x4>

08001894 <_close_r>:
 8001894:	b538      	push	{r3, r4, r5, lr}
 8001896:	4d06      	ldr	r5, [pc, #24]	@ (80018b0 <_close_r+0x1c>)
 8001898:	2300      	movs	r3, #0
 800189a:	4604      	mov	r4, r0
 800189c:	4608      	mov	r0, r1
 800189e:	602b      	str	r3, [r5, #0]
 80018a0:	f7ff fd51 	bl	8001346 <_close>
 80018a4:	1c43      	adds	r3, r0, #1
 80018a6:	d102      	bne.n	80018ae <_close_r+0x1a>
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	b103      	cbz	r3, 80018ae <_close_r+0x1a>
 80018ac:	6023      	str	r3, [r4, #0]
 80018ae:	bd38      	pop	{r3, r4, r5, pc}
 80018b0:	2000021c 	.word	0x2000021c

080018b4 <_lseek_r>:
 80018b4:	b538      	push	{r3, r4, r5, lr}
 80018b6:	4d07      	ldr	r5, [pc, #28]	@ (80018d4 <_lseek_r+0x20>)
 80018b8:	4604      	mov	r4, r0
 80018ba:	4608      	mov	r0, r1
 80018bc:	4611      	mov	r1, r2
 80018be:	2200      	movs	r2, #0
 80018c0:	602a      	str	r2, [r5, #0]
 80018c2:	461a      	mov	r2, r3
 80018c4:	f7ff fd66 	bl	8001394 <_lseek>
 80018c8:	1c43      	adds	r3, r0, #1
 80018ca:	d102      	bne.n	80018d2 <_lseek_r+0x1e>
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	b103      	cbz	r3, 80018d2 <_lseek_r+0x1e>
 80018d0:	6023      	str	r3, [r4, #0]
 80018d2:	bd38      	pop	{r3, r4, r5, pc}
 80018d4:	2000021c 	.word	0x2000021c

080018d8 <_read_r>:
 80018d8:	b538      	push	{r3, r4, r5, lr}
 80018da:	4d07      	ldr	r5, [pc, #28]	@ (80018f8 <_read_r+0x20>)
 80018dc:	4604      	mov	r4, r0
 80018de:	4608      	mov	r0, r1
 80018e0:	4611      	mov	r1, r2
 80018e2:	2200      	movs	r2, #0
 80018e4:	602a      	str	r2, [r5, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	f7ff fcf4 	bl	80012d4 <_read>
 80018ec:	1c43      	adds	r3, r0, #1
 80018ee:	d102      	bne.n	80018f6 <_read_r+0x1e>
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	b103      	cbz	r3, 80018f6 <_read_r+0x1e>
 80018f4:	6023      	str	r3, [r4, #0]
 80018f6:	bd38      	pop	{r3, r4, r5, pc}
 80018f8:	2000021c 	.word	0x2000021c

080018fc <_write_r>:
 80018fc:	b538      	push	{r3, r4, r5, lr}
 80018fe:	4d07      	ldr	r5, [pc, #28]	@ (800191c <_write_r+0x20>)
 8001900:	4604      	mov	r4, r0
 8001902:	4608      	mov	r0, r1
 8001904:	4611      	mov	r1, r2
 8001906:	2200      	movs	r2, #0
 8001908:	602a      	str	r2, [r5, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	f7ff fcff 	bl	800130e <_write>
 8001910:	1c43      	adds	r3, r0, #1
 8001912:	d102      	bne.n	800191a <_write_r+0x1e>
 8001914:	682b      	ldr	r3, [r5, #0]
 8001916:	b103      	cbz	r3, 800191a <_write_r+0x1e>
 8001918:	6023      	str	r3, [r4, #0]
 800191a:	bd38      	pop	{r3, r4, r5, pc}
 800191c:	2000021c 	.word	0x2000021c

08001920 <__errno>:
 8001920:	4b01      	ldr	r3, [pc, #4]	@ (8001928 <__errno+0x8>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	20000018 	.word	0x20000018

0800192c <__libc_init_array>:
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	4d0d      	ldr	r5, [pc, #52]	@ (8001964 <__libc_init_array+0x38>)
 8001930:	4c0d      	ldr	r4, [pc, #52]	@ (8001968 <__libc_init_array+0x3c>)
 8001932:	1b64      	subs	r4, r4, r5
 8001934:	10a4      	asrs	r4, r4, #2
 8001936:	2600      	movs	r6, #0
 8001938:	42a6      	cmp	r6, r4
 800193a:	d109      	bne.n	8001950 <__libc_init_array+0x24>
 800193c:	4d0b      	ldr	r5, [pc, #44]	@ (800196c <__libc_init_array+0x40>)
 800193e:	4c0c      	ldr	r4, [pc, #48]	@ (8001970 <__libc_init_array+0x44>)
 8001940:	f000 fd22 	bl	8002388 <_init>
 8001944:	1b64      	subs	r4, r4, r5
 8001946:	10a4      	asrs	r4, r4, #2
 8001948:	2600      	movs	r6, #0
 800194a:	42a6      	cmp	r6, r4
 800194c:	d105      	bne.n	800195a <__libc_init_array+0x2e>
 800194e:	bd70      	pop	{r4, r5, r6, pc}
 8001950:	f855 3b04 	ldr.w	r3, [r5], #4
 8001954:	4798      	blx	r3
 8001956:	3601      	adds	r6, #1
 8001958:	e7ee      	b.n	8001938 <__libc_init_array+0xc>
 800195a:	f855 3b04 	ldr.w	r3, [r5], #4
 800195e:	4798      	blx	r3
 8001960:	3601      	adds	r6, #1
 8001962:	e7f2      	b.n	800194a <__libc_init_array+0x1e>
 8001964:	0800247c 	.word	0x0800247c
 8001968:	0800247c 	.word	0x0800247c
 800196c:	0800247c 	.word	0x0800247c
 8001970:	08002480 	.word	0x08002480

08001974 <__retarget_lock_init_recursive>:
 8001974:	4770      	bx	lr

08001976 <__retarget_lock_acquire_recursive>:
 8001976:	4770      	bx	lr

08001978 <__retarget_lock_release_recursive>:
 8001978:	4770      	bx	lr
	...

0800197c <_free_r>:
 800197c:	b538      	push	{r3, r4, r5, lr}
 800197e:	4605      	mov	r5, r0
 8001980:	2900      	cmp	r1, #0
 8001982:	d041      	beq.n	8001a08 <_free_r+0x8c>
 8001984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001988:	1f0c      	subs	r4, r1, #4
 800198a:	2b00      	cmp	r3, #0
 800198c:	bfb8      	it	lt
 800198e:	18e4      	addlt	r4, r4, r3
 8001990:	f000 f8e0 	bl	8001b54 <__malloc_lock>
 8001994:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <_free_r+0x90>)
 8001996:	6813      	ldr	r3, [r2, #0]
 8001998:	b933      	cbnz	r3, 80019a8 <_free_r+0x2c>
 800199a:	6063      	str	r3, [r4, #4]
 800199c:	6014      	str	r4, [r2, #0]
 800199e:	4628      	mov	r0, r5
 80019a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019a4:	f000 b8dc 	b.w	8001b60 <__malloc_unlock>
 80019a8:	42a3      	cmp	r3, r4
 80019aa:	d908      	bls.n	80019be <_free_r+0x42>
 80019ac:	6820      	ldr	r0, [r4, #0]
 80019ae:	1821      	adds	r1, r4, r0
 80019b0:	428b      	cmp	r3, r1
 80019b2:	bf01      	itttt	eq
 80019b4:	6819      	ldreq	r1, [r3, #0]
 80019b6:	685b      	ldreq	r3, [r3, #4]
 80019b8:	1809      	addeq	r1, r1, r0
 80019ba:	6021      	streq	r1, [r4, #0]
 80019bc:	e7ed      	b.n	800199a <_free_r+0x1e>
 80019be:	461a      	mov	r2, r3
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	b10b      	cbz	r3, 80019c8 <_free_r+0x4c>
 80019c4:	42a3      	cmp	r3, r4
 80019c6:	d9fa      	bls.n	80019be <_free_r+0x42>
 80019c8:	6811      	ldr	r1, [r2, #0]
 80019ca:	1850      	adds	r0, r2, r1
 80019cc:	42a0      	cmp	r0, r4
 80019ce:	d10b      	bne.n	80019e8 <_free_r+0x6c>
 80019d0:	6820      	ldr	r0, [r4, #0]
 80019d2:	4401      	add	r1, r0
 80019d4:	1850      	adds	r0, r2, r1
 80019d6:	4283      	cmp	r3, r0
 80019d8:	6011      	str	r1, [r2, #0]
 80019da:	d1e0      	bne.n	800199e <_free_r+0x22>
 80019dc:	6818      	ldr	r0, [r3, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	6053      	str	r3, [r2, #4]
 80019e2:	4408      	add	r0, r1
 80019e4:	6010      	str	r0, [r2, #0]
 80019e6:	e7da      	b.n	800199e <_free_r+0x22>
 80019e8:	d902      	bls.n	80019f0 <_free_r+0x74>
 80019ea:	230c      	movs	r3, #12
 80019ec:	602b      	str	r3, [r5, #0]
 80019ee:	e7d6      	b.n	800199e <_free_r+0x22>
 80019f0:	6820      	ldr	r0, [r4, #0]
 80019f2:	1821      	adds	r1, r4, r0
 80019f4:	428b      	cmp	r3, r1
 80019f6:	bf04      	itt	eq
 80019f8:	6819      	ldreq	r1, [r3, #0]
 80019fa:	685b      	ldreq	r3, [r3, #4]
 80019fc:	6063      	str	r3, [r4, #4]
 80019fe:	bf04      	itt	eq
 8001a00:	1809      	addeq	r1, r1, r0
 8001a02:	6021      	streq	r1, [r4, #0]
 8001a04:	6054      	str	r4, [r2, #4]
 8001a06:	e7ca      	b.n	800199e <_free_r+0x22>
 8001a08:	bd38      	pop	{r3, r4, r5, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000228 	.word	0x20000228

08001a10 <sbrk_aligned>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	4e0f      	ldr	r6, [pc, #60]	@ (8001a50 <sbrk_aligned+0x40>)
 8001a14:	460c      	mov	r4, r1
 8001a16:	6831      	ldr	r1, [r6, #0]
 8001a18:	4605      	mov	r5, r0
 8001a1a:	b911      	cbnz	r1, 8001a22 <sbrk_aligned+0x12>
 8001a1c:	f000 fca4 	bl	8002368 <_sbrk_r>
 8001a20:	6030      	str	r0, [r6, #0]
 8001a22:	4621      	mov	r1, r4
 8001a24:	4628      	mov	r0, r5
 8001a26:	f000 fc9f 	bl	8002368 <_sbrk_r>
 8001a2a:	1c43      	adds	r3, r0, #1
 8001a2c:	d103      	bne.n	8001a36 <sbrk_aligned+0x26>
 8001a2e:	f04f 34ff 	mov.w	r4, #4294967295
 8001a32:	4620      	mov	r0, r4
 8001a34:	bd70      	pop	{r4, r5, r6, pc}
 8001a36:	1cc4      	adds	r4, r0, #3
 8001a38:	f024 0403 	bic.w	r4, r4, #3
 8001a3c:	42a0      	cmp	r0, r4
 8001a3e:	d0f8      	beq.n	8001a32 <sbrk_aligned+0x22>
 8001a40:	1a21      	subs	r1, r4, r0
 8001a42:	4628      	mov	r0, r5
 8001a44:	f000 fc90 	bl	8002368 <_sbrk_r>
 8001a48:	3001      	adds	r0, #1
 8001a4a:	d1f2      	bne.n	8001a32 <sbrk_aligned+0x22>
 8001a4c:	e7ef      	b.n	8001a2e <sbrk_aligned+0x1e>
 8001a4e:	bf00      	nop
 8001a50:	20000224 	.word	0x20000224

08001a54 <_malloc_r>:
 8001a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001a58:	1ccd      	adds	r5, r1, #3
 8001a5a:	f025 0503 	bic.w	r5, r5, #3
 8001a5e:	3508      	adds	r5, #8
 8001a60:	2d0c      	cmp	r5, #12
 8001a62:	bf38      	it	cc
 8001a64:	250c      	movcc	r5, #12
 8001a66:	2d00      	cmp	r5, #0
 8001a68:	4606      	mov	r6, r0
 8001a6a:	db01      	blt.n	8001a70 <_malloc_r+0x1c>
 8001a6c:	42a9      	cmp	r1, r5
 8001a6e:	d904      	bls.n	8001a7a <_malloc_r+0x26>
 8001a70:	230c      	movs	r3, #12
 8001a72:	6033      	str	r3, [r6, #0]
 8001a74:	2000      	movs	r0, #0
 8001a76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001a7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001b50 <_malloc_r+0xfc>
 8001a7e:	f000 f869 	bl	8001b54 <__malloc_lock>
 8001a82:	f8d8 3000 	ldr.w	r3, [r8]
 8001a86:	461c      	mov	r4, r3
 8001a88:	bb44      	cbnz	r4, 8001adc <_malloc_r+0x88>
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	4630      	mov	r0, r6
 8001a8e:	f7ff ffbf 	bl	8001a10 <sbrk_aligned>
 8001a92:	1c43      	adds	r3, r0, #1
 8001a94:	4604      	mov	r4, r0
 8001a96:	d158      	bne.n	8001b4a <_malloc_r+0xf6>
 8001a98:	f8d8 4000 	ldr.w	r4, [r8]
 8001a9c:	4627      	mov	r7, r4
 8001a9e:	2f00      	cmp	r7, #0
 8001aa0:	d143      	bne.n	8001b2a <_malloc_r+0xd6>
 8001aa2:	2c00      	cmp	r4, #0
 8001aa4:	d04b      	beq.n	8001b3e <_malloc_r+0xea>
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	4639      	mov	r1, r7
 8001aaa:	4630      	mov	r0, r6
 8001aac:	eb04 0903 	add.w	r9, r4, r3
 8001ab0:	f000 fc5a 	bl	8002368 <_sbrk_r>
 8001ab4:	4581      	cmp	r9, r0
 8001ab6:	d142      	bne.n	8001b3e <_malloc_r+0xea>
 8001ab8:	6821      	ldr	r1, [r4, #0]
 8001aba:	1a6d      	subs	r5, r5, r1
 8001abc:	4629      	mov	r1, r5
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f7ff ffa6 	bl	8001a10 <sbrk_aligned>
 8001ac4:	3001      	adds	r0, #1
 8001ac6:	d03a      	beq.n	8001b3e <_malloc_r+0xea>
 8001ac8:	6823      	ldr	r3, [r4, #0]
 8001aca:	442b      	add	r3, r5
 8001acc:	6023      	str	r3, [r4, #0]
 8001ace:	f8d8 3000 	ldr.w	r3, [r8]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	bb62      	cbnz	r2, 8001b30 <_malloc_r+0xdc>
 8001ad6:	f8c8 7000 	str.w	r7, [r8]
 8001ada:	e00f      	b.n	8001afc <_malloc_r+0xa8>
 8001adc:	6822      	ldr	r2, [r4, #0]
 8001ade:	1b52      	subs	r2, r2, r5
 8001ae0:	d420      	bmi.n	8001b24 <_malloc_r+0xd0>
 8001ae2:	2a0b      	cmp	r2, #11
 8001ae4:	d917      	bls.n	8001b16 <_malloc_r+0xc2>
 8001ae6:	1961      	adds	r1, r4, r5
 8001ae8:	42a3      	cmp	r3, r4
 8001aea:	6025      	str	r5, [r4, #0]
 8001aec:	bf18      	it	ne
 8001aee:	6059      	strne	r1, [r3, #4]
 8001af0:	6863      	ldr	r3, [r4, #4]
 8001af2:	bf08      	it	eq
 8001af4:	f8c8 1000 	streq.w	r1, [r8]
 8001af8:	5162      	str	r2, [r4, r5]
 8001afa:	604b      	str	r3, [r1, #4]
 8001afc:	4630      	mov	r0, r6
 8001afe:	f000 f82f 	bl	8001b60 <__malloc_unlock>
 8001b02:	f104 000b 	add.w	r0, r4, #11
 8001b06:	1d23      	adds	r3, r4, #4
 8001b08:	f020 0007 	bic.w	r0, r0, #7
 8001b0c:	1ac2      	subs	r2, r0, r3
 8001b0e:	bf1c      	itt	ne
 8001b10:	1a1b      	subne	r3, r3, r0
 8001b12:	50a3      	strne	r3, [r4, r2]
 8001b14:	e7af      	b.n	8001a76 <_malloc_r+0x22>
 8001b16:	6862      	ldr	r2, [r4, #4]
 8001b18:	42a3      	cmp	r3, r4
 8001b1a:	bf0c      	ite	eq
 8001b1c:	f8c8 2000 	streq.w	r2, [r8]
 8001b20:	605a      	strne	r2, [r3, #4]
 8001b22:	e7eb      	b.n	8001afc <_malloc_r+0xa8>
 8001b24:	4623      	mov	r3, r4
 8001b26:	6864      	ldr	r4, [r4, #4]
 8001b28:	e7ae      	b.n	8001a88 <_malloc_r+0x34>
 8001b2a:	463c      	mov	r4, r7
 8001b2c:	687f      	ldr	r7, [r7, #4]
 8001b2e:	e7b6      	b.n	8001a9e <_malloc_r+0x4a>
 8001b30:	461a      	mov	r2, r3
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	42a3      	cmp	r3, r4
 8001b36:	d1fb      	bne.n	8001b30 <_malloc_r+0xdc>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	6053      	str	r3, [r2, #4]
 8001b3c:	e7de      	b.n	8001afc <_malloc_r+0xa8>
 8001b3e:	230c      	movs	r3, #12
 8001b40:	6033      	str	r3, [r6, #0]
 8001b42:	4630      	mov	r0, r6
 8001b44:	f000 f80c 	bl	8001b60 <__malloc_unlock>
 8001b48:	e794      	b.n	8001a74 <_malloc_r+0x20>
 8001b4a:	6005      	str	r5, [r0, #0]
 8001b4c:	e7d6      	b.n	8001afc <_malloc_r+0xa8>
 8001b4e:	bf00      	nop
 8001b50:	20000228 	.word	0x20000228

08001b54 <__malloc_lock>:
 8001b54:	4801      	ldr	r0, [pc, #4]	@ (8001b5c <__malloc_lock+0x8>)
 8001b56:	f7ff bf0e 	b.w	8001976 <__retarget_lock_acquire_recursive>
 8001b5a:	bf00      	nop
 8001b5c:	20000220 	.word	0x20000220

08001b60 <__malloc_unlock>:
 8001b60:	4801      	ldr	r0, [pc, #4]	@ (8001b68 <__malloc_unlock+0x8>)
 8001b62:	f7ff bf09 	b.w	8001978 <__retarget_lock_release_recursive>
 8001b66:	bf00      	nop
 8001b68:	20000220 	.word	0x20000220

08001b6c <__sfputc_r>:
 8001b6c:	6893      	ldr	r3, [r2, #8]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	b410      	push	{r4}
 8001b74:	6093      	str	r3, [r2, #8]
 8001b76:	da08      	bge.n	8001b8a <__sfputc_r+0x1e>
 8001b78:	6994      	ldr	r4, [r2, #24]
 8001b7a:	42a3      	cmp	r3, r4
 8001b7c:	db01      	blt.n	8001b82 <__sfputc_r+0x16>
 8001b7e:	290a      	cmp	r1, #10
 8001b80:	d103      	bne.n	8001b8a <__sfputc_r+0x1e>
 8001b82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b86:	f7ff bde8 	b.w	800175a <__swbuf_r>
 8001b8a:	6813      	ldr	r3, [r2, #0]
 8001b8c:	1c58      	adds	r0, r3, #1
 8001b8e:	6010      	str	r0, [r2, #0]
 8001b90:	7019      	strb	r1, [r3, #0]
 8001b92:	4608      	mov	r0, r1
 8001b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <__sfputs_r>:
 8001b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b9c:	4606      	mov	r6, r0
 8001b9e:	460f      	mov	r7, r1
 8001ba0:	4614      	mov	r4, r2
 8001ba2:	18d5      	adds	r5, r2, r3
 8001ba4:	42ac      	cmp	r4, r5
 8001ba6:	d101      	bne.n	8001bac <__sfputs_r+0x12>
 8001ba8:	2000      	movs	r0, #0
 8001baa:	e007      	b.n	8001bbc <__sfputs_r+0x22>
 8001bac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bb0:	463a      	mov	r2, r7
 8001bb2:	4630      	mov	r0, r6
 8001bb4:	f7ff ffda 	bl	8001b6c <__sfputc_r>
 8001bb8:	1c43      	adds	r3, r0, #1
 8001bba:	d1f3      	bne.n	8001ba4 <__sfputs_r+0xa>
 8001bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001bc0 <_vfiprintf_r>:
 8001bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001bc4:	460d      	mov	r5, r1
 8001bc6:	b09d      	sub	sp, #116	@ 0x74
 8001bc8:	4614      	mov	r4, r2
 8001bca:	4698      	mov	r8, r3
 8001bcc:	4606      	mov	r6, r0
 8001bce:	b118      	cbz	r0, 8001bd8 <_vfiprintf_r+0x18>
 8001bd0:	6a03      	ldr	r3, [r0, #32]
 8001bd2:	b90b      	cbnz	r3, 8001bd8 <_vfiprintf_r+0x18>
 8001bd4:	f7ff fcd8 	bl	8001588 <__sinit>
 8001bd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001bda:	07d9      	lsls	r1, r3, #31
 8001bdc:	d405      	bmi.n	8001bea <_vfiprintf_r+0x2a>
 8001bde:	89ab      	ldrh	r3, [r5, #12]
 8001be0:	059a      	lsls	r2, r3, #22
 8001be2:	d402      	bmi.n	8001bea <_vfiprintf_r+0x2a>
 8001be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001be6:	f7ff fec6 	bl	8001976 <__retarget_lock_acquire_recursive>
 8001bea:	89ab      	ldrh	r3, [r5, #12]
 8001bec:	071b      	lsls	r3, r3, #28
 8001bee:	d501      	bpl.n	8001bf4 <_vfiprintf_r+0x34>
 8001bf0:	692b      	ldr	r3, [r5, #16]
 8001bf2:	b99b      	cbnz	r3, 8001c1c <_vfiprintf_r+0x5c>
 8001bf4:	4629      	mov	r1, r5
 8001bf6:	4630      	mov	r0, r6
 8001bf8:	f7ff fdee 	bl	80017d8 <__swsetup_r>
 8001bfc:	b170      	cbz	r0, 8001c1c <_vfiprintf_r+0x5c>
 8001bfe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001c00:	07dc      	lsls	r4, r3, #31
 8001c02:	d504      	bpl.n	8001c0e <_vfiprintf_r+0x4e>
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	b01d      	add	sp, #116	@ 0x74
 8001c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c0e:	89ab      	ldrh	r3, [r5, #12]
 8001c10:	0598      	lsls	r0, r3, #22
 8001c12:	d4f7      	bmi.n	8001c04 <_vfiprintf_r+0x44>
 8001c14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001c16:	f7ff feaf 	bl	8001978 <__retarget_lock_release_recursive>
 8001c1a:	e7f3      	b.n	8001c04 <_vfiprintf_r+0x44>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001c20:	2320      	movs	r3, #32
 8001c22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001c26:	f8cd 800c 	str.w	r8, [sp, #12]
 8001c2a:	2330      	movs	r3, #48	@ 0x30
 8001c2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001ddc <_vfiprintf_r+0x21c>
 8001c30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001c34:	f04f 0901 	mov.w	r9, #1
 8001c38:	4623      	mov	r3, r4
 8001c3a:	469a      	mov	sl, r3
 8001c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001c40:	b10a      	cbz	r2, 8001c46 <_vfiprintf_r+0x86>
 8001c42:	2a25      	cmp	r2, #37	@ 0x25
 8001c44:	d1f9      	bne.n	8001c3a <_vfiprintf_r+0x7a>
 8001c46:	ebba 0b04 	subs.w	fp, sl, r4
 8001c4a:	d00b      	beq.n	8001c64 <_vfiprintf_r+0xa4>
 8001c4c:	465b      	mov	r3, fp
 8001c4e:	4622      	mov	r2, r4
 8001c50:	4629      	mov	r1, r5
 8001c52:	4630      	mov	r0, r6
 8001c54:	f7ff ffa1 	bl	8001b9a <__sfputs_r>
 8001c58:	3001      	adds	r0, #1
 8001c5a:	f000 80a7 	beq.w	8001dac <_vfiprintf_r+0x1ec>
 8001c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001c60:	445a      	add	r2, fp
 8001c62:	9209      	str	r2, [sp, #36]	@ 0x24
 8001c64:	f89a 3000 	ldrb.w	r3, [sl]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 809f 	beq.w	8001dac <_vfiprintf_r+0x1ec>
 8001c6e:	2300      	movs	r3, #0
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001c78:	f10a 0a01 	add.w	sl, sl, #1
 8001c7c:	9304      	str	r3, [sp, #16]
 8001c7e:	9307      	str	r3, [sp, #28]
 8001c80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001c84:	931a      	str	r3, [sp, #104]	@ 0x68
 8001c86:	4654      	mov	r4, sl
 8001c88:	2205      	movs	r2, #5
 8001c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001c8e:	4853      	ldr	r0, [pc, #332]	@ (8001ddc <_vfiprintf_r+0x21c>)
 8001c90:	f7fe faa6 	bl	80001e0 <memchr>
 8001c94:	9a04      	ldr	r2, [sp, #16]
 8001c96:	b9d8      	cbnz	r0, 8001cd0 <_vfiprintf_r+0x110>
 8001c98:	06d1      	lsls	r1, r2, #27
 8001c9a:	bf44      	itt	mi
 8001c9c:	2320      	movmi	r3, #32
 8001c9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ca2:	0713      	lsls	r3, r2, #28
 8001ca4:	bf44      	itt	mi
 8001ca6:	232b      	movmi	r3, #43	@ 0x2b
 8001ca8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001cac:	f89a 3000 	ldrb.w	r3, [sl]
 8001cb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001cb2:	d015      	beq.n	8001ce0 <_vfiprintf_r+0x120>
 8001cb4:	9a07      	ldr	r2, [sp, #28]
 8001cb6:	4654      	mov	r4, sl
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f04f 0c0a 	mov.w	ip, #10
 8001cbe:	4621      	mov	r1, r4
 8001cc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001cc4:	3b30      	subs	r3, #48	@ 0x30
 8001cc6:	2b09      	cmp	r3, #9
 8001cc8:	d94b      	bls.n	8001d62 <_vfiprintf_r+0x1a2>
 8001cca:	b1b0      	cbz	r0, 8001cfa <_vfiprintf_r+0x13a>
 8001ccc:	9207      	str	r2, [sp, #28]
 8001cce:	e014      	b.n	8001cfa <_vfiprintf_r+0x13a>
 8001cd0:	eba0 0308 	sub.w	r3, r0, r8
 8001cd4:	fa09 f303 	lsl.w	r3, r9, r3
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	9304      	str	r3, [sp, #16]
 8001cdc:	46a2      	mov	sl, r4
 8001cde:	e7d2      	b.n	8001c86 <_vfiprintf_r+0xc6>
 8001ce0:	9b03      	ldr	r3, [sp, #12]
 8001ce2:	1d19      	adds	r1, r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	9103      	str	r1, [sp, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	bfbb      	ittet	lt
 8001cec:	425b      	neglt	r3, r3
 8001cee:	f042 0202 	orrlt.w	r2, r2, #2
 8001cf2:	9307      	strge	r3, [sp, #28]
 8001cf4:	9307      	strlt	r3, [sp, #28]
 8001cf6:	bfb8      	it	lt
 8001cf8:	9204      	strlt	r2, [sp, #16]
 8001cfa:	7823      	ldrb	r3, [r4, #0]
 8001cfc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cfe:	d10a      	bne.n	8001d16 <_vfiprintf_r+0x156>
 8001d00:	7863      	ldrb	r3, [r4, #1]
 8001d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d04:	d132      	bne.n	8001d6c <_vfiprintf_r+0x1ac>
 8001d06:	9b03      	ldr	r3, [sp, #12]
 8001d08:	1d1a      	adds	r2, r3, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	9203      	str	r2, [sp, #12]
 8001d0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001d12:	3402      	adds	r4, #2
 8001d14:	9305      	str	r3, [sp, #20]
 8001d16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001dec <_vfiprintf_r+0x22c>
 8001d1a:	7821      	ldrb	r1, [r4, #0]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	4650      	mov	r0, sl
 8001d20:	f7fe fa5e 	bl	80001e0 <memchr>
 8001d24:	b138      	cbz	r0, 8001d36 <_vfiprintf_r+0x176>
 8001d26:	9b04      	ldr	r3, [sp, #16]
 8001d28:	eba0 000a 	sub.w	r0, r0, sl
 8001d2c:	2240      	movs	r2, #64	@ 0x40
 8001d2e:	4082      	lsls	r2, r0
 8001d30:	4313      	orrs	r3, r2
 8001d32:	3401      	adds	r4, #1
 8001d34:	9304      	str	r3, [sp, #16]
 8001d36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d3a:	4829      	ldr	r0, [pc, #164]	@ (8001de0 <_vfiprintf_r+0x220>)
 8001d3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001d40:	2206      	movs	r2, #6
 8001d42:	f7fe fa4d 	bl	80001e0 <memchr>
 8001d46:	2800      	cmp	r0, #0
 8001d48:	d03f      	beq.n	8001dca <_vfiprintf_r+0x20a>
 8001d4a:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <_vfiprintf_r+0x224>)
 8001d4c:	bb1b      	cbnz	r3, 8001d96 <_vfiprintf_r+0x1d6>
 8001d4e:	9b03      	ldr	r3, [sp, #12]
 8001d50:	3307      	adds	r3, #7
 8001d52:	f023 0307 	bic.w	r3, r3, #7
 8001d56:	3308      	adds	r3, #8
 8001d58:	9303      	str	r3, [sp, #12]
 8001d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001d5c:	443b      	add	r3, r7
 8001d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d60:	e76a      	b.n	8001c38 <_vfiprintf_r+0x78>
 8001d62:	fb0c 3202 	mla	r2, ip, r2, r3
 8001d66:	460c      	mov	r4, r1
 8001d68:	2001      	movs	r0, #1
 8001d6a:	e7a8      	b.n	8001cbe <_vfiprintf_r+0xfe>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	3401      	adds	r4, #1
 8001d70:	9305      	str	r3, [sp, #20]
 8001d72:	4619      	mov	r1, r3
 8001d74:	f04f 0c0a 	mov.w	ip, #10
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001d7e:	3a30      	subs	r2, #48	@ 0x30
 8001d80:	2a09      	cmp	r2, #9
 8001d82:	d903      	bls.n	8001d8c <_vfiprintf_r+0x1cc>
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d0c6      	beq.n	8001d16 <_vfiprintf_r+0x156>
 8001d88:	9105      	str	r1, [sp, #20]
 8001d8a:	e7c4      	b.n	8001d16 <_vfiprintf_r+0x156>
 8001d8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001d90:	4604      	mov	r4, r0
 8001d92:	2301      	movs	r3, #1
 8001d94:	e7f0      	b.n	8001d78 <_vfiprintf_r+0x1b8>
 8001d96:	ab03      	add	r3, sp, #12
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	462a      	mov	r2, r5
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <_vfiprintf_r+0x228>)
 8001d9e:	a904      	add	r1, sp, #16
 8001da0:	4630      	mov	r0, r6
 8001da2:	f3af 8000 	nop.w
 8001da6:	4607      	mov	r7, r0
 8001da8:	1c78      	adds	r0, r7, #1
 8001daa:	d1d6      	bne.n	8001d5a <_vfiprintf_r+0x19a>
 8001dac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001dae:	07d9      	lsls	r1, r3, #31
 8001db0:	d405      	bmi.n	8001dbe <_vfiprintf_r+0x1fe>
 8001db2:	89ab      	ldrh	r3, [r5, #12]
 8001db4:	059a      	lsls	r2, r3, #22
 8001db6:	d402      	bmi.n	8001dbe <_vfiprintf_r+0x1fe>
 8001db8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001dba:	f7ff fddd 	bl	8001978 <__retarget_lock_release_recursive>
 8001dbe:	89ab      	ldrh	r3, [r5, #12]
 8001dc0:	065b      	lsls	r3, r3, #25
 8001dc2:	f53f af1f 	bmi.w	8001c04 <_vfiprintf_r+0x44>
 8001dc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001dc8:	e71e      	b.n	8001c08 <_vfiprintf_r+0x48>
 8001dca:	ab03      	add	r3, sp, #12
 8001dcc:	9300      	str	r3, [sp, #0]
 8001dce:	462a      	mov	r2, r5
 8001dd0:	4b05      	ldr	r3, [pc, #20]	@ (8001de8 <_vfiprintf_r+0x228>)
 8001dd2:	a904      	add	r1, sp, #16
 8001dd4:	4630      	mov	r0, r6
 8001dd6:	f000 f879 	bl	8001ecc <_printf_i>
 8001dda:	e7e4      	b.n	8001da6 <_vfiprintf_r+0x1e6>
 8001ddc:	0800243f 	.word	0x0800243f
 8001de0:	08002449 	.word	0x08002449
 8001de4:	00000000 	.word	0x00000000
 8001de8:	08001b9b 	.word	0x08001b9b
 8001dec:	08002445 	.word	0x08002445

08001df0 <_printf_common>:
 8001df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001df4:	4616      	mov	r6, r2
 8001df6:	4698      	mov	r8, r3
 8001df8:	688a      	ldr	r2, [r1, #8]
 8001dfa:	690b      	ldr	r3, [r1, #16]
 8001dfc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001e00:	4293      	cmp	r3, r2
 8001e02:	bfb8      	it	lt
 8001e04:	4613      	movlt	r3, r2
 8001e06:	6033      	str	r3, [r6, #0]
 8001e08:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001e0c:	4607      	mov	r7, r0
 8001e0e:	460c      	mov	r4, r1
 8001e10:	b10a      	cbz	r2, 8001e16 <_printf_common+0x26>
 8001e12:	3301      	adds	r3, #1
 8001e14:	6033      	str	r3, [r6, #0]
 8001e16:	6823      	ldr	r3, [r4, #0]
 8001e18:	0699      	lsls	r1, r3, #26
 8001e1a:	bf42      	ittt	mi
 8001e1c:	6833      	ldrmi	r3, [r6, #0]
 8001e1e:	3302      	addmi	r3, #2
 8001e20:	6033      	strmi	r3, [r6, #0]
 8001e22:	6825      	ldr	r5, [r4, #0]
 8001e24:	f015 0506 	ands.w	r5, r5, #6
 8001e28:	d106      	bne.n	8001e38 <_printf_common+0x48>
 8001e2a:	f104 0a19 	add.w	sl, r4, #25
 8001e2e:	68e3      	ldr	r3, [r4, #12]
 8001e30:	6832      	ldr	r2, [r6, #0]
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	42ab      	cmp	r3, r5
 8001e36:	dc26      	bgt.n	8001e86 <_printf_common+0x96>
 8001e38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001e3c:	6822      	ldr	r2, [r4, #0]
 8001e3e:	3b00      	subs	r3, #0
 8001e40:	bf18      	it	ne
 8001e42:	2301      	movne	r3, #1
 8001e44:	0692      	lsls	r2, r2, #26
 8001e46:	d42b      	bmi.n	8001ea0 <_printf_common+0xb0>
 8001e48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001e4c:	4641      	mov	r1, r8
 8001e4e:	4638      	mov	r0, r7
 8001e50:	47c8      	blx	r9
 8001e52:	3001      	adds	r0, #1
 8001e54:	d01e      	beq.n	8001e94 <_printf_common+0xa4>
 8001e56:	6823      	ldr	r3, [r4, #0]
 8001e58:	6922      	ldr	r2, [r4, #16]
 8001e5a:	f003 0306 	and.w	r3, r3, #6
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf02      	ittt	eq
 8001e62:	68e5      	ldreq	r5, [r4, #12]
 8001e64:	6833      	ldreq	r3, [r6, #0]
 8001e66:	1aed      	subeq	r5, r5, r3
 8001e68:	68a3      	ldr	r3, [r4, #8]
 8001e6a:	bf0c      	ite	eq
 8001e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001e70:	2500      	movne	r5, #0
 8001e72:	4293      	cmp	r3, r2
 8001e74:	bfc4      	itt	gt
 8001e76:	1a9b      	subgt	r3, r3, r2
 8001e78:	18ed      	addgt	r5, r5, r3
 8001e7a:	2600      	movs	r6, #0
 8001e7c:	341a      	adds	r4, #26
 8001e7e:	42b5      	cmp	r5, r6
 8001e80:	d11a      	bne.n	8001eb8 <_printf_common+0xc8>
 8001e82:	2000      	movs	r0, #0
 8001e84:	e008      	b.n	8001e98 <_printf_common+0xa8>
 8001e86:	2301      	movs	r3, #1
 8001e88:	4652      	mov	r2, sl
 8001e8a:	4641      	mov	r1, r8
 8001e8c:	4638      	mov	r0, r7
 8001e8e:	47c8      	blx	r9
 8001e90:	3001      	adds	r0, #1
 8001e92:	d103      	bne.n	8001e9c <_printf_common+0xac>
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e9c:	3501      	adds	r5, #1
 8001e9e:	e7c6      	b.n	8001e2e <_printf_common+0x3e>
 8001ea0:	18e1      	adds	r1, r4, r3
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	2030      	movs	r0, #48	@ 0x30
 8001ea6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001eaa:	4422      	add	r2, r4
 8001eac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001eb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	e7c7      	b.n	8001e48 <_printf_common+0x58>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	4622      	mov	r2, r4
 8001ebc:	4641      	mov	r1, r8
 8001ebe:	4638      	mov	r0, r7
 8001ec0:	47c8      	blx	r9
 8001ec2:	3001      	adds	r0, #1
 8001ec4:	d0e6      	beq.n	8001e94 <_printf_common+0xa4>
 8001ec6:	3601      	adds	r6, #1
 8001ec8:	e7d9      	b.n	8001e7e <_printf_common+0x8e>
	...

08001ecc <_printf_i>:
 8001ecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ed0:	7e0f      	ldrb	r7, [r1, #24]
 8001ed2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001ed4:	2f78      	cmp	r7, #120	@ 0x78
 8001ed6:	4691      	mov	r9, r2
 8001ed8:	4680      	mov	r8, r0
 8001eda:	460c      	mov	r4, r1
 8001edc:	469a      	mov	sl, r3
 8001ede:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001ee2:	d807      	bhi.n	8001ef4 <_printf_i+0x28>
 8001ee4:	2f62      	cmp	r7, #98	@ 0x62
 8001ee6:	d80a      	bhi.n	8001efe <_printf_i+0x32>
 8001ee8:	2f00      	cmp	r7, #0
 8001eea:	f000 80d1 	beq.w	8002090 <_printf_i+0x1c4>
 8001eee:	2f58      	cmp	r7, #88	@ 0x58
 8001ef0:	f000 80b8 	beq.w	8002064 <_printf_i+0x198>
 8001ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001ef8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001efc:	e03a      	b.n	8001f74 <_printf_i+0xa8>
 8001efe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001f02:	2b15      	cmp	r3, #21
 8001f04:	d8f6      	bhi.n	8001ef4 <_printf_i+0x28>
 8001f06:	a101      	add	r1, pc, #4	@ (adr r1, 8001f0c <_printf_i+0x40>)
 8001f08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001f0c:	08001f65 	.word	0x08001f65
 8001f10:	08001f79 	.word	0x08001f79
 8001f14:	08001ef5 	.word	0x08001ef5
 8001f18:	08001ef5 	.word	0x08001ef5
 8001f1c:	08001ef5 	.word	0x08001ef5
 8001f20:	08001ef5 	.word	0x08001ef5
 8001f24:	08001f79 	.word	0x08001f79
 8001f28:	08001ef5 	.word	0x08001ef5
 8001f2c:	08001ef5 	.word	0x08001ef5
 8001f30:	08001ef5 	.word	0x08001ef5
 8001f34:	08001ef5 	.word	0x08001ef5
 8001f38:	08002077 	.word	0x08002077
 8001f3c:	08001fa3 	.word	0x08001fa3
 8001f40:	08002031 	.word	0x08002031
 8001f44:	08001ef5 	.word	0x08001ef5
 8001f48:	08001ef5 	.word	0x08001ef5
 8001f4c:	08002099 	.word	0x08002099
 8001f50:	08001ef5 	.word	0x08001ef5
 8001f54:	08001fa3 	.word	0x08001fa3
 8001f58:	08001ef5 	.word	0x08001ef5
 8001f5c:	08001ef5 	.word	0x08001ef5
 8001f60:	08002039 	.word	0x08002039
 8001f64:	6833      	ldr	r3, [r6, #0]
 8001f66:	1d1a      	adds	r2, r3, #4
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6032      	str	r2, [r6, #0]
 8001f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001f70:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001f74:	2301      	movs	r3, #1
 8001f76:	e09c      	b.n	80020b2 <_printf_i+0x1e6>
 8001f78:	6833      	ldr	r3, [r6, #0]
 8001f7a:	6820      	ldr	r0, [r4, #0]
 8001f7c:	1d19      	adds	r1, r3, #4
 8001f7e:	6031      	str	r1, [r6, #0]
 8001f80:	0606      	lsls	r6, r0, #24
 8001f82:	d501      	bpl.n	8001f88 <_printf_i+0xbc>
 8001f84:	681d      	ldr	r5, [r3, #0]
 8001f86:	e003      	b.n	8001f90 <_printf_i+0xc4>
 8001f88:	0645      	lsls	r5, r0, #25
 8001f8a:	d5fb      	bpl.n	8001f84 <_printf_i+0xb8>
 8001f8c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f90:	2d00      	cmp	r5, #0
 8001f92:	da03      	bge.n	8001f9c <_printf_i+0xd0>
 8001f94:	232d      	movs	r3, #45	@ 0x2d
 8001f96:	426d      	negs	r5, r5
 8001f98:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f9c:	4858      	ldr	r0, [pc, #352]	@ (8002100 <_printf_i+0x234>)
 8001f9e:	230a      	movs	r3, #10
 8001fa0:	e011      	b.n	8001fc6 <_printf_i+0xfa>
 8001fa2:	6821      	ldr	r1, [r4, #0]
 8001fa4:	6833      	ldr	r3, [r6, #0]
 8001fa6:	0608      	lsls	r0, r1, #24
 8001fa8:	f853 5b04 	ldr.w	r5, [r3], #4
 8001fac:	d402      	bmi.n	8001fb4 <_printf_i+0xe8>
 8001fae:	0649      	lsls	r1, r1, #25
 8001fb0:	bf48      	it	mi
 8001fb2:	b2ad      	uxthmi	r5, r5
 8001fb4:	2f6f      	cmp	r7, #111	@ 0x6f
 8001fb6:	4852      	ldr	r0, [pc, #328]	@ (8002100 <_printf_i+0x234>)
 8001fb8:	6033      	str	r3, [r6, #0]
 8001fba:	bf14      	ite	ne
 8001fbc:	230a      	movne	r3, #10
 8001fbe:	2308      	moveq	r3, #8
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001fc6:	6866      	ldr	r6, [r4, #4]
 8001fc8:	60a6      	str	r6, [r4, #8]
 8001fca:	2e00      	cmp	r6, #0
 8001fcc:	db05      	blt.n	8001fda <_printf_i+0x10e>
 8001fce:	6821      	ldr	r1, [r4, #0]
 8001fd0:	432e      	orrs	r6, r5
 8001fd2:	f021 0104 	bic.w	r1, r1, #4
 8001fd6:	6021      	str	r1, [r4, #0]
 8001fd8:	d04b      	beq.n	8002072 <_printf_i+0x1a6>
 8001fda:	4616      	mov	r6, r2
 8001fdc:	fbb5 f1f3 	udiv	r1, r5, r3
 8001fe0:	fb03 5711 	mls	r7, r3, r1, r5
 8001fe4:	5dc7      	ldrb	r7, [r0, r7]
 8001fe6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001fea:	462f      	mov	r7, r5
 8001fec:	42bb      	cmp	r3, r7
 8001fee:	460d      	mov	r5, r1
 8001ff0:	d9f4      	bls.n	8001fdc <_printf_i+0x110>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d10b      	bne.n	800200e <_printf_i+0x142>
 8001ff6:	6823      	ldr	r3, [r4, #0]
 8001ff8:	07df      	lsls	r7, r3, #31
 8001ffa:	d508      	bpl.n	800200e <_printf_i+0x142>
 8001ffc:	6923      	ldr	r3, [r4, #16]
 8001ffe:	6861      	ldr	r1, [r4, #4]
 8002000:	4299      	cmp	r1, r3
 8002002:	bfde      	ittt	le
 8002004:	2330      	movle	r3, #48	@ 0x30
 8002006:	f806 3c01 	strble.w	r3, [r6, #-1]
 800200a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800200e:	1b92      	subs	r2, r2, r6
 8002010:	6122      	str	r2, [r4, #16]
 8002012:	f8cd a000 	str.w	sl, [sp]
 8002016:	464b      	mov	r3, r9
 8002018:	aa03      	add	r2, sp, #12
 800201a:	4621      	mov	r1, r4
 800201c:	4640      	mov	r0, r8
 800201e:	f7ff fee7 	bl	8001df0 <_printf_common>
 8002022:	3001      	adds	r0, #1
 8002024:	d14a      	bne.n	80020bc <_printf_i+0x1f0>
 8002026:	f04f 30ff 	mov.w	r0, #4294967295
 800202a:	b004      	add	sp, #16
 800202c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	f043 0320 	orr.w	r3, r3, #32
 8002036:	6023      	str	r3, [r4, #0]
 8002038:	4832      	ldr	r0, [pc, #200]	@ (8002104 <_printf_i+0x238>)
 800203a:	2778      	movs	r7, #120	@ 0x78
 800203c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002040:	6823      	ldr	r3, [r4, #0]
 8002042:	6831      	ldr	r1, [r6, #0]
 8002044:	061f      	lsls	r7, r3, #24
 8002046:	f851 5b04 	ldr.w	r5, [r1], #4
 800204a:	d402      	bmi.n	8002052 <_printf_i+0x186>
 800204c:	065f      	lsls	r7, r3, #25
 800204e:	bf48      	it	mi
 8002050:	b2ad      	uxthmi	r5, r5
 8002052:	6031      	str	r1, [r6, #0]
 8002054:	07d9      	lsls	r1, r3, #31
 8002056:	bf44      	itt	mi
 8002058:	f043 0320 	orrmi.w	r3, r3, #32
 800205c:	6023      	strmi	r3, [r4, #0]
 800205e:	b11d      	cbz	r5, 8002068 <_printf_i+0x19c>
 8002060:	2310      	movs	r3, #16
 8002062:	e7ad      	b.n	8001fc0 <_printf_i+0xf4>
 8002064:	4826      	ldr	r0, [pc, #152]	@ (8002100 <_printf_i+0x234>)
 8002066:	e7e9      	b.n	800203c <_printf_i+0x170>
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f023 0320 	bic.w	r3, r3, #32
 800206e:	6023      	str	r3, [r4, #0]
 8002070:	e7f6      	b.n	8002060 <_printf_i+0x194>
 8002072:	4616      	mov	r6, r2
 8002074:	e7bd      	b.n	8001ff2 <_printf_i+0x126>
 8002076:	6833      	ldr	r3, [r6, #0]
 8002078:	6825      	ldr	r5, [r4, #0]
 800207a:	6961      	ldr	r1, [r4, #20]
 800207c:	1d18      	adds	r0, r3, #4
 800207e:	6030      	str	r0, [r6, #0]
 8002080:	062e      	lsls	r6, r5, #24
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	d501      	bpl.n	800208a <_printf_i+0x1be>
 8002086:	6019      	str	r1, [r3, #0]
 8002088:	e002      	b.n	8002090 <_printf_i+0x1c4>
 800208a:	0668      	lsls	r0, r5, #25
 800208c:	d5fb      	bpl.n	8002086 <_printf_i+0x1ba>
 800208e:	8019      	strh	r1, [r3, #0]
 8002090:	2300      	movs	r3, #0
 8002092:	6123      	str	r3, [r4, #16]
 8002094:	4616      	mov	r6, r2
 8002096:	e7bc      	b.n	8002012 <_printf_i+0x146>
 8002098:	6833      	ldr	r3, [r6, #0]
 800209a:	1d1a      	adds	r2, r3, #4
 800209c:	6032      	str	r2, [r6, #0]
 800209e:	681e      	ldr	r6, [r3, #0]
 80020a0:	6862      	ldr	r2, [r4, #4]
 80020a2:	2100      	movs	r1, #0
 80020a4:	4630      	mov	r0, r6
 80020a6:	f7fe f89b 	bl	80001e0 <memchr>
 80020aa:	b108      	cbz	r0, 80020b0 <_printf_i+0x1e4>
 80020ac:	1b80      	subs	r0, r0, r6
 80020ae:	6060      	str	r0, [r4, #4]
 80020b0:	6863      	ldr	r3, [r4, #4]
 80020b2:	6123      	str	r3, [r4, #16]
 80020b4:	2300      	movs	r3, #0
 80020b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020ba:	e7aa      	b.n	8002012 <_printf_i+0x146>
 80020bc:	6923      	ldr	r3, [r4, #16]
 80020be:	4632      	mov	r2, r6
 80020c0:	4649      	mov	r1, r9
 80020c2:	4640      	mov	r0, r8
 80020c4:	47d0      	blx	sl
 80020c6:	3001      	adds	r0, #1
 80020c8:	d0ad      	beq.n	8002026 <_printf_i+0x15a>
 80020ca:	6823      	ldr	r3, [r4, #0]
 80020cc:	079b      	lsls	r3, r3, #30
 80020ce:	d413      	bmi.n	80020f8 <_printf_i+0x22c>
 80020d0:	68e0      	ldr	r0, [r4, #12]
 80020d2:	9b03      	ldr	r3, [sp, #12]
 80020d4:	4298      	cmp	r0, r3
 80020d6:	bfb8      	it	lt
 80020d8:	4618      	movlt	r0, r3
 80020da:	e7a6      	b.n	800202a <_printf_i+0x15e>
 80020dc:	2301      	movs	r3, #1
 80020de:	4632      	mov	r2, r6
 80020e0:	4649      	mov	r1, r9
 80020e2:	4640      	mov	r0, r8
 80020e4:	47d0      	blx	sl
 80020e6:	3001      	adds	r0, #1
 80020e8:	d09d      	beq.n	8002026 <_printf_i+0x15a>
 80020ea:	3501      	adds	r5, #1
 80020ec:	68e3      	ldr	r3, [r4, #12]
 80020ee:	9903      	ldr	r1, [sp, #12]
 80020f0:	1a5b      	subs	r3, r3, r1
 80020f2:	42ab      	cmp	r3, r5
 80020f4:	dcf2      	bgt.n	80020dc <_printf_i+0x210>
 80020f6:	e7eb      	b.n	80020d0 <_printf_i+0x204>
 80020f8:	2500      	movs	r5, #0
 80020fa:	f104 0619 	add.w	r6, r4, #25
 80020fe:	e7f5      	b.n	80020ec <_printf_i+0x220>
 8002100:	08002450 	.word	0x08002450
 8002104:	08002461 	.word	0x08002461

08002108 <__sflush_r>:
 8002108:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002110:	0716      	lsls	r6, r2, #28
 8002112:	4605      	mov	r5, r0
 8002114:	460c      	mov	r4, r1
 8002116:	d454      	bmi.n	80021c2 <__sflush_r+0xba>
 8002118:	684b      	ldr	r3, [r1, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	dc02      	bgt.n	8002124 <__sflush_r+0x1c>
 800211e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	dd48      	ble.n	80021b6 <__sflush_r+0xae>
 8002124:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002126:	2e00      	cmp	r6, #0
 8002128:	d045      	beq.n	80021b6 <__sflush_r+0xae>
 800212a:	2300      	movs	r3, #0
 800212c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002130:	682f      	ldr	r7, [r5, #0]
 8002132:	6a21      	ldr	r1, [r4, #32]
 8002134:	602b      	str	r3, [r5, #0]
 8002136:	d030      	beq.n	800219a <__sflush_r+0x92>
 8002138:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800213a:	89a3      	ldrh	r3, [r4, #12]
 800213c:	0759      	lsls	r1, r3, #29
 800213e:	d505      	bpl.n	800214c <__sflush_r+0x44>
 8002140:	6863      	ldr	r3, [r4, #4]
 8002142:	1ad2      	subs	r2, r2, r3
 8002144:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002146:	b10b      	cbz	r3, 800214c <__sflush_r+0x44>
 8002148:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	2300      	movs	r3, #0
 800214e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002150:	6a21      	ldr	r1, [r4, #32]
 8002152:	4628      	mov	r0, r5
 8002154:	47b0      	blx	r6
 8002156:	1c43      	adds	r3, r0, #1
 8002158:	89a3      	ldrh	r3, [r4, #12]
 800215a:	d106      	bne.n	800216a <__sflush_r+0x62>
 800215c:	6829      	ldr	r1, [r5, #0]
 800215e:	291d      	cmp	r1, #29
 8002160:	d82b      	bhi.n	80021ba <__sflush_r+0xb2>
 8002162:	4a2a      	ldr	r2, [pc, #168]	@ (800220c <__sflush_r+0x104>)
 8002164:	40ca      	lsrs	r2, r1
 8002166:	07d6      	lsls	r6, r2, #31
 8002168:	d527      	bpl.n	80021ba <__sflush_r+0xb2>
 800216a:	2200      	movs	r2, #0
 800216c:	6062      	str	r2, [r4, #4]
 800216e:	04d9      	lsls	r1, r3, #19
 8002170:	6922      	ldr	r2, [r4, #16]
 8002172:	6022      	str	r2, [r4, #0]
 8002174:	d504      	bpl.n	8002180 <__sflush_r+0x78>
 8002176:	1c42      	adds	r2, r0, #1
 8002178:	d101      	bne.n	800217e <__sflush_r+0x76>
 800217a:	682b      	ldr	r3, [r5, #0]
 800217c:	b903      	cbnz	r3, 8002180 <__sflush_r+0x78>
 800217e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002182:	602f      	str	r7, [r5, #0]
 8002184:	b1b9      	cbz	r1, 80021b6 <__sflush_r+0xae>
 8002186:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800218a:	4299      	cmp	r1, r3
 800218c:	d002      	beq.n	8002194 <__sflush_r+0x8c>
 800218e:	4628      	mov	r0, r5
 8002190:	f7ff fbf4 	bl	800197c <_free_r>
 8002194:	2300      	movs	r3, #0
 8002196:	6363      	str	r3, [r4, #52]	@ 0x34
 8002198:	e00d      	b.n	80021b6 <__sflush_r+0xae>
 800219a:	2301      	movs	r3, #1
 800219c:	4628      	mov	r0, r5
 800219e:	47b0      	blx	r6
 80021a0:	4602      	mov	r2, r0
 80021a2:	1c50      	adds	r0, r2, #1
 80021a4:	d1c9      	bne.n	800213a <__sflush_r+0x32>
 80021a6:	682b      	ldr	r3, [r5, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0c6      	beq.n	800213a <__sflush_r+0x32>
 80021ac:	2b1d      	cmp	r3, #29
 80021ae:	d001      	beq.n	80021b4 <__sflush_r+0xac>
 80021b0:	2b16      	cmp	r3, #22
 80021b2:	d11e      	bne.n	80021f2 <__sflush_r+0xea>
 80021b4:	602f      	str	r7, [r5, #0]
 80021b6:	2000      	movs	r0, #0
 80021b8:	e022      	b.n	8002200 <__sflush_r+0xf8>
 80021ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021be:	b21b      	sxth	r3, r3
 80021c0:	e01b      	b.n	80021fa <__sflush_r+0xf2>
 80021c2:	690f      	ldr	r7, [r1, #16]
 80021c4:	2f00      	cmp	r7, #0
 80021c6:	d0f6      	beq.n	80021b6 <__sflush_r+0xae>
 80021c8:	0793      	lsls	r3, r2, #30
 80021ca:	680e      	ldr	r6, [r1, #0]
 80021cc:	bf08      	it	eq
 80021ce:	694b      	ldreq	r3, [r1, #20]
 80021d0:	600f      	str	r7, [r1, #0]
 80021d2:	bf18      	it	ne
 80021d4:	2300      	movne	r3, #0
 80021d6:	eba6 0807 	sub.w	r8, r6, r7
 80021da:	608b      	str	r3, [r1, #8]
 80021dc:	f1b8 0f00 	cmp.w	r8, #0
 80021e0:	dde9      	ble.n	80021b6 <__sflush_r+0xae>
 80021e2:	6a21      	ldr	r1, [r4, #32]
 80021e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80021e6:	4643      	mov	r3, r8
 80021e8:	463a      	mov	r2, r7
 80021ea:	4628      	mov	r0, r5
 80021ec:	47b0      	blx	r6
 80021ee:	2800      	cmp	r0, #0
 80021f0:	dc08      	bgt.n	8002204 <__sflush_r+0xfc>
 80021f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80021f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021fa:	81a3      	strh	r3, [r4, #12]
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002204:	4407      	add	r7, r0
 8002206:	eba8 0800 	sub.w	r8, r8, r0
 800220a:	e7e7      	b.n	80021dc <__sflush_r+0xd4>
 800220c:	20400001 	.word	0x20400001

08002210 <_fflush_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	690b      	ldr	r3, [r1, #16]
 8002214:	4605      	mov	r5, r0
 8002216:	460c      	mov	r4, r1
 8002218:	b913      	cbnz	r3, 8002220 <_fflush_r+0x10>
 800221a:	2500      	movs	r5, #0
 800221c:	4628      	mov	r0, r5
 800221e:	bd38      	pop	{r3, r4, r5, pc}
 8002220:	b118      	cbz	r0, 800222a <_fflush_r+0x1a>
 8002222:	6a03      	ldr	r3, [r0, #32]
 8002224:	b90b      	cbnz	r3, 800222a <_fflush_r+0x1a>
 8002226:	f7ff f9af 	bl	8001588 <__sinit>
 800222a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f3      	beq.n	800221a <_fflush_r+0xa>
 8002232:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002234:	07d0      	lsls	r0, r2, #31
 8002236:	d404      	bmi.n	8002242 <_fflush_r+0x32>
 8002238:	0599      	lsls	r1, r3, #22
 800223a:	d402      	bmi.n	8002242 <_fflush_r+0x32>
 800223c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800223e:	f7ff fb9a 	bl	8001976 <__retarget_lock_acquire_recursive>
 8002242:	4628      	mov	r0, r5
 8002244:	4621      	mov	r1, r4
 8002246:	f7ff ff5f 	bl	8002108 <__sflush_r>
 800224a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800224c:	07da      	lsls	r2, r3, #31
 800224e:	4605      	mov	r5, r0
 8002250:	d4e4      	bmi.n	800221c <_fflush_r+0xc>
 8002252:	89a3      	ldrh	r3, [r4, #12]
 8002254:	059b      	lsls	r3, r3, #22
 8002256:	d4e1      	bmi.n	800221c <_fflush_r+0xc>
 8002258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800225a:	f7ff fb8d 	bl	8001978 <__retarget_lock_release_recursive>
 800225e:	e7dd      	b.n	800221c <_fflush_r+0xc>

08002260 <__swhatbuf_r>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	460c      	mov	r4, r1
 8002264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002268:	2900      	cmp	r1, #0
 800226a:	b096      	sub	sp, #88	@ 0x58
 800226c:	4615      	mov	r5, r2
 800226e:	461e      	mov	r6, r3
 8002270:	da0d      	bge.n	800228e <__swhatbuf_r+0x2e>
 8002272:	89a3      	ldrh	r3, [r4, #12]
 8002274:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002278:	f04f 0100 	mov.w	r1, #0
 800227c:	bf14      	ite	ne
 800227e:	2340      	movne	r3, #64	@ 0x40
 8002280:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002284:	2000      	movs	r0, #0
 8002286:	6031      	str	r1, [r6, #0]
 8002288:	602b      	str	r3, [r5, #0]
 800228a:	b016      	add	sp, #88	@ 0x58
 800228c:	bd70      	pop	{r4, r5, r6, pc}
 800228e:	466a      	mov	r2, sp
 8002290:	f000 f848 	bl	8002324 <_fstat_r>
 8002294:	2800      	cmp	r0, #0
 8002296:	dbec      	blt.n	8002272 <__swhatbuf_r+0x12>
 8002298:	9901      	ldr	r1, [sp, #4]
 800229a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800229e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80022a2:	4259      	negs	r1, r3
 80022a4:	4159      	adcs	r1, r3
 80022a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022aa:	e7eb      	b.n	8002284 <__swhatbuf_r+0x24>

080022ac <__smakebuf_r>:
 80022ac:	898b      	ldrh	r3, [r1, #12]
 80022ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80022b0:	079d      	lsls	r5, r3, #30
 80022b2:	4606      	mov	r6, r0
 80022b4:	460c      	mov	r4, r1
 80022b6:	d507      	bpl.n	80022c8 <__smakebuf_r+0x1c>
 80022b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80022bc:	6023      	str	r3, [r4, #0]
 80022be:	6123      	str	r3, [r4, #16]
 80022c0:	2301      	movs	r3, #1
 80022c2:	6163      	str	r3, [r4, #20]
 80022c4:	b003      	add	sp, #12
 80022c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022c8:	ab01      	add	r3, sp, #4
 80022ca:	466a      	mov	r2, sp
 80022cc:	f7ff ffc8 	bl	8002260 <__swhatbuf_r>
 80022d0:	9f00      	ldr	r7, [sp, #0]
 80022d2:	4605      	mov	r5, r0
 80022d4:	4639      	mov	r1, r7
 80022d6:	4630      	mov	r0, r6
 80022d8:	f7ff fbbc 	bl	8001a54 <_malloc_r>
 80022dc:	b948      	cbnz	r0, 80022f2 <__smakebuf_r+0x46>
 80022de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80022e2:	059a      	lsls	r2, r3, #22
 80022e4:	d4ee      	bmi.n	80022c4 <__smakebuf_r+0x18>
 80022e6:	f023 0303 	bic.w	r3, r3, #3
 80022ea:	f043 0302 	orr.w	r3, r3, #2
 80022ee:	81a3      	strh	r3, [r4, #12]
 80022f0:	e7e2      	b.n	80022b8 <__smakebuf_r+0xc>
 80022f2:	89a3      	ldrh	r3, [r4, #12]
 80022f4:	6020      	str	r0, [r4, #0]
 80022f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fa:	81a3      	strh	r3, [r4, #12]
 80022fc:	9b01      	ldr	r3, [sp, #4]
 80022fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002302:	b15b      	cbz	r3, 800231c <__smakebuf_r+0x70>
 8002304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002308:	4630      	mov	r0, r6
 800230a:	f000 f81d 	bl	8002348 <_isatty_r>
 800230e:	b128      	cbz	r0, 800231c <__smakebuf_r+0x70>
 8002310:	89a3      	ldrh	r3, [r4, #12]
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	81a3      	strh	r3, [r4, #12]
 800231c:	89a3      	ldrh	r3, [r4, #12]
 800231e:	431d      	orrs	r5, r3
 8002320:	81a5      	strh	r5, [r4, #12]
 8002322:	e7cf      	b.n	80022c4 <__smakebuf_r+0x18>

08002324 <_fstat_r>:
 8002324:	b538      	push	{r3, r4, r5, lr}
 8002326:	4d07      	ldr	r5, [pc, #28]	@ (8002344 <_fstat_r+0x20>)
 8002328:	2300      	movs	r3, #0
 800232a:	4604      	mov	r4, r0
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	602b      	str	r3, [r5, #0]
 8002332:	f7ff f814 	bl	800135e <_fstat>
 8002336:	1c43      	adds	r3, r0, #1
 8002338:	d102      	bne.n	8002340 <_fstat_r+0x1c>
 800233a:	682b      	ldr	r3, [r5, #0]
 800233c:	b103      	cbz	r3, 8002340 <_fstat_r+0x1c>
 800233e:	6023      	str	r3, [r4, #0]
 8002340:	bd38      	pop	{r3, r4, r5, pc}
 8002342:	bf00      	nop
 8002344:	2000021c 	.word	0x2000021c

08002348 <_isatty_r>:
 8002348:	b538      	push	{r3, r4, r5, lr}
 800234a:	4d06      	ldr	r5, [pc, #24]	@ (8002364 <_isatty_r+0x1c>)
 800234c:	2300      	movs	r3, #0
 800234e:	4604      	mov	r4, r0
 8002350:	4608      	mov	r0, r1
 8002352:	602b      	str	r3, [r5, #0]
 8002354:	f7ff f813 	bl	800137e <_isatty>
 8002358:	1c43      	adds	r3, r0, #1
 800235a:	d102      	bne.n	8002362 <_isatty_r+0x1a>
 800235c:	682b      	ldr	r3, [r5, #0]
 800235e:	b103      	cbz	r3, 8002362 <_isatty_r+0x1a>
 8002360:	6023      	str	r3, [r4, #0]
 8002362:	bd38      	pop	{r3, r4, r5, pc}
 8002364:	2000021c 	.word	0x2000021c

08002368 <_sbrk_r>:
 8002368:	b538      	push	{r3, r4, r5, lr}
 800236a:	4d06      	ldr	r5, [pc, #24]	@ (8002384 <_sbrk_r+0x1c>)
 800236c:	2300      	movs	r3, #0
 800236e:	4604      	mov	r4, r0
 8002370:	4608      	mov	r0, r1
 8002372:	602b      	str	r3, [r5, #0]
 8002374:	f7ff f81c 	bl	80013b0 <_sbrk>
 8002378:	1c43      	adds	r3, r0, #1
 800237a:	d102      	bne.n	8002382 <_sbrk_r+0x1a>
 800237c:	682b      	ldr	r3, [r5, #0]
 800237e:	b103      	cbz	r3, 8002382 <_sbrk_r+0x1a>
 8002380:	6023      	str	r3, [r4, #0]
 8002382:	bd38      	pop	{r3, r4, r5, pc}
 8002384:	2000021c 	.word	0x2000021c

08002388 <_init>:
 8002388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800238a:	bf00      	nop
 800238c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800238e:	bc08      	pop	{r3}
 8002390:	469e      	mov	lr, r3
 8002392:	4770      	bx	lr

08002394 <_fini>:
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002396:	bf00      	nop
 8002398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800239a:	bc08      	pop	{r3}
 800239c:	469e      	mov	lr, r3
 800239e:	4770      	bx	lr
