
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d3c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08001ec4  08001ec4  00002ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f28  08001f28  000031fc  2**0
                  CONTENTS
  4 .ARM          00000008  08001f28  08001f28  00002f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001f30  08001f30  000031fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f30  08001f30  00002f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f34  08001f34  00002f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08001f38  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000031fc  2**0
                  CONTENTS
 10 .bss          00000264  200001fc  200001fc  000031fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000460  20000460  000031fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000031fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000018d6  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006d5  00000000  00000000  00004b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  000051d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000113  00000000  00000000  00005360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c15  00000000  00000000  00005473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002a94  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000095a7  00000000  00000000  0000ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000140c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ec0  00000000  00000000  00014108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00014fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001fc 	.word	0x200001fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001eac 	.word	0x08001eac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000200 	.word	0x20000200
 80001c4:	08001eac 	.word	0x08001eac

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 80001d8:	b4b0      	push	{r4, r5, r7}
 80001da:	b08f      	sub	sp, #60	@ 0x3c
 80001dc:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 80001de:	4b2c      	ldr	r3, [pc, #176]	@ (8000290 <Get_APB1_Clock_Speed+0xb8>)
 80001e0:	f107 0410 	add.w	r4, r7, #16
 80001e4:	461d      	mov	r5, r3
 80001e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 80001f2:	4b28      	ldr	r3, [pc, #160]	@ (8000294 <Get_APB1_Clock_Speed+0xbc>)
 80001f4:	463c      	mov	r4, r7
 80001f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 80001fc:	4b26      	ldr	r3, [pc, #152]	@ (8000298 <Get_APB1_Clock_Speed+0xc0>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	089b      	lsrs	r3, r3, #2
 8000202:	b2db      	uxtb	r3, r3
 8000204:	f003 0303 	and.w	r3, r3, #3
 8000208:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 800020c:	4b22      	ldr	r3, [pc, #136]	@ (8000298 <Get_APB1_Clock_Speed+0xc0>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	091b      	lsrs	r3, r3, #4
 8000212:	b2db      	uxtb	r3, r3
 8000214:	f003 030f 	and.w	r3, r3, #15
 8000218:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 800021c:	4b1e      	ldr	r3, [pc, #120]	@ (8000298 <Get_APB1_Clock_Speed+0xc0>)
 800021e:	689b      	ldr	r3, [r3, #8]
 8000220:	0a9b      	lsrs	r3, r3, #10
 8000222:	b2db      	uxtb	r3, r3
 8000224:	f003 0307 	and.w	r3, r3, #7
 8000228:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 800022c:	2301      	movs	r3, #1
 800022e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 8000230:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000234:	2b07      	cmp	r3, #7
 8000236:	d908      	bls.n	800024a <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 8000238:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800023c:	3b08      	subs	r3, #8
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	3338      	adds	r3, #56	@ 0x38
 8000242:	443b      	add	r3, r7
 8000244:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000248:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 800024a:	2301      	movs	r3, #1
 800024c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 800024e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000252:	2b03      	cmp	r3, #3
 8000254:	d908      	bls.n	8000268 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 8000256:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800025a:	3b04      	subs	r3, #4
 800025c:	009b      	lsls	r3, r3, #2
 800025e:	3338      	adds	r3, #56	@ 0x38
 8000260:	443b      	add	r3, r7
 8000262:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000266:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000268:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800026c:	2b00      	cmp	r3, #0
 800026e:	d109      	bne.n	8000284 <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000270:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000272:	4a0a      	ldr	r2, [pc, #40]	@ (800029c <Get_APB1_Clock_Speed+0xc4>)
 8000274:	fb92 f2f3 	sdiv	r2, r2, r3
 8000278:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800027a:	fb92 f3f3 	sdiv	r3, r2, r3
 800027e:	461a      	mov	r2, r3
 8000280:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <Get_APB1_Clock_Speed+0xc8>)
 8000282:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 8000284:	bf00      	nop
 8000286:	373c      	adds	r7, #60	@ 0x3c
 8000288:	46bd      	mov	sp, r7
 800028a:	bcb0      	pop	{r4, r5, r7}
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	08001ec4 	.word	0x08001ec4
 8000294:	08001ee4 	.word	0x08001ee4
 8000298:	40023800 	.word	0x40023800
 800029c:	00f42400 	.word	0x00f42400
 80002a0:	20000218 	.word	0x20000218

080002a4 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 80002a4:	b480      	push	{r7}
 80002a6:	b085      	sub	sp, #20
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a8f      	ldr	r2, [pc, #572]	@ (80004f0 <GPIO_INIT+0x24c>)
 80002b2:	4293      	cmp	r3, r2
 80002b4:	d106      	bne.n	80002c4 <GPIO_INIT+0x20>
		GPIOA_EN();
 80002b6:	4b8f      	ldr	r3, [pc, #572]	@ (80004f4 <GPIO_INIT+0x250>)
 80002b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ba:	4a8e      	ldr	r2, [pc, #568]	@ (80004f4 <GPIO_INIT+0x250>)
 80002bc:	f043 0301 	orr.w	r3, r3, #1
 80002c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002c2:	e05e      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a8b      	ldr	r2, [pc, #556]	@ (80004f8 <GPIO_INIT+0x254>)
 80002ca:	4293      	cmp	r3, r2
 80002cc:	d106      	bne.n	80002dc <GPIO_INIT+0x38>
		GPIOB_EN();
 80002ce:	4b89      	ldr	r3, [pc, #548]	@ (80004f4 <GPIO_INIT+0x250>)
 80002d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d2:	4a88      	ldr	r2, [pc, #544]	@ (80004f4 <GPIO_INIT+0x250>)
 80002d4:	f043 0302 	orr.w	r3, r3, #2
 80002d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002da:	e052      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a86      	ldr	r2, [pc, #536]	@ (80004fc <GPIO_INIT+0x258>)
 80002e2:	4293      	cmp	r3, r2
 80002e4:	d106      	bne.n	80002f4 <GPIO_INIT+0x50>
		GPIOC_EN();
 80002e6:	4b83      	ldr	r3, [pc, #524]	@ (80004f4 <GPIO_INIT+0x250>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ea:	4a82      	ldr	r2, [pc, #520]	@ (80004f4 <GPIO_INIT+0x250>)
 80002ec:	f043 0304 	orr.w	r3, r3, #4
 80002f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002f2:	e046      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a81      	ldr	r2, [pc, #516]	@ (8000500 <GPIO_INIT+0x25c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_INIT+0x68>
		GPIOD_EN();
 80002fe:	4b7d      	ldr	r3, [pc, #500]	@ (80004f4 <GPIO_INIT+0x250>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000302:	4a7c      	ldr	r2, [pc, #496]	@ (80004f4 <GPIO_INIT+0x250>)
 8000304:	f043 0308 	orr.w	r3, r3, #8
 8000308:	6313      	str	r3, [r2, #48]	@ 0x30
 800030a:	e03a      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a7c      	ldr	r2, [pc, #496]	@ (8000504 <GPIO_INIT+0x260>)
 8000312:	4293      	cmp	r3, r2
 8000314:	d106      	bne.n	8000324 <GPIO_INIT+0x80>
		GPIOE_EN();
 8000316:	4b77      	ldr	r3, [pc, #476]	@ (80004f4 <GPIO_INIT+0x250>)
 8000318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800031a:	4a76      	ldr	r2, [pc, #472]	@ (80004f4 <GPIO_INIT+0x250>)
 800031c:	f043 0310 	orr.w	r3, r3, #16
 8000320:	6313      	str	r3, [r2, #48]	@ 0x30
 8000322:	e02e      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a77      	ldr	r2, [pc, #476]	@ (8000508 <GPIO_INIT+0x264>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_INIT+0x98>
		GPIOF_EN();
 800032e:	4b71      	ldr	r3, [pc, #452]	@ (80004f4 <GPIO_INIT+0x250>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000332:	4a70      	ldr	r2, [pc, #448]	@ (80004f4 <GPIO_INIT+0x250>)
 8000334:	f043 0320 	orr.w	r3, r3, #32
 8000338:	6313      	str	r3, [r2, #48]	@ 0x30
 800033a:	e022      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a72      	ldr	r2, [pc, #456]	@ (800050c <GPIO_INIT+0x268>)
 8000342:	4293      	cmp	r3, r2
 8000344:	d106      	bne.n	8000354 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000346:	4b6b      	ldr	r3, [pc, #428]	@ (80004f4 <GPIO_INIT+0x250>)
 8000348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034a:	4a6a      	ldr	r2, [pc, #424]	@ (80004f4 <GPIO_INIT+0x250>)
 800034c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000350:	6313      	str	r3, [r2, #48]	@ 0x30
 8000352:	e016      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a6d      	ldr	r2, [pc, #436]	@ (8000510 <GPIO_INIT+0x26c>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_INIT+0xc8>
		GPIOH_EN();
 800035e:	4b65      	ldr	r3, [pc, #404]	@ (80004f4 <GPIO_INIT+0x250>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a64      	ldr	r2, [pc, #400]	@ (80004f4 <GPIO_INIT+0x250>)
 8000364:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
 800036a:	e00a      	b.n	8000382 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a68      	ldr	r2, [pc, #416]	@ (8000514 <GPIO_INIT+0x270>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d105      	bne.n	8000382 <GPIO_INIT+0xde>
		GPIOI_EN();
 8000376:	4b5f      	ldr	r3, [pc, #380]	@ (80004f4 <GPIO_INIT+0x250>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a5e      	ldr	r2, [pc, #376]	@ (80004f4 <GPIO_INIT+0x250>)
 800037c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	791b      	ldrb	r3, [r3, #4]
 800038c:	005b      	lsls	r3, r3, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000394:	43db      	mvns	r3, r3
 8000396:	4619      	mov	r1, r3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	400a      	ands	r2, r1
 800039e:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	791b      	ldrb	r3, [r3, #4]
 80003aa:	005b      	lsls	r3, r3, #1
 80003ac:	2103      	movs	r1, #3
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80003b2:	43db      	mvns	r3, r3
 80003b4:	4619      	mov	r1, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	400a      	ands	r2, r1
 80003bc:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	68da      	ldr	r2, [r3, #12]
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	799b      	ldrb	r3, [r3, #6]
 80003c8:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	791b      	ldrb	r3, [r3, #4]
 80003ce:	005b      	lsls	r3, r3, #1
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	430a      	orrs	r2, r1
 80003dc:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	795b      	ldrb	r3, [r3, #5]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	f200 8098 	bhi.w	8000518 <GPIO_INIT+0x274>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	795b      	ldrb	r3, [r3, #5]
 80003f2:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	791b      	ldrb	r3, [r3, #4]
 80003f8:	005b      	lsls	r3, r3, #1
 80003fa:	fa01 f303 	lsl.w	r3, r1, r3
 80003fe:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	430a      	orrs	r2, r1
 8000406:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	791b      	ldrb	r3, [r3, #4]
 8000412:	4619      	mov	r1, r3
 8000414:	2303      	movs	r3, #3
 8000416:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000418:	43db      	mvns	r3, r3
 800041a:	4619      	mov	r1, r3
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	400a      	ands	r2, r1
 8000422:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	685a      	ldr	r2, [r3, #4]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	7a1b      	ldrb	r3, [r3, #8]
 800042e:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	430a      	orrs	r2, r1
 8000440:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	791b      	ldrb	r3, [r3, #4]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	2103      	movs	r1, #3
 8000450:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000454:	43db      	mvns	r3, r3
 8000456:	4619      	mov	r1, r3
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	400a      	ands	r2, r1
 800045e:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	689a      	ldr	r2, [r3, #8]
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	79db      	ldrb	r3, [r3, #7]
 800046a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	791b      	ldrb	r3, [r3, #4]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	430a      	orrs	r2, r1
 800047e:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	2b02      	cmp	r3, #2
 8000486:	f040 80ea 	bne.w	800065e <GPIO_INIT+0x3ba>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 800048e:	08db      	lsrs	r3, r3, #3
 8000490:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	791b      	ldrb	r3, [r3, #4]
 8000496:	f003 0307 	and.w	r3, r3, #7
 800049a:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	7b7a      	ldrb	r2, [r7, #13]
 80004a2:	3208      	adds	r2, #8
 80004a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< gpioHandle->pin_number);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	461a      	mov	r2, r3
 80004ae:	2303      	movs	r3, #3
 80004b0:	4093      	lsls	r3, r2
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 80004b2:	43db      	mvns	r3, r3
 80004b4:	4618      	mov	r0, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	7b7a      	ldrb	r2, [r7, #13]
 80004bc:	4001      	ands	r1, r0
 80004be:	3208      	adds	r2, #8
 80004c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	7b7a      	ldrb	r2, [r7, #13]
 80004ca:	3208      	adds	r2, #8
 80004cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	7a5b      	ldrb	r3, [r3, #9]
 80004d4:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 80004d6:	7b3b      	ldrb	r3, [r7, #12]
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	fa02 f303 	lsl.w	r3, r2, r3
 80004de:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	7b7a      	ldrb	r2, [r7, #13]
 80004e6:	4301      	orrs	r1, r0
 80004e8:	3208      	adds	r2, #8
 80004ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 80004ee:	e0b6      	b.n	800065e <GPIO_INIT+0x3ba>
 80004f0:	40020000 	.word	0x40020000
 80004f4:	40023800 	.word	0x40023800
 80004f8:	40020400 	.word	0x40020400
 80004fc:	40020800 	.word	0x40020800
 8000500:	40020c00 	.word	0x40020c00
 8000504:	40021000 	.word	0x40021000
 8000508:	40021400 	.word	0x40021400
 800050c:	40021800 	.word	0x40021800
 8000510:	40021c00 	.word	0x40021c00
 8000514:	40022000 	.word	0x40022000
		SYSCFG_EN();
 8000518:	4b54      	ldr	r3, [pc, #336]	@ (800066c <GPIO_INIT+0x3c8>)
 800051a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800051c:	4a53      	ldr	r2, [pc, #332]	@ (800066c <GPIO_INIT+0x3c8>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000522:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	2b06      	cmp	r3, #6
 800052a:	d12e      	bne.n	800058a <GPIO_INIT+0x2e6>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 800052c:	4b50      	ldr	r3, [pc, #320]	@ (8000670 <GPIO_INIT+0x3cc>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	43d2      	mvns	r2, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a4c      	ldr	r2, [pc, #304]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000540:	400b      	ands	r3, r1
 8000542:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000544:	4b4a      	ldr	r3, [pc, #296]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	7912      	ldrb	r2, [r2, #4]
 800054c:	4611      	mov	r1, r2
 800054e:	2201      	movs	r2, #1
 8000550:	408a      	lsls	r2, r1
 8000552:	43d2      	mvns	r2, r2
 8000554:	4611      	mov	r1, r2
 8000556:	4a46      	ldr	r2, [pc, #280]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000558:	400b      	ands	r3, r1
 800055a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 800055c:	4b44      	ldr	r3, [pc, #272]	@ (8000670 <GPIO_INIT+0x3cc>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	4611      	mov	r1, r2
 800056c:	4a40      	ldr	r2, [pc, #256]	@ (8000670 <GPIO_INIT+0x3cc>)
 800056e:	430b      	orrs	r3, r1
 8000570:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000572:	4b3f      	ldr	r3, [pc, #252]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	4611      	mov	r1, r2
 8000582:	4a3b      	ldr	r2, [pc, #236]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000584:	430b      	orrs	r3, r1
 8000586:	60d3      	str	r3, [r2, #12]
 8000588:	e036      	b.n	80005f8 <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	795b      	ldrb	r3, [r3, #5]
 800058e:	2b05      	cmp	r3, #5
 8000590:	d117      	bne.n	80005c2 <GPIO_INIT+0x31e>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000592:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000594:	68db      	ldr	r3, [r3, #12]
 8000596:	687a      	ldr	r2, [r7, #4]
 8000598:	7912      	ldrb	r2, [r2, #4]
 800059a:	4611      	mov	r1, r2
 800059c:	2201      	movs	r2, #1
 800059e:	408a      	lsls	r2, r1
 80005a0:	43d2      	mvns	r2, r2
 80005a2:	4611      	mov	r1, r2
 80005a4:	4a32      	ldr	r2, [pc, #200]	@ (8000670 <GPIO_INIT+0x3cc>)
 80005a6:	400b      	ands	r3, r1
 80005a8:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 80005aa:	4b31      	ldr	r3, [pc, #196]	@ (8000670 <GPIO_INIT+0x3cc>)
 80005ac:	68db      	ldr	r3, [r3, #12]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a2d      	ldr	r2, [pc, #180]	@ (8000670 <GPIO_INIT+0x3cc>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	60d3      	str	r3, [r2, #12]
 80005c0:	e01a      	b.n	80005f8 <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	795b      	ldrb	r3, [r3, #5]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	d116      	bne.n	80005f8 <GPIO_INIT+0x354>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80005ca:	4b29      	ldr	r3, [pc, #164]	@ (8000670 <GPIO_INIT+0x3cc>)
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	7912      	ldrb	r2, [r2, #4]
 80005d2:	4611      	mov	r1, r2
 80005d4:	2201      	movs	r2, #1
 80005d6:	408a      	lsls	r2, r1
 80005d8:	43d2      	mvns	r2, r2
 80005da:	4611      	mov	r1, r2
 80005dc:	4a24      	ldr	r2, [pc, #144]	@ (8000670 <GPIO_INIT+0x3cc>)
 80005de:	400b      	ands	r3, r1
 80005e0:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 80005e2:	4b23      	ldr	r3, [pc, #140]	@ (8000670 <GPIO_INIT+0x3cc>)
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000670 <GPIO_INIT+0x3cc>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	791b      	ldrb	r3, [r3, #4]
 80005fc:	089b      	lsrs	r3, r3, #2
 80005fe:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	791b      	ldrb	r3, [r3, #4]
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 800060a:	4a1a      	ldr	r2, [pc, #104]	@ (8000674 <GPIO_INIT+0x3d0>)
 800060c:	7bfb      	ldrb	r3, [r7, #15]
 800060e:	3302      	adds	r3, #2
 8000610:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7a9b      	ldrb	r3, [r3, #10]
 8000618:	4619      	mov	r1, r3
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	fa01 f303 	lsl.w	r3, r1, r3
 8000622:	4618      	mov	r0, r3
 8000624:	4913      	ldr	r1, [pc, #76]	@ (8000674 <GPIO_INIT+0x3d0>)
 8000626:	7bfb      	ldrb	r3, [r7, #15]
 8000628:	4302      	orrs	r2, r0
 800062a:	3302      	adds	r3, #2
 800062c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	7912      	ldrb	r2, [r2, #4]
 8000638:	4611      	mov	r1, r2
 800063a:	2201      	movs	r2, #1
 800063c:	408a      	lsls	r2, r1
 800063e:	43d2      	mvns	r2, r2
 8000640:	4611      	mov	r1, r2
 8000642:	4a0b      	ldr	r2, [pc, #44]	@ (8000670 <GPIO_INIT+0x3cc>)
 8000644:	400b      	ands	r3, r1
 8000646:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <GPIO_INIT+0x3cc>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	687a      	ldr	r2, [r7, #4]
 800064e:	7912      	ldrb	r2, [r2, #4]
 8000650:	4611      	mov	r1, r2
 8000652:	2201      	movs	r2, #1
 8000654:	408a      	lsls	r2, r1
 8000656:	4611      	mov	r1, r2
 8000658:	4a05      	ldr	r2, [pc, #20]	@ (8000670 <GPIO_INIT+0x3cc>)
 800065a:	430b      	orrs	r3, r1
 800065c:	6013      	str	r3, [r2, #0]
}
 800065e:	bf00      	nop
 8000660:	3714      	adds	r7, #20
 8000662:	46bd      	mov	sp, r7
 8000664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000668:	4770      	bx	lr
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40013c00 	.word	0x40013c00
 8000674:	40013800 	.word	0x40013800

08000678 <IRQ_Config>:
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 8000678:	b480      	push	{r7}
 800067a:	b087      	sub	sp, #28
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	460a      	mov	r2, r1
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	4613      	mov	r3, r2
 8000686:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 800068e:	7dfb      	ldrb	r3, [r7, #23]
 8000690:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 8000692:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000696:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800069a:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 800069c:	7dfb      	ldrb	r3, [r7, #23]
 800069e:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <IRQ_Config+0x74>)
 80006a2:	4413      	add	r3, r2
 80006a4:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 80006a6:	79bb      	ldrb	r3, [r7, #6]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d10b      	bne.n	80006c4 <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 80006ac:	693b      	ldr	r3, [r7, #16]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	79fa      	ldrb	r2, [r7, #7]
 80006b2:	f002 021f 	and.w	r2, r2, #31
 80006b6:	2101      	movs	r1, #1
 80006b8:	fa01 f202 	lsl.w	r2, r1, r2
 80006bc:	431a      	orrs	r2, r3
 80006be:	693b      	ldr	r3, [r7, #16]
 80006c0:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 80006c2:	e00d      	b.n	80006e0 <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d10a      	bne.n	80006e0 <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	79fa      	ldrb	r2, [r7, #7]
 80006d0:	f002 021f 	and.w	r2, r2, #31
 80006d4:	2101      	movs	r1, #1
 80006d6:	fa01 f202 	lsl.w	r2, r1, r2
 80006da:	431a      	orrs	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	601a      	str	r2, [r3, #0]
}
 80006e0:	bf00      	nop
 80006e2:	371c      	adds	r7, #28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr
 80006ec:	e000e180 	.word	0xe000e180

080006f0 <I2C_Close_Communicate>:
		.tx_len = 0, .rx_len = 0, .addr = 0 };

uint8_t rx_complete = 0;
uint8_t tx_complete = 0;

static void I2C_Close_Communicate(I2C_Handle_TypeDef *i2c_handle) {
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	// Generate Stop condition
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000706:	601a      	str	r2, [r3, #0]

	I2C_Handle_it.ptx = NULL;
 8000708:	4b16      	ldr	r3, [pc, #88]	@ (8000764 <I2C_Close_Communicate+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
	I2C_Handle_it.prx = NULL;
 800070e:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <I2C_Close_Communicate+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
	I2C_Handle_it.state = I2C_READY;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <I2C_Close_Communicate+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	721a      	strb	r2, [r3, #8]
	I2C_Handle_it.tx_len = 0;
 800071a:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <I2C_Close_Communicate+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
	I2C_Handle_it.rx_len = 0;
 8000720:	4b10      	ldr	r3, [pc, #64]	@ (8000764 <I2C_Close_Communicate+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
	I2C_Handle_it.addr = 0;
 8000726:	4b0f      	ldr	r3, [pc, #60]	@ (8000764 <I2C_Close_Communicate+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	751a      	strb	r2, [r3, #20]

	// Error interrupt disable
//	i2c_handle->I2Cx->CR2 &= ~(HIGH << Shift_8_pos);

// Event interrupt disable
	i2c_handle->I2Cx->CR2 &= ~(HIGH << Shift_9_pos);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	685a      	ldr	r2, [r3, #4]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800073a:	605a      	str	r2, [r3, #4]

	// Buffer interrupt disable
	i2c_handle->I2Cx->CR2 &= ~(HIGH << Shift_10_pos);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	685a      	ldr	r2, [r3, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800074a:	605a      	str	r2, [r3, #4]

	// RX Complete
	rx_complete = 1;
 800074c:	4b06      	ldr	r3, [pc, #24]	@ (8000768 <I2C_Close_Communicate+0x78>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
	tx_complete = 1;
 8000752:	4b06      	ldr	r3, [pc, #24]	@ (800076c <I2C_Close_Communicate+0x7c>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]

}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	2000021c 	.word	0x2000021c
 8000768:	20000234 	.word	0x20000234
 800076c:	20000235 	.word	0x20000235

08000770 <I2C_Send_DataIT>:

static void I2C_Send_DataIT(I2C_Handle_TypeDef *i2c_handle) {
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
	if (I2C_Handle_it.tx_len > 0) {
 8000778:	4b0c      	ldr	r3, [pc, #48]	@ (80007ac <I2C_Send_DataIT+0x3c>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d00f      	beq.n	80007a0 <I2C_Send_DataIT+0x30>
		i2c_handle->I2Cx->DR = *(I2C_Handle_it.ptx);
 8000780:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <I2C_Send_DataIT+0x3c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	781a      	ldrb	r2, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	611a      	str	r2, [r3, #16]
		I2C_Handle_it.ptx++;
 800078c:	4b07      	ldr	r3, [pc, #28]	@ (80007ac <I2C_Send_DataIT+0x3c>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	4a06      	ldr	r2, [pc, #24]	@ (80007ac <I2C_Send_DataIT+0x3c>)
 8000794:	6013      	str	r3, [r2, #0]
		I2C_Handle_it.tx_len--;
 8000796:	4b05      	ldr	r3, [pc, #20]	@ (80007ac <I2C_Send_DataIT+0x3c>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	3b01      	subs	r3, #1
 800079c:	4a03      	ldr	r2, [pc, #12]	@ (80007ac <I2C_Send_DataIT+0x3c>)
 800079e:	60d3      	str	r3, [r2, #12]
	}
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	2000021c 	.word	0x2000021c

080007b0 <I2C_Read_DataIT>:

static void I2C_Read_DataIT(I2C_Handle_TypeDef *i2c_handle) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	if (I2C_Handle_it.rx_len == 1) {
 80007b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <I2C_Read_DataIT+0x88>)
 80007ba:	691b      	ldr	r3, [r3, #16]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d113      	bne.n	80007e8 <I2C_Read_DataIT+0x38>
		// Set ACK LOW
		i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80007ce:	601a      	str	r2, [r3, #0]
		//Read data
		*(I2C_Handle_it.prx) = i2c_handle->I2Cx->DR;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	691a      	ldr	r2, [r3, #16]
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <I2C_Read_DataIT+0x88>)
 80007d8:	685b      	ldr	r3, [r3, #4]
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	701a      	strb	r2, [r3, #0]
		I2C_Handle_it.rx_len--;
 80007de:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <I2C_Read_DataIT+0x88>)
 80007e0:	691b      	ldr	r3, [r3, #16]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <I2C_Read_DataIT+0x88>)
 80007e6:	6113      	str	r3, [r2, #16]

	}
	if (I2C_Handle_it.rx_len > 1) {
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <I2C_Read_DataIT+0x88>)
 80007ea:	691b      	ldr	r3, [r3, #16]
 80007ec:	2b01      	cmp	r3, #1
 80007ee:	d910      	bls.n	8000812 <I2C_Read_DataIT+0x62>
		*(I2C_Handle_it.prx) = i2c_handle->I2Cx->DR;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	691a      	ldr	r2, [r3, #16]
 80007f6:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <I2C_Read_DataIT+0x88>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	b2d2      	uxtb	r2, r2
 80007fc:	701a      	strb	r2, [r3, #0]
		I2C_Handle_it.rx_len--;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000838 <I2C_Read_DataIT+0x88>)
 8000800:	691b      	ldr	r3, [r3, #16]
 8000802:	3b01      	subs	r3, #1
 8000804:	4a0c      	ldr	r2, [pc, #48]	@ (8000838 <I2C_Read_DataIT+0x88>)
 8000806:	6113      	str	r3, [r2, #16]
		I2C_Handle_it.prx++;
 8000808:	4b0b      	ldr	r3, [pc, #44]	@ (8000838 <I2C_Read_DataIT+0x88>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	3301      	adds	r3, #1
 800080e:	4a0a      	ldr	r2, [pc, #40]	@ (8000838 <I2C_Read_DataIT+0x88>)
 8000810:	6053      	str	r3, [r2, #4]

	}

	if (I2C_Handle_it.rx_len == 0) {
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <I2C_Read_DataIT+0x88>)
 8000814:	691b      	ldr	r3, [r3, #16]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d10a      	bne.n	8000830 <I2C_Read_DataIT+0x80>
		// Stop request
		I2C_Close_Communicate(i2c_handle);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ff68 	bl	80006f0 <I2C_Close_Communicate>
		// SET ACK again
		i2c_handle->I2Cx->CR1 |= (HIGH << Shift_10_pos);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800082e:	601a      	str	r2, [r3, #0]
	}

}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000021c 	.word	0x2000021c

0800083c <I2C_INIT>:

void I2C_INIT(I2C_Handle_TypeDef *i2c_handle) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	if (i2c_handle->I2Cx == I2C1) {
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a86      	ldr	r2, [pc, #536]	@ (8000a64 <I2C_INIT+0x228>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d106      	bne.n	800085c <I2C_INIT+0x20>
		I2C1_EN();
 800084e:	4b86      	ldr	r3, [pc, #536]	@ (8000a68 <I2C_INIT+0x22c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	4a85      	ldr	r2, [pc, #532]	@ (8000a68 <I2C_INIT+0x22c>)
 8000854:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000858:	6413      	str	r3, [r2, #64]	@ 0x40
 800085a:	e016      	b.n	800088a <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C2) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a82      	ldr	r2, [pc, #520]	@ (8000a6c <I2C_INIT+0x230>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <I2C_INIT+0x38>
		I2C2_EN();
 8000866:	4b80      	ldr	r3, [pc, #512]	@ (8000a68 <I2C_INIT+0x22c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a7f      	ldr	r2, [pc, #508]	@ (8000a68 <I2C_INIT+0x22c>)
 800086c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
 8000872:	e00a      	b.n	800088a <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C3) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a7d      	ldr	r2, [pc, #500]	@ (8000a70 <I2C_INIT+0x234>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d105      	bne.n	800088a <I2C_INIT+0x4e>
		I2C3_EN();
 800087e:	4b7a      	ldr	r3, [pc, #488]	@ (8000a68 <I2C_INIT+0x22c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000882:	4a79      	ldr	r2, [pc, #484]	@ (8000a68 <I2C_INIT+0x22c>)
 8000884:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000888:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	Get_APB1_Clock_Speed();
 800088a:	f7ff fca5 	bl	80001d8 <Get_APB1_Clock_Speed>

	// Peripheral Clock Frequency (16Mhz)
	i2c_handle->I2Cx->CR2 &= ~(Five_BIT_1 << 0);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	685a      	ldr	r2, [r3, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f022 021f 	bic.w	r2, r2, #31
 800089c:	605a      	str	r2, [r3, #4]
	i2c_handle->I2Cx->CR2 |= (Shift_16_pos << 0);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f042 0210 	orr.w	r2, r2, #16
 80008ac:	605a      	str	r2, [r3, #4]

	// I2C Standard/Fast Mode
	i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_15_pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	69da      	ldr	r2, [r3, #28]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80008bc:	61da      	str	r2, [r3, #28]
	i2c_handle->I2Cx->CCR |= (i2c_handle->mode << Shift_15_pos);
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	69d9      	ldr	r1, [r3, #28]
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	791b      	ldrb	r3, [r3, #4]
 80008c8:	03da      	lsls	r2, r3, #15
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	61da      	str	r2, [r3, #28]

	// Tscl = Thigh + Tlow
	if (i2c_handle->mode == I2C_Standard_Mode) {
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	791b      	ldrb	r3, [r3, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d120      	bne.n	800091c <I2C_INIT+0xe0>
		i2c_handle->I2Cx->CCR |= ((SystemClockSrc / (2 * i2c_handle->scl_speed))
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	69d9      	ldr	r1, [r3, #28]
				<< 0);
 80008e0:	4b64      	ldr	r3, [pc, #400]	@ (8000a74 <I2C_INIT+0x238>)
 80008e2:	681a      	ldr	r2, [r3, #0]
		i2c_handle->I2Cx->CCR |= ((SystemClockSrc / (2 * i2c_handle->scl_speed))
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	005b      	lsls	r3, r3, #1
				<< 0);
 80008ea:	fbb2 f2f3 	udiv	r2, r2, r3
		i2c_handle->I2Cx->CCR |= ((SystemClockSrc / (2 * i2c_handle->scl_speed))
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	61da      	str	r2, [r3, #28]
		// Trise
		i2c_handle->I2Cx->TRISE = 0;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2200      	movs	r2, #0
 80008fc:	621a      	str	r2, [r3, #32]
		i2c_handle->I2Cx->TRISE |= ((SystemClockSrc / 1000000)) + 1;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	6a19      	ldr	r1, [r3, #32]
 8000904:	4b5b      	ldr	r3, [pc, #364]	@ (8000a74 <I2C_INIT+0x238>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a5b      	ldr	r2, [pc, #364]	@ (8000a78 <I2C_INIT+0x23c>)
 800090a:	fba2 2303 	umull	r2, r3, r2, r3
 800090e:	0c9b      	lsrs	r3, r3, #18
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	430a      	orrs	r2, r1
 8000918:	621a      	str	r2, [r3, #32]
 800091a:	e053      	b.n	80009c4 <I2C_INIT+0x188>
	} else if (i2c_handle->mode == I2C_Fast_Mode) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	2b01      	cmp	r3, #1
 8000922:	d14f      	bne.n	80009c4 <I2C_INIT+0x188>
		i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_14_pos);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	69da      	ldr	r2, [r3, #28]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000932:	61da      	str	r2, [r3, #28]
		i2c_handle->I2Cx->CCR |= (i2c_handle->duty_cycle << Shift_14_pos);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	69d9      	ldr	r1, [r3, #28]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	7b1b      	ldrb	r3, [r3, #12]
 800093e:	039a      	lsls	r2, r3, #14
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	430a      	orrs	r2, r1
 8000946:	61da      	str	r2, [r3, #28]
		if (i2c_handle->duty_cycle == I2C_Duty_Cycle_2) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	7b1b      	ldrb	r3, [r3, #12]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d110      	bne.n	8000972 <I2C_INIT+0x136>
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	69d9      	ldr	r1, [r3, #28]
					/ (3 * i2c_handle->scl_speed)) << 0);
 8000956:	4b47      	ldr	r3, [pc, #284]	@ (8000a74 <I2C_INIT+0x238>)
 8000958:	6818      	ldr	r0, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	689a      	ldr	r2, [r3, #8]
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	fbb0 f2f3 	udiv	r2, r0, r3
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	430a      	orrs	r2, r1
 800096e:	61da      	str	r2, [r3, #28]
 8000970:	e015      	b.n	800099e <I2C_INIT+0x162>
		} else if (i2c_handle->duty_cycle == I2C_Duty_Cycle_16_9) {
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	7b1b      	ldrb	r3, [r3, #12]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d111      	bne.n	800099e <I2C_INIT+0x162>
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	69d9      	ldr	r1, [r3, #28]
					/ (25 * i2c_handle->scl_speed)) << 0);
 8000980:	4b3c      	ldr	r3, [pc, #240]	@ (8000a74 <I2C_INIT+0x238>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689a      	ldr	r2, [r3, #8]
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	4413      	add	r3, r2
 800098e:	009a      	lsls	r2, r3, #2
 8000990:	4413      	add	r3, r2
 8000992:	fbb0 f2f3 	udiv	r2, r0, r3
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	430a      	orrs	r2, r1
 800099c:	61da      	str	r2, [r3, #28]
		}
		// Trise
		i2c_handle->I2Cx->TRISE |= ((SystemClockSrc * I2C_TRISE_MAX_FAST_MODE
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6a19      	ldr	r1, [r3, #32]
 80009a4:	4b33      	ldr	r3, [pc, #204]	@ (8000a74 <I2C_INIT+0x238>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80009ac:	fb02 f303 	mul.w	r3, r2, r3
				/ 1000000000)) + 1;
 80009b0:	0a5b      	lsrs	r3, r3, #9
 80009b2:	4a32      	ldr	r2, [pc, #200]	@ (8000a7c <I2C_INIT+0x240>)
 80009b4:	fba2 2303 	umull	r2, r3, r2, r3
 80009b8:	09db      	lsrs	r3, r3, #7
 80009ba:	1c5a      	adds	r2, r3, #1
		i2c_handle->I2Cx->TRISE |= ((SystemClockSrc * I2C_TRISE_MAX_FAST_MODE
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	430a      	orrs	r2, r1
 80009c2:	621a      	str	r2, [r3, #32]
	}

// Adress mode - 7 bit
	if (i2c_handle->address_select_bit == I2C_7_Bit_Adress) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	799b      	ldrb	r3, [r3, #6]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d109      	bne.n	80009e0 <I2C_INIT+0x1a4>
		i2c_handle->I2Cx->OAR1 |= (i2c_handle->address << HIGH);
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	6899      	ldr	r1, [r3, #8]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	79db      	ldrb	r3, [r3, #7]
 80009d6:	005a      	lsls	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	430a      	orrs	r2, r1
 80009de:	609a      	str	r2, [r3, #8]
	}
	i2c_handle->I2Cx->OAR1 |= (HIGH << Shift_14_pos);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	689a      	ldr	r2, [r3, #8]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80009ee:	609a      	str	r2, [r3, #8]

// Enable Peripheral
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_0_pos);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f042 0201 	orr.w	r2, r2, #1
 80009fe:	601a      	str	r2, [r3, #0]

// ACK bit En
	i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000a0e:	601a      	str	r2, [r3, #0]
	i2c_handle->I2Cx->CR1 |= (i2c_handle->ack_en << Shift_10_pos);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6819      	ldr	r1, [r3, #0]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	7b5b      	ldrb	r3, [r3, #13]
 8000a1a:	029a      	lsls	r2, r3, #10
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	430a      	orrs	r2, r1
 8000a22:	601a      	str	r2, [r3, #0]
// Slave mode
	if (i2c_handle->MasterOrSlave == I2C_Slave_Mode) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	795b      	ldrb	r3, [r3, #5]
 8000a28:	2b01      	cmp	r3, #1
 8000a2a:	d117      	bne.n	8000a5c <I2C_INIT+0x220>
		// Error interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_8_pos);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a3a:	605a      	str	r2, [r3, #4]

		// Event interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_9_pos);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	685a      	ldr	r2, [r3, #4]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a4a:	605a      	str	r2, [r3, #4]

		// Buffer interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_10_pos);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	685a      	ldr	r2, [r3, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a5a:	605a      	str	r2, [r3, #4]
	}
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40005400 	.word	0x40005400
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40005800 	.word	0x40005800
 8000a70:	40005c00 	.word	0x40005c00
 8000a74:	20000218 	.word	0x20000218
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	00044b83 	.word	0x00044b83

08000a80 <I2C_EV_IRQ_Handling>:

	}
	return busy_state;
}

void I2C_EV_IRQ_Handling(I2C_Handle_TypeDef *i2c_handle) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	volatile uint8_t bit_it = ((i2c_handle->I2Cx->SR1 >> 0) & 0x1);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f003 0301 	and.w	r3, r3, #1
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	72fb      	strb	r3, [r7, #11]
	if (bit_it == HIGH) {
 8000a98:	7afb      	ldrb	r3, [r7, #11]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d11a      	bne.n	8000ad6 <I2C_EV_IRQ_Handling+0x56>
		// Clear Start bit by reading SR1 register
		uint32_t read;
		read = i2c_handle->I2Cx->SR1;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	61fb      	str	r3, [r7, #28]
		(void) read;
		if (I2C_Handle_it.state == I2C_BUSY_TX) {
 8000aa8:	4b79      	ldr	r3, [pc, #484]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000aaa:	7a1b      	ldrb	r3, [r3, #8]
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d107      	bne.n	8000ac0 <I2C_EV_IRQ_Handling+0x40>
			I2C_Address(i2c_handle, I2C_Handle_it.addr, I2C_WRITE_BIT);
 8000ab0:	4b77      	ldr	r3, [pc, #476]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000ab2:	7d1b      	ldrb	r3, [r3, #20]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f92a 	bl	8000d12 <I2C_Address>
 8000abe:	e00a      	b.n	8000ad6 <I2C_EV_IRQ_Handling+0x56>
		} else if (I2C_Handle_it.state == I2C_BUSY_RX) {
 8000ac0:	4b73      	ldr	r3, [pc, #460]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000ac2:	7a1b      	ldrb	r3, [r3, #8]
 8000ac4:	2b02      	cmp	r3, #2
 8000ac6:	d106      	bne.n	8000ad6 <I2C_EV_IRQ_Handling+0x56>
			I2C_Address(i2c_handle, I2C_Handle_it.addr, I2C_READ_BIT);
 8000ac8:	4b71      	ldr	r3, [pc, #452]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000aca:	7d1b      	ldrb	r3, [r3, #20]
 8000acc:	2201      	movs	r2, #1
 8000ace:	4619      	mov	r1, r3
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f000 f91e 	bl	8000d12 <I2C_Address>
		}
	}
	bit_it = ((i2c_handle->I2Cx->SR1 >> 1) & 0x1);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	085b      	lsrs	r3, r3, #1
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	72fb      	strb	r3, [r7, #11]
	if (bit_it == HIGH) {
 8000ae8:	7afb      	ldrb	r3, [r7, #11]
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d13d      	bne.n	8000b6c <I2C_EV_IRQ_Handling+0xec>
		if (i2c_handle->MasterOrSlave == I2C_Slave_Mode) {
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	795b      	ldrb	r3, [r3, #5]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d107      	bne.n	8000b08 <I2C_EV_IRQ_Handling+0x88>
			//Clear ADDR Flag
			uint32_t read = i2c_handle->I2Cx->SR1;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	61bb      	str	r3, [r7, #24]
			read = i2c_handle->I2Cx->SR2;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	61bb      	str	r3, [r7, #24]
			(void) read;
		}
		if (I2C_Handle_it.state == I2C_BUSY_TX) {
 8000b08:	4b61      	ldr	r3, [pc, #388]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000b0a:	7a1b      	ldrb	r3, [r3, #8]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d108      	bne.n	8000b22 <I2C_EV_IRQ_Handling+0xa2>
			//Clear ADDR Flag
			uint32_t read = i2c_handle->I2Cx->SR1;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	613b      	str	r3, [r7, #16]
			read = i2c_handle->I2Cx->SR2;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	e024      	b.n	8000b6c <I2C_EV_IRQ_Handling+0xec>
			(void) read;
		} else if (I2C_Handle_it.state == I2C_BUSY_RX) {
 8000b22:	4b5b      	ldr	r3, [pc, #364]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000b24:	7a1b      	ldrb	r3, [r3, #8]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d120      	bne.n	8000b6c <I2C_EV_IRQ_Handling+0xec>
			if (I2C_Handle_it.rx_len == 1) {
 8000b2a:	4b59      	ldr	r3, [pc, #356]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d110      	bne.n	8000b54 <I2C_EV_IRQ_Handling+0xd4>
				// Set ACK LOW
				i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b40:	601a      	str	r2, [r3, #0]

				//Clear ADDR Flag
				uint8_t read = i2c_handle->I2Cx->SR1;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	695b      	ldr	r3, [r3, #20]
 8000b48:	75bb      	strb	r3, [r7, #22]
				read = i2c_handle->I2Cx->SR2;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	75bb      	strb	r3, [r7, #22]
 8000b52:	e00b      	b.n	8000b6c <I2C_EV_IRQ_Handling+0xec>
				(void) read;

			} else if (I2C_Handle_it.rx_len > 1) {
 8000b54:	4b4e      	ldr	r3, [pc, #312]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d907      	bls.n	8000b6c <I2C_EV_IRQ_Handling+0xec>
				//Clear ADDR Flag
				uint8_t read = i2c_handle->I2Cx->SR1;
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	75fb      	strb	r3, [r7, #23]
				read = i2c_handle->I2Cx->SR2;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	75fb      	strb	r3, [r7, #23]
				(void) read;
			}
		}
	}

	bit_it = ((i2c_handle->I2Cx->SR1 >> 2) & 0x1);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	089b      	lsrs	r3, r3, #2
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	72fb      	strb	r3, [r7, #11]
// Check if BTF is HIGH or not
// If we handled TXE first:
//		+ We might write new data while BTF was signaling the transfer actually ended.
//		+ We could miss the STOP condition timing → corrupt I2C protocol sequence.
//		-> So we should handle the BTF first
	if (bit_it == HIGH) {
 8000b7e:	7afb      	ldrb	r3, [r7, #11]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b01      	cmp	r3, #1
 8000b84:	d10e      	bne.n	8000ba4 <I2C_EV_IRQ_Handling+0x124>
		if (I2C_Handle_it.state == I2C_BUSY_TX) {
 8000b86:	4b42      	ldr	r3, [pc, #264]	@ (8000c90 <I2C_EV_IRQ_Handling+0x210>)
 8000b88:	7a1b      	ldrb	r3, [r3, #8]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d10a      	bne.n	8000ba4 <I2C_EV_IRQ_Handling+0x124>
			if ((i2c_handle->I2Cx->SR1 >> 7) & 0x1) {
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	695b      	ldr	r3, [r3, #20]
 8000b94:	09db      	lsrs	r3, r3, #7
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <I2C_EV_IRQ_Handling+0x124>
				// Generate Stop condition
				I2C_Close_Communicate(i2c_handle);
 8000b9e:	6878      	ldr	r0, [r7, #4]
 8000ba0:	f7ff fda6 	bl	80006f0 <I2C_Close_Communicate>
			}
		}
	}

// Check TXE Flag
	bit_it = ((i2c_handle->I2Cx->SR1 >> 7) & 0x1);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	695b      	ldr	r3, [r3, #20]
 8000baa:	09db      	lsrs	r3, r3, #7
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	72fb      	strb	r3, [r7, #11]
	if (bit_it == HIGH) {
 8000bb6:	7afb      	ldrb	r3, [r7, #11]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	2b01      	cmp	r3, #1
 8000bbc:	d10f      	bne.n	8000bde <I2C_EV_IRQ_Handling+0x15e>
		if (i2c_handle->MasterOrSlave == I2C_Master_Mode) {
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	795b      	ldrb	r3, [r3, #5]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <I2C_EV_IRQ_Handling+0x14e>
			// Send data
			I2C_Send_DataIT(i2c_handle);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f7ff fdd2 	bl	8000770 <I2C_Send_DataIT>
 8000bcc:	e007      	b.n	8000bde <I2C_EV_IRQ_Handling+0x15e>
		} else if (i2c_handle->MasterOrSlave == I2C_Slave_Mode) {
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	795b      	ldrb	r3, [r3, #5]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d103      	bne.n	8000bde <I2C_EV_IRQ_Handling+0x15e>
			I2C_OnEvent(i2c_handle, I2C_Slave_Ev_Transmit);
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 f94f 	bl	8000e7c <I2C_OnEvent>
		}
	}

// Check RXE
	bit_it = ((i2c_handle->I2Cx->SR1 >> 6) & 0x1);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	695b      	ldr	r3, [r3, #20]
 8000be4:	099b      	lsrs	r3, r3, #6
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	72fb      	strb	r3, [r7, #11]
	if (((i2c_handle->I2Cx->SR1 >> 6) & 0x1) == HIGH) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	099b      	lsrs	r3, r3, #6
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d10f      	bne.n	8000c20 <I2C_EV_IRQ_Handling+0x1a0>
		if (i2c_handle->MasterOrSlave == I2C_Master_Mode) {
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	795b      	ldrb	r3, [r3, #5]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d103      	bne.n	8000c10 <I2C_EV_IRQ_Handling+0x190>
			// Receive data
			I2C_Read_DataIT(i2c_handle);
 8000c08:	6878      	ldr	r0, [r7, #4]
 8000c0a:	f7ff fdd1 	bl	80007b0 <I2C_Read_DataIT>
 8000c0e:	e007      	b.n	8000c20 <I2C_EV_IRQ_Handling+0x1a0>
		} else if (i2c_handle->MasterOrSlave == I2C_Slave_Mode) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	795b      	ldrb	r3, [r3, #5]
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d103      	bne.n	8000c20 <I2C_EV_IRQ_Handling+0x1a0>
			I2C_OnEvent(i2c_handle, I2C_Slave_Ev_Receive);
 8000c18:	2101      	movs	r1, #1
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f000 f92e 	bl	8000e7c <I2C_OnEvent>
		}
	}

	// Check AF
	bit_it = ((i2c_handle->I2Cx->SR1 >> 10) & 0x1);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	695b      	ldr	r3, [r3, #20]
 8000c26:	0a9b      	lsrs	r3, r3, #10
 8000c28:	b2db      	uxtb	r3, r3
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	72fb      	strb	r3, [r7, #11]
	if (bit_it == HIGH) {
 8000c32:	7afb      	ldrb	r3, [r7, #11]
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d10b      	bne.n	8000c52 <I2C_EV_IRQ_Handling+0x1d2>
		// Clear AF
		i2c_handle->I2Cx->SR1 &= ~(HIGH << Shift_10_pos);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000c48:	615a      	str	r2, [r3, #20]
		I2C_OnEvent(i2c_handle, I2C_Slave_AF);
 8000c4a:	2102      	movs	r1, #2
 8000c4c:	6878      	ldr	r0, [r7, #4]
 8000c4e:	f000 f915 	bl	8000e7c <I2C_OnEvent>
	}

	// Check STOPF
	bit_it = ((i2c_handle->I2Cx->SR1 >> 4) & 0x1);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	695b      	ldr	r3, [r3, #20]
 8000c58:	091b      	lsrs	r3, r3, #4
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	72fb      	strb	r3, [r7, #11]
	if (bit_it == HIGH) {
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d10d      	bne.n	8000c88 <I2C_EV_IRQ_Handling+0x208>
		// Clear STOPF bit by reading SR1 register followed by a write in the CR1 register
		uint32_t read;
		read = i2c_handle->I2Cx->SR1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	60fb      	str	r3, [r7, #12]
		(void) read;
		i2c_handle->I2Cx->CR1 |= (0x0);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	601a      	str	r2, [r3, #0]
		I2C_OnEvent(i2c_handle, I2C_Slave_STOPF);
 8000c80:	2103      	movs	r1, #3
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f000 f8fa 	bl	8000e7c <I2C_OnEvent>
	}
}
 8000c88:	bf00      	nop
 8000c8a:	3720      	adds	r7, #32
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	2000021c 	.word	0x2000021c

08000c94 <I2C_ER_IRQ_Handling>:

void I2C_ER_IRQ_Handling(I2C_Handle_TypeDef *i2c_handle) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	uint8_t bit_it = ((i2c_handle->I2Cx->SR1 >> 10) & 0x1);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	695b      	ldr	r3, [r3, #20]
 8000ca2:	0a9b      	lsrs	r3, r3, #10
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
	if (bit_it == HIGH) {
 8000cac:	7bfb      	ldrb	r3, [r7, #15]
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d10b      	bne.n	8000cca <I2C_ER_IRQ_Handling+0x36>
		// Clear AF
		i2c_handle->I2Cx->SR1 &= ~(HIGH << Shift_10_pos);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	695a      	ldr	r2, [r3, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000cc0:	615a      	str	r2, [r3, #20]
		I2C_OnEvent(i2c_handle, I2C_Slave_AF);
 8000cc2:	2102      	movs	r1, #2
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f000 f8d9 	bl	8000e7c <I2C_OnEvent>
	}
}
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}

08000cd2 <I2C_Slave_Write>:

void I2C_Slave_Write(I2C_TypeDef *I2Cx, uint8_t *data) {
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	6039      	str	r1, [r7, #0]
	I2Cx->DR = *data;
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	611a      	str	r2, [r3, #16]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr

08000cf2 <I2C_Slave_Read>:
void I2C_Slave_Read(I2C_TypeDef *I2Cx, uint8_t *data) {
 8000cf2:	b480      	push	{r7}
 8000cf4:	b083      	sub	sp, #12
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
	*data = I2Cx->DR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	691b      	ldr	r3, [r3, #16]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	701a      	strb	r2, [r3, #0]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <I2C_Address>:

void I2C_Address(I2C_Handle_TypeDef *i2c_handle, uint8_t addr, uint8_t rnw) {
 8000d12:	b480      	push	{r7}
 8000d14:	b085      	sub	sp, #20
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	70fb      	strb	r3, [r7, #3]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	70bb      	strb	r3, [r7, #2]
	uint8_t slave_addr = addr << 1;
 8000d22:	78fb      	ldrb	r3, [r7, #3]
 8000d24:	005b      	lsls	r3, r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
	if (rnw == I2C_WRITE_BIT) {
 8000d28:	78bb      	ldrb	r3, [r7, #2]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d104      	bne.n	8000d38 <I2C_Address+0x26>
		slave_addr &= ~(HIGH);
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
 8000d30:	f023 0301 	bic.w	r3, r3, #1
 8000d34:	73fb      	strb	r3, [r7, #15]
 8000d36:	e006      	b.n	8000d46 <I2C_Address+0x34>
	} else if (rnw == I2C_READ_BIT) {
 8000d38:	78bb      	ldrb	r3, [r7, #2]
 8000d3a:	2b01      	cmp	r3, #1
 8000d3c:	d103      	bne.n	8000d46 <I2C_Address+0x34>
		slave_addr |= (HIGH);
 8000d3e:	7bfb      	ldrb	r3, [r7, #15]
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
	}

	i2c_handle->I2Cx->DR = slave_addr;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	7bfa      	ldrb	r2, [r7, #15]
 8000d4c:	611a      	str	r2, [r3, #16]

}
 8000d4e:	bf00      	nop
 8000d50:	3714      	adds	r7, #20
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <main>:
//very large message
uint8_t Tx_buf[] =
		"HiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHiHi...123";
uint32_t data_len = 0;

int main(void) {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	data_len = strlen((char*) Tx_buf);
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <main+0x38>)
 8000d62:	f7ff fa31 	bl	80001c8 <strlen>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4a0b      	ldr	r2, [pc, #44]	@ (8000d98 <main+0x3c>)
 8000d6a:	6013      	str	r3, [r2, #0]
	GPIO_USER_INIT();
 8000d6c:	f000 f83a 	bl	8000de4 <GPIO_USER_INIT>
	IRQ_Config(I2C1_IRQ31_EV, ENABLE);
 8000d70:	2101      	movs	r1, #1
 8000d72:	201f      	movs	r0, #31
 8000d74:	f7ff fc80 	bl	8000678 <IRQ_Config>
	IRQ_Config(I2C1_IRQ32_ER, ENABLE);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	2020      	movs	r0, #32
 8000d7c:	f7ff fc7c 	bl	8000678 <IRQ_Config>
	I2C_USER_INIT();
 8000d80:	f000 f80e 	bl	8000da0 <I2C_USER_INIT>

	initialise_monitor_handles();
 8000d84:	f000 fb68 	bl	8001458 <initialise_monitor_handles>

	printf("Application is running\n");
 8000d88:	4804      	ldr	r0, [pc, #16]	@ (8000d9c <main+0x40>)
 8000d8a:	f000 fcfb 	bl	8001784 <puts>
	while (1) {
 8000d8e:	bf00      	nop
 8000d90:	e7fd      	b.n	8000d8e <main+0x32>
 8000d92:	bf00      	nop
 8000d94:	20000000 	.word	0x20000000
 8000d98:	20000258 	.word	0x20000258
 8000d9c:	08001ef4 	.word	0x08001ef4

08000da0 <I2C_USER_INIT>:

	}
}

void I2C_USER_INIT(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
	I2C_Handle.I2Cx = I2C1;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd8 <I2C_USER_INIT+0x38>)
 8000da6:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <I2C_USER_INIT+0x3c>)
 8000da8:	601a      	str	r2, [r3, #0]
	I2C_Handle.MasterOrSlave = I2C_Slave_Mode;
 8000daa:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <I2C_USER_INIT+0x38>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	715a      	strb	r2, [r3, #5]
	I2C_Handle.ack_en = I2C_ACK_EN;
 8000db0:	4b09      	ldr	r3, [pc, #36]	@ (8000dd8 <I2C_USER_INIT+0x38>)
 8000db2:	2201      	movs	r2, #1
 8000db4:	735a      	strb	r2, [r3, #13]
	I2C_Handle.address = 0x68;
 8000db6:	4b08      	ldr	r3, [pc, #32]	@ (8000dd8 <I2C_USER_INIT+0x38>)
 8000db8:	2268      	movs	r2, #104	@ 0x68
 8000dba:	71da      	strb	r2, [r3, #7]
	I2C_Handle.address_select_bit = I2C_7_Bit_Adress;
 8000dbc:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <I2C_USER_INIT+0x38>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	719a      	strb	r2, [r3, #6]
	I2C_Handle.mode = I2C_Standard_Mode;
 8000dc2:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <I2C_USER_INIT+0x38>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	711a      	strb	r2, [r3, #4]
	I2C_Handle.scl_speed = I2C_SCL_SPEED_100;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	@ (8000dd8 <I2C_USER_INIT+0x38>)
 8000dca:	4a05      	ldr	r2, [pc, #20]	@ (8000de0 <I2C_USER_INIT+0x40>)
 8000dcc:	609a      	str	r2, [r3, #8]
	I2C_INIT(&I2C_Handle);
 8000dce:	4802      	ldr	r0, [pc, #8]	@ (8000dd8 <I2C_USER_INIT+0x38>)
 8000dd0:	f7ff fd34 	bl	800083c <I2C_INIT>
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	20000238 	.word	0x20000238
 8000ddc:	40005400 	.word	0x40005400
 8000de0:	000186a0 	.word	0x000186a0

08000de4 <GPIO_USER_INIT>:

void GPIO_USER_INIT(void) {
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
 8000de8:	4b17      	ldr	r3, [pc, #92]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000dea:	4a18      	ldr	r2, [pc, #96]	@ (8000e4c <GPIO_USER_INIT+0x68>)
 8000dec:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 8000dee:	4b16      	ldr	r3, [pc, #88]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8000df4:	4b14      	ldr	r3, [pc, #80]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8000e00:	4811      	ldr	r0, [pc, #68]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e02:	f7ff fa4f 	bl	80002a4 <GPIO_INIT>

	// PB6 - I2C1_SCL
	GPIO_Handle.GPIOX = GPIOB;
 8000e06:	4b10      	ldr	r3, [pc, #64]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e08:	4a11      	ldr	r2, [pc, #68]	@ (8000e50 <GPIO_USER_INIT+0x6c>)
 8000e0a:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e14:	2203      	movs	r2, #3
 8000e16:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_OD;
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pin_number = GPIO_PIN_6;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e20:	2206      	movs	r2, #6
 8000e22:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	719a      	strb	r2, [r3, #6]
	GPIO_Handle.alternate_function_select = GPIO_AF4;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	725a      	strb	r2, [r3, #9]
	GPIO_INIT(&GPIO_Handle);
 8000e30:	4805      	ldr	r0, [pc, #20]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e32:	f7ff fa37 	bl	80002a4 <GPIO_INIT>

	// PB9 - I2C1_SDA
	GPIO_Handle.pin_number = GPIO_PIN_9;
 8000e36:	4b04      	ldr	r3, [pc, #16]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e38:	2209      	movs	r2, #9
 8000e3a:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e3c:	4802      	ldr	r0, [pc, #8]	@ (8000e48 <GPIO_USER_INIT+0x64>)
 8000e3e:	f7ff fa31 	bl	80002a4 <GPIO_INIT>
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000248 	.word	0x20000248
 8000e4c:	40020000 	.word	0x40020000
 8000e50:	40020400 	.word	0x40020400

08000e54 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler() {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
	I2C_EV_IRQ_Handling(&I2C_Handle);
 8000e58:	4802      	ldr	r0, [pc, #8]	@ (8000e64 <I2C1_EV_IRQHandler+0x10>)
 8000e5a:	f7ff fe11 	bl	8000a80 <I2C_EV_IRQ_Handling>
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	20000238 	.word	0x20000238

08000e68 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler() {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
	I2C_ER_IRQ_Handling(&I2C_Handle);
 8000e6c:	4802      	ldr	r0, [pc, #8]	@ (8000e78 <I2C1_ER_IRQHandler+0x10>)
 8000e6e:	f7ff ff11 	bl	8000c94 <I2C_ER_IRQ_Handling>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000238 	.word	0x20000238

08000e7c <I2C_OnEvent>:

void I2C_OnEvent(I2C_Handle_TypeDef *i2c_handle, uint8_t on_event) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	460b      	mov	r3, r1
 8000e86:	70fb      	strb	r3, [r7, #3]
	static uint32_t cnt = 0;
	static uint32_t w_ptr = 0;
	if (on_event == I2C_Slave_Ev_Transmit) {
 8000e88:	78fb      	ldrb	r3, [r7, #3]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d12c      	bne.n	8000ee8 <I2C_OnEvent+0x6c>
		//Master wants some data. slave has to send it
		if (commandCode == 0x51) {
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <I2C_OnEvent+0xc8>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2b51      	cmp	r3, #81	@ 0x51
 8000e94:	d118      	bne.n	8000ec8 <I2C_OnEvent+0x4c>
			uint8_t data = ((data_len >> ((cnt % 4) * 8)) & 0xFF);
 8000e96:	4b2c      	ldr	r3, [pc, #176]	@ (8000f48 <I2C_OnEvent+0xcc>)
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <I2C_OnEvent+0xd0>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0303 	and.w	r3, r3, #3
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	73fb      	strb	r3, [r7, #15]
			I2C_Slave_Write(i2c_handle->I2Cx, &data);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f107 020f 	add.w	r2, r7, #15
 8000eb4:	4611      	mov	r1, r2
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff0b 	bl	8000cd2 <I2C_Slave_Write>
			cnt++;
 8000ebc:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <I2C_OnEvent+0xd0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	4a22      	ldr	r2, [pc, #136]	@ (8000f4c <I2C_OnEvent+0xd0>)
 8000ec4:	6013      	str	r3, [r2, #0]
		//This will happen during end slave reception
		//slave concludes end of Rx

		cnt = 0;
	}
}
 8000ec6:	e039      	b.n	8000f3c <I2C_OnEvent+0xc0>
		} else if (commandCode == 0x52) {
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <I2C_OnEvent+0xc8>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b52      	cmp	r3, #82	@ 0x52
 8000ece:	d135      	bne.n	8000f3c <I2C_OnEvent+0xc0>
			I2C_Slave_Write(I2C1, &Tx_buf[w_ptr++]);
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <I2C_OnEvent+0xd4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	1c5a      	adds	r2, r3, #1
 8000ed6:	491e      	ldr	r1, [pc, #120]	@ (8000f50 <I2C_OnEvent+0xd4>)
 8000ed8:	600a      	str	r2, [r1, #0]
 8000eda:	4a1e      	ldr	r2, [pc, #120]	@ (8000f54 <I2C_OnEvent+0xd8>)
 8000edc:	4413      	add	r3, r2
 8000ede:	4619      	mov	r1, r3
 8000ee0:	481d      	ldr	r0, [pc, #116]	@ (8000f58 <I2C_OnEvent+0xdc>)
 8000ee2:	f7ff fef6 	bl	8000cd2 <I2C_Slave_Write>
}
 8000ee6:	e029      	b.n	8000f3c <I2C_OnEvent+0xc0>
	} else if (on_event == I2C_Slave_Ev_Receive) {
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d106      	bne.n	8000efc <I2C_OnEvent+0x80>
		I2C_Slave_Read(i2c_handle->I2Cx, &commandCode);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4914      	ldr	r1, [pc, #80]	@ (8000f44 <I2C_OnEvent+0xc8>)
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fefc 	bl	8000cf2 <I2C_Slave_Read>
}
 8000efa:	e01f      	b.n	8000f3c <I2C_OnEvent+0xc0>
	} else if (on_event == I2C_Slave_AF) {
 8000efc:	78fb      	ldrb	r3, [r7, #3]
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d116      	bne.n	8000f30 <I2C_OnEvent+0xb4>
		if (!(commandCode == 0x52))
 8000f02:	4b10      	ldr	r3, [pc, #64]	@ (8000f44 <I2C_OnEvent+0xc8>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	2b52      	cmp	r3, #82	@ 0x52
 8000f08:	d002      	beq.n	8000f10 <I2C_OnEvent+0x94>
			commandCode = 0XFF;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <I2C_OnEvent+0xc8>)
 8000f0c:	22ff      	movs	r2, #255	@ 0xff
 8000f0e:	701a      	strb	r2, [r3, #0]
		cnt = 0;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	@ (8000f4c <I2C_OnEvent+0xd0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
		if (w_ptr >= (data_len)) {
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <I2C_OnEvent+0xd4>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <I2C_OnEvent+0xcc>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d30c      	bcc.n	8000f3c <I2C_OnEvent+0xc0>
			w_ptr = 0;
 8000f22:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <I2C_OnEvent+0xd4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
			commandCode = 0xff;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <I2C_OnEvent+0xc8>)
 8000f2a:	22ff      	movs	r2, #255	@ 0xff
 8000f2c:	701a      	strb	r2, [r3, #0]
}
 8000f2e:	e005      	b.n	8000f3c <I2C_OnEvent+0xc0>
	} else if (on_event == I2C_Slave_STOPF) {
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	2b03      	cmp	r3, #3
 8000f34:	d102      	bne.n	8000f3c <I2C_OnEvent+0xc0>
		cnt = 0;
 8000f36:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <I2C_OnEvent+0xd0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000254 	.word	0x20000254
 8000f48:	20000258 	.word	0x20000258
 8000f4c:	2000025c 	.word	0x2000025c
 8000f50:	20000260 	.word	0x20000260
 8000f54:	20000000 	.word	0x20000000
 8000f58:	40005400 	.word	0x40005400

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f000 fd28 	bl	80019e0 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20020000 	.word	0x20020000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	20000264 	.word	0x20000264
 8000fc4:	20000460 	.word	0x20000460

08000fc8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fc8:	480d      	ldr	r0, [pc, #52]	@ (8001000 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fca:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fcc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fd0:	480c      	ldr	r0, [pc, #48]	@ (8001004 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fd2:	490d      	ldr	r1, [pc, #52]	@ (8001008 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	@ (800100c <LoopForever+0xe>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd8:	e002      	b.n	8000fe0 <LoopCopyDataInit>

08000fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fde:	3304      	adds	r3, #4

08000fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe4:	d3f9      	bcc.n	8000fda <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8001010 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe8:	4c0a      	ldr	r4, [pc, #40]	@ (8001014 <LoopForever+0x16>)
  movs r3, #0
 8000fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fec:	e001      	b.n	8000ff2 <LoopFillZerobss>

08000fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff0:	3204      	adds	r2, #4

08000ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff4:	d3fb      	bcc.n	8000fee <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ff6:	f000 fcf9 	bl	80019ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ffa:	f7ff feaf 	bl	8000d5c <main>

08000ffe <LoopForever>:

LoopForever:
  b LoopForever
 8000ffe:	e7fe      	b.n	8000ffe <LoopForever>
  ldr   r0, =_estack
 8001000:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001008:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 800100c:	08001f38 	.word	0x08001f38
  ldr r2, =_sbss
 8001010:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001014:	20000460 	.word	0x20000460

08001018 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001018:	e7fe      	b.n	8001018 <ADC_IRQHandler>
	...

0800101c <findslot>:
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <findslot+0x2c>)
 800101e:	b510      	push	{r4, lr}
 8001020:	4604      	mov	r4, r0
 8001022:	6818      	ldr	r0, [r3, #0]
 8001024:	b118      	cbz	r0, 800102e <findslot+0x12>
 8001026:	6a03      	ldr	r3, [r0, #32]
 8001028:	b90b      	cbnz	r3, 800102e <findslot+0x12>
 800102a:	f000 fb1f 	bl	800166c <__sinit>
 800102e:	2c13      	cmp	r4, #19
 8001030:	d807      	bhi.n	8001042 <findslot+0x26>
 8001032:	4806      	ldr	r0, [pc, #24]	@ (800104c <findslot+0x30>)
 8001034:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8001038:	3201      	adds	r2, #1
 800103a:	d002      	beq.n	8001042 <findslot+0x26>
 800103c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001040:	bd10      	pop	{r4, pc}
 8001042:	2000      	movs	r0, #0
 8001044:	e7fc      	b.n	8001040 <findslot+0x24>
 8001046:	bf00      	nop
 8001048:	200001ac 	.word	0x200001ac
 800104c:	20000274 	.word	0x20000274

08001050 <error>:
 8001050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001052:	4604      	mov	r4, r0
 8001054:	f000 fcc4 	bl	80019e0 <__errno>
 8001058:	2613      	movs	r6, #19
 800105a:	4605      	mov	r5, r0
 800105c:	2700      	movs	r7, #0
 800105e:	4630      	mov	r0, r6
 8001060:	4639      	mov	r1, r7
 8001062:	beab      	bkpt	0x00ab
 8001064:	4606      	mov	r6, r0
 8001066:	602e      	str	r6, [r5, #0]
 8001068:	4620      	mov	r0, r4
 800106a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800106c <checkerror>:
 800106c:	1c43      	adds	r3, r0, #1
 800106e:	d101      	bne.n	8001074 <checkerror+0x8>
 8001070:	f7ff bfee 	b.w	8001050 <error>
 8001074:	4770      	bx	lr

08001076 <_swiread>:
 8001076:	b530      	push	{r4, r5, lr}
 8001078:	b085      	sub	sp, #20
 800107a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800107e:	9203      	str	r2, [sp, #12]
 8001080:	2406      	movs	r4, #6
 8001082:	ad01      	add	r5, sp, #4
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	beab      	bkpt	0x00ab
 800108a:	4604      	mov	r4, r0
 800108c:	4620      	mov	r0, r4
 800108e:	f7ff ffed 	bl	800106c <checkerror>
 8001092:	b005      	add	sp, #20
 8001094:	bd30      	pop	{r4, r5, pc}

08001096 <_read>:
 8001096:	b570      	push	{r4, r5, r6, lr}
 8001098:	460e      	mov	r6, r1
 800109a:	4614      	mov	r4, r2
 800109c:	f7ff ffbe 	bl	800101c <findslot>
 80010a0:	4605      	mov	r5, r0
 80010a2:	b930      	cbnz	r0, 80010b2 <_read+0x1c>
 80010a4:	f000 fc9c 	bl	80019e0 <__errno>
 80010a8:	2309      	movs	r3, #9
 80010aa:	6003      	str	r3, [r0, #0]
 80010ac:	f04f 30ff 	mov.w	r0, #4294967295
 80010b0:	bd70      	pop	{r4, r5, r6, pc}
 80010b2:	6800      	ldr	r0, [r0, #0]
 80010b4:	4622      	mov	r2, r4
 80010b6:	4631      	mov	r1, r6
 80010b8:	f7ff ffdd 	bl	8001076 <_swiread>
 80010bc:	1c43      	adds	r3, r0, #1
 80010be:	d0f5      	beq.n	80010ac <_read+0x16>
 80010c0:	686b      	ldr	r3, [r5, #4]
 80010c2:	1a20      	subs	r0, r4, r0
 80010c4:	4403      	add	r3, r0
 80010c6:	606b      	str	r3, [r5, #4]
 80010c8:	e7f2      	b.n	80010b0 <_read+0x1a>

080010ca <_swilseek>:
 80010ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80010cc:	460c      	mov	r4, r1
 80010ce:	4616      	mov	r6, r2
 80010d0:	f7ff ffa4 	bl	800101c <findslot>
 80010d4:	4605      	mov	r5, r0
 80010d6:	b940      	cbnz	r0, 80010ea <_swilseek+0x20>
 80010d8:	f000 fc82 	bl	80019e0 <__errno>
 80010dc:	2309      	movs	r3, #9
 80010de:	6003      	str	r3, [r0, #0]
 80010e0:	f04f 34ff 	mov.w	r4, #4294967295
 80010e4:	4620      	mov	r0, r4
 80010e6:	b003      	add	sp, #12
 80010e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010ea:	2e02      	cmp	r6, #2
 80010ec:	d903      	bls.n	80010f6 <_swilseek+0x2c>
 80010ee:	f000 fc77 	bl	80019e0 <__errno>
 80010f2:	2316      	movs	r3, #22
 80010f4:	e7f3      	b.n	80010de <_swilseek+0x14>
 80010f6:	2e01      	cmp	r6, #1
 80010f8:	d112      	bne.n	8001120 <_swilseek+0x56>
 80010fa:	6843      	ldr	r3, [r0, #4]
 80010fc:	18e4      	adds	r4, r4, r3
 80010fe:	d4f6      	bmi.n	80010ee <_swilseek+0x24>
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	260a      	movs	r6, #10
 8001104:	e9cd 3400 	strd	r3, r4, [sp]
 8001108:	466f      	mov	r7, sp
 800110a:	4630      	mov	r0, r6
 800110c:	4639      	mov	r1, r7
 800110e:	beab      	bkpt	0x00ab
 8001110:	4606      	mov	r6, r0
 8001112:	4630      	mov	r0, r6
 8001114:	f7ff ffaa 	bl	800106c <checkerror>
 8001118:	2800      	cmp	r0, #0
 800111a:	dbe1      	blt.n	80010e0 <_swilseek+0x16>
 800111c:	606c      	str	r4, [r5, #4]
 800111e:	e7e1      	b.n	80010e4 <_swilseek+0x1a>
 8001120:	2e02      	cmp	r6, #2
 8001122:	6803      	ldr	r3, [r0, #0]
 8001124:	d1ec      	bne.n	8001100 <_swilseek+0x36>
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	260c      	movs	r6, #12
 800112a:	466f      	mov	r7, sp
 800112c:	4630      	mov	r0, r6
 800112e:	4639      	mov	r1, r7
 8001130:	beab      	bkpt	0x00ab
 8001132:	4606      	mov	r6, r0
 8001134:	4630      	mov	r0, r6
 8001136:	f7ff ff99 	bl	800106c <checkerror>
 800113a:	1c43      	adds	r3, r0, #1
 800113c:	d0d0      	beq.n	80010e0 <_swilseek+0x16>
 800113e:	4404      	add	r4, r0
 8001140:	e7de      	b.n	8001100 <_swilseek+0x36>

08001142 <_lseek>:
 8001142:	f7ff bfc2 	b.w	80010ca <_swilseek>

08001146 <_swiwrite>:
 8001146:	b530      	push	{r4, r5, lr}
 8001148:	b085      	sub	sp, #20
 800114a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800114e:	9203      	str	r2, [sp, #12]
 8001150:	2405      	movs	r4, #5
 8001152:	ad01      	add	r5, sp, #4
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	beab      	bkpt	0x00ab
 800115a:	4604      	mov	r4, r0
 800115c:	4620      	mov	r0, r4
 800115e:	f7ff ff85 	bl	800106c <checkerror>
 8001162:	b005      	add	sp, #20
 8001164:	bd30      	pop	{r4, r5, pc}

08001166 <_write>:
 8001166:	b570      	push	{r4, r5, r6, lr}
 8001168:	460e      	mov	r6, r1
 800116a:	4615      	mov	r5, r2
 800116c:	f7ff ff56 	bl	800101c <findslot>
 8001170:	4604      	mov	r4, r0
 8001172:	b930      	cbnz	r0, 8001182 <_write+0x1c>
 8001174:	f000 fc34 	bl	80019e0 <__errno>
 8001178:	2309      	movs	r3, #9
 800117a:	6003      	str	r3, [r0, #0]
 800117c:	f04f 30ff 	mov.w	r0, #4294967295
 8001180:	bd70      	pop	{r4, r5, r6, pc}
 8001182:	6800      	ldr	r0, [r0, #0]
 8001184:	462a      	mov	r2, r5
 8001186:	4631      	mov	r1, r6
 8001188:	f7ff ffdd 	bl	8001146 <_swiwrite>
 800118c:	1e03      	subs	r3, r0, #0
 800118e:	dbf5      	blt.n	800117c <_write+0x16>
 8001190:	6862      	ldr	r2, [r4, #4]
 8001192:	1ae8      	subs	r0, r5, r3
 8001194:	4402      	add	r2, r0
 8001196:	42ab      	cmp	r3, r5
 8001198:	6062      	str	r2, [r4, #4]
 800119a:	d1f1      	bne.n	8001180 <_write+0x1a>
 800119c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff bf55 	b.w	8001050 <error>

080011a6 <_swiclose>:
 80011a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80011a8:	2402      	movs	r4, #2
 80011aa:	9001      	str	r0, [sp, #4]
 80011ac:	ad01      	add	r5, sp, #4
 80011ae:	4620      	mov	r0, r4
 80011b0:	4629      	mov	r1, r5
 80011b2:	beab      	bkpt	0x00ab
 80011b4:	4604      	mov	r4, r0
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff ff58 	bl	800106c <checkerror>
 80011bc:	b003      	add	sp, #12
 80011be:	bd30      	pop	{r4, r5, pc}

080011c0 <_close>:
 80011c0:	b538      	push	{r3, r4, r5, lr}
 80011c2:	4605      	mov	r5, r0
 80011c4:	f7ff ff2a 	bl	800101c <findslot>
 80011c8:	4604      	mov	r4, r0
 80011ca:	b930      	cbnz	r0, 80011da <_close+0x1a>
 80011cc:	f000 fc08 	bl	80019e0 <__errno>
 80011d0:	2309      	movs	r3, #9
 80011d2:	6003      	str	r3, [r0, #0]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	bd38      	pop	{r3, r4, r5, pc}
 80011da:	3d01      	subs	r5, #1
 80011dc:	2d01      	cmp	r5, #1
 80011de:	d809      	bhi.n	80011f4 <_close+0x34>
 80011e0:	4b09      	ldr	r3, [pc, #36]	@ (8001208 <_close+0x48>)
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	691b      	ldr	r3, [r3, #16]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d104      	bne.n	80011f4 <_close+0x34>
 80011ea:	f04f 33ff 	mov.w	r3, #4294967295
 80011ee:	6003      	str	r3, [r0, #0]
 80011f0:	2000      	movs	r0, #0
 80011f2:	e7f1      	b.n	80011d8 <_close+0x18>
 80011f4:	6820      	ldr	r0, [r4, #0]
 80011f6:	f7ff ffd6 	bl	80011a6 <_swiclose>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d1ec      	bne.n	80011d8 <_close+0x18>
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001202:	6023      	str	r3, [r4, #0]
 8001204:	e7e8      	b.n	80011d8 <_close+0x18>
 8001206:	bf00      	nop
 8001208:	20000274 	.word	0x20000274

0800120c <_swistat>:
 800120c:	b570      	push	{r4, r5, r6, lr}
 800120e:	460c      	mov	r4, r1
 8001210:	f7ff ff04 	bl	800101c <findslot>
 8001214:	4605      	mov	r5, r0
 8001216:	b930      	cbnz	r0, 8001226 <_swistat+0x1a>
 8001218:	f000 fbe2 	bl	80019e0 <__errno>
 800121c:	2309      	movs	r3, #9
 800121e:	6003      	str	r3, [r0, #0]
 8001220:	f04f 30ff 	mov.w	r0, #4294967295
 8001224:	bd70      	pop	{r4, r5, r6, pc}
 8001226:	6863      	ldr	r3, [r4, #4]
 8001228:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800122c:	6063      	str	r3, [r4, #4]
 800122e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001232:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001234:	260c      	movs	r6, #12
 8001236:	4630      	mov	r0, r6
 8001238:	4629      	mov	r1, r5
 800123a:	beab      	bkpt	0x00ab
 800123c:	4605      	mov	r5, r0
 800123e:	4628      	mov	r0, r5
 8001240:	f7ff ff14 	bl	800106c <checkerror>
 8001244:	1c43      	adds	r3, r0, #1
 8001246:	d0eb      	beq.n	8001220 <_swistat+0x14>
 8001248:	6120      	str	r0, [r4, #16]
 800124a:	2000      	movs	r0, #0
 800124c:	e7ea      	b.n	8001224 <_swistat+0x18>

0800124e <_fstat>:
 800124e:	460b      	mov	r3, r1
 8001250:	b510      	push	{r4, lr}
 8001252:	2100      	movs	r1, #0
 8001254:	4604      	mov	r4, r0
 8001256:	2258      	movs	r2, #88	@ 0x58
 8001258:	4618      	mov	r0, r3
 800125a:	f000 fb73 	bl	8001944 <memset>
 800125e:	4601      	mov	r1, r0
 8001260:	4620      	mov	r0, r4
 8001262:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001266:	f7ff bfd1 	b.w	800120c <_swistat>

0800126a <_stat>:
 800126a:	b538      	push	{r3, r4, r5, lr}
 800126c:	460d      	mov	r5, r1
 800126e:	4604      	mov	r4, r0
 8001270:	2258      	movs	r2, #88	@ 0x58
 8001272:	2100      	movs	r1, #0
 8001274:	4628      	mov	r0, r5
 8001276:	f000 fb65 	bl	8001944 <memset>
 800127a:	4620      	mov	r0, r4
 800127c:	2100      	movs	r1, #0
 800127e:	f000 f811 	bl	80012a4 <_swiopen>
 8001282:	1c43      	adds	r3, r0, #1
 8001284:	4604      	mov	r4, r0
 8001286:	d00b      	beq.n	80012a0 <_stat+0x36>
 8001288:	686b      	ldr	r3, [r5, #4]
 800128a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800128e:	606b      	str	r3, [r5, #4]
 8001290:	4629      	mov	r1, r5
 8001292:	f7ff ffbb 	bl	800120c <_swistat>
 8001296:	4605      	mov	r5, r0
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff ff91 	bl	80011c0 <_close>
 800129e:	462c      	mov	r4, r5
 80012a0:	4620      	mov	r0, r4
 80012a2:	bd38      	pop	{r3, r4, r5, pc}

080012a4 <_swiopen>:
 80012a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80012a8:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 8001354 <_swiopen+0xb0>
 80012ac:	b096      	sub	sp, #88	@ 0x58
 80012ae:	4607      	mov	r7, r0
 80012b0:	460e      	mov	r6, r1
 80012b2:	2400      	movs	r4, #0
 80012b4:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 80012b8:	3301      	adds	r3, #1
 80012ba:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80012be:	d032      	beq.n	8001326 <_swiopen+0x82>
 80012c0:	3401      	adds	r4, #1
 80012c2:	2c14      	cmp	r4, #20
 80012c4:	d1f6      	bne.n	80012b4 <_swiopen+0x10>
 80012c6:	f000 fb8b 	bl	80019e0 <__errno>
 80012ca:	2318      	movs	r3, #24
 80012cc:	e03a      	b.n	8001344 <_swiopen+0xa0>
 80012ce:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80012d2:	f240 6301 	movw	r3, #1537	@ 0x601
 80012d6:	07b2      	lsls	r2, r6, #30
 80012d8:	bf48      	it	mi
 80012da:	f045 0502 	orrmi.w	r5, r5, #2
 80012de:	421e      	tst	r6, r3
 80012e0:	bf18      	it	ne
 80012e2:	f045 0504 	orrne.w	r5, r5, #4
 80012e6:	0733      	lsls	r3, r6, #28
 80012e8:	bf48      	it	mi
 80012ea:	f025 0504 	bicmi.w	r5, r5, #4
 80012ee:	4638      	mov	r0, r7
 80012f0:	bf48      	it	mi
 80012f2:	f045 0508 	orrmi.w	r5, r5, #8
 80012f6:	9700      	str	r7, [sp, #0]
 80012f8:	f7fe ff66 	bl	80001c8 <strlen>
 80012fc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8001300:	2501      	movs	r5, #1
 8001302:	4628      	mov	r0, r5
 8001304:	4651      	mov	r1, sl
 8001306:	beab      	bkpt	0x00ab
 8001308:	4605      	mov	r5, r0
 800130a:	2d00      	cmp	r5, #0
 800130c:	db06      	blt.n	800131c <_swiopen+0x78>
 800130e:	44c8      	add	r8, r9
 8001310:	2300      	movs	r3, #0
 8001312:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8001316:	f8c8 3004 	str.w	r3, [r8, #4]
 800131a:	e016      	b.n	800134a <_swiopen+0xa6>
 800131c:	4628      	mov	r0, r5
 800131e:	f7ff fe97 	bl	8001050 <error>
 8001322:	4604      	mov	r4, r0
 8001324:	e011      	b.n	800134a <_swiopen+0xa6>
 8001326:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 800132a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800132e:	46ea      	mov	sl, sp
 8001330:	d1cd      	bne.n	80012ce <_swiopen+0x2a>
 8001332:	4651      	mov	r1, sl
 8001334:	4638      	mov	r0, r7
 8001336:	f7ff ff98 	bl	800126a <_stat>
 800133a:	3001      	adds	r0, #1
 800133c:	d0c7      	beq.n	80012ce <_swiopen+0x2a>
 800133e:	f000 fb4f 	bl	80019e0 <__errno>
 8001342:	2311      	movs	r3, #17
 8001344:	6003      	str	r3, [r0, #0]
 8001346:	f04f 34ff 	mov.w	r4, #4294967295
 800134a:	4620      	mov	r0, r4
 800134c:	b016      	add	sp, #88	@ 0x58
 800134e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001352:	bf00      	nop
 8001354:	20000274 	.word	0x20000274

08001358 <_get_semihosting_exts>:
 8001358:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800135c:	4606      	mov	r6, r0
 800135e:	460f      	mov	r7, r1
 8001360:	4829      	ldr	r0, [pc, #164]	@ (8001408 <_get_semihosting_exts+0xb0>)
 8001362:	2100      	movs	r1, #0
 8001364:	4615      	mov	r5, r2
 8001366:	f7ff ff9d 	bl	80012a4 <_swiopen>
 800136a:	462a      	mov	r2, r5
 800136c:	4604      	mov	r4, r0
 800136e:	2100      	movs	r1, #0
 8001370:	4630      	mov	r0, r6
 8001372:	f000 fae7 	bl	8001944 <memset>
 8001376:	1c63      	adds	r3, r4, #1
 8001378:	d014      	beq.n	80013a4 <_get_semihosting_exts+0x4c>
 800137a:	4620      	mov	r0, r4
 800137c:	f7ff fe4e 	bl	800101c <findslot>
 8001380:	f04f 080c 	mov.w	r8, #12
 8001384:	4681      	mov	r9, r0
 8001386:	4640      	mov	r0, r8
 8001388:	4649      	mov	r1, r9
 800138a:	beab      	bkpt	0x00ab
 800138c:	4680      	mov	r8, r0
 800138e:	4640      	mov	r0, r8
 8001390:	f7ff fe6c 	bl	800106c <checkerror>
 8001394:	2803      	cmp	r0, #3
 8001396:	dd02      	ble.n	800139e <_get_semihosting_exts+0x46>
 8001398:	1ec3      	subs	r3, r0, #3
 800139a:	42ab      	cmp	r3, r5
 800139c:	dc07      	bgt.n	80013ae <_get_semihosting_exts+0x56>
 800139e:	4620      	mov	r0, r4
 80013a0:	f7ff ff0e 	bl	80011c0 <_close>
 80013a4:	f04f 30ff 	mov.w	r0, #4294967295
 80013a8:	b003      	add	sp, #12
 80013aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ae:	2204      	movs	r2, #4
 80013b0:	eb0d 0102 	add.w	r1, sp, r2
 80013b4:	4620      	mov	r0, r4
 80013b6:	f7ff fe6e 	bl	8001096 <_read>
 80013ba:	2803      	cmp	r0, #3
 80013bc:	ddef      	ble.n	800139e <_get_semihosting_exts+0x46>
 80013be:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80013c2:	2b53      	cmp	r3, #83	@ 0x53
 80013c4:	d1eb      	bne.n	800139e <_get_semihosting_exts+0x46>
 80013c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80013ca:	2b48      	cmp	r3, #72	@ 0x48
 80013cc:	d1e7      	bne.n	800139e <_get_semihosting_exts+0x46>
 80013ce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80013d2:	2b46      	cmp	r3, #70	@ 0x46
 80013d4:	d1e3      	bne.n	800139e <_get_semihosting_exts+0x46>
 80013d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80013da:	2b42      	cmp	r3, #66	@ 0x42
 80013dc:	d1df      	bne.n	800139e <_get_semihosting_exts+0x46>
 80013de:	2201      	movs	r2, #1
 80013e0:	4639      	mov	r1, r7
 80013e2:	4620      	mov	r0, r4
 80013e4:	f7ff fe71 	bl	80010ca <_swilseek>
 80013e8:	2800      	cmp	r0, #0
 80013ea:	dbd8      	blt.n	800139e <_get_semihosting_exts+0x46>
 80013ec:	462a      	mov	r2, r5
 80013ee:	4631      	mov	r1, r6
 80013f0:	4620      	mov	r0, r4
 80013f2:	f7ff fe50 	bl	8001096 <_read>
 80013f6:	4605      	mov	r5, r0
 80013f8:	4620      	mov	r0, r4
 80013fa:	f7ff fee1 	bl	80011c0 <_close>
 80013fe:	4628      	mov	r0, r5
 8001400:	f7ff fe34 	bl	800106c <checkerror>
 8001404:	e7d0      	b.n	80013a8 <_get_semihosting_exts+0x50>
 8001406:	bf00      	nop
 8001408:	08001f0b 	.word	0x08001f0b

0800140c <initialise_semihosting_exts>:
 800140c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800140e:	4d0a      	ldr	r5, [pc, #40]	@ (8001438 <initialise_semihosting_exts+0x2c>)
 8001410:	4c0a      	ldr	r4, [pc, #40]	@ (800143c <initialise_semihosting_exts+0x30>)
 8001412:	2100      	movs	r1, #0
 8001414:	2201      	movs	r2, #1
 8001416:	a801      	add	r0, sp, #4
 8001418:	6029      	str	r1, [r5, #0]
 800141a:	6022      	str	r2, [r4, #0]
 800141c:	f7ff ff9c 	bl	8001358 <_get_semihosting_exts>
 8001420:	2800      	cmp	r0, #0
 8001422:	dd07      	ble.n	8001434 <initialise_semihosting_exts+0x28>
 8001424:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001428:	f003 0201 	and.w	r2, r3, #1
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	602a      	str	r2, [r5, #0]
 8001432:	6023      	str	r3, [r4, #0]
 8001434:	b003      	add	sp, #12
 8001436:	bd30      	pop	{r4, r5, pc}
 8001438:	2000019c 	.word	0x2000019c
 800143c:	20000198 	.word	0x20000198

08001440 <_has_ext_stdout_stderr>:
 8001440:	b510      	push	{r4, lr}
 8001442:	4c04      	ldr	r4, [pc, #16]	@ (8001454 <_has_ext_stdout_stderr+0x14>)
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	da01      	bge.n	800144e <_has_ext_stdout_stderr+0xe>
 800144a:	f7ff ffdf 	bl	800140c <initialise_semihosting_exts>
 800144e:	6820      	ldr	r0, [r4, #0]
 8001450:	bd10      	pop	{r4, pc}
 8001452:	bf00      	nop
 8001454:	20000198 	.word	0x20000198

08001458 <initialise_monitor_handles>:
 8001458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800145c:	b085      	sub	sp, #20
 800145e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8001510 <initialise_monitor_handles+0xb8>
 8001462:	f8cd 9004 	str.w	r9, [sp, #4]
 8001466:	2303      	movs	r3, #3
 8001468:	2400      	movs	r4, #0
 800146a:	9303      	str	r3, [sp, #12]
 800146c:	af01      	add	r7, sp, #4
 800146e:	9402      	str	r4, [sp, #8]
 8001470:	2501      	movs	r5, #1
 8001472:	4628      	mov	r0, r5
 8001474:	4639      	mov	r1, r7
 8001476:	beab      	bkpt	0x00ab
 8001478:	4605      	mov	r5, r0
 800147a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8001514 <initialise_monitor_handles+0xbc>
 800147e:	4623      	mov	r3, r4
 8001480:	4c20      	ldr	r4, [pc, #128]	@ (8001504 <initialise_monitor_handles+0xac>)
 8001482:	f8c8 5000 	str.w	r5, [r8]
 8001486:	f04f 32ff 	mov.w	r2, #4294967295
 800148a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800148e:	3301      	adds	r3, #1
 8001490:	2b14      	cmp	r3, #20
 8001492:	d1fa      	bne.n	800148a <initialise_monitor_handles+0x32>
 8001494:	f7ff ffd4 	bl	8001440 <_has_ext_stdout_stderr>
 8001498:	4d1b      	ldr	r5, [pc, #108]	@ (8001508 <initialise_monitor_handles+0xb0>)
 800149a:	b1d0      	cbz	r0, 80014d2 <initialise_monitor_handles+0x7a>
 800149c:	f04f 0a03 	mov.w	sl, #3
 80014a0:	2304      	movs	r3, #4
 80014a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80014a6:	2601      	movs	r6, #1
 80014a8:	f8cd a00c 	str.w	sl, [sp, #12]
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	4630      	mov	r0, r6
 80014b0:	4639      	mov	r1, r7
 80014b2:	beab      	bkpt	0x00ab
 80014b4:	4683      	mov	fp, r0
 80014b6:	4b15      	ldr	r3, [pc, #84]	@ (800150c <initialise_monitor_handles+0xb4>)
 80014b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80014bc:	f8c3 b000 	str.w	fp, [r3]
 80014c0:	2308      	movs	r3, #8
 80014c2:	f8cd a00c 	str.w	sl, [sp, #12]
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	4630      	mov	r0, r6
 80014ca:	4639      	mov	r1, r7
 80014cc:	beab      	bkpt	0x00ab
 80014ce:	4606      	mov	r6, r0
 80014d0:	602e      	str	r6, [r5, #0]
 80014d2:	682b      	ldr	r3, [r5, #0]
 80014d4:	3301      	adds	r3, #1
 80014d6:	bf02      	ittt	eq
 80014d8:	4b0c      	ldreq	r3, [pc, #48]	@ (800150c <initialise_monitor_handles+0xb4>)
 80014da:	681b      	ldreq	r3, [r3, #0]
 80014dc:	602b      	streq	r3, [r5, #0]
 80014de:	2600      	movs	r6, #0
 80014e0:	f8d8 3000 	ldr.w	r3, [r8]
 80014e4:	6023      	str	r3, [r4, #0]
 80014e6:	6066      	str	r6, [r4, #4]
 80014e8:	f7ff ffaa 	bl	8001440 <_has_ext_stdout_stderr>
 80014ec:	b130      	cbz	r0, 80014fc <initialise_monitor_handles+0xa4>
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <initialise_monitor_handles+0xb4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80014f6:	682b      	ldr	r3, [r5, #0]
 80014f8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80014fc:	b005      	add	sp, #20
 80014fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001502:	bf00      	nop
 8001504:	20000274 	.word	0x20000274
 8001508:	20000268 	.word	0x20000268
 800150c:	2000026c 	.word	0x2000026c
 8001510:	08001f21 	.word	0x08001f21
 8001514:	20000270 	.word	0x20000270

08001518 <_isatty>:
 8001518:	b570      	push	{r4, r5, r6, lr}
 800151a:	f7ff fd7f 	bl	800101c <findslot>
 800151e:	2409      	movs	r4, #9
 8001520:	4605      	mov	r5, r0
 8001522:	b920      	cbnz	r0, 800152e <_isatty+0x16>
 8001524:	f000 fa5c 	bl	80019e0 <__errno>
 8001528:	6004      	str	r4, [r0, #0]
 800152a:	2000      	movs	r0, #0
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	beab      	bkpt	0x00ab
 8001534:	4604      	mov	r4, r0
 8001536:	2c01      	cmp	r4, #1
 8001538:	4620      	mov	r0, r4
 800153a:	d0f7      	beq.n	800152c <_isatty+0x14>
 800153c:	f000 fa50 	bl	80019e0 <__errno>
 8001540:	2513      	movs	r5, #19
 8001542:	4604      	mov	r4, r0
 8001544:	2600      	movs	r6, #0
 8001546:	4628      	mov	r0, r5
 8001548:	4631      	mov	r1, r6
 800154a:	beab      	bkpt	0x00ab
 800154c:	4605      	mov	r5, r0
 800154e:	6025      	str	r5, [r4, #0]
 8001550:	e7eb      	b.n	800152a <_isatty+0x12>
	...

08001554 <std>:
 8001554:	2300      	movs	r3, #0
 8001556:	b510      	push	{r4, lr}
 8001558:	4604      	mov	r4, r0
 800155a:	e9c0 3300 	strd	r3, r3, [r0]
 800155e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001562:	6083      	str	r3, [r0, #8]
 8001564:	8181      	strh	r1, [r0, #12]
 8001566:	6643      	str	r3, [r0, #100]	@ 0x64
 8001568:	81c2      	strh	r2, [r0, #14]
 800156a:	6183      	str	r3, [r0, #24]
 800156c:	4619      	mov	r1, r3
 800156e:	2208      	movs	r2, #8
 8001570:	305c      	adds	r0, #92	@ 0x5c
 8001572:	f000 f9e7 	bl	8001944 <memset>
 8001576:	4b0d      	ldr	r3, [pc, #52]	@ (80015ac <std+0x58>)
 8001578:	6263      	str	r3, [r4, #36]	@ 0x24
 800157a:	4b0d      	ldr	r3, [pc, #52]	@ (80015b0 <std+0x5c>)
 800157c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800157e:	4b0d      	ldr	r3, [pc, #52]	@ (80015b4 <std+0x60>)
 8001580:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001582:	4b0d      	ldr	r3, [pc, #52]	@ (80015b8 <std+0x64>)
 8001584:	6323      	str	r3, [r4, #48]	@ 0x30
 8001586:	4b0d      	ldr	r3, [pc, #52]	@ (80015bc <std+0x68>)
 8001588:	6224      	str	r4, [r4, #32]
 800158a:	429c      	cmp	r4, r3
 800158c:	d006      	beq.n	800159c <std+0x48>
 800158e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001592:	4294      	cmp	r4, r2
 8001594:	d002      	beq.n	800159c <std+0x48>
 8001596:	33d0      	adds	r3, #208	@ 0xd0
 8001598:	429c      	cmp	r4, r3
 800159a:	d105      	bne.n	80015a8 <std+0x54>
 800159c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80015a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015a4:	f000 ba46 	b.w	8001a34 <__retarget_lock_init_recursive>
 80015a8:	bd10      	pop	{r4, pc}
 80015aa:	bf00      	nop
 80015ac:	08001795 	.word	0x08001795
 80015b0:	080017b7 	.word	0x080017b7
 80015b4:	080017ef 	.word	0x080017ef
 80015b8:	08001813 	.word	0x08001813
 80015bc:	20000314 	.word	0x20000314

080015c0 <stdio_exit_handler>:
 80015c0:	4a02      	ldr	r2, [pc, #8]	@ (80015cc <stdio_exit_handler+0xc>)
 80015c2:	4903      	ldr	r1, [pc, #12]	@ (80015d0 <stdio_exit_handler+0x10>)
 80015c4:	4803      	ldr	r0, [pc, #12]	@ (80015d4 <stdio_exit_handler+0x14>)
 80015c6:	f000 b869 	b.w	800169c <_fwalk_sglue>
 80015ca:	bf00      	nop
 80015cc:	200001a0 	.word	0x200001a0
 80015d0:	08001d35 	.word	0x08001d35
 80015d4:	200001b0 	.word	0x200001b0

080015d8 <cleanup_stdio>:
 80015d8:	6841      	ldr	r1, [r0, #4]
 80015da:	4b0c      	ldr	r3, [pc, #48]	@ (800160c <cleanup_stdio+0x34>)
 80015dc:	4299      	cmp	r1, r3
 80015de:	b510      	push	{r4, lr}
 80015e0:	4604      	mov	r4, r0
 80015e2:	d001      	beq.n	80015e8 <cleanup_stdio+0x10>
 80015e4:	f000 fba6 	bl	8001d34 <_fflush_r>
 80015e8:	68a1      	ldr	r1, [r4, #8]
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <cleanup_stdio+0x38>)
 80015ec:	4299      	cmp	r1, r3
 80015ee:	d002      	beq.n	80015f6 <cleanup_stdio+0x1e>
 80015f0:	4620      	mov	r0, r4
 80015f2:	f000 fb9f 	bl	8001d34 <_fflush_r>
 80015f6:	68e1      	ldr	r1, [r4, #12]
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <cleanup_stdio+0x3c>)
 80015fa:	4299      	cmp	r1, r3
 80015fc:	d004      	beq.n	8001608 <cleanup_stdio+0x30>
 80015fe:	4620      	mov	r0, r4
 8001600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001604:	f000 bb96 	b.w	8001d34 <_fflush_r>
 8001608:	bd10      	pop	{r4, pc}
 800160a:	bf00      	nop
 800160c:	20000314 	.word	0x20000314
 8001610:	2000037c 	.word	0x2000037c
 8001614:	200003e4 	.word	0x200003e4

08001618 <global_stdio_init.part.0>:
 8001618:	b510      	push	{r4, lr}
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <global_stdio_init.part.0+0x30>)
 800161c:	4c0b      	ldr	r4, [pc, #44]	@ (800164c <global_stdio_init.part.0+0x34>)
 800161e:	4a0c      	ldr	r2, [pc, #48]	@ (8001650 <global_stdio_init.part.0+0x38>)
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	4620      	mov	r0, r4
 8001624:	2200      	movs	r2, #0
 8001626:	2104      	movs	r1, #4
 8001628:	f7ff ff94 	bl	8001554 <std>
 800162c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001630:	2201      	movs	r2, #1
 8001632:	2109      	movs	r1, #9
 8001634:	f7ff ff8e 	bl	8001554 <std>
 8001638:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800163c:	2202      	movs	r2, #2
 800163e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001642:	2112      	movs	r1, #18
 8001644:	f7ff bf86 	b.w	8001554 <std>
 8001648:	2000044c 	.word	0x2000044c
 800164c:	20000314 	.word	0x20000314
 8001650:	080015c1 	.word	0x080015c1

08001654 <__sfp_lock_acquire>:
 8001654:	4801      	ldr	r0, [pc, #4]	@ (800165c <__sfp_lock_acquire+0x8>)
 8001656:	f000 b9ee 	b.w	8001a36 <__retarget_lock_acquire_recursive>
 800165a:	bf00      	nop
 800165c:	20000455 	.word	0x20000455

08001660 <__sfp_lock_release>:
 8001660:	4801      	ldr	r0, [pc, #4]	@ (8001668 <__sfp_lock_release+0x8>)
 8001662:	f000 b9e9 	b.w	8001a38 <__retarget_lock_release_recursive>
 8001666:	bf00      	nop
 8001668:	20000455 	.word	0x20000455

0800166c <__sinit>:
 800166c:	b510      	push	{r4, lr}
 800166e:	4604      	mov	r4, r0
 8001670:	f7ff fff0 	bl	8001654 <__sfp_lock_acquire>
 8001674:	6a23      	ldr	r3, [r4, #32]
 8001676:	b11b      	cbz	r3, 8001680 <__sinit+0x14>
 8001678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800167c:	f7ff bff0 	b.w	8001660 <__sfp_lock_release>
 8001680:	4b04      	ldr	r3, [pc, #16]	@ (8001694 <__sinit+0x28>)
 8001682:	6223      	str	r3, [r4, #32]
 8001684:	4b04      	ldr	r3, [pc, #16]	@ (8001698 <__sinit+0x2c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1f5      	bne.n	8001678 <__sinit+0xc>
 800168c:	f7ff ffc4 	bl	8001618 <global_stdio_init.part.0>
 8001690:	e7f2      	b.n	8001678 <__sinit+0xc>
 8001692:	bf00      	nop
 8001694:	080015d9 	.word	0x080015d9
 8001698:	2000044c 	.word	0x2000044c

0800169c <_fwalk_sglue>:
 800169c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016a0:	4607      	mov	r7, r0
 80016a2:	4688      	mov	r8, r1
 80016a4:	4614      	mov	r4, r2
 80016a6:	2600      	movs	r6, #0
 80016a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016ac:	f1b9 0901 	subs.w	r9, r9, #1
 80016b0:	d505      	bpl.n	80016be <_fwalk_sglue+0x22>
 80016b2:	6824      	ldr	r4, [r4, #0]
 80016b4:	2c00      	cmp	r4, #0
 80016b6:	d1f7      	bne.n	80016a8 <_fwalk_sglue+0xc>
 80016b8:	4630      	mov	r0, r6
 80016ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016be:	89ab      	ldrh	r3, [r5, #12]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d907      	bls.n	80016d4 <_fwalk_sglue+0x38>
 80016c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80016c8:	3301      	adds	r3, #1
 80016ca:	d003      	beq.n	80016d4 <_fwalk_sglue+0x38>
 80016cc:	4629      	mov	r1, r5
 80016ce:	4638      	mov	r0, r7
 80016d0:	47c0      	blx	r8
 80016d2:	4306      	orrs	r6, r0
 80016d4:	3568      	adds	r5, #104	@ 0x68
 80016d6:	e7e9      	b.n	80016ac <_fwalk_sglue+0x10>

080016d8 <_puts_r>:
 80016d8:	6a03      	ldr	r3, [r0, #32]
 80016da:	b570      	push	{r4, r5, r6, lr}
 80016dc:	6884      	ldr	r4, [r0, #8]
 80016de:	4605      	mov	r5, r0
 80016e0:	460e      	mov	r6, r1
 80016e2:	b90b      	cbnz	r3, 80016e8 <_puts_r+0x10>
 80016e4:	f7ff ffc2 	bl	800166c <__sinit>
 80016e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80016ea:	07db      	lsls	r3, r3, #31
 80016ec:	d405      	bmi.n	80016fa <_puts_r+0x22>
 80016ee:	89a3      	ldrh	r3, [r4, #12]
 80016f0:	0598      	lsls	r0, r3, #22
 80016f2:	d402      	bmi.n	80016fa <_puts_r+0x22>
 80016f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80016f6:	f000 f99e 	bl	8001a36 <__retarget_lock_acquire_recursive>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	0719      	lsls	r1, r3, #28
 80016fe:	d502      	bpl.n	8001706 <_puts_r+0x2e>
 8001700:	6923      	ldr	r3, [r4, #16]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d135      	bne.n	8001772 <_puts_r+0x9a>
 8001706:	4621      	mov	r1, r4
 8001708:	4628      	mov	r0, r5
 800170a:	f000 f8c5 	bl	8001898 <__swsetup_r>
 800170e:	b380      	cbz	r0, 8001772 <_puts_r+0x9a>
 8001710:	f04f 35ff 	mov.w	r5, #4294967295
 8001714:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001716:	07da      	lsls	r2, r3, #31
 8001718:	d405      	bmi.n	8001726 <_puts_r+0x4e>
 800171a:	89a3      	ldrh	r3, [r4, #12]
 800171c:	059b      	lsls	r3, r3, #22
 800171e:	d402      	bmi.n	8001726 <_puts_r+0x4e>
 8001720:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001722:	f000 f989 	bl	8001a38 <__retarget_lock_release_recursive>
 8001726:	4628      	mov	r0, r5
 8001728:	bd70      	pop	{r4, r5, r6, pc}
 800172a:	2b00      	cmp	r3, #0
 800172c:	da04      	bge.n	8001738 <_puts_r+0x60>
 800172e:	69a2      	ldr	r2, [r4, #24]
 8001730:	429a      	cmp	r2, r3
 8001732:	dc17      	bgt.n	8001764 <_puts_r+0x8c>
 8001734:	290a      	cmp	r1, #10
 8001736:	d015      	beq.n	8001764 <_puts_r+0x8c>
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	6022      	str	r2, [r4, #0]
 800173e:	7019      	strb	r1, [r3, #0]
 8001740:	68a3      	ldr	r3, [r4, #8]
 8001742:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001746:	3b01      	subs	r3, #1
 8001748:	60a3      	str	r3, [r4, #8]
 800174a:	2900      	cmp	r1, #0
 800174c:	d1ed      	bne.n	800172a <_puts_r+0x52>
 800174e:	2b00      	cmp	r3, #0
 8001750:	da11      	bge.n	8001776 <_puts_r+0x9e>
 8001752:	4622      	mov	r2, r4
 8001754:	210a      	movs	r1, #10
 8001756:	4628      	mov	r0, r5
 8001758:	f000 f85f 	bl	800181a <__swbuf_r>
 800175c:	3001      	adds	r0, #1
 800175e:	d0d7      	beq.n	8001710 <_puts_r+0x38>
 8001760:	250a      	movs	r5, #10
 8001762:	e7d7      	b.n	8001714 <_puts_r+0x3c>
 8001764:	4622      	mov	r2, r4
 8001766:	4628      	mov	r0, r5
 8001768:	f000 f857 	bl	800181a <__swbuf_r>
 800176c:	3001      	adds	r0, #1
 800176e:	d1e7      	bne.n	8001740 <_puts_r+0x68>
 8001770:	e7ce      	b.n	8001710 <_puts_r+0x38>
 8001772:	3e01      	subs	r6, #1
 8001774:	e7e4      	b.n	8001740 <_puts_r+0x68>
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	1c5a      	adds	r2, r3, #1
 800177a:	6022      	str	r2, [r4, #0]
 800177c:	220a      	movs	r2, #10
 800177e:	701a      	strb	r2, [r3, #0]
 8001780:	e7ee      	b.n	8001760 <_puts_r+0x88>
	...

08001784 <puts>:
 8001784:	4b02      	ldr	r3, [pc, #8]	@ (8001790 <puts+0xc>)
 8001786:	4601      	mov	r1, r0
 8001788:	6818      	ldr	r0, [r3, #0]
 800178a:	f7ff bfa5 	b.w	80016d8 <_puts_r>
 800178e:	bf00      	nop
 8001790:	200001ac 	.word	0x200001ac

08001794 <__sread>:
 8001794:	b510      	push	{r4, lr}
 8001796:	460c      	mov	r4, r1
 8001798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800179c:	f000 f8fc 	bl	8001998 <_read_r>
 80017a0:	2800      	cmp	r0, #0
 80017a2:	bfab      	itete	ge
 80017a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80017a6:	89a3      	ldrhlt	r3, [r4, #12]
 80017a8:	181b      	addge	r3, r3, r0
 80017aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80017ae:	bfac      	ite	ge
 80017b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80017b2:	81a3      	strhlt	r3, [r4, #12]
 80017b4:	bd10      	pop	{r4, pc}

080017b6 <__swrite>:
 80017b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017ba:	461f      	mov	r7, r3
 80017bc:	898b      	ldrh	r3, [r1, #12]
 80017be:	05db      	lsls	r3, r3, #23
 80017c0:	4605      	mov	r5, r0
 80017c2:	460c      	mov	r4, r1
 80017c4:	4616      	mov	r6, r2
 80017c6:	d505      	bpl.n	80017d4 <__swrite+0x1e>
 80017c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017cc:	2302      	movs	r3, #2
 80017ce:	2200      	movs	r2, #0
 80017d0:	f000 f8d0 	bl	8001974 <_lseek_r>
 80017d4:	89a3      	ldrh	r3, [r4, #12]
 80017d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80017da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017de:	81a3      	strh	r3, [r4, #12]
 80017e0:	4632      	mov	r2, r6
 80017e2:	463b      	mov	r3, r7
 80017e4:	4628      	mov	r0, r5
 80017e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80017ea:	f000 b8e7 	b.w	80019bc <_write_r>

080017ee <__sseek>:
 80017ee:	b510      	push	{r4, lr}
 80017f0:	460c      	mov	r4, r1
 80017f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017f6:	f000 f8bd 	bl	8001974 <_lseek_r>
 80017fa:	1c43      	adds	r3, r0, #1
 80017fc:	89a3      	ldrh	r3, [r4, #12]
 80017fe:	bf15      	itete	ne
 8001800:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001802:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001806:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800180a:	81a3      	strheq	r3, [r4, #12]
 800180c:	bf18      	it	ne
 800180e:	81a3      	strhne	r3, [r4, #12]
 8001810:	bd10      	pop	{r4, pc}

08001812 <__sclose>:
 8001812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001816:	f000 b89d 	b.w	8001954 <_close_r>

0800181a <__swbuf_r>:
 800181a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800181c:	460e      	mov	r6, r1
 800181e:	4614      	mov	r4, r2
 8001820:	4605      	mov	r5, r0
 8001822:	b118      	cbz	r0, 800182c <__swbuf_r+0x12>
 8001824:	6a03      	ldr	r3, [r0, #32]
 8001826:	b90b      	cbnz	r3, 800182c <__swbuf_r+0x12>
 8001828:	f7ff ff20 	bl	800166c <__sinit>
 800182c:	69a3      	ldr	r3, [r4, #24]
 800182e:	60a3      	str	r3, [r4, #8]
 8001830:	89a3      	ldrh	r3, [r4, #12]
 8001832:	071a      	lsls	r2, r3, #28
 8001834:	d501      	bpl.n	800183a <__swbuf_r+0x20>
 8001836:	6923      	ldr	r3, [r4, #16]
 8001838:	b943      	cbnz	r3, 800184c <__swbuf_r+0x32>
 800183a:	4621      	mov	r1, r4
 800183c:	4628      	mov	r0, r5
 800183e:	f000 f82b 	bl	8001898 <__swsetup_r>
 8001842:	b118      	cbz	r0, 800184c <__swbuf_r+0x32>
 8001844:	f04f 37ff 	mov.w	r7, #4294967295
 8001848:	4638      	mov	r0, r7
 800184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	6922      	ldr	r2, [r4, #16]
 8001850:	1a98      	subs	r0, r3, r2
 8001852:	6963      	ldr	r3, [r4, #20]
 8001854:	b2f6      	uxtb	r6, r6
 8001856:	4283      	cmp	r3, r0
 8001858:	4637      	mov	r7, r6
 800185a:	dc05      	bgt.n	8001868 <__swbuf_r+0x4e>
 800185c:	4621      	mov	r1, r4
 800185e:	4628      	mov	r0, r5
 8001860:	f000 fa68 	bl	8001d34 <_fflush_r>
 8001864:	2800      	cmp	r0, #0
 8001866:	d1ed      	bne.n	8001844 <__swbuf_r+0x2a>
 8001868:	68a3      	ldr	r3, [r4, #8]
 800186a:	3b01      	subs	r3, #1
 800186c:	60a3      	str	r3, [r4, #8]
 800186e:	6823      	ldr	r3, [r4, #0]
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	6022      	str	r2, [r4, #0]
 8001874:	701e      	strb	r6, [r3, #0]
 8001876:	6962      	ldr	r2, [r4, #20]
 8001878:	1c43      	adds	r3, r0, #1
 800187a:	429a      	cmp	r2, r3
 800187c:	d004      	beq.n	8001888 <__swbuf_r+0x6e>
 800187e:	89a3      	ldrh	r3, [r4, #12]
 8001880:	07db      	lsls	r3, r3, #31
 8001882:	d5e1      	bpl.n	8001848 <__swbuf_r+0x2e>
 8001884:	2e0a      	cmp	r6, #10
 8001886:	d1df      	bne.n	8001848 <__swbuf_r+0x2e>
 8001888:	4621      	mov	r1, r4
 800188a:	4628      	mov	r0, r5
 800188c:	f000 fa52 	bl	8001d34 <_fflush_r>
 8001890:	2800      	cmp	r0, #0
 8001892:	d0d9      	beq.n	8001848 <__swbuf_r+0x2e>
 8001894:	e7d6      	b.n	8001844 <__swbuf_r+0x2a>
	...

08001898 <__swsetup_r>:
 8001898:	b538      	push	{r3, r4, r5, lr}
 800189a:	4b29      	ldr	r3, [pc, #164]	@ (8001940 <__swsetup_r+0xa8>)
 800189c:	4605      	mov	r5, r0
 800189e:	6818      	ldr	r0, [r3, #0]
 80018a0:	460c      	mov	r4, r1
 80018a2:	b118      	cbz	r0, 80018ac <__swsetup_r+0x14>
 80018a4:	6a03      	ldr	r3, [r0, #32]
 80018a6:	b90b      	cbnz	r3, 80018ac <__swsetup_r+0x14>
 80018a8:	f7ff fee0 	bl	800166c <__sinit>
 80018ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018b0:	0719      	lsls	r1, r3, #28
 80018b2:	d422      	bmi.n	80018fa <__swsetup_r+0x62>
 80018b4:	06da      	lsls	r2, r3, #27
 80018b6:	d407      	bmi.n	80018c8 <__swsetup_r+0x30>
 80018b8:	2209      	movs	r2, #9
 80018ba:	602a      	str	r2, [r5, #0]
 80018bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018c0:	81a3      	strh	r3, [r4, #12]
 80018c2:	f04f 30ff 	mov.w	r0, #4294967295
 80018c6:	e033      	b.n	8001930 <__swsetup_r+0x98>
 80018c8:	0758      	lsls	r0, r3, #29
 80018ca:	d512      	bpl.n	80018f2 <__swsetup_r+0x5a>
 80018cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80018ce:	b141      	cbz	r1, 80018e2 <__swsetup_r+0x4a>
 80018d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80018d4:	4299      	cmp	r1, r3
 80018d6:	d002      	beq.n	80018de <__swsetup_r+0x46>
 80018d8:	4628      	mov	r0, r5
 80018da:	f000 f8af 	bl	8001a3c <_free_r>
 80018de:	2300      	movs	r3, #0
 80018e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80018e2:	89a3      	ldrh	r3, [r4, #12]
 80018e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80018e8:	81a3      	strh	r3, [r4, #12]
 80018ea:	2300      	movs	r3, #0
 80018ec:	6063      	str	r3, [r4, #4]
 80018ee:	6923      	ldr	r3, [r4, #16]
 80018f0:	6023      	str	r3, [r4, #0]
 80018f2:	89a3      	ldrh	r3, [r4, #12]
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	81a3      	strh	r3, [r4, #12]
 80018fa:	6923      	ldr	r3, [r4, #16]
 80018fc:	b94b      	cbnz	r3, 8001912 <__swsetup_r+0x7a>
 80018fe:	89a3      	ldrh	r3, [r4, #12]
 8001900:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001908:	d003      	beq.n	8001912 <__swsetup_r+0x7a>
 800190a:	4621      	mov	r1, r4
 800190c:	4628      	mov	r0, r5
 800190e:	f000 fa5f 	bl	8001dd0 <__smakebuf_r>
 8001912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001916:	f013 0201 	ands.w	r2, r3, #1
 800191a:	d00a      	beq.n	8001932 <__swsetup_r+0x9a>
 800191c:	2200      	movs	r2, #0
 800191e:	60a2      	str	r2, [r4, #8]
 8001920:	6962      	ldr	r2, [r4, #20]
 8001922:	4252      	negs	r2, r2
 8001924:	61a2      	str	r2, [r4, #24]
 8001926:	6922      	ldr	r2, [r4, #16]
 8001928:	b942      	cbnz	r2, 800193c <__swsetup_r+0xa4>
 800192a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800192e:	d1c5      	bne.n	80018bc <__swsetup_r+0x24>
 8001930:	bd38      	pop	{r3, r4, r5, pc}
 8001932:	0799      	lsls	r1, r3, #30
 8001934:	bf58      	it	pl
 8001936:	6962      	ldrpl	r2, [r4, #20]
 8001938:	60a2      	str	r2, [r4, #8]
 800193a:	e7f4      	b.n	8001926 <__swsetup_r+0x8e>
 800193c:	2000      	movs	r0, #0
 800193e:	e7f7      	b.n	8001930 <__swsetup_r+0x98>
 8001940:	200001ac 	.word	0x200001ac

08001944 <memset>:
 8001944:	4402      	add	r2, r0
 8001946:	4603      	mov	r3, r0
 8001948:	4293      	cmp	r3, r2
 800194a:	d100      	bne.n	800194e <memset+0xa>
 800194c:	4770      	bx	lr
 800194e:	f803 1b01 	strb.w	r1, [r3], #1
 8001952:	e7f9      	b.n	8001948 <memset+0x4>

08001954 <_close_r>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4d06      	ldr	r5, [pc, #24]	@ (8001970 <_close_r+0x1c>)
 8001958:	2300      	movs	r3, #0
 800195a:	4604      	mov	r4, r0
 800195c:	4608      	mov	r0, r1
 800195e:	602b      	str	r3, [r5, #0]
 8001960:	f7ff fc2e 	bl	80011c0 <_close>
 8001964:	1c43      	adds	r3, r0, #1
 8001966:	d102      	bne.n	800196e <_close_r+0x1a>
 8001968:	682b      	ldr	r3, [r5, #0]
 800196a:	b103      	cbz	r3, 800196e <_close_r+0x1a>
 800196c:	6023      	str	r3, [r4, #0]
 800196e:	bd38      	pop	{r3, r4, r5, pc}
 8001970:	20000450 	.word	0x20000450

08001974 <_lseek_r>:
 8001974:	b538      	push	{r3, r4, r5, lr}
 8001976:	4d07      	ldr	r5, [pc, #28]	@ (8001994 <_lseek_r+0x20>)
 8001978:	4604      	mov	r4, r0
 800197a:	4608      	mov	r0, r1
 800197c:	4611      	mov	r1, r2
 800197e:	2200      	movs	r2, #0
 8001980:	602a      	str	r2, [r5, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	f7ff fbdd 	bl	8001142 <_lseek>
 8001988:	1c43      	adds	r3, r0, #1
 800198a:	d102      	bne.n	8001992 <_lseek_r+0x1e>
 800198c:	682b      	ldr	r3, [r5, #0]
 800198e:	b103      	cbz	r3, 8001992 <_lseek_r+0x1e>
 8001990:	6023      	str	r3, [r4, #0]
 8001992:	bd38      	pop	{r3, r4, r5, pc}
 8001994:	20000450 	.word	0x20000450

08001998 <_read_r>:
 8001998:	b538      	push	{r3, r4, r5, lr}
 800199a:	4d07      	ldr	r5, [pc, #28]	@ (80019b8 <_read_r+0x20>)
 800199c:	4604      	mov	r4, r0
 800199e:	4608      	mov	r0, r1
 80019a0:	4611      	mov	r1, r2
 80019a2:	2200      	movs	r2, #0
 80019a4:	602a      	str	r2, [r5, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	f7ff fb75 	bl	8001096 <_read>
 80019ac:	1c43      	adds	r3, r0, #1
 80019ae:	d102      	bne.n	80019b6 <_read_r+0x1e>
 80019b0:	682b      	ldr	r3, [r5, #0]
 80019b2:	b103      	cbz	r3, 80019b6 <_read_r+0x1e>
 80019b4:	6023      	str	r3, [r4, #0]
 80019b6:	bd38      	pop	{r3, r4, r5, pc}
 80019b8:	20000450 	.word	0x20000450

080019bc <_write_r>:
 80019bc:	b538      	push	{r3, r4, r5, lr}
 80019be:	4d07      	ldr	r5, [pc, #28]	@ (80019dc <_write_r+0x20>)
 80019c0:	4604      	mov	r4, r0
 80019c2:	4608      	mov	r0, r1
 80019c4:	4611      	mov	r1, r2
 80019c6:	2200      	movs	r2, #0
 80019c8:	602a      	str	r2, [r5, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	f7ff fbcb 	bl	8001166 <_write>
 80019d0:	1c43      	adds	r3, r0, #1
 80019d2:	d102      	bne.n	80019da <_write_r+0x1e>
 80019d4:	682b      	ldr	r3, [r5, #0]
 80019d6:	b103      	cbz	r3, 80019da <_write_r+0x1e>
 80019d8:	6023      	str	r3, [r4, #0]
 80019da:	bd38      	pop	{r3, r4, r5, pc}
 80019dc:	20000450 	.word	0x20000450

080019e0 <__errno>:
 80019e0:	4b01      	ldr	r3, [pc, #4]	@ (80019e8 <__errno+0x8>)
 80019e2:	6818      	ldr	r0, [r3, #0]
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	200001ac 	.word	0x200001ac

080019ec <__libc_init_array>:
 80019ec:	b570      	push	{r4, r5, r6, lr}
 80019ee:	4d0d      	ldr	r5, [pc, #52]	@ (8001a24 <__libc_init_array+0x38>)
 80019f0:	4c0d      	ldr	r4, [pc, #52]	@ (8001a28 <__libc_init_array+0x3c>)
 80019f2:	1b64      	subs	r4, r4, r5
 80019f4:	10a4      	asrs	r4, r4, #2
 80019f6:	2600      	movs	r6, #0
 80019f8:	42a6      	cmp	r6, r4
 80019fa:	d109      	bne.n	8001a10 <__libc_init_array+0x24>
 80019fc:	4d0b      	ldr	r5, [pc, #44]	@ (8001a2c <__libc_init_array+0x40>)
 80019fe:	4c0c      	ldr	r4, [pc, #48]	@ (8001a30 <__libc_init_array+0x44>)
 8001a00:	f000 fa54 	bl	8001eac <_init>
 8001a04:	1b64      	subs	r4, r4, r5
 8001a06:	10a4      	asrs	r4, r4, #2
 8001a08:	2600      	movs	r6, #0
 8001a0a:	42a6      	cmp	r6, r4
 8001a0c:	d105      	bne.n	8001a1a <__libc_init_array+0x2e>
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
 8001a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a14:	4798      	blx	r3
 8001a16:	3601      	adds	r6, #1
 8001a18:	e7ee      	b.n	80019f8 <__libc_init_array+0xc>
 8001a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a1e:	4798      	blx	r3
 8001a20:	3601      	adds	r6, #1
 8001a22:	e7f2      	b.n	8001a0a <__libc_init_array+0x1e>
 8001a24:	08001f30 	.word	0x08001f30
 8001a28:	08001f30 	.word	0x08001f30
 8001a2c:	08001f30 	.word	0x08001f30
 8001a30:	08001f34 	.word	0x08001f34

08001a34 <__retarget_lock_init_recursive>:
 8001a34:	4770      	bx	lr

08001a36 <__retarget_lock_acquire_recursive>:
 8001a36:	4770      	bx	lr

08001a38 <__retarget_lock_release_recursive>:
 8001a38:	4770      	bx	lr
	...

08001a3c <_free_r>:
 8001a3c:	b538      	push	{r3, r4, r5, lr}
 8001a3e:	4605      	mov	r5, r0
 8001a40:	2900      	cmp	r1, #0
 8001a42:	d041      	beq.n	8001ac8 <_free_r+0x8c>
 8001a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a48:	1f0c      	subs	r4, r1, #4
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	bfb8      	it	lt
 8001a4e:	18e4      	addlt	r4, r4, r3
 8001a50:	f000 f8e0 	bl	8001c14 <__malloc_lock>
 8001a54:	4a1d      	ldr	r2, [pc, #116]	@ (8001acc <_free_r+0x90>)
 8001a56:	6813      	ldr	r3, [r2, #0]
 8001a58:	b933      	cbnz	r3, 8001a68 <_free_r+0x2c>
 8001a5a:	6063      	str	r3, [r4, #4]
 8001a5c:	6014      	str	r4, [r2, #0]
 8001a5e:	4628      	mov	r0, r5
 8001a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a64:	f000 b8dc 	b.w	8001c20 <__malloc_unlock>
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	d908      	bls.n	8001a7e <_free_r+0x42>
 8001a6c:	6820      	ldr	r0, [r4, #0]
 8001a6e:	1821      	adds	r1, r4, r0
 8001a70:	428b      	cmp	r3, r1
 8001a72:	bf01      	itttt	eq
 8001a74:	6819      	ldreq	r1, [r3, #0]
 8001a76:	685b      	ldreq	r3, [r3, #4]
 8001a78:	1809      	addeq	r1, r1, r0
 8001a7a:	6021      	streq	r1, [r4, #0]
 8001a7c:	e7ed      	b.n	8001a5a <_free_r+0x1e>
 8001a7e:	461a      	mov	r2, r3
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	b10b      	cbz	r3, 8001a88 <_free_r+0x4c>
 8001a84:	42a3      	cmp	r3, r4
 8001a86:	d9fa      	bls.n	8001a7e <_free_r+0x42>
 8001a88:	6811      	ldr	r1, [r2, #0]
 8001a8a:	1850      	adds	r0, r2, r1
 8001a8c:	42a0      	cmp	r0, r4
 8001a8e:	d10b      	bne.n	8001aa8 <_free_r+0x6c>
 8001a90:	6820      	ldr	r0, [r4, #0]
 8001a92:	4401      	add	r1, r0
 8001a94:	1850      	adds	r0, r2, r1
 8001a96:	4283      	cmp	r3, r0
 8001a98:	6011      	str	r1, [r2, #0]
 8001a9a:	d1e0      	bne.n	8001a5e <_free_r+0x22>
 8001a9c:	6818      	ldr	r0, [r3, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	6053      	str	r3, [r2, #4]
 8001aa2:	4408      	add	r0, r1
 8001aa4:	6010      	str	r0, [r2, #0]
 8001aa6:	e7da      	b.n	8001a5e <_free_r+0x22>
 8001aa8:	d902      	bls.n	8001ab0 <_free_r+0x74>
 8001aaa:	230c      	movs	r3, #12
 8001aac:	602b      	str	r3, [r5, #0]
 8001aae:	e7d6      	b.n	8001a5e <_free_r+0x22>
 8001ab0:	6820      	ldr	r0, [r4, #0]
 8001ab2:	1821      	adds	r1, r4, r0
 8001ab4:	428b      	cmp	r3, r1
 8001ab6:	bf04      	itt	eq
 8001ab8:	6819      	ldreq	r1, [r3, #0]
 8001aba:	685b      	ldreq	r3, [r3, #4]
 8001abc:	6063      	str	r3, [r4, #4]
 8001abe:	bf04      	itt	eq
 8001ac0:	1809      	addeq	r1, r1, r0
 8001ac2:	6021      	streq	r1, [r4, #0]
 8001ac4:	6054      	str	r4, [r2, #4]
 8001ac6:	e7ca      	b.n	8001a5e <_free_r+0x22>
 8001ac8:	bd38      	pop	{r3, r4, r5, pc}
 8001aca:	bf00      	nop
 8001acc:	2000045c 	.word	0x2000045c

08001ad0 <sbrk_aligned>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	4e0f      	ldr	r6, [pc, #60]	@ (8001b10 <sbrk_aligned+0x40>)
 8001ad4:	460c      	mov	r4, r1
 8001ad6:	6831      	ldr	r1, [r6, #0]
 8001ad8:	4605      	mov	r5, r0
 8001ada:	b911      	cbnz	r1, 8001ae2 <sbrk_aligned+0x12>
 8001adc:	f000 f9d6 	bl	8001e8c <_sbrk_r>
 8001ae0:	6030      	str	r0, [r6, #0]
 8001ae2:	4621      	mov	r1, r4
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f000 f9d1 	bl	8001e8c <_sbrk_r>
 8001aea:	1c43      	adds	r3, r0, #1
 8001aec:	d103      	bne.n	8001af6 <sbrk_aligned+0x26>
 8001aee:	f04f 34ff 	mov.w	r4, #4294967295
 8001af2:	4620      	mov	r0, r4
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
 8001af6:	1cc4      	adds	r4, r0, #3
 8001af8:	f024 0403 	bic.w	r4, r4, #3
 8001afc:	42a0      	cmp	r0, r4
 8001afe:	d0f8      	beq.n	8001af2 <sbrk_aligned+0x22>
 8001b00:	1a21      	subs	r1, r4, r0
 8001b02:	4628      	mov	r0, r5
 8001b04:	f000 f9c2 	bl	8001e8c <_sbrk_r>
 8001b08:	3001      	adds	r0, #1
 8001b0a:	d1f2      	bne.n	8001af2 <sbrk_aligned+0x22>
 8001b0c:	e7ef      	b.n	8001aee <sbrk_aligned+0x1e>
 8001b0e:	bf00      	nop
 8001b10:	20000458 	.word	0x20000458

08001b14 <_malloc_r>:
 8001b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b18:	1ccd      	adds	r5, r1, #3
 8001b1a:	f025 0503 	bic.w	r5, r5, #3
 8001b1e:	3508      	adds	r5, #8
 8001b20:	2d0c      	cmp	r5, #12
 8001b22:	bf38      	it	cc
 8001b24:	250c      	movcc	r5, #12
 8001b26:	2d00      	cmp	r5, #0
 8001b28:	4606      	mov	r6, r0
 8001b2a:	db01      	blt.n	8001b30 <_malloc_r+0x1c>
 8001b2c:	42a9      	cmp	r1, r5
 8001b2e:	d904      	bls.n	8001b3a <_malloc_r+0x26>
 8001b30:	230c      	movs	r3, #12
 8001b32:	6033      	str	r3, [r6, #0]
 8001b34:	2000      	movs	r0, #0
 8001b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c10 <_malloc_r+0xfc>
 8001b3e:	f000 f869 	bl	8001c14 <__malloc_lock>
 8001b42:	f8d8 3000 	ldr.w	r3, [r8]
 8001b46:	461c      	mov	r4, r3
 8001b48:	bb44      	cbnz	r4, 8001b9c <_malloc_r+0x88>
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	4630      	mov	r0, r6
 8001b4e:	f7ff ffbf 	bl	8001ad0 <sbrk_aligned>
 8001b52:	1c43      	adds	r3, r0, #1
 8001b54:	4604      	mov	r4, r0
 8001b56:	d158      	bne.n	8001c0a <_malloc_r+0xf6>
 8001b58:	f8d8 4000 	ldr.w	r4, [r8]
 8001b5c:	4627      	mov	r7, r4
 8001b5e:	2f00      	cmp	r7, #0
 8001b60:	d143      	bne.n	8001bea <_malloc_r+0xd6>
 8001b62:	2c00      	cmp	r4, #0
 8001b64:	d04b      	beq.n	8001bfe <_malloc_r+0xea>
 8001b66:	6823      	ldr	r3, [r4, #0]
 8001b68:	4639      	mov	r1, r7
 8001b6a:	4630      	mov	r0, r6
 8001b6c:	eb04 0903 	add.w	r9, r4, r3
 8001b70:	f000 f98c 	bl	8001e8c <_sbrk_r>
 8001b74:	4581      	cmp	r9, r0
 8001b76:	d142      	bne.n	8001bfe <_malloc_r+0xea>
 8001b78:	6821      	ldr	r1, [r4, #0]
 8001b7a:	1a6d      	subs	r5, r5, r1
 8001b7c:	4629      	mov	r1, r5
 8001b7e:	4630      	mov	r0, r6
 8001b80:	f7ff ffa6 	bl	8001ad0 <sbrk_aligned>
 8001b84:	3001      	adds	r0, #1
 8001b86:	d03a      	beq.n	8001bfe <_malloc_r+0xea>
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	442b      	add	r3, r5
 8001b8c:	6023      	str	r3, [r4, #0]
 8001b8e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	bb62      	cbnz	r2, 8001bf0 <_malloc_r+0xdc>
 8001b96:	f8c8 7000 	str.w	r7, [r8]
 8001b9a:	e00f      	b.n	8001bbc <_malloc_r+0xa8>
 8001b9c:	6822      	ldr	r2, [r4, #0]
 8001b9e:	1b52      	subs	r2, r2, r5
 8001ba0:	d420      	bmi.n	8001be4 <_malloc_r+0xd0>
 8001ba2:	2a0b      	cmp	r2, #11
 8001ba4:	d917      	bls.n	8001bd6 <_malloc_r+0xc2>
 8001ba6:	1961      	adds	r1, r4, r5
 8001ba8:	42a3      	cmp	r3, r4
 8001baa:	6025      	str	r5, [r4, #0]
 8001bac:	bf18      	it	ne
 8001bae:	6059      	strne	r1, [r3, #4]
 8001bb0:	6863      	ldr	r3, [r4, #4]
 8001bb2:	bf08      	it	eq
 8001bb4:	f8c8 1000 	streq.w	r1, [r8]
 8001bb8:	5162      	str	r2, [r4, r5]
 8001bba:	604b      	str	r3, [r1, #4]
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f000 f82f 	bl	8001c20 <__malloc_unlock>
 8001bc2:	f104 000b 	add.w	r0, r4, #11
 8001bc6:	1d23      	adds	r3, r4, #4
 8001bc8:	f020 0007 	bic.w	r0, r0, #7
 8001bcc:	1ac2      	subs	r2, r0, r3
 8001bce:	bf1c      	itt	ne
 8001bd0:	1a1b      	subne	r3, r3, r0
 8001bd2:	50a3      	strne	r3, [r4, r2]
 8001bd4:	e7af      	b.n	8001b36 <_malloc_r+0x22>
 8001bd6:	6862      	ldr	r2, [r4, #4]
 8001bd8:	42a3      	cmp	r3, r4
 8001bda:	bf0c      	ite	eq
 8001bdc:	f8c8 2000 	streq.w	r2, [r8]
 8001be0:	605a      	strne	r2, [r3, #4]
 8001be2:	e7eb      	b.n	8001bbc <_malloc_r+0xa8>
 8001be4:	4623      	mov	r3, r4
 8001be6:	6864      	ldr	r4, [r4, #4]
 8001be8:	e7ae      	b.n	8001b48 <_malloc_r+0x34>
 8001bea:	463c      	mov	r4, r7
 8001bec:	687f      	ldr	r7, [r7, #4]
 8001bee:	e7b6      	b.n	8001b5e <_malloc_r+0x4a>
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	42a3      	cmp	r3, r4
 8001bf6:	d1fb      	bne.n	8001bf0 <_malloc_r+0xdc>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6053      	str	r3, [r2, #4]
 8001bfc:	e7de      	b.n	8001bbc <_malloc_r+0xa8>
 8001bfe:	230c      	movs	r3, #12
 8001c00:	6033      	str	r3, [r6, #0]
 8001c02:	4630      	mov	r0, r6
 8001c04:	f000 f80c 	bl	8001c20 <__malloc_unlock>
 8001c08:	e794      	b.n	8001b34 <_malloc_r+0x20>
 8001c0a:	6005      	str	r5, [r0, #0]
 8001c0c:	e7d6      	b.n	8001bbc <_malloc_r+0xa8>
 8001c0e:	bf00      	nop
 8001c10:	2000045c 	.word	0x2000045c

08001c14 <__malloc_lock>:
 8001c14:	4801      	ldr	r0, [pc, #4]	@ (8001c1c <__malloc_lock+0x8>)
 8001c16:	f7ff bf0e 	b.w	8001a36 <__retarget_lock_acquire_recursive>
 8001c1a:	bf00      	nop
 8001c1c:	20000454 	.word	0x20000454

08001c20 <__malloc_unlock>:
 8001c20:	4801      	ldr	r0, [pc, #4]	@ (8001c28 <__malloc_unlock+0x8>)
 8001c22:	f7ff bf09 	b.w	8001a38 <__retarget_lock_release_recursive>
 8001c26:	bf00      	nop
 8001c28:	20000454 	.word	0x20000454

08001c2c <__sflush_r>:
 8001c2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c34:	0716      	lsls	r6, r2, #28
 8001c36:	4605      	mov	r5, r0
 8001c38:	460c      	mov	r4, r1
 8001c3a:	d454      	bmi.n	8001ce6 <__sflush_r+0xba>
 8001c3c:	684b      	ldr	r3, [r1, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	dc02      	bgt.n	8001c48 <__sflush_r+0x1c>
 8001c42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	dd48      	ble.n	8001cda <__sflush_r+0xae>
 8001c48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c4a:	2e00      	cmp	r6, #0
 8001c4c:	d045      	beq.n	8001cda <__sflush_r+0xae>
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c54:	682f      	ldr	r7, [r5, #0]
 8001c56:	6a21      	ldr	r1, [r4, #32]
 8001c58:	602b      	str	r3, [r5, #0]
 8001c5a:	d030      	beq.n	8001cbe <__sflush_r+0x92>
 8001c5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c5e:	89a3      	ldrh	r3, [r4, #12]
 8001c60:	0759      	lsls	r1, r3, #29
 8001c62:	d505      	bpl.n	8001c70 <__sflush_r+0x44>
 8001c64:	6863      	ldr	r3, [r4, #4]
 8001c66:	1ad2      	subs	r2, r2, r3
 8001c68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c6a:	b10b      	cbz	r3, 8001c70 <__sflush_r+0x44>
 8001c6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c6e:	1ad2      	subs	r2, r2, r3
 8001c70:	2300      	movs	r3, #0
 8001c72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c74:	6a21      	ldr	r1, [r4, #32]
 8001c76:	4628      	mov	r0, r5
 8001c78:	47b0      	blx	r6
 8001c7a:	1c43      	adds	r3, r0, #1
 8001c7c:	89a3      	ldrh	r3, [r4, #12]
 8001c7e:	d106      	bne.n	8001c8e <__sflush_r+0x62>
 8001c80:	6829      	ldr	r1, [r5, #0]
 8001c82:	291d      	cmp	r1, #29
 8001c84:	d82b      	bhi.n	8001cde <__sflush_r+0xb2>
 8001c86:	4a2a      	ldr	r2, [pc, #168]	@ (8001d30 <__sflush_r+0x104>)
 8001c88:	40ca      	lsrs	r2, r1
 8001c8a:	07d6      	lsls	r6, r2, #31
 8001c8c:	d527      	bpl.n	8001cde <__sflush_r+0xb2>
 8001c8e:	2200      	movs	r2, #0
 8001c90:	6062      	str	r2, [r4, #4]
 8001c92:	04d9      	lsls	r1, r3, #19
 8001c94:	6922      	ldr	r2, [r4, #16]
 8001c96:	6022      	str	r2, [r4, #0]
 8001c98:	d504      	bpl.n	8001ca4 <__sflush_r+0x78>
 8001c9a:	1c42      	adds	r2, r0, #1
 8001c9c:	d101      	bne.n	8001ca2 <__sflush_r+0x76>
 8001c9e:	682b      	ldr	r3, [r5, #0]
 8001ca0:	b903      	cbnz	r3, 8001ca4 <__sflush_r+0x78>
 8001ca2:	6560      	str	r0, [r4, #84]	@ 0x54
 8001ca4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001ca6:	602f      	str	r7, [r5, #0]
 8001ca8:	b1b9      	cbz	r1, 8001cda <__sflush_r+0xae>
 8001caa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cae:	4299      	cmp	r1, r3
 8001cb0:	d002      	beq.n	8001cb8 <__sflush_r+0x8c>
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f7ff fec2 	bl	8001a3c <_free_r>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	6363      	str	r3, [r4, #52]	@ 0x34
 8001cbc:	e00d      	b.n	8001cda <__sflush_r+0xae>
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	4628      	mov	r0, r5
 8001cc2:	47b0      	blx	r6
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	1c50      	adds	r0, r2, #1
 8001cc8:	d1c9      	bne.n	8001c5e <__sflush_r+0x32>
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0c6      	beq.n	8001c5e <__sflush_r+0x32>
 8001cd0:	2b1d      	cmp	r3, #29
 8001cd2:	d001      	beq.n	8001cd8 <__sflush_r+0xac>
 8001cd4:	2b16      	cmp	r3, #22
 8001cd6:	d11e      	bne.n	8001d16 <__sflush_r+0xea>
 8001cd8:	602f      	str	r7, [r5, #0]
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e022      	b.n	8001d24 <__sflush_r+0xf8>
 8001cde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ce2:	b21b      	sxth	r3, r3
 8001ce4:	e01b      	b.n	8001d1e <__sflush_r+0xf2>
 8001ce6:	690f      	ldr	r7, [r1, #16]
 8001ce8:	2f00      	cmp	r7, #0
 8001cea:	d0f6      	beq.n	8001cda <__sflush_r+0xae>
 8001cec:	0793      	lsls	r3, r2, #30
 8001cee:	680e      	ldr	r6, [r1, #0]
 8001cf0:	bf08      	it	eq
 8001cf2:	694b      	ldreq	r3, [r1, #20]
 8001cf4:	600f      	str	r7, [r1, #0]
 8001cf6:	bf18      	it	ne
 8001cf8:	2300      	movne	r3, #0
 8001cfa:	eba6 0807 	sub.w	r8, r6, r7
 8001cfe:	608b      	str	r3, [r1, #8]
 8001d00:	f1b8 0f00 	cmp.w	r8, #0
 8001d04:	dde9      	ble.n	8001cda <__sflush_r+0xae>
 8001d06:	6a21      	ldr	r1, [r4, #32]
 8001d08:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001d0a:	4643      	mov	r3, r8
 8001d0c:	463a      	mov	r2, r7
 8001d0e:	4628      	mov	r0, r5
 8001d10:	47b0      	blx	r6
 8001d12:	2800      	cmp	r0, #0
 8001d14:	dc08      	bgt.n	8001d28 <__sflush_r+0xfc>
 8001d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d1e:	81a3      	strh	r3, [r4, #12]
 8001d20:	f04f 30ff 	mov.w	r0, #4294967295
 8001d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d28:	4407      	add	r7, r0
 8001d2a:	eba8 0800 	sub.w	r8, r8, r0
 8001d2e:	e7e7      	b.n	8001d00 <__sflush_r+0xd4>
 8001d30:	20400001 	.word	0x20400001

08001d34 <_fflush_r>:
 8001d34:	b538      	push	{r3, r4, r5, lr}
 8001d36:	690b      	ldr	r3, [r1, #16]
 8001d38:	4605      	mov	r5, r0
 8001d3a:	460c      	mov	r4, r1
 8001d3c:	b913      	cbnz	r3, 8001d44 <_fflush_r+0x10>
 8001d3e:	2500      	movs	r5, #0
 8001d40:	4628      	mov	r0, r5
 8001d42:	bd38      	pop	{r3, r4, r5, pc}
 8001d44:	b118      	cbz	r0, 8001d4e <_fflush_r+0x1a>
 8001d46:	6a03      	ldr	r3, [r0, #32]
 8001d48:	b90b      	cbnz	r3, 8001d4e <_fflush_r+0x1a>
 8001d4a:	f7ff fc8f 	bl	800166c <__sinit>
 8001d4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f3      	beq.n	8001d3e <_fflush_r+0xa>
 8001d56:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d58:	07d0      	lsls	r0, r2, #31
 8001d5a:	d404      	bmi.n	8001d66 <_fflush_r+0x32>
 8001d5c:	0599      	lsls	r1, r3, #22
 8001d5e:	d402      	bmi.n	8001d66 <_fflush_r+0x32>
 8001d60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d62:	f7ff fe68 	bl	8001a36 <__retarget_lock_acquire_recursive>
 8001d66:	4628      	mov	r0, r5
 8001d68:	4621      	mov	r1, r4
 8001d6a:	f7ff ff5f 	bl	8001c2c <__sflush_r>
 8001d6e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d70:	07da      	lsls	r2, r3, #31
 8001d72:	4605      	mov	r5, r0
 8001d74:	d4e4      	bmi.n	8001d40 <_fflush_r+0xc>
 8001d76:	89a3      	ldrh	r3, [r4, #12]
 8001d78:	059b      	lsls	r3, r3, #22
 8001d7a:	d4e1      	bmi.n	8001d40 <_fflush_r+0xc>
 8001d7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d7e:	f7ff fe5b 	bl	8001a38 <__retarget_lock_release_recursive>
 8001d82:	e7dd      	b.n	8001d40 <_fflush_r+0xc>

08001d84 <__swhatbuf_r>:
 8001d84:	b570      	push	{r4, r5, r6, lr}
 8001d86:	460c      	mov	r4, r1
 8001d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d8c:	2900      	cmp	r1, #0
 8001d8e:	b096      	sub	sp, #88	@ 0x58
 8001d90:	4615      	mov	r5, r2
 8001d92:	461e      	mov	r6, r3
 8001d94:	da0d      	bge.n	8001db2 <__swhatbuf_r+0x2e>
 8001d96:	89a3      	ldrh	r3, [r4, #12]
 8001d98:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2340      	movne	r3, #64	@ 0x40
 8001da4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001da8:	2000      	movs	r0, #0
 8001daa:	6031      	str	r1, [r6, #0]
 8001dac:	602b      	str	r3, [r5, #0]
 8001dae:	b016      	add	sp, #88	@ 0x58
 8001db0:	bd70      	pop	{r4, r5, r6, pc}
 8001db2:	466a      	mov	r2, sp
 8001db4:	f000 f848 	bl	8001e48 <_fstat_r>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	dbec      	blt.n	8001d96 <__swhatbuf_r+0x12>
 8001dbc:	9901      	ldr	r1, [sp, #4]
 8001dbe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001dc2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001dc6:	4259      	negs	r1, r3
 8001dc8:	4159      	adcs	r1, r3
 8001dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dce:	e7eb      	b.n	8001da8 <__swhatbuf_r+0x24>

08001dd0 <__smakebuf_r>:
 8001dd0:	898b      	ldrh	r3, [r1, #12]
 8001dd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001dd4:	079d      	lsls	r5, r3, #30
 8001dd6:	4606      	mov	r6, r0
 8001dd8:	460c      	mov	r4, r1
 8001dda:	d507      	bpl.n	8001dec <__smakebuf_r+0x1c>
 8001ddc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001de0:	6023      	str	r3, [r4, #0]
 8001de2:	6123      	str	r3, [r4, #16]
 8001de4:	2301      	movs	r3, #1
 8001de6:	6163      	str	r3, [r4, #20]
 8001de8:	b003      	add	sp, #12
 8001dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dec:	ab01      	add	r3, sp, #4
 8001dee:	466a      	mov	r2, sp
 8001df0:	f7ff ffc8 	bl	8001d84 <__swhatbuf_r>
 8001df4:	9f00      	ldr	r7, [sp, #0]
 8001df6:	4605      	mov	r5, r0
 8001df8:	4639      	mov	r1, r7
 8001dfa:	4630      	mov	r0, r6
 8001dfc:	f7ff fe8a 	bl	8001b14 <_malloc_r>
 8001e00:	b948      	cbnz	r0, 8001e16 <__smakebuf_r+0x46>
 8001e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e06:	059a      	lsls	r2, r3, #22
 8001e08:	d4ee      	bmi.n	8001de8 <__smakebuf_r+0x18>
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0302 	orr.w	r3, r3, #2
 8001e12:	81a3      	strh	r3, [r4, #12]
 8001e14:	e7e2      	b.n	8001ddc <__smakebuf_r+0xc>
 8001e16:	89a3      	ldrh	r3, [r4, #12]
 8001e18:	6020      	str	r0, [r4, #0]
 8001e1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e1e:	81a3      	strh	r3, [r4, #12]
 8001e20:	9b01      	ldr	r3, [sp, #4]
 8001e22:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e26:	b15b      	cbz	r3, 8001e40 <__smakebuf_r+0x70>
 8001e28:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e2c:	4630      	mov	r0, r6
 8001e2e:	f000 f81d 	bl	8001e6c <_isatty_r>
 8001e32:	b128      	cbz	r0, 8001e40 <__smakebuf_r+0x70>
 8001e34:	89a3      	ldrh	r3, [r4, #12]
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	89a3      	ldrh	r3, [r4, #12]
 8001e42:	431d      	orrs	r5, r3
 8001e44:	81a5      	strh	r5, [r4, #12]
 8001e46:	e7cf      	b.n	8001de8 <__smakebuf_r+0x18>

08001e48 <_fstat_r>:
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	4d07      	ldr	r5, [pc, #28]	@ (8001e68 <_fstat_r+0x20>)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	4604      	mov	r4, r0
 8001e50:	4608      	mov	r0, r1
 8001e52:	4611      	mov	r1, r2
 8001e54:	602b      	str	r3, [r5, #0]
 8001e56:	f7ff f9fa 	bl	800124e <_fstat>
 8001e5a:	1c43      	adds	r3, r0, #1
 8001e5c:	d102      	bne.n	8001e64 <_fstat_r+0x1c>
 8001e5e:	682b      	ldr	r3, [r5, #0]
 8001e60:	b103      	cbz	r3, 8001e64 <_fstat_r+0x1c>
 8001e62:	6023      	str	r3, [r4, #0]
 8001e64:	bd38      	pop	{r3, r4, r5, pc}
 8001e66:	bf00      	nop
 8001e68:	20000450 	.word	0x20000450

08001e6c <_isatty_r>:
 8001e6c:	b538      	push	{r3, r4, r5, lr}
 8001e6e:	4d06      	ldr	r5, [pc, #24]	@ (8001e88 <_isatty_r+0x1c>)
 8001e70:	2300      	movs	r3, #0
 8001e72:	4604      	mov	r4, r0
 8001e74:	4608      	mov	r0, r1
 8001e76:	602b      	str	r3, [r5, #0]
 8001e78:	f7ff fb4e 	bl	8001518 <_isatty>
 8001e7c:	1c43      	adds	r3, r0, #1
 8001e7e:	d102      	bne.n	8001e86 <_isatty_r+0x1a>
 8001e80:	682b      	ldr	r3, [r5, #0]
 8001e82:	b103      	cbz	r3, 8001e86 <_isatty_r+0x1a>
 8001e84:	6023      	str	r3, [r4, #0]
 8001e86:	bd38      	pop	{r3, r4, r5, pc}
 8001e88:	20000450 	.word	0x20000450

08001e8c <_sbrk_r>:
 8001e8c:	b538      	push	{r3, r4, r5, lr}
 8001e8e:	4d06      	ldr	r5, [pc, #24]	@ (8001ea8 <_sbrk_r+0x1c>)
 8001e90:	2300      	movs	r3, #0
 8001e92:	4604      	mov	r4, r0
 8001e94:	4608      	mov	r0, r1
 8001e96:	602b      	str	r3, [r5, #0]
 8001e98:	f7ff f860 	bl	8000f5c <_sbrk>
 8001e9c:	1c43      	adds	r3, r0, #1
 8001e9e:	d102      	bne.n	8001ea6 <_sbrk_r+0x1a>
 8001ea0:	682b      	ldr	r3, [r5, #0]
 8001ea2:	b103      	cbz	r3, 8001ea6 <_sbrk_r+0x1a>
 8001ea4:	6023      	str	r3, [r4, #0]
 8001ea6:	bd38      	pop	{r3, r4, r5, pc}
 8001ea8:	20000450 	.word	0x20000450

08001eac <_init>:
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	bf00      	nop
 8001eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb2:	bc08      	pop	{r3}
 8001eb4:	469e      	mov	lr, r3
 8001eb6:	4770      	bx	lr

08001eb8 <_fini>:
 8001eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eba:	bf00      	nop
 8001ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ebe:	bc08      	pop	{r3}
 8001ec0:	469e      	mov	lr, r3
 8001ec2:	4770      	bx	lr
