
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ea0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002030  08002030  00003030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002088  08002088  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  08002088  08002088  00003088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002090  08002090  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002090  08002090  00003090  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002094  08002094  00003094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08002098  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004060  2**0
                  CONTENTS
 10 .bss          000003a0  20000060  20000060  00004060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000400  20000400  00004060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001acb  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000070e  00000000  00000000  00005b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000208  00000000  00000000  00006270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000170  00000000  00000000  00006478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001742  00000000  00000000  000065e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002b42  00000000  00000000  00007d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000b6b8  00000000  00000000  0000a86c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00015f24  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ee0  00000000  00000000  00015f68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00016e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002018 	.word	0x08002018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002018 	.word	0x08002018

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a90      	ldr	r2, [pc, #576]	@ (80004c0 <GPIO_INIT+0x250>)
 800027e:	4293      	cmp	r3, r2
 8000280:	d106      	bne.n	8000290 <GPIO_INIT+0x20>
		GPIOA_EN();
 8000282:	4b90      	ldr	r3, [pc, #576]	@ (80004c4 <GPIO_INIT+0x254>)
 8000284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000286:	4a8f      	ldr	r2, [pc, #572]	@ (80004c4 <GPIO_INIT+0x254>)
 8000288:	f043 0301 	orr.w	r3, r3, #1
 800028c:	6313      	str	r3, [r2, #48]	@ 0x30
 800028e:	e05e      	b.n	800034e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a8c      	ldr	r2, [pc, #560]	@ (80004c8 <GPIO_INIT+0x258>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIO_INIT+0x38>
		GPIOB_EN();
 800029a:	4b8a      	ldr	r3, [pc, #552]	@ (80004c4 <GPIO_INIT+0x254>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800029e:	4a89      	ldr	r2, [pc, #548]	@ (80004c4 <GPIO_INIT+0x254>)
 80002a0:	f043 0302 	orr.w	r3, r3, #2
 80002a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002a6:	e052      	b.n	800034e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a87      	ldr	r2, [pc, #540]	@ (80004cc <GPIO_INIT+0x25c>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_INIT+0x50>
		GPIOC_EN();
 80002b2:	4b84      	ldr	r3, [pc, #528]	@ (80004c4 <GPIO_INIT+0x254>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b6:	4a83      	ldr	r2, [pc, #524]	@ (80004c4 <GPIO_INIT+0x254>)
 80002b8:	f043 0304 	orr.w	r3, r3, #4
 80002bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80002be:	e046      	b.n	800034e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a82      	ldr	r2, [pc, #520]	@ (80004d0 <GPIO_INIT+0x260>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_INIT+0x68>
		GPIOD_EN();
 80002ca:	4b7e      	ldr	r3, [pc, #504]	@ (80004c4 <GPIO_INIT+0x254>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ce:	4a7d      	ldr	r2, [pc, #500]	@ (80004c4 <GPIO_INIT+0x254>)
 80002d0:	f043 0308 	orr.w	r3, r3, #8
 80002d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80002d6:	e03a      	b.n	800034e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a7d      	ldr	r2, [pc, #500]	@ (80004d4 <GPIO_INIT+0x264>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_INIT+0x80>
		GPIOE_EN();
 80002e2:	4b78      	ldr	r3, [pc, #480]	@ (80004c4 <GPIO_INIT+0x254>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e6:	4a77      	ldr	r2, [pc, #476]	@ (80004c4 <GPIO_INIT+0x254>)
 80002e8:	f043 0310 	orr.w	r3, r3, #16
 80002ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ee:	e02e      	b.n	800034e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a78      	ldr	r2, [pc, #480]	@ (80004d8 <GPIO_INIT+0x268>)
 80002f6:	4293      	cmp	r3, r2
 80002f8:	d106      	bne.n	8000308 <GPIO_INIT+0x98>
		GPIOF_EN();
 80002fa:	4b72      	ldr	r3, [pc, #456]	@ (80004c4 <GPIO_INIT+0x254>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002fe:	4a71      	ldr	r2, [pc, #452]	@ (80004c4 <GPIO_INIT+0x254>)
 8000300:	f043 0320 	orr.w	r3, r3, #32
 8000304:	6313      	str	r3, [r2, #48]	@ 0x30
 8000306:	e022      	b.n	800034e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a73      	ldr	r2, [pc, #460]	@ (80004dc <GPIO_INIT+0x26c>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000312:	4b6c      	ldr	r3, [pc, #432]	@ (80004c4 <GPIO_INIT+0x254>)
 8000314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000316:	4a6b      	ldr	r2, [pc, #428]	@ (80004c4 <GPIO_INIT+0x254>)
 8000318:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800031c:	6313      	str	r3, [r2, #48]	@ 0x30
 800031e:	e016      	b.n	800034e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a6e      	ldr	r2, [pc, #440]	@ (80004e0 <GPIO_INIT+0x270>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_INIT+0xc8>
		GPIOH_EN();
 800032a:	4b66      	ldr	r3, [pc, #408]	@ (80004c4 <GPIO_INIT+0x254>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800032e:	4a65      	ldr	r2, [pc, #404]	@ (80004c4 <GPIO_INIT+0x254>)
 8000330:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000334:	6313      	str	r3, [r2, #48]	@ 0x30
 8000336:	e00a      	b.n	800034e <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	4a69      	ldr	r2, [pc, #420]	@ (80004e4 <GPIO_INIT+0x274>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d105      	bne.n	800034e <GPIO_INIT+0xde>
		GPIOI_EN();
 8000342:	4b60      	ldr	r3, [pc, #384]	@ (80004c4 <GPIO_INIT+0x254>)
 8000344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000346:	4a5f      	ldr	r2, [pc, #380]	@ (80004c4 <GPIO_INIT+0x254>)
 8000348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800034c:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	791b      	ldrb	r3, [r3, #4]
 8000358:	005b      	lsls	r3, r3, #1
 800035a:	2103      	movs	r1, #3
 800035c:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000360:	43db      	mvns	r3, r3
 8000362:	4619      	mov	r1, r3
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	400a      	ands	r2, r1
 800036a:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	791b      	ldrb	r3, [r3, #4]
 8000376:	005b      	lsls	r3, r3, #1
 8000378:	2103      	movs	r1, #3
 800037a:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 800037e:	43db      	mvns	r3, r3
 8000380:	4619      	mov	r1, r3
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	400a      	ands	r2, r1
 8000388:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	68da      	ldr	r2, [r3, #12]
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	799b      	ldrb	r3, [r3, #6]
 8000394:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	791b      	ldrb	r3, [r3, #4]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	430a      	orrs	r2, r1
 80003a8:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	795b      	ldrb	r3, [r3, #5]
 80003ae:	2b02      	cmp	r3, #2
 80003b0:	f200 809a 	bhi.w	80004e8 <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	795b      	ldrb	r3, [r3, #5]
 80003be:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	791b      	ldrb	r3, [r3, #4]
 80003c4:	005b      	lsls	r3, r3, #1
 80003c6:	fa01 f303 	lsl.w	r3, r1, r3
 80003ca:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	430a      	orrs	r2, r1
 80003d2:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	791b      	ldrb	r3, [r3, #4]
 80003de:	4619      	mov	r1, r3
 80003e0:	2303      	movs	r3, #3
 80003e2:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80003e4:	43db      	mvns	r3, r3
 80003e6:	4619      	mov	r1, r3
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	400a      	ands	r2, r1
 80003ee:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	685a      	ldr	r2, [r3, #4]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	7a1b      	ldrb	r3, [r3, #8]
 80003fa:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	430a      	orrs	r2, r1
 800040c:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	791b      	ldrb	r3, [r3, #4]
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	2103      	movs	r1, #3
 800041c:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000420:	43db      	mvns	r3, r3
 8000422:	4619      	mov	r1, r3
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	400a      	ands	r2, r1
 800042a:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	689a      	ldr	r2, [r3, #8]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	79db      	ldrb	r3, [r3, #7]
 8000436:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	791b      	ldrb	r3, [r3, #4]
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	fa01 f303 	lsl.w	r3, r1, r3
 8000442:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	430a      	orrs	r2, r1
 800044a:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	795b      	ldrb	r3, [r3, #5]
 8000450:	2b02      	cmp	r3, #2
 8000452:	f040 80ec 	bne.w	800062e <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 800045a:	08db      	lsrs	r3, r3, #3
 800045c:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	791b      	ldrb	r3, [r3, #4]
 8000462:	f003 0307 	and.w	r3, r3, #7
 8000466:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	7b7a      	ldrb	r2, [r7, #13]
 800046e:	3208      	adds	r2, #8
 8000470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	791b      	ldrb	r3, [r3, #4]
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	2203      	movs	r2, #3
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000480:	43db      	mvns	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	7b7a      	ldrb	r2, [r7, #13]
 800048a:	4001      	ands	r1, r0
 800048c:	3208      	adds	r2, #8
 800048e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	7b7a      	ldrb	r2, [r7, #13]
 8000498:	3208      	adds	r2, #8
 800049a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7a5b      	ldrb	r3, [r3, #9]
 80004a2:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 80004a4:	7b3b      	ldrb	r3, [r7, #12]
 80004a6:	009b      	lsls	r3, r3, #2
 80004a8:	fa02 f303 	lsl.w	r3, r2, r3
 80004ac:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	7b7a      	ldrb	r2, [r7, #13]
 80004b4:	4301      	orrs	r1, r0
 80004b6:	3208      	adds	r2, #8
 80004b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 80004bc:	e0b7      	b.n	800062e <GPIO_INIT+0x3be>
 80004be:	bf00      	nop
 80004c0:	40020000 	.word	0x40020000
 80004c4:	40023800 	.word	0x40023800
 80004c8:	40020400 	.word	0x40020400
 80004cc:	40020800 	.word	0x40020800
 80004d0:	40020c00 	.word	0x40020c00
 80004d4:	40021000 	.word	0x40021000
 80004d8:	40021400 	.word	0x40021400
 80004dc:	40021800 	.word	0x40021800
 80004e0:	40021c00 	.word	0x40021c00
 80004e4:	40022000 	.word	0x40022000
		SYSCFG_EN();
 80004e8:	4b54      	ldr	r3, [pc, #336]	@ (800063c <GPIO_INIT+0x3cc>)
 80004ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004ec:	4a53      	ldr	r2, [pc, #332]	@ (800063c <GPIO_INIT+0x3cc>)
 80004ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004f2:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	795b      	ldrb	r3, [r3, #5]
 80004f8:	2b06      	cmp	r3, #6
 80004fa:	d12e      	bne.n	800055a <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80004fc:	4b50      	ldr	r3, [pc, #320]	@ (8000640 <GPIO_INIT+0x3d0>)
 80004fe:	689b      	ldr	r3, [r3, #8]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	7912      	ldrb	r2, [r2, #4]
 8000504:	4611      	mov	r1, r2
 8000506:	2201      	movs	r2, #1
 8000508:	408a      	lsls	r2, r1
 800050a:	43d2      	mvns	r2, r2
 800050c:	4611      	mov	r1, r2
 800050e:	4a4c      	ldr	r2, [pc, #304]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000510:	400b      	ands	r3, r1
 8000512:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000514:	4b4a      	ldr	r3, [pc, #296]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	7912      	ldrb	r2, [r2, #4]
 800051c:	4611      	mov	r1, r2
 800051e:	2201      	movs	r2, #1
 8000520:	408a      	lsls	r2, r1
 8000522:	43d2      	mvns	r2, r2
 8000524:	4611      	mov	r1, r2
 8000526:	4a46      	ldr	r2, [pc, #280]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000528:	400b      	ands	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 800052c:	4b44      	ldr	r3, [pc, #272]	@ (8000640 <GPIO_INIT+0x3d0>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a40      	ldr	r2, [pc, #256]	@ (8000640 <GPIO_INIT+0x3d0>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000542:	4b3f      	ldr	r3, [pc, #252]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	4611      	mov	r1, r2
 8000552:	4a3b      	ldr	r2, [pc, #236]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000554:	430b      	orrs	r3, r1
 8000556:	60d3      	str	r3, [r2, #12]
 8000558:	e036      	b.n	80005c8 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	2b05      	cmp	r3, #5
 8000560:	d117      	bne.n	8000592 <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000562:	4b37      	ldr	r3, [pc, #220]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	43d2      	mvns	r2, r2
 8000572:	4611      	mov	r1, r2
 8000574:	4a32      	ldr	r2, [pc, #200]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000576:	400b      	ands	r3, r1
 8000578:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 800057a:	4b31      	ldr	r3, [pc, #196]	@ (8000640 <GPIO_INIT+0x3d0>)
 800057c:	68db      	ldr	r3, [r3, #12]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	7912      	ldrb	r2, [r2, #4]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	4611      	mov	r1, r2
 800058a:	4a2d      	ldr	r2, [pc, #180]	@ (8000640 <GPIO_INIT+0x3d0>)
 800058c:	430b      	orrs	r3, r1
 800058e:	60d3      	str	r3, [r2, #12]
 8000590:	e01a      	b.n	80005c8 <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	795b      	ldrb	r3, [r3, #5]
 8000596:	2b04      	cmp	r3, #4
 8000598:	d116      	bne.n	80005c8 <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 800059a:	4b29      	ldr	r3, [pc, #164]	@ (8000640 <GPIO_INIT+0x3d0>)
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	43d2      	mvns	r2, r2
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a24      	ldr	r2, [pc, #144]	@ (8000640 <GPIO_INIT+0x3d0>)
 80005ae:	400b      	ands	r3, r1
 80005b0:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 80005b2:	4b23      	ldr	r3, [pc, #140]	@ (8000640 <GPIO_INIT+0x3d0>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a1f      	ldr	r2, [pc, #124]	@ (8000640 <GPIO_INIT+0x3d0>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	791b      	ldrb	r3, [r3, #4]
 80005cc:	089b      	lsrs	r3, r3, #2
 80005ce:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	791b      	ldrb	r3, [r3, #4]
 80005d4:	f003 0303 	and.w	r3, r3, #3
 80005d8:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 80005da:	4a1a      	ldr	r2, [pc, #104]	@ (8000644 <GPIO_INIT+0x3d4>)
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	3302      	adds	r3, #2
 80005e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	7a9b      	ldrb	r3, [r3, #10]
 80005e8:	4619      	mov	r1, r3
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	fa01 f303 	lsl.w	r3, r1, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	4913      	ldr	r1, [pc, #76]	@ (8000644 <GPIO_INIT+0x3d4>)
 80005f6:	7bfb      	ldrb	r3, [r7, #15]
 80005f8:	4302      	orrs	r2, r0
 80005fa:	3302      	adds	r3, #2
 80005fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	687a      	ldr	r2, [r7, #4]
 8000606:	7912      	ldrb	r2, [r2, #4]
 8000608:	4611      	mov	r1, r2
 800060a:	2201      	movs	r2, #1
 800060c:	408a      	lsls	r2, r1
 800060e:	43d2      	mvns	r2, r2
 8000610:	4611      	mov	r1, r2
 8000612:	4a0b      	ldr	r2, [pc, #44]	@ (8000640 <GPIO_INIT+0x3d0>)
 8000614:	400b      	ands	r3, r1
 8000616:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <GPIO_INIT+0x3d0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	7912      	ldrb	r2, [r2, #4]
 8000620:	4611      	mov	r1, r2
 8000622:	2201      	movs	r2, #1
 8000624:	408a      	lsls	r2, r1
 8000626:	4611      	mov	r1, r2
 8000628:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <GPIO_INIT+0x3d0>)
 800062a:	430b      	orrs	r3, r1
 800062c:	6013      	str	r3, [r2, #0]
}
 800062e:	bf00      	nop
 8000630:	3714      	adds	r7, #20
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800
 8000640:	40013c00 	.word	0x40013c00
 8000644:	40013800 	.word	0x40013800

08000648 <IRQ_Config>:
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 8000648:	b480      	push	{r7}
 800064a:	b087      	sub	sp, #28
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	095b      	lsrs	r3, r3, #5
 800065c:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 800065e:	7dfb      	ldrb	r3, [r7, #23]
 8000660:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 8000662:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8000666:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800066a:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 800066c:	7dfb      	ldrb	r3, [r7, #23]
 800066e:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <IRQ_Config+0x74>)
 8000672:	4413      	add	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	2b01      	cmp	r3, #1
 800067a:	d10b      	bne.n	8000694 <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	79fa      	ldrb	r2, [r7, #7]
 8000682:	f002 021f 	and.w	r2, r2, #31
 8000686:	2101      	movs	r1, #1
 8000688:	fa01 f202 	lsl.w	r2, r1, r2
 800068c:	431a      	orrs	r2, r3
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 8000692:	e00d      	b.n	80006b0 <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d10a      	bne.n	80006b0 <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	f002 021f 	and.w	r2, r2, #31
 80006a4:	2101      	movs	r1, #1
 80006a6:	fa01 f202 	lsl.w	r2, r1, r2
 80006aa:	431a      	orrs	r2, r3
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	601a      	str	r2, [r3, #0]
}
 80006b0:	bf00      	nop
 80006b2:	371c      	adds	r7, #28
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	e000e180 	.word	0xe000e180

080006c0 <GPIO_IRQHandling>:
	*cal_address_IPR |= (priority
			<< (cal_bit * Shift_8_pos + Shift_Upper_Part_4_bits));

}

void GPIO_IRQHandling(uint8_t pinNumber) {
 80006c0:	b480      	push	{r7}
 80006c2:	b083      	sub	sp, #12
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	4603      	mov	r3, r0
 80006c8:	71fb      	strb	r3, [r7, #7]
	if ((EXTI->PR >> pinNumber) & HIGH) {
 80006ca:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <GPIO_IRQHandling+0x3c>)
 80006cc:	695a      	ldr	r2, [r3, #20]
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	fa22 f303 	lsr.w	r3, r2, r3
 80006d4:	f003 0301 	and.w	r3, r3, #1
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d009      	beq.n	80006f0 <GPIO_IRQHandling+0x30>
		EXTI->PR |= (HIGH << pinNumber);
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <GPIO_IRQHandling+0x3c>)
 80006de:	695b      	ldr	r3, [r3, #20]
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a04      	ldr	r2, [pc, #16]	@ (80006fc <GPIO_IRQHandling+0x3c>)
 80006ec:	430b      	orrs	r3, r1
 80006ee:	6153      	str	r3, [r2, #20]
	}
}
 80006f0:	bf00      	nop
 80006f2:	370c      	adds	r7, #12
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	40013c00 	.word	0x40013c00

08000700 <closeSPISend>:
SPI_READY_IT, .rxBuffer = NULL, .rxLen = 0 };

volatile uint8_t txCompl = HIGH;
volatile uint8_t rxCompl = HIGH;

static void closeSPISend(SPI_HandleTypedef *spi_handle) {
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	// Disable interrupt TX flag
	spi_handle->SPIx->CR2 &= ~(HIGH << Shift_7_pos);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	685a      	ldr	r2, [r3, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000716:	605a      	str	r2, [r3, #4]
	spi_handle->SPIx->CR2 &= ~(HIGH << Shift_5_pos);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	685a      	ldr	r2, [r3, #4]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f022 0220 	bic.w	r2, r2, #32
 8000726:	605a      	str	r2, [r3, #4]
	spi_handleIT.TxRxState = SPI_READY_IT;
 8000728:	4b08      	ldr	r3, [pc, #32]	@ (800074c <closeSPISend+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	741a      	strb	r2, [r3, #16]
	spi_handleIT.txLen = 0;
 800072e:	4b07      	ldr	r3, [pc, #28]	@ (800074c <closeSPISend+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
	spi_handleIT.txBuffer = NULL;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <closeSPISend+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
	txCompl = HIGH;
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <closeSPISend+0x50>)
 800073c:	2201      	movs	r2, #1
 800073e:	701a      	strb	r2, [r3, #0]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	2000007c 	.word	0x2000007c
 8000750:	20000000 	.word	0x20000000

08000754 <closeSPIRecev>:

static void closeSPIRecev(SPI_HandleTypedef *spi_handle) {
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	// Disable interrupt RX flag
	spi_handle->SPIx->CR2 &= ~(HIGH << Shift_6_pos);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	685a      	ldr	r2, [r3, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800076a:	605a      	str	r2, [r3, #4]
	spi_handle->SPIx->CR2 &= ~(HIGH << Shift_5_pos);
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f022 0220 	bic.w	r2, r2, #32
 800077a:	605a      	str	r2, [r3, #4]
	spi_handleIT.TxRxState = SPI_READY_IT;
 800077c:	4b08      	ldr	r3, [pc, #32]	@ (80007a0 <closeSPIRecev+0x4c>)
 800077e:	2200      	movs	r2, #0
 8000780:	741a      	strb	r2, [r3, #16]
	spi_handleIT.rxLen = 0;
 8000782:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <closeSPIRecev+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
	spi_handleIT.rxBuffer = NULL;
 8000788:	4b05      	ldr	r3, [pc, #20]	@ (80007a0 <closeSPIRecev+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	605a      	str	r2, [r3, #4]
	rxCompl = HIGH;
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <closeSPIRecev+0x50>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]
}
 8000794:	bf00      	nop
 8000796:	370c      	adds	r7, #12
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	2000007c 	.word	0x2000007c
 80007a4:	20000001 	.word	0x20000001

080007a8 <sendDataIT>:

static void sendDataIT(SPI_HandleTypedef *spi_handle) {
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
	if (spi_handleIT.txLen > 0) {
 80007b0:	4b1e      	ldr	r3, [pc, #120]	@ (800082c <sendDataIT+0x84>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d02d      	beq.n	8000814 <sendDataIT+0x6c>
		if (spi_handle->spi_frame_format == SPI_8_BIT_FRAME_FORMAT) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	795b      	ldrb	r3, [r3, #5]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d110      	bne.n	80007e2 <sendDataIT+0x3a>
			spi_handle->SPIx->DR = *spi_handleIT.txBuffer;
 80007c0:	4b1a      	ldr	r3, [pc, #104]	@ (800082c <sendDataIT+0x84>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	781a      	ldrb	r2, [r3, #0]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	60da      	str	r2, [r3, #12]
			spi_handleIT.txBuffer++;
 80007cc:	4b17      	ldr	r3, [pc, #92]	@ (800082c <sendDataIT+0x84>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	3301      	adds	r3, #1
 80007d2:	4a16      	ldr	r2, [pc, #88]	@ (800082c <sendDataIT+0x84>)
 80007d4:	6013      	str	r3, [r2, #0]
			spi_handleIT.txLen--;
 80007d6:	4b15      	ldr	r3, [pc, #84]	@ (800082c <sendDataIT+0x84>)
 80007d8:	689b      	ldr	r3, [r3, #8]
 80007da:	3b01      	subs	r3, #1
 80007dc:	4a13      	ldr	r2, [pc, #76]	@ (800082c <sendDataIT+0x84>)
 80007de:	6093      	str	r3, [r2, #8]
 80007e0:	e018      	b.n	8000814 <sendDataIT+0x6c>
		} else if (spi_handle->spi_frame_format == SPI_16_BIT_FRAME_FORMAT) {
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	795b      	ldrb	r3, [r3, #5]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d114      	bne.n	8000814 <sendDataIT+0x6c>
			spi_handle->SPIx->DR = *(uint16_t*) spi_handleIT.txBuffer;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <sendDataIT+0x84>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	881a      	ldrh	r2, [r3, #0]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	60da      	str	r2, [r3, #12]
			spi_handleIT.txLen--;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <sendDataIT+0x84>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	3b01      	subs	r3, #1
 80007fc:	4a0b      	ldr	r2, [pc, #44]	@ (800082c <sendDataIT+0x84>)
 80007fe:	6093      	str	r3, [r2, #8]
			spi_handleIT.txLen--;
 8000800:	4b0a      	ldr	r3, [pc, #40]	@ (800082c <sendDataIT+0x84>)
 8000802:	689b      	ldr	r3, [r3, #8]
 8000804:	3b01      	subs	r3, #1
 8000806:	4a09      	ldr	r2, [pc, #36]	@ (800082c <sendDataIT+0x84>)
 8000808:	6093      	str	r3, [r2, #8]
			(uint16_t*) spi_handleIT.txBuffer++;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <sendDataIT+0x84>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	4a06      	ldr	r2, [pc, #24]	@ (800082c <sendDataIT+0x84>)
 8000812:	6013      	str	r3, [r2, #0]
		}
	}
	if (spi_handleIT.txLen == 0) {
 8000814:	4b05      	ldr	r3, [pc, #20]	@ (800082c <sendDataIT+0x84>)
 8000816:	689b      	ldr	r3, [r3, #8]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d102      	bne.n	8000822 <sendDataIT+0x7a>
		closeSPISend(spi_handle);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff6f 	bl	8000700 <closeSPISend>
	}
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000007c 	.word	0x2000007c

08000830 <receivDataIT>:

static void receivDataIT(SPI_HandleTypedef *spi_handle) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if (spi_handleIT.rxLen > 0) {
 8000838:	4b1f      	ldr	r3, [pc, #124]	@ (80008b8 <receivDataIT+0x88>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	2b00      	cmp	r3, #0
 800083e:	d02f      	beq.n	80008a0 <receivDataIT+0x70>
		if (spi_handle->spi_frame_format == SPI_8_BIT_FRAME_FORMAT) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	795b      	ldrb	r3, [r3, #5]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d111      	bne.n	800086c <receivDataIT+0x3c>
			*spi_handleIT.rxBuffer = spi_handle->SPIx->DR;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	68da      	ldr	r2, [r3, #12]
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <receivDataIT+0x88>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	b2d2      	uxtb	r2, r2
 8000854:	701a      	strb	r2, [r3, #0]
			spi_handleIT.rxBuffer++;
 8000856:	4b18      	ldr	r3, [pc, #96]	@ (80008b8 <receivDataIT+0x88>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	3301      	adds	r3, #1
 800085c:	4a16      	ldr	r2, [pc, #88]	@ (80008b8 <receivDataIT+0x88>)
 800085e:	6053      	str	r3, [r2, #4]
			spi_handleIT.rxLen--;
 8000860:	4b15      	ldr	r3, [pc, #84]	@ (80008b8 <receivDataIT+0x88>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	3b01      	subs	r3, #1
 8000866:	4a14      	ldr	r2, [pc, #80]	@ (80008b8 <receivDataIT+0x88>)
 8000868:	60d3      	str	r3, [r2, #12]
 800086a:	e019      	b.n	80008a0 <receivDataIT+0x70>
		} else if (spi_handle->spi_frame_format == SPI_16_BIT_FRAME_FORMAT) {
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	795b      	ldrb	r3, [r3, #5]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d115      	bne.n	80008a0 <receivDataIT+0x70>
			*(uint16_t*) spi_handleIT.rxBuffer = spi_handle->SPIx->DR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	68da      	ldr	r2, [r3, #12]
 800087a:	4b0f      	ldr	r3, [pc, #60]	@ (80008b8 <receivDataIT+0x88>)
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	b292      	uxth	r2, r2
 8000880:	801a      	strh	r2, [r3, #0]
			spi_handleIT.rxLen--;
 8000882:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <receivDataIT+0x88>)
 8000884:	68db      	ldr	r3, [r3, #12]
 8000886:	3b01      	subs	r3, #1
 8000888:	4a0b      	ldr	r2, [pc, #44]	@ (80008b8 <receivDataIT+0x88>)
 800088a:	60d3      	str	r3, [r2, #12]
			spi_handleIT.rxLen--;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <receivDataIT+0x88>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	3b01      	subs	r3, #1
 8000892:	4a09      	ldr	r2, [pc, #36]	@ (80008b8 <receivDataIT+0x88>)
 8000894:	60d3      	str	r3, [r2, #12]
			(uint16_t*) spi_handleIT.rxBuffer++;
 8000896:	4b08      	ldr	r3, [pc, #32]	@ (80008b8 <receivDataIT+0x88>)
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	3301      	adds	r3, #1
 800089c:	4a06      	ldr	r2, [pc, #24]	@ (80008b8 <receivDataIT+0x88>)
 800089e:	6053      	str	r3, [r2, #4]
		}
	}
	if (spi_handleIT.rxLen == 0) {
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <receivDataIT+0x88>)
 80008a2:	68db      	ldr	r3, [r3, #12]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <receivDataIT+0x7e>
		closeSPIRecev(spi_handle);
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff ff53 	bl	8000754 <closeSPIRecev>
	}
}
 80008ae:	bf00      	nop
 80008b0:	3708      	adds	r7, #8
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000007c 	.word	0x2000007c

080008bc <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_HandleTypedef *spi_handle, uint8_t flag) {
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
	// Wait until BSY=0
	if ((spi_handle->SPIx->SR >> flag) & 0x1) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	689a      	ldr	r2, [r3, #8]
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	fa22 f303 	lsr.w	r3, r2, r3
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SPI_GetFlagStatus+0x24>
		return HIGH;
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <SPI_GetFlagStatus+0x26>
	}
	return LOW;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr

080008ee <SPI_PERIPHERAL_ENABLE>:

void SPI_PERIPHERAL_ENABLE(SPI_HandleTypedef *spi_handle, uint8_t EN) {
 80008ee:	b480      	push	{r7}
 80008f0:	b083      	sub	sp, #12
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
 80008f6:	460b      	mov	r3, r1
 80008f8:	70fb      	strb	r3, [r7, #3]
	if (EN == HIGH) {
 80008fa:	78fb      	ldrb	r3, [r7, #3]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d108      	bne.n	8000912 <SPI_PERIPHERAL_ENABLE+0x24>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_6_pos);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800090e:	601a      	str	r2, [r3, #0]
	} else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_6_pos);
	}
}
 8000910:	e007      	b.n	8000922 <SPI_PERIPHERAL_ENABLE+0x34>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_6_pos);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000920:	601a      	str	r2, [r3, #0]
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <SPI_SSI_CONFIG>:

void SPI_SSI_CONFIG(SPI_HandleTypedef *spi_handle, uint8_t EN) {
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	70fb      	strb	r3, [r7, #3]
	if (EN == HIGH) {
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d108      	bne.n	8000952 <SPI_SSI_CONFIG+0x24>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_8_pos);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800094e:	601a      	str	r2, [r3, #0]
	} else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_8_pos);
	}
}
 8000950:	e007      	b.n	8000962 <SPI_SSI_CONFIG+0x34>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_8_pos);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000960:	601a      	str	r2, [r3, #0]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
	...

08000970 <SPI_INIT>:

void SPI_INIT(SPI_HandleTypedef *spi_handle) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
	if (spi_handle->SPIx == SPI1) {
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a8a      	ldr	r2, [pc, #552]	@ (8000ba8 <SPI_INIT+0x238>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d106      	bne.n	8000990 <SPI_INIT+0x20>
		SPI1_EN();
 8000982:	4b8a      	ldr	r3, [pc, #552]	@ (8000bac <SPI_INIT+0x23c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000986:	4a89      	ldr	r2, [pc, #548]	@ (8000bac <SPI_INIT+0x23c>)
 8000988:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	e03a      	b.n	8000a06 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI2) {
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a86      	ldr	r2, [pc, #536]	@ (8000bb0 <SPI_INIT+0x240>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d106      	bne.n	80009a8 <SPI_INIT+0x38>
		SPI2_EN();
 800099a:	4b84      	ldr	r3, [pc, #528]	@ (8000bac <SPI_INIT+0x23c>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099e:	4a83      	ldr	r2, [pc, #524]	@ (8000bac <SPI_INIT+0x23c>)
 80009a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a6:	e02e      	b.n	8000a06 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI3) {
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a81      	ldr	r2, [pc, #516]	@ (8000bb4 <SPI_INIT+0x244>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d106      	bne.n	80009c0 <SPI_INIT+0x50>
		SPI3_EN();
 80009b2:	4b7e      	ldr	r3, [pc, #504]	@ (8000bac <SPI_INIT+0x23c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a7d      	ldr	r2, [pc, #500]	@ (8000bac <SPI_INIT+0x23c>)
 80009b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	e022      	b.n	8000a06 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI4) {
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a7c      	ldr	r2, [pc, #496]	@ (8000bb8 <SPI_INIT+0x248>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d106      	bne.n	80009d8 <SPI_INIT+0x68>
		SPI4_EN();
 80009ca:	4b78      	ldr	r3, [pc, #480]	@ (8000bac <SPI_INIT+0x23c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a77      	ldr	r2, [pc, #476]	@ (8000bac <SPI_INIT+0x23c>)
 80009d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d6:	e016      	b.n	8000a06 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI5) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a77      	ldr	r2, [pc, #476]	@ (8000bbc <SPI_INIT+0x24c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d106      	bne.n	80009f0 <SPI_INIT+0x80>
		SPI5_EN();
 80009e2:	4b72      	ldr	r3, [pc, #456]	@ (8000bac <SPI_INIT+0x23c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	4a71      	ldr	r2, [pc, #452]	@ (8000bac <SPI_INIT+0x23c>)
 80009e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80009ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ee:	e00a      	b.n	8000a06 <SPI_INIT+0x96>
	} else if (spi_handle->SPIx == SPI6) {
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a72      	ldr	r2, [pc, #456]	@ (8000bc0 <SPI_INIT+0x250>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d105      	bne.n	8000a06 <SPI_INIT+0x96>
		SPI6_EN();
 80009fa:	4b6c      	ldr	r3, [pc, #432]	@ (8000bac <SPI_INIT+0x23c>)
 80009fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fe:	4a6b      	ldr	r2, [pc, #428]	@ (8000bac <SPI_INIT+0x23c>)
 8000a00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000a04:	6453      	str	r3, [r2, #68]	@ 0x44
	}

	// Master/Slave
	spi_handle->SPIx->CR1 &= ~(HIGH << Shift_2_pos);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f022 0204 	bic.w	r2, r2, #4
 8000a14:	601a      	str	r2, [r3, #0]
	if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	799b      	ldrb	r3, [r3, #6]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d107      	bne.n	8000a2e <SPI_INIT+0xbe>
		spi_handle->SPIx->CR1 |= (HIGH << Shift_2_pos); // Set MSTR bit for master
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f042 0204 	orr.w	r2, r2, #4
 8000a2c:	601a      	str	r2, [r3, #0]
	}

	// Simplex mode RX: we need to configure this because the communication happens only when master produces the clock, the clock happens when MOSI line has the data
	if (spi_handle->spi_data_direction == SPI_SIMPLEX_MODE_RX) {
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	791b      	ldrb	r3, [r3, #4]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d110      	bne.n	8000a58 <SPI_INIT+0xe8>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000a44:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_10_pos);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	e024      	b.n	8000aa2 <SPI_INIT+0x132>
	}
	// Simplex mode TX: just remove the MISO line in full duplex mode

	// Half duplex mode:
	// In master mode, the MOSI pin is used while the MISO pin is used in slave mode.
	else if (spi_handle->spi_data_direction == SPI_HALF_DUPLEX_MODE) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	791b      	ldrb	r3, [r3, #4]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d110      	bne.n	8000a82 <SPI_INIT+0x112>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000a6e:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_15_pos);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	e00f      	b.n	8000aa2 <SPI_INIT+0x132>
	}
	// Full duplex mode or Simplex mode TX
	else {
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_15_pos);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000a90:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_10_pos);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000aa0:	601a      	str	r2, [r3, #0]
	}

	// Configure baud rate
	spi_handle->SPIx->CR1 &= ~(BIT_111_MASK << Shift_3_pos);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8000ab0:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_sclk_prescaler << Shift_3_pos);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	6819      	ldr	r1, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7a9b      	ldrb	r3, [r3, #10]
 8000abc:	00da      	lsls	r2, r3, #3
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]

	// Select data frame
	spi_handle->SPIx->CR1 &= ~(HIGH << Shift_11_pos);
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000ad4:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_frame_format << Shift_11_pos);
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6819      	ldr	r1, [r3, #0]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	795b      	ldrb	r3, [r3, #5]
 8000ae0:	02da      	lsls	r2, r3, #11
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	601a      	str	r2, [r3, #0]

	// Configure CPOL and CPHA
	// CPHA
	spi_handle->SPIx->CR1 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f022 0203 	bic.w	r2, r2, #3
 8000af8:	601a      	str	r2, [r3, #0]
	spi_handle->SPIx->CR1 |= (spi_handle->spi_clock_phase << Shift_0_pos);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681a      	ldr	r2, [r3, #0]
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	7a1b      	ldrb	r3, [r3, #8]
 8000b04:	4619      	mov	r1, r3
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	601a      	str	r2, [r3, #0]

	//CPOL
	spi_handle->SPIx->CR1 |= (spi_handle->spi_clock_polarity << Shift_1_pos);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6819      	ldr	r1, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	79db      	ldrb	r3, [r3, #7]
 8000b18:	005a      	lsls	r2, r3, #1
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	601a      	str	r2, [r3, #0]

	// Software slave management
	// Software
	if (spi_handle->spi_ssm == SPI_SOFTWARE_SLAVE_EN) {
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	7a5b      	ldrb	r3, [r3, #9]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d118      	bne.n	8000b5c <SPI_INIT+0x1ec>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_9_pos);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000b38:	601a      	str	r2, [r3, #0]
		spi_handle->SPIx->CR1 |= (HIGH << Shift_9_pos);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b48:	601a      	str	r2, [r3, #0]
		if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	799b      	ldrb	r3, [r3, #6]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d125      	bne.n	8000b9e <SPI_INIT+0x22e>
			// Internal slave select HIGH
			SPI_SSI_CONFIG(spi_handle, HIGH);
 8000b52:	2101      	movs	r1, #1
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff feea 	bl	800092e <SPI_SSI_CONFIG>
			spi_handle->SPIx->CR2 |= (HIGH << Shift_2_pos);
		} else if (spi_handle->spi_master_slave == SPI_SLAVE_MODE) {
			spi_handle->SPIx->CR2 &= ~(HIGH << Shift_2_pos);
		}
	}
}
 8000b5a:	e020      	b.n	8000b9e <SPI_INIT+0x22e>
		spi_handle->SPIx->CR1 &= ~(HIGH << Shift_9_pos); // Clear SSM bit
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000b6a:	601a      	str	r2, [r3, #0]
		if (spi_handle->spi_master_slave == SPI_MASTER_MODE) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	799b      	ldrb	r3, [r3, #6]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d108      	bne.n	8000b86 <SPI_INIT+0x216>
			spi_handle->SPIx->CR2 |= (HIGH << Shift_2_pos);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	685a      	ldr	r2, [r3, #4]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f042 0204 	orr.w	r2, r2, #4
 8000b82:	605a      	str	r2, [r3, #4]
}
 8000b84:	e00b      	b.n	8000b9e <SPI_INIT+0x22e>
		} else if (spi_handle->spi_master_slave == SPI_SLAVE_MODE) {
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	799b      	ldrb	r3, [r3, #6]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d107      	bne.n	8000b9e <SPI_INIT+0x22e>
			spi_handle->SPIx->CR2 &= ~(HIGH << Shift_2_pos);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f022 0204 	bic.w	r2, r2, #4
 8000b9c:	605a      	str	r2, [r3, #4]
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40013000 	.word	0x40013000
 8000bac:	40023800 	.word	0x40023800
 8000bb0:	40003800 	.word	0x40003800
 8000bb4:	40003c00 	.word	0x40003c00
 8000bb8:	40013400 	.word	0x40013400
 8000bbc:	40015000 	.word	0x40015000
 8000bc0:	40015400 	.word	0x40015400

08000bc4 <SPI_SendIT>:
	// Disable SPI
	SPI_PERIPHERAL_ENABLE(spi_handle, LOW);
}

uint8_t SPI_SendIT(SPI_HandleTypedef *spi_handle, uint8_t *txBuffer,
		uint32_t len) {
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	uint8_t state = spi_handleIT.TxRxState;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <SPI_SendIT+0x50>)
 8000bd2:	7c1b      	ldrb	r3, [r3, #16]
 8000bd4:	75fb      	strb	r3, [r7, #23]

	if (state == SPI_READY_IT) {
 8000bd6:	7dfb      	ldrb	r3, [r7, #23]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d113      	bne.n	8000c04 <SPI_SendIT+0x40>
		spi_handleIT.txBuffer = txBuffer;
 8000bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <SPI_SendIT+0x50>)
 8000bde:	68bb      	ldr	r3, [r7, #8]
 8000be0:	6013      	str	r3, [r2, #0]
		spi_handleIT.txLen = len;
 8000be2:	4a0c      	ldr	r2, [pc, #48]	@ (8000c14 <SPI_SendIT+0x50>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6093      	str	r3, [r2, #8]
		spi_handleIT.TxRxState = SPI_BUSY_TX_IT;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	@ (8000c14 <SPI_SendIT+0x50>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	741a      	strb	r2, [r3, #16]
		txCompl = LOW;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <SPI_SendIT+0x54>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	701a      	strb	r2, [r3, #0]

		// Enable Error interrupt and Tx buffer interrupt
		spi_handle->SPIx->CR2 |= (Shift_5_pos << Shift_5_pos);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	685a      	ldr	r2, [r3, #4]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 8000c02:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	371c      	adds	r7, #28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	2000007c 	.word	0x2000007c
 8000c18:	20000000 	.word	0x20000000

08000c1c <SPI_ReceiveIT>:

uint8_t SPI_ReceiveIT(SPI_HandleTypedef *spi_handle, uint8_t *rxBuffer,
		uint32_t len) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b087      	sub	sp, #28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	uint8_t state = spi_handleIT.TxRxState;
 8000c28:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <SPI_ReceiveIT+0x50>)
 8000c2a:	7c1b      	ldrb	r3, [r3, #16]
 8000c2c:	75fb      	strb	r3, [r7, #23]

	if (state == SPI_READY_IT) {
 8000c2e:	7dfb      	ldrb	r3, [r7, #23]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d113      	bne.n	8000c5c <SPI_ReceiveIT+0x40>
		spi_handleIT.rxBuffer = rxBuffer;
 8000c34:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <SPI_ReceiveIT+0x50>)
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	6053      	str	r3, [r2, #4]
		spi_handleIT.rxLen = len;
 8000c3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c6c <SPI_ReceiveIT+0x50>)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	60d3      	str	r3, [r2, #12]
		spi_handleIT.TxRxState = SPI_BUSY_RX_IT;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	@ (8000c6c <SPI_ReceiveIT+0x50>)
 8000c42:	2202      	movs	r2, #2
 8000c44:	741a      	strb	r2, [r3, #16]
		rxCompl = LOW;
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <SPI_ReceiveIT+0x54>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]

		// Enable Error interrupt and Rx buffer interrupt
		spi_handle->SPIx->CR2 |= (Shift_3_pos << Shift_5_pos);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	685a      	ldr	r2, [r3, #4]
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8000c5a:	605a      	str	r2, [r3, #4]
	}

	return state;
 8000c5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	371c      	adds	r7, #28
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000007c 	.word	0x2000007c
 8000c70:	20000001 	.word	0x20000001

08000c74 <SPI_TxRx_HandlingIT>:

void SPI_TxRx_HandlingIT(SPI_HandleTypedef *spi_handle) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]

	// Tx buffer empty is triggered
	if ((spi_handle->SPIx->SR >> Shift_1_pos) & 0x1) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	085b      	lsrs	r3, r3, #1
 8000c84:	f003 0301 	and.w	r3, r3, #1
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <SPI_TxRx_HandlingIT+0x1e>
		// We send data
		sendDataIT(spi_handle);
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fd8b 	bl	80007a8 <sendDataIT>
	}

	// Rx buffer empty is triggered
	if ((spi_handle->SPIx->SR >> Shift_0_pos) & 0x1) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	689b      	ldr	r3, [r3, #8]
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <SPI_TxRx_HandlingIT+0x32>
		// We send data
		receivDataIT(spi_handle);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff fdc5 	bl	8000830 <receivDataIT>
	}

	// Overrun handle
	if ((spi_handle->SPIx->SR >> Shift_6_pos) & 0x1) {
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	099b      	lsrs	r3, r3, #6
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d007      	beq.n	8000cc6 <SPI_TxRx_HandlingIT+0x52>
		// We send data
		uint8_t temp;
		temp = spi_handle->SPIx->DR;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68db      	ldr	r3, [r3, #12]
 8000cbc:	73fb      	strb	r3, [r7, #15]
		temp = spi_handle->SPIx->SR;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	689b      	ldr	r3, [r3, #8]
 8000cc4:	73fb      	strb	r3, [r7, #15]
		(void) temp;
	}
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <main>:
/*This flag will be set in the interrupt handler of the Arduino interrupt GPIO */
volatile uint8_t dataAvailable = 0;
uint32_t i = 0;
uint8_t dummy = 0xff;

int main() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
	GPIO_USER_INIT();
 8000cd4:	f000 f88a 	bl	8000dec <GPIO_USER_INIT>
	SPI_USER_INIT();
 8000cd8:	f000 f8e2 	bl	8000ea0 <SPI_USER_INIT>
	IRQ_Config(SPI2_IRQ36, HIGH);
 8000cdc:	2101      	movs	r1, #1
 8000cde:	2024      	movs	r0, #36	@ 0x24
 8000ce0:	f7ff fcb2 	bl	8000648 <IRQ_Config>
	IRQ_Config(IRQ23_EXTI9_5, HIGH);
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	2017      	movs	r0, #23
 8000ce8:	f7ff fcae 	bl	8000648 <IRQ_Config>
	// strlen: excluding the null terminator itself (\0);
	// sizeof: including the null terminator (\0) and any unused space
	printf("Application running\n");
 8000cec:	4837      	ldr	r0, [pc, #220]	@ (8000dcc <main+0xfc>)
 8000cee:	f000 fb31 	bl	8001354 <puts>
	while (1) {

		while (!dataAvailable)
 8000cf2:	bf00      	nop
 8000cf4:	4b36      	ldr	r3, [pc, #216]	@ (8000dd0 <main+0x100>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0fa      	beq.n	8000cf4 <main+0x24>
			; //wait till data available interrupt from transmitter device(slave)

		IRQ_Config(IRQ23_EXTI9_5, LOW);
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2017      	movs	r0, #23
 8000d02:	f7ff fca1 	bl	8000648 <IRQ_Config>

		SPI_PERIPHERAL_ENABLE(&SPI_Handle, HIGH);
 8000d06:	2101      	movs	r1, #1
 8000d08:	4832      	ldr	r0, [pc, #200]	@ (8000dd4 <main+0x104>)
 8000d0a:	f7ff fdf0 	bl	80008ee <SPI_PERIPHERAL_ENABLE>

		memset(RcvBuff, 0, MAX_LEN);  // Clear entire buffer
 8000d0e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000d12:	2100      	movs	r1, #0
 8000d14:	4830      	ldr	r0, [pc, #192]	@ (8000dd8 <main+0x108>)
 8000d16:	f000 fbfd 	bl	8001514 <memset>
		i = 0;  // Reset index
 8000d1a:	4b30      	ldr	r3, [pc, #192]	@ (8000ddc <main+0x10c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
		ReadByte = 'N';
 8000d20:	4b2f      	ldr	r3, [pc, #188]	@ (8000de0 <main+0x110>)
 8000d22:	224e      	movs	r2, #78	@ 0x4e
 8000d24:	701a      	strb	r2, [r3, #0]
		while (ReadByte != '\0' && (i < MAX_LEN)) {
 8000d26:	e02f      	b.n	8000d88 <main+0xb8>
			while (SPI_SendIT(&SPI_Handle, &dummy, 1) == SPI_BUSY_TX_IT)
 8000d28:	bf00      	nop
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	492d      	ldr	r1, [pc, #180]	@ (8000de4 <main+0x114>)
 8000d2e:	4829      	ldr	r0, [pc, #164]	@ (8000dd4 <main+0x104>)
 8000d30:	f7ff ff48 	bl	8000bc4 <SPI_SendIT>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d0f7      	beq.n	8000d2a <main+0x5a>
				;
			while (SPI_ReceiveIT(&SPI_Handle, &ReadByte, 1) == SPI_BUSY_RX_IT)
 8000d3a:	bf00      	nop
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4928      	ldr	r1, [pc, #160]	@ (8000de0 <main+0x110>)
 8000d40:	4824      	ldr	r0, [pc, #144]	@ (8000dd4 <main+0x104>)
 8000d42:	f7ff ff6b 	bl	8000c1c <SPI_ReceiveIT>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d0f7      	beq.n	8000d3c <main+0x6c>
				;
			RcvBuff[i++] = ReadByte;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	@ (8000ddc <main+0x10c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	1c5a      	adds	r2, r3, #1
 8000d52:	4922      	ldr	r1, [pc, #136]	@ (8000ddc <main+0x10c>)
 8000d54:	600a      	str	r2, [r1, #0]
 8000d56:	4a22      	ldr	r2, [pc, #136]	@ (8000de0 <main+0x110>)
 8000d58:	7812      	ldrb	r2, [r2, #0]
 8000d5a:	b2d1      	uxtb	r1, r2
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd8 <main+0x108>)
 8000d5e:	54d1      	strb	r1, [r2, r3]
			if (ReadByte == '\0' || (i == MAX_LEN)) {
 8000d60:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <main+0x110>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d004      	beq.n	8000d74 <main+0xa4>
 8000d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ddc <main+0x10c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d72:	d109      	bne.n	8000d88 <main+0xb8>
				RcvBuff[i - 1] = '\0';
 8000d74:	4b19      	ldr	r3, [pc, #100]	@ (8000ddc <main+0x10c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	4a17      	ldr	r2, [pc, #92]	@ (8000dd8 <main+0x108>)
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	54d1      	strb	r1, [r2, r3]
				i = 0;
 8000d80:	4b16      	ldr	r3, [pc, #88]	@ (8000ddc <main+0x10c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
				break;
 8000d86:	e009      	b.n	8000d9c <main+0xcc>
		while (ReadByte != '\0' && (i < MAX_LEN)) {
 8000d88:	4b15      	ldr	r3, [pc, #84]	@ (8000de0 <main+0x110>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d004      	beq.n	8000d9c <main+0xcc>
 8000d92:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <main+0x10c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000d9a:	d3c5      	bcc.n	8000d28 <main+0x58>
			}
		}

		while (SPI_GetFlagStatus(&SPI_Handle, Shift_7_pos))
 8000d9c:	bf00      	nop
 8000d9e:	2107      	movs	r1, #7
 8000da0:	480c      	ldr	r0, [pc, #48]	@ (8000dd4 <main+0x104>)
 8000da2:	f7ff fd8b 	bl	80008bc <SPI_GetFlagStatus>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d1f8      	bne.n	8000d9e <main+0xce>
			;

		SPI_PERIPHERAL_ENABLE(&SPI_Handle, LOW);
 8000dac:	2100      	movs	r1, #0
 8000dae:	4809      	ldr	r0, [pc, #36]	@ (8000dd4 <main+0x104>)
 8000db0:	f7ff fd9d 	bl	80008ee <SPI_PERIPHERAL_ENABLE>

		printf("Rcvd data = %s\n", RcvBuff);
 8000db4:	4908      	ldr	r1, [pc, #32]	@ (8000dd8 <main+0x108>)
 8000db6:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <main+0x118>)
 8000db8:	f000 fa64 	bl	8001284 <iprintf>

		dataAvailable = 0;
 8000dbc:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <main+0x100>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]

		IRQ_Config(IRQ23_EXTI9_5, HIGH);
 8000dc2:	2101      	movs	r1, #1
 8000dc4:	2017      	movs	r0, #23
 8000dc6:	f7ff fc3f 	bl	8000648 <IRQ_Config>
		while (!dataAvailable)
 8000dca:	e792      	b.n	8000cf2 <main+0x22>
 8000dcc:	08002030 	.word	0x08002030
 8000dd0:	200002a8 	.word	0x200002a8
 8000dd4:	20000090 	.word	0x20000090
 8000dd8:	200000b4 	.word	0x200000b4
 8000ddc:	200002ac 	.word	0x200002ac
 8000de0:	20000002 	.word	0x20000002
 8000de4:	20000003 	.word	0x20000003
 8000de8:	08002044 	.word	0x08002044

08000dec <GPIO_USER_INIT>:
	}
	return 0;
}

void GPIO_USER_INIT(void) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
 8000df0:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000df2:	4a27      	ldr	r2, [pc, #156]	@ (8000e90 <GPIO_USER_INIT+0xa4>)
 8000df4:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 8000df6:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8000dfc:	4b23      	ldr	r3, [pc, #140]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000e02:	4b22      	ldr	r3, [pc, #136]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8000e08:	4820      	ldr	r0, [pc, #128]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e0a:	f7ff fa31 	bl	8000270 <GPIO_INIT>

	// PB12 - SPI2_NSS
	GPIO_Handle.GPIOX = GPIOB;
 8000e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e10:	4a20      	ldr	r2, [pc, #128]	@ (8000e94 <GPIO_USER_INIT+0xa8>)
 8000e12:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8000e14:	4b1d      	ldr	r3, [pc, #116]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.alternate_function_select = GPIO_AF5;
 8000e1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	725a      	strb	r2, [r3, #9]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000e20:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e22:	2203      	movs	r2, #3
 8000e24:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_PP;
 8000e26:	4b19      	ldr	r3, [pc, #100]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000e2c:	4b17      	ldr	r3, [pc, #92]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	719a      	strb	r2, [r3, #6]
	GPIO_Handle.pin_number = GPIO_PIN_12;
 8000e32:	4b16      	ldr	r3, [pc, #88]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e34:	220c      	movs	r2, #12
 8000e36:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e38:	4814      	ldr	r0, [pc, #80]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e3a:	f7ff fa19 	bl	8000270 <GPIO_INIT>

	// PB13 - SPI2_SCLK
	GPIO_Handle.pin_number = GPIO_PIN_13;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e40:	220d      	movs	r2, #13
 8000e42:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e44:	4811      	ldr	r0, [pc, #68]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e46:	f7ff fa13 	bl	8000270 <GPIO_INIT>

	// PB14 - SPI2_MISO
	GPIO_Handle.pin_number = GPIO_PIN_14;
 8000e4a:	4b10      	ldr	r3, [pc, #64]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e4c:	220e      	movs	r2, #14
 8000e4e:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e50:	480e      	ldr	r0, [pc, #56]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e52:	f7ff fa0d 	bl	8000270 <GPIO_INIT>

	// PB15 - SPI2_MOSI
	GPIO_Handle.pin_number = GPIO_PIN_15;
 8000e56:	4b0d      	ldr	r3, [pc, #52]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e58:	220f      	movs	r2, #15
 8000e5a:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000e5c:	480b      	ldr	r0, [pc, #44]	@ (8000e8c <GPIO_USER_INIT+0xa0>)
 8000e5e:	f7ff fa07 	bl	8000270 <GPIO_INIT>

	// this is interrupt GPIO
	spiIntPin.GPIOX = GPIOD;
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <GPIO_USER_INIT+0xac>)
 8000e64:	4a0d      	ldr	r2, [pc, #52]	@ (8000e9c <GPIO_USER_INIT+0xb0>)
 8000e66:	601a      	str	r2, [r3, #0]
	spiIntPin.pin_number = GPIO_PIN_6;
 8000e68:	4b0b      	ldr	r3, [pc, #44]	@ (8000e98 <GPIO_USER_INIT+0xac>)
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	711a      	strb	r2, [r3, #4]
	spiIntPin.mode = GPIO_MODE_INTERRUPT_FALLING;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <GPIO_USER_INIT+0xac>)
 8000e70:	2205      	movs	r2, #5
 8000e72:	715a      	strb	r2, [r3, #5]
	spiIntPin.exti_select = EXTI_PORT_PD;
 8000e74:	4b08      	ldr	r3, [pc, #32]	@ (8000e98 <GPIO_USER_INIT+0xac>)
 8000e76:	2203      	movs	r2, #3
 8000e78:	729a      	strb	r2, [r3, #10]
	spiIntPin.pull_up_pull_down = GPIO_PUPD_PU;
 8000e7a:	4b07      	ldr	r3, [pc, #28]	@ (8000e98 <GPIO_USER_INIT+0xac>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&spiIntPin);
 8000e80:	4805      	ldr	r0, [pc, #20]	@ (8000e98 <GPIO_USER_INIT+0xac>)
 8000e82:	f7ff f9f5 	bl	8000270 <GPIO_INIT>
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000009c 	.word	0x2000009c
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	200000a8 	.word	0x200000a8
 8000e9c:	40020c00 	.word	0x40020c00

08000ea0 <SPI_USER_INIT>:

void SPI_USER_INIT() {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	SPI_Handle.SPIx = SPI2;
 8000ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000ea6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ee4 <SPI_USER_INIT+0x44>)
 8000ea8:	601a      	str	r2, [r3, #0]
	SPI_Handle.spi_clock_phase = SPI_DATA_CAPTURED_FIRST_CLOCK;
 8000eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	721a      	strb	r2, [r3, #8]
	SPI_Handle.spi_clock_polarity = SPI_IDLE_LOW;
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	71da      	strb	r2, [r3, #7]
	SPI_Handle.spi_data_direction = SPI_FULL_DUPLEX_MODE;
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000eb8:	2203      	movs	r2, #3
 8000eba:	711a      	strb	r2, [r3, #4]
	SPI_Handle.spi_frame_format = SPI_8_BIT_FRAME_FORMAT;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	715a      	strb	r2, [r3, #5]
	SPI_Handle.spi_master_slave = SPI_MASTER_MODE;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	719a      	strb	r2, [r3, #6]
	SPI_Handle.spi_sclk_prescaler = SPI_PRES_32;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000eca:	2204      	movs	r2, #4
 8000ecc:	729a      	strb	r2, [r3, #10]
	SPI_Handle.spi_ssm = SPI_SOFTWARE_SLAVE_DIS;
 8000ece:	4b04      	ldr	r3, [pc, #16]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	725a      	strb	r2, [r3, #9]
	SPI_INIT(&SPI_Handle);
 8000ed4:	4802      	ldr	r0, [pc, #8]	@ (8000ee0 <SPI_USER_INIT+0x40>)
 8000ed6:	f7ff fd4b 	bl	8000970 <SPI_INIT>
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000090 	.word	0x20000090
 8000ee4:	40003800 	.word	0x40003800

08000ee8 <SPI2_IRQHandler>:

void SPI2_IRQHandler() {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
	SPI_TxRx_HandlingIT(&SPI_Handle);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <SPI2_IRQHandler+0x10>)
 8000eee:	f7ff fec1 	bl	8000c74 <SPI_TxRx_HandlingIT>
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000090 	.word	0x20000090

08000efc <EXTI9_5_IRQHandler>:

/* Slave data available interrupt handler */
void EXTI9_5_IRQHandler(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_6);
 8000f00:	2006      	movs	r0, #6
 8000f02:	f7ff fbdd 	bl	80006c0 <GPIO_IRQHandling>
	dataAvailable = 1;
 8000f06:	4b02      	ldr	r3, [pc, #8]	@ (8000f10 <EXTI9_5_IRQHandler+0x14>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	701a      	strb	r2, [r3, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200002a8 	.word	0x200002a8

08000f14 <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <ITM_SendChar+0x48>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <ITM_SendChar+0x48>)
 8000f24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f28:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <ITM_SendChar+0x4c>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f60 <ITM_SendChar+0x4c>)
 8000f30:	f043 0301 	orr.w	r3, r3, #1
 8000f34:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 8000f36:	bf00      	nop
 8000f38:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d0f8      	beq.n	8000f38 <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000f46:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	6013      	str	r3, [r2, #0]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000edfc 	.word	0xe000edfc
 8000f60:	e0000e00 	.word	0xe0000e00

08000f64 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]
 8000f74:	e00a      	b.n	8000f8c <_read+0x28>
		*ptr++ = __io_getchar();
 8000f76:	f3af 8000 	nop.w
 8000f7a:	4601      	mov	r1, r0
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	1c5a      	adds	r2, r3, #1
 8000f80:	60ba      	str	r2, [r7, #8]
 8000f82:	b2ca      	uxtb	r2, r1
 8000f84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	dbf0      	blt.n	8000f76 <_read+0x12>
	}

	return len;
 8000f94:	687b      	ldr	r3, [r7, #4]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	60f8      	str	r0, [r7, #12]
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
 8000fae:	e009      	b.n	8000fc4 <_write+0x26>
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	1c5a      	adds	r2, r3, #1
 8000fb4:	60ba      	str	r2, [r7, #8]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff ffab 	bl	8000f14 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	697a      	ldr	r2, [r7, #20]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	dbf1      	blt.n	8000fb0 <_write+0x12>
	}
	return len;
 8000fcc:	687b      	ldr	r3, [r7, #4]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <_close>:

int _close(int file) {
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <_fstat>:

int _fstat(int file, struct stat *st) {
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ffe:	605a      	str	r2, [r3, #4]
	return 0;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <_isatty>:

int _isatty(int file) {
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	@ (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f000 fa9e 	bl	80015b0 <__errno>
 8001074:	4603      	mov	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20020000 	.word	0x20020000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	200002b0 	.word	0x200002b0
 80010a8:	20000400 	.word	0x20000400

080010ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010ac:	480d      	ldr	r0, [pc, #52]	@ (80010e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopForever+0xe>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopForever+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010da:	f000 fa6f 	bl	80015bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010de:	f7ff fdf7 	bl	8000cd0 <main>

080010e2 <LoopForever>:

LoopForever:
  b LoopForever
 80010e2:	e7fe      	b.n	80010e2 <LoopForever>
  ldr   r0, =_estack
 80010e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010f0:	08002098 	.word	0x08002098
  ldr r2, =_sbss
 80010f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010f8:	20000400 	.word	0x20000400

080010fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC_IRQHandler>
	...

08001100 <std>:
 8001100:	2300      	movs	r3, #0
 8001102:	b510      	push	{r4, lr}
 8001104:	4604      	mov	r4, r0
 8001106:	e9c0 3300 	strd	r3, r3, [r0]
 800110a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800110e:	6083      	str	r3, [r0, #8]
 8001110:	8181      	strh	r1, [r0, #12]
 8001112:	6643      	str	r3, [r0, #100]	@ 0x64
 8001114:	81c2      	strh	r2, [r0, #14]
 8001116:	6183      	str	r3, [r0, #24]
 8001118:	4619      	mov	r1, r3
 800111a:	2208      	movs	r2, #8
 800111c:	305c      	adds	r0, #92	@ 0x5c
 800111e:	f000 f9f9 	bl	8001514 <memset>
 8001122:	4b0d      	ldr	r3, [pc, #52]	@ (8001158 <std+0x58>)
 8001124:	6263      	str	r3, [r4, #36]	@ 0x24
 8001126:	4b0d      	ldr	r3, [pc, #52]	@ (800115c <std+0x5c>)
 8001128:	62a3      	str	r3, [r4, #40]	@ 0x28
 800112a:	4b0d      	ldr	r3, [pc, #52]	@ (8001160 <std+0x60>)
 800112c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800112e:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <std+0x64>)
 8001130:	6323      	str	r3, [r4, #48]	@ 0x30
 8001132:	4b0d      	ldr	r3, [pc, #52]	@ (8001168 <std+0x68>)
 8001134:	6224      	str	r4, [r4, #32]
 8001136:	429c      	cmp	r4, r3
 8001138:	d006      	beq.n	8001148 <std+0x48>
 800113a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800113e:	4294      	cmp	r4, r2
 8001140:	d002      	beq.n	8001148 <std+0x48>
 8001142:	33d0      	adds	r3, #208	@ 0xd0
 8001144:	429c      	cmp	r4, r3
 8001146:	d105      	bne.n	8001154 <std+0x54>
 8001148:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800114c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001150:	f000 ba58 	b.w	8001604 <__retarget_lock_init_recursive>
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	08001365 	.word	0x08001365
 800115c:	08001387 	.word	0x08001387
 8001160:	080013bf 	.word	0x080013bf
 8001164:	080013e3 	.word	0x080013e3
 8001168:	200002b4 	.word	0x200002b4

0800116c <stdio_exit_handler>:
 800116c:	4a02      	ldr	r2, [pc, #8]	@ (8001178 <stdio_exit_handler+0xc>)
 800116e:	4903      	ldr	r1, [pc, #12]	@ (800117c <stdio_exit_handler+0x10>)
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <stdio_exit_handler+0x14>)
 8001172:	f000 b869 	b.w	8001248 <_fwalk_sglue>
 8001176:	bf00      	nop
 8001178:	20000004 	.word	0x20000004
 800117c:	08001ea1 	.word	0x08001ea1
 8001180:	20000014 	.word	0x20000014

08001184 <cleanup_stdio>:
 8001184:	6841      	ldr	r1, [r0, #4]
 8001186:	4b0c      	ldr	r3, [pc, #48]	@ (80011b8 <cleanup_stdio+0x34>)
 8001188:	4299      	cmp	r1, r3
 800118a:	b510      	push	{r4, lr}
 800118c:	4604      	mov	r4, r0
 800118e:	d001      	beq.n	8001194 <cleanup_stdio+0x10>
 8001190:	f000 fe86 	bl	8001ea0 <_fflush_r>
 8001194:	68a1      	ldr	r1, [r4, #8]
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <cleanup_stdio+0x38>)
 8001198:	4299      	cmp	r1, r3
 800119a:	d002      	beq.n	80011a2 <cleanup_stdio+0x1e>
 800119c:	4620      	mov	r0, r4
 800119e:	f000 fe7f 	bl	8001ea0 <_fflush_r>
 80011a2:	68e1      	ldr	r1, [r4, #12]
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <cleanup_stdio+0x3c>)
 80011a6:	4299      	cmp	r1, r3
 80011a8:	d004      	beq.n	80011b4 <cleanup_stdio+0x30>
 80011aa:	4620      	mov	r0, r4
 80011ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011b0:	f000 be76 	b.w	8001ea0 <_fflush_r>
 80011b4:	bd10      	pop	{r4, pc}
 80011b6:	bf00      	nop
 80011b8:	200002b4 	.word	0x200002b4
 80011bc:	2000031c 	.word	0x2000031c
 80011c0:	20000384 	.word	0x20000384

080011c4 <global_stdio_init.part.0>:
 80011c4:	b510      	push	{r4, lr}
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <global_stdio_init.part.0+0x30>)
 80011c8:	4c0b      	ldr	r4, [pc, #44]	@ (80011f8 <global_stdio_init.part.0+0x34>)
 80011ca:	4a0c      	ldr	r2, [pc, #48]	@ (80011fc <global_stdio_init.part.0+0x38>)
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	4620      	mov	r0, r4
 80011d0:	2200      	movs	r2, #0
 80011d2:	2104      	movs	r1, #4
 80011d4:	f7ff ff94 	bl	8001100 <std>
 80011d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80011dc:	2201      	movs	r2, #1
 80011de:	2109      	movs	r1, #9
 80011e0:	f7ff ff8e 	bl	8001100 <std>
 80011e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80011e8:	2202      	movs	r2, #2
 80011ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011ee:	2112      	movs	r1, #18
 80011f0:	f7ff bf86 	b.w	8001100 <std>
 80011f4:	200003ec 	.word	0x200003ec
 80011f8:	200002b4 	.word	0x200002b4
 80011fc:	0800116d 	.word	0x0800116d

08001200 <__sfp_lock_acquire>:
 8001200:	4801      	ldr	r0, [pc, #4]	@ (8001208 <__sfp_lock_acquire+0x8>)
 8001202:	f000 ba00 	b.w	8001606 <__retarget_lock_acquire_recursive>
 8001206:	bf00      	nop
 8001208:	200003f5 	.word	0x200003f5

0800120c <__sfp_lock_release>:
 800120c:	4801      	ldr	r0, [pc, #4]	@ (8001214 <__sfp_lock_release+0x8>)
 800120e:	f000 b9fb 	b.w	8001608 <__retarget_lock_release_recursive>
 8001212:	bf00      	nop
 8001214:	200003f5 	.word	0x200003f5

08001218 <__sinit>:
 8001218:	b510      	push	{r4, lr}
 800121a:	4604      	mov	r4, r0
 800121c:	f7ff fff0 	bl	8001200 <__sfp_lock_acquire>
 8001220:	6a23      	ldr	r3, [r4, #32]
 8001222:	b11b      	cbz	r3, 800122c <__sinit+0x14>
 8001224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001228:	f7ff bff0 	b.w	800120c <__sfp_lock_release>
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__sinit+0x28>)
 800122e:	6223      	str	r3, [r4, #32]
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__sinit+0x2c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f5      	bne.n	8001224 <__sinit+0xc>
 8001238:	f7ff ffc4 	bl	80011c4 <global_stdio_init.part.0>
 800123c:	e7f2      	b.n	8001224 <__sinit+0xc>
 800123e:	bf00      	nop
 8001240:	08001185 	.word	0x08001185
 8001244:	200003ec 	.word	0x200003ec

08001248 <_fwalk_sglue>:
 8001248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800124c:	4607      	mov	r7, r0
 800124e:	4688      	mov	r8, r1
 8001250:	4614      	mov	r4, r2
 8001252:	2600      	movs	r6, #0
 8001254:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001258:	f1b9 0901 	subs.w	r9, r9, #1
 800125c:	d505      	bpl.n	800126a <_fwalk_sglue+0x22>
 800125e:	6824      	ldr	r4, [r4, #0]
 8001260:	2c00      	cmp	r4, #0
 8001262:	d1f7      	bne.n	8001254 <_fwalk_sglue+0xc>
 8001264:	4630      	mov	r0, r6
 8001266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800126a:	89ab      	ldrh	r3, [r5, #12]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d907      	bls.n	8001280 <_fwalk_sglue+0x38>
 8001270:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001274:	3301      	adds	r3, #1
 8001276:	d003      	beq.n	8001280 <_fwalk_sglue+0x38>
 8001278:	4629      	mov	r1, r5
 800127a:	4638      	mov	r0, r7
 800127c:	47c0      	blx	r8
 800127e:	4306      	orrs	r6, r0
 8001280:	3568      	adds	r5, #104	@ 0x68
 8001282:	e7e9      	b.n	8001258 <_fwalk_sglue+0x10>

08001284 <iprintf>:
 8001284:	b40f      	push	{r0, r1, r2, r3}
 8001286:	b507      	push	{r0, r1, r2, lr}
 8001288:	4906      	ldr	r1, [pc, #24]	@ (80012a4 <iprintf+0x20>)
 800128a:	ab04      	add	r3, sp, #16
 800128c:	6808      	ldr	r0, [r1, #0]
 800128e:	f853 2b04 	ldr.w	r2, [r3], #4
 8001292:	6881      	ldr	r1, [r0, #8]
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	f000 fadb 	bl	8001850 <_vfiprintf_r>
 800129a:	b003      	add	sp, #12
 800129c:	f85d eb04 	ldr.w	lr, [sp], #4
 80012a0:	b004      	add	sp, #16
 80012a2:	4770      	bx	lr
 80012a4:	20000010 	.word	0x20000010

080012a8 <_puts_r>:
 80012a8:	6a03      	ldr	r3, [r0, #32]
 80012aa:	b570      	push	{r4, r5, r6, lr}
 80012ac:	6884      	ldr	r4, [r0, #8]
 80012ae:	4605      	mov	r5, r0
 80012b0:	460e      	mov	r6, r1
 80012b2:	b90b      	cbnz	r3, 80012b8 <_puts_r+0x10>
 80012b4:	f7ff ffb0 	bl	8001218 <__sinit>
 80012b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012ba:	07db      	lsls	r3, r3, #31
 80012bc:	d405      	bmi.n	80012ca <_puts_r+0x22>
 80012be:	89a3      	ldrh	r3, [r4, #12]
 80012c0:	0598      	lsls	r0, r3, #22
 80012c2:	d402      	bmi.n	80012ca <_puts_r+0x22>
 80012c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012c6:	f000 f99e 	bl	8001606 <__retarget_lock_acquire_recursive>
 80012ca:	89a3      	ldrh	r3, [r4, #12]
 80012cc:	0719      	lsls	r1, r3, #28
 80012ce:	d502      	bpl.n	80012d6 <_puts_r+0x2e>
 80012d0:	6923      	ldr	r3, [r4, #16]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d135      	bne.n	8001342 <_puts_r+0x9a>
 80012d6:	4621      	mov	r1, r4
 80012d8:	4628      	mov	r0, r5
 80012da:	f000 f8c5 	bl	8001468 <__swsetup_r>
 80012de:	b380      	cbz	r0, 8001342 <_puts_r+0x9a>
 80012e0:	f04f 35ff 	mov.w	r5, #4294967295
 80012e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012e6:	07da      	lsls	r2, r3, #31
 80012e8:	d405      	bmi.n	80012f6 <_puts_r+0x4e>
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	059b      	lsls	r3, r3, #22
 80012ee:	d402      	bmi.n	80012f6 <_puts_r+0x4e>
 80012f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012f2:	f000 f989 	bl	8001608 <__retarget_lock_release_recursive>
 80012f6:	4628      	mov	r0, r5
 80012f8:	bd70      	pop	{r4, r5, r6, pc}
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	da04      	bge.n	8001308 <_puts_r+0x60>
 80012fe:	69a2      	ldr	r2, [r4, #24]
 8001300:	429a      	cmp	r2, r3
 8001302:	dc17      	bgt.n	8001334 <_puts_r+0x8c>
 8001304:	290a      	cmp	r1, #10
 8001306:	d015      	beq.n	8001334 <_puts_r+0x8c>
 8001308:	6823      	ldr	r3, [r4, #0]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	6022      	str	r2, [r4, #0]
 800130e:	7019      	strb	r1, [r3, #0]
 8001310:	68a3      	ldr	r3, [r4, #8]
 8001312:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001316:	3b01      	subs	r3, #1
 8001318:	60a3      	str	r3, [r4, #8]
 800131a:	2900      	cmp	r1, #0
 800131c:	d1ed      	bne.n	80012fa <_puts_r+0x52>
 800131e:	2b00      	cmp	r3, #0
 8001320:	da11      	bge.n	8001346 <_puts_r+0x9e>
 8001322:	4622      	mov	r2, r4
 8001324:	210a      	movs	r1, #10
 8001326:	4628      	mov	r0, r5
 8001328:	f000 f85f 	bl	80013ea <__swbuf_r>
 800132c:	3001      	adds	r0, #1
 800132e:	d0d7      	beq.n	80012e0 <_puts_r+0x38>
 8001330:	250a      	movs	r5, #10
 8001332:	e7d7      	b.n	80012e4 <_puts_r+0x3c>
 8001334:	4622      	mov	r2, r4
 8001336:	4628      	mov	r0, r5
 8001338:	f000 f857 	bl	80013ea <__swbuf_r>
 800133c:	3001      	adds	r0, #1
 800133e:	d1e7      	bne.n	8001310 <_puts_r+0x68>
 8001340:	e7ce      	b.n	80012e0 <_puts_r+0x38>
 8001342:	3e01      	subs	r6, #1
 8001344:	e7e4      	b.n	8001310 <_puts_r+0x68>
 8001346:	6823      	ldr	r3, [r4, #0]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	6022      	str	r2, [r4, #0]
 800134c:	220a      	movs	r2, #10
 800134e:	701a      	strb	r2, [r3, #0]
 8001350:	e7ee      	b.n	8001330 <_puts_r+0x88>
	...

08001354 <puts>:
 8001354:	4b02      	ldr	r3, [pc, #8]	@ (8001360 <puts+0xc>)
 8001356:	4601      	mov	r1, r0
 8001358:	6818      	ldr	r0, [r3, #0]
 800135a:	f7ff bfa5 	b.w	80012a8 <_puts_r>
 800135e:	bf00      	nop
 8001360:	20000010 	.word	0x20000010

08001364 <__sread>:
 8001364:	b510      	push	{r4, lr}
 8001366:	460c      	mov	r4, r1
 8001368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800136c:	f000 f8fc 	bl	8001568 <_read_r>
 8001370:	2800      	cmp	r0, #0
 8001372:	bfab      	itete	ge
 8001374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001376:	89a3      	ldrhlt	r3, [r4, #12]
 8001378:	181b      	addge	r3, r3, r0
 800137a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800137e:	bfac      	ite	ge
 8001380:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001382:	81a3      	strhlt	r3, [r4, #12]
 8001384:	bd10      	pop	{r4, pc}

08001386 <__swrite>:
 8001386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800138a:	461f      	mov	r7, r3
 800138c:	898b      	ldrh	r3, [r1, #12]
 800138e:	05db      	lsls	r3, r3, #23
 8001390:	4605      	mov	r5, r0
 8001392:	460c      	mov	r4, r1
 8001394:	4616      	mov	r6, r2
 8001396:	d505      	bpl.n	80013a4 <__swrite+0x1e>
 8001398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800139c:	2302      	movs	r3, #2
 800139e:	2200      	movs	r2, #0
 80013a0:	f000 f8d0 	bl	8001544 <_lseek_r>
 80013a4:	89a3      	ldrh	r3, [r4, #12]
 80013a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013ae:	81a3      	strh	r3, [r4, #12]
 80013b0:	4632      	mov	r2, r6
 80013b2:	463b      	mov	r3, r7
 80013b4:	4628      	mov	r0, r5
 80013b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013ba:	f000 b8e7 	b.w	800158c <_write_r>

080013be <__sseek>:
 80013be:	b510      	push	{r4, lr}
 80013c0:	460c      	mov	r4, r1
 80013c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013c6:	f000 f8bd 	bl	8001544 <_lseek_r>
 80013ca:	1c43      	adds	r3, r0, #1
 80013cc:	89a3      	ldrh	r3, [r4, #12]
 80013ce:	bf15      	itete	ne
 80013d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80013d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80013d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80013da:	81a3      	strheq	r3, [r4, #12]
 80013dc:	bf18      	it	ne
 80013de:	81a3      	strhne	r3, [r4, #12]
 80013e0:	bd10      	pop	{r4, pc}

080013e2 <__sclose>:
 80013e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013e6:	f000 b89d 	b.w	8001524 <_close_r>

080013ea <__swbuf_r>:
 80013ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ec:	460e      	mov	r6, r1
 80013ee:	4614      	mov	r4, r2
 80013f0:	4605      	mov	r5, r0
 80013f2:	b118      	cbz	r0, 80013fc <__swbuf_r+0x12>
 80013f4:	6a03      	ldr	r3, [r0, #32]
 80013f6:	b90b      	cbnz	r3, 80013fc <__swbuf_r+0x12>
 80013f8:	f7ff ff0e 	bl	8001218 <__sinit>
 80013fc:	69a3      	ldr	r3, [r4, #24]
 80013fe:	60a3      	str	r3, [r4, #8]
 8001400:	89a3      	ldrh	r3, [r4, #12]
 8001402:	071a      	lsls	r2, r3, #28
 8001404:	d501      	bpl.n	800140a <__swbuf_r+0x20>
 8001406:	6923      	ldr	r3, [r4, #16]
 8001408:	b943      	cbnz	r3, 800141c <__swbuf_r+0x32>
 800140a:	4621      	mov	r1, r4
 800140c:	4628      	mov	r0, r5
 800140e:	f000 f82b 	bl	8001468 <__swsetup_r>
 8001412:	b118      	cbz	r0, 800141c <__swbuf_r+0x32>
 8001414:	f04f 37ff 	mov.w	r7, #4294967295
 8001418:	4638      	mov	r0, r7
 800141a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	6922      	ldr	r2, [r4, #16]
 8001420:	1a98      	subs	r0, r3, r2
 8001422:	6963      	ldr	r3, [r4, #20]
 8001424:	b2f6      	uxtb	r6, r6
 8001426:	4283      	cmp	r3, r0
 8001428:	4637      	mov	r7, r6
 800142a:	dc05      	bgt.n	8001438 <__swbuf_r+0x4e>
 800142c:	4621      	mov	r1, r4
 800142e:	4628      	mov	r0, r5
 8001430:	f000 fd36 	bl	8001ea0 <_fflush_r>
 8001434:	2800      	cmp	r0, #0
 8001436:	d1ed      	bne.n	8001414 <__swbuf_r+0x2a>
 8001438:	68a3      	ldr	r3, [r4, #8]
 800143a:	3b01      	subs	r3, #1
 800143c:	60a3      	str	r3, [r4, #8]
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	1c5a      	adds	r2, r3, #1
 8001442:	6022      	str	r2, [r4, #0]
 8001444:	701e      	strb	r6, [r3, #0]
 8001446:	6962      	ldr	r2, [r4, #20]
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	429a      	cmp	r2, r3
 800144c:	d004      	beq.n	8001458 <__swbuf_r+0x6e>
 800144e:	89a3      	ldrh	r3, [r4, #12]
 8001450:	07db      	lsls	r3, r3, #31
 8001452:	d5e1      	bpl.n	8001418 <__swbuf_r+0x2e>
 8001454:	2e0a      	cmp	r6, #10
 8001456:	d1df      	bne.n	8001418 <__swbuf_r+0x2e>
 8001458:	4621      	mov	r1, r4
 800145a:	4628      	mov	r0, r5
 800145c:	f000 fd20 	bl	8001ea0 <_fflush_r>
 8001460:	2800      	cmp	r0, #0
 8001462:	d0d9      	beq.n	8001418 <__swbuf_r+0x2e>
 8001464:	e7d6      	b.n	8001414 <__swbuf_r+0x2a>
	...

08001468 <__swsetup_r>:
 8001468:	b538      	push	{r3, r4, r5, lr}
 800146a:	4b29      	ldr	r3, [pc, #164]	@ (8001510 <__swsetup_r+0xa8>)
 800146c:	4605      	mov	r5, r0
 800146e:	6818      	ldr	r0, [r3, #0]
 8001470:	460c      	mov	r4, r1
 8001472:	b118      	cbz	r0, 800147c <__swsetup_r+0x14>
 8001474:	6a03      	ldr	r3, [r0, #32]
 8001476:	b90b      	cbnz	r3, 800147c <__swsetup_r+0x14>
 8001478:	f7ff fece 	bl	8001218 <__sinit>
 800147c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001480:	0719      	lsls	r1, r3, #28
 8001482:	d422      	bmi.n	80014ca <__swsetup_r+0x62>
 8001484:	06da      	lsls	r2, r3, #27
 8001486:	d407      	bmi.n	8001498 <__swsetup_r+0x30>
 8001488:	2209      	movs	r2, #9
 800148a:	602a      	str	r2, [r5, #0]
 800148c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001490:	81a3      	strh	r3, [r4, #12]
 8001492:	f04f 30ff 	mov.w	r0, #4294967295
 8001496:	e033      	b.n	8001500 <__swsetup_r+0x98>
 8001498:	0758      	lsls	r0, r3, #29
 800149a:	d512      	bpl.n	80014c2 <__swsetup_r+0x5a>
 800149c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800149e:	b141      	cbz	r1, 80014b2 <__swsetup_r+0x4a>
 80014a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80014a4:	4299      	cmp	r1, r3
 80014a6:	d002      	beq.n	80014ae <__swsetup_r+0x46>
 80014a8:	4628      	mov	r0, r5
 80014aa:	f000 f8af 	bl	800160c <_free_r>
 80014ae:	2300      	movs	r3, #0
 80014b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80014b2:	89a3      	ldrh	r3, [r4, #12]
 80014b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80014b8:	81a3      	strh	r3, [r4, #12]
 80014ba:	2300      	movs	r3, #0
 80014bc:	6063      	str	r3, [r4, #4]
 80014be:	6923      	ldr	r3, [r4, #16]
 80014c0:	6023      	str	r3, [r4, #0]
 80014c2:	89a3      	ldrh	r3, [r4, #12]
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	81a3      	strh	r3, [r4, #12]
 80014ca:	6923      	ldr	r3, [r4, #16]
 80014cc:	b94b      	cbnz	r3, 80014e2 <__swsetup_r+0x7a>
 80014ce:	89a3      	ldrh	r3, [r4, #12]
 80014d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80014d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80014d8:	d003      	beq.n	80014e2 <__swsetup_r+0x7a>
 80014da:	4621      	mov	r1, r4
 80014dc:	4628      	mov	r0, r5
 80014de:	f000 fd2d 	bl	8001f3c <__smakebuf_r>
 80014e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014e6:	f013 0201 	ands.w	r2, r3, #1
 80014ea:	d00a      	beq.n	8001502 <__swsetup_r+0x9a>
 80014ec:	2200      	movs	r2, #0
 80014ee:	60a2      	str	r2, [r4, #8]
 80014f0:	6962      	ldr	r2, [r4, #20]
 80014f2:	4252      	negs	r2, r2
 80014f4:	61a2      	str	r2, [r4, #24]
 80014f6:	6922      	ldr	r2, [r4, #16]
 80014f8:	b942      	cbnz	r2, 800150c <__swsetup_r+0xa4>
 80014fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80014fe:	d1c5      	bne.n	800148c <__swsetup_r+0x24>
 8001500:	bd38      	pop	{r3, r4, r5, pc}
 8001502:	0799      	lsls	r1, r3, #30
 8001504:	bf58      	it	pl
 8001506:	6962      	ldrpl	r2, [r4, #20]
 8001508:	60a2      	str	r2, [r4, #8]
 800150a:	e7f4      	b.n	80014f6 <__swsetup_r+0x8e>
 800150c:	2000      	movs	r0, #0
 800150e:	e7f7      	b.n	8001500 <__swsetup_r+0x98>
 8001510:	20000010 	.word	0x20000010

08001514 <memset>:
 8001514:	4402      	add	r2, r0
 8001516:	4603      	mov	r3, r0
 8001518:	4293      	cmp	r3, r2
 800151a:	d100      	bne.n	800151e <memset+0xa>
 800151c:	4770      	bx	lr
 800151e:	f803 1b01 	strb.w	r1, [r3], #1
 8001522:	e7f9      	b.n	8001518 <memset+0x4>

08001524 <_close_r>:
 8001524:	b538      	push	{r3, r4, r5, lr}
 8001526:	4d06      	ldr	r5, [pc, #24]	@ (8001540 <_close_r+0x1c>)
 8001528:	2300      	movs	r3, #0
 800152a:	4604      	mov	r4, r0
 800152c:	4608      	mov	r0, r1
 800152e:	602b      	str	r3, [r5, #0]
 8001530:	f7ff fd51 	bl	8000fd6 <_close>
 8001534:	1c43      	adds	r3, r0, #1
 8001536:	d102      	bne.n	800153e <_close_r+0x1a>
 8001538:	682b      	ldr	r3, [r5, #0]
 800153a:	b103      	cbz	r3, 800153e <_close_r+0x1a>
 800153c:	6023      	str	r3, [r4, #0]
 800153e:	bd38      	pop	{r3, r4, r5, pc}
 8001540:	200003f0 	.word	0x200003f0

08001544 <_lseek_r>:
 8001544:	b538      	push	{r3, r4, r5, lr}
 8001546:	4d07      	ldr	r5, [pc, #28]	@ (8001564 <_lseek_r+0x20>)
 8001548:	4604      	mov	r4, r0
 800154a:	4608      	mov	r0, r1
 800154c:	4611      	mov	r1, r2
 800154e:	2200      	movs	r2, #0
 8001550:	602a      	str	r2, [r5, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	f7ff fd66 	bl	8001024 <_lseek>
 8001558:	1c43      	adds	r3, r0, #1
 800155a:	d102      	bne.n	8001562 <_lseek_r+0x1e>
 800155c:	682b      	ldr	r3, [r5, #0]
 800155e:	b103      	cbz	r3, 8001562 <_lseek_r+0x1e>
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	bd38      	pop	{r3, r4, r5, pc}
 8001564:	200003f0 	.word	0x200003f0

08001568 <_read_r>:
 8001568:	b538      	push	{r3, r4, r5, lr}
 800156a:	4d07      	ldr	r5, [pc, #28]	@ (8001588 <_read_r+0x20>)
 800156c:	4604      	mov	r4, r0
 800156e:	4608      	mov	r0, r1
 8001570:	4611      	mov	r1, r2
 8001572:	2200      	movs	r2, #0
 8001574:	602a      	str	r2, [r5, #0]
 8001576:	461a      	mov	r2, r3
 8001578:	f7ff fcf4 	bl	8000f64 <_read>
 800157c:	1c43      	adds	r3, r0, #1
 800157e:	d102      	bne.n	8001586 <_read_r+0x1e>
 8001580:	682b      	ldr	r3, [r5, #0]
 8001582:	b103      	cbz	r3, 8001586 <_read_r+0x1e>
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	bd38      	pop	{r3, r4, r5, pc}
 8001588:	200003f0 	.word	0x200003f0

0800158c <_write_r>:
 800158c:	b538      	push	{r3, r4, r5, lr}
 800158e:	4d07      	ldr	r5, [pc, #28]	@ (80015ac <_write_r+0x20>)
 8001590:	4604      	mov	r4, r0
 8001592:	4608      	mov	r0, r1
 8001594:	4611      	mov	r1, r2
 8001596:	2200      	movs	r2, #0
 8001598:	602a      	str	r2, [r5, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	f7ff fcff 	bl	8000f9e <_write>
 80015a0:	1c43      	adds	r3, r0, #1
 80015a2:	d102      	bne.n	80015aa <_write_r+0x1e>
 80015a4:	682b      	ldr	r3, [r5, #0]
 80015a6:	b103      	cbz	r3, 80015aa <_write_r+0x1e>
 80015a8:	6023      	str	r3, [r4, #0]
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
 80015ac:	200003f0 	.word	0x200003f0

080015b0 <__errno>:
 80015b0:	4b01      	ldr	r3, [pc, #4]	@ (80015b8 <__errno+0x8>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	20000010 	.word	0x20000010

080015bc <__libc_init_array>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	4d0d      	ldr	r5, [pc, #52]	@ (80015f4 <__libc_init_array+0x38>)
 80015c0:	4c0d      	ldr	r4, [pc, #52]	@ (80015f8 <__libc_init_array+0x3c>)
 80015c2:	1b64      	subs	r4, r4, r5
 80015c4:	10a4      	asrs	r4, r4, #2
 80015c6:	2600      	movs	r6, #0
 80015c8:	42a6      	cmp	r6, r4
 80015ca:	d109      	bne.n	80015e0 <__libc_init_array+0x24>
 80015cc:	4d0b      	ldr	r5, [pc, #44]	@ (80015fc <__libc_init_array+0x40>)
 80015ce:	4c0c      	ldr	r4, [pc, #48]	@ (8001600 <__libc_init_array+0x44>)
 80015d0:	f000 fd22 	bl	8002018 <_init>
 80015d4:	1b64      	subs	r4, r4, r5
 80015d6:	10a4      	asrs	r4, r4, #2
 80015d8:	2600      	movs	r6, #0
 80015da:	42a6      	cmp	r6, r4
 80015dc:	d105      	bne.n	80015ea <__libc_init_array+0x2e>
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015e4:	4798      	blx	r3
 80015e6:	3601      	adds	r6, #1
 80015e8:	e7ee      	b.n	80015c8 <__libc_init_array+0xc>
 80015ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80015ee:	4798      	blx	r3
 80015f0:	3601      	adds	r6, #1
 80015f2:	e7f2      	b.n	80015da <__libc_init_array+0x1e>
 80015f4:	08002090 	.word	0x08002090
 80015f8:	08002090 	.word	0x08002090
 80015fc:	08002090 	.word	0x08002090
 8001600:	08002094 	.word	0x08002094

08001604 <__retarget_lock_init_recursive>:
 8001604:	4770      	bx	lr

08001606 <__retarget_lock_acquire_recursive>:
 8001606:	4770      	bx	lr

08001608 <__retarget_lock_release_recursive>:
 8001608:	4770      	bx	lr
	...

0800160c <_free_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4605      	mov	r5, r0
 8001610:	2900      	cmp	r1, #0
 8001612:	d041      	beq.n	8001698 <_free_r+0x8c>
 8001614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001618:	1f0c      	subs	r4, r1, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	bfb8      	it	lt
 800161e:	18e4      	addlt	r4, r4, r3
 8001620:	f000 f8e0 	bl	80017e4 <__malloc_lock>
 8001624:	4a1d      	ldr	r2, [pc, #116]	@ (800169c <_free_r+0x90>)
 8001626:	6813      	ldr	r3, [r2, #0]
 8001628:	b933      	cbnz	r3, 8001638 <_free_r+0x2c>
 800162a:	6063      	str	r3, [r4, #4]
 800162c:	6014      	str	r4, [r2, #0]
 800162e:	4628      	mov	r0, r5
 8001630:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001634:	f000 b8dc 	b.w	80017f0 <__malloc_unlock>
 8001638:	42a3      	cmp	r3, r4
 800163a:	d908      	bls.n	800164e <_free_r+0x42>
 800163c:	6820      	ldr	r0, [r4, #0]
 800163e:	1821      	adds	r1, r4, r0
 8001640:	428b      	cmp	r3, r1
 8001642:	bf01      	itttt	eq
 8001644:	6819      	ldreq	r1, [r3, #0]
 8001646:	685b      	ldreq	r3, [r3, #4]
 8001648:	1809      	addeq	r1, r1, r0
 800164a:	6021      	streq	r1, [r4, #0]
 800164c:	e7ed      	b.n	800162a <_free_r+0x1e>
 800164e:	461a      	mov	r2, r3
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	b10b      	cbz	r3, 8001658 <_free_r+0x4c>
 8001654:	42a3      	cmp	r3, r4
 8001656:	d9fa      	bls.n	800164e <_free_r+0x42>
 8001658:	6811      	ldr	r1, [r2, #0]
 800165a:	1850      	adds	r0, r2, r1
 800165c:	42a0      	cmp	r0, r4
 800165e:	d10b      	bne.n	8001678 <_free_r+0x6c>
 8001660:	6820      	ldr	r0, [r4, #0]
 8001662:	4401      	add	r1, r0
 8001664:	1850      	adds	r0, r2, r1
 8001666:	4283      	cmp	r3, r0
 8001668:	6011      	str	r1, [r2, #0]
 800166a:	d1e0      	bne.n	800162e <_free_r+0x22>
 800166c:	6818      	ldr	r0, [r3, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	6053      	str	r3, [r2, #4]
 8001672:	4408      	add	r0, r1
 8001674:	6010      	str	r0, [r2, #0]
 8001676:	e7da      	b.n	800162e <_free_r+0x22>
 8001678:	d902      	bls.n	8001680 <_free_r+0x74>
 800167a:	230c      	movs	r3, #12
 800167c:	602b      	str	r3, [r5, #0]
 800167e:	e7d6      	b.n	800162e <_free_r+0x22>
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	1821      	adds	r1, r4, r0
 8001684:	428b      	cmp	r3, r1
 8001686:	bf04      	itt	eq
 8001688:	6819      	ldreq	r1, [r3, #0]
 800168a:	685b      	ldreq	r3, [r3, #4]
 800168c:	6063      	str	r3, [r4, #4]
 800168e:	bf04      	itt	eq
 8001690:	1809      	addeq	r1, r1, r0
 8001692:	6021      	streq	r1, [r4, #0]
 8001694:	6054      	str	r4, [r2, #4]
 8001696:	e7ca      	b.n	800162e <_free_r+0x22>
 8001698:	bd38      	pop	{r3, r4, r5, pc}
 800169a:	bf00      	nop
 800169c:	200003fc 	.word	0x200003fc

080016a0 <sbrk_aligned>:
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	4e0f      	ldr	r6, [pc, #60]	@ (80016e0 <sbrk_aligned+0x40>)
 80016a4:	460c      	mov	r4, r1
 80016a6:	6831      	ldr	r1, [r6, #0]
 80016a8:	4605      	mov	r5, r0
 80016aa:	b911      	cbnz	r1, 80016b2 <sbrk_aligned+0x12>
 80016ac:	f000 fca4 	bl	8001ff8 <_sbrk_r>
 80016b0:	6030      	str	r0, [r6, #0]
 80016b2:	4621      	mov	r1, r4
 80016b4:	4628      	mov	r0, r5
 80016b6:	f000 fc9f 	bl	8001ff8 <_sbrk_r>
 80016ba:	1c43      	adds	r3, r0, #1
 80016bc:	d103      	bne.n	80016c6 <sbrk_aligned+0x26>
 80016be:	f04f 34ff 	mov.w	r4, #4294967295
 80016c2:	4620      	mov	r0, r4
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
 80016c6:	1cc4      	adds	r4, r0, #3
 80016c8:	f024 0403 	bic.w	r4, r4, #3
 80016cc:	42a0      	cmp	r0, r4
 80016ce:	d0f8      	beq.n	80016c2 <sbrk_aligned+0x22>
 80016d0:	1a21      	subs	r1, r4, r0
 80016d2:	4628      	mov	r0, r5
 80016d4:	f000 fc90 	bl	8001ff8 <_sbrk_r>
 80016d8:	3001      	adds	r0, #1
 80016da:	d1f2      	bne.n	80016c2 <sbrk_aligned+0x22>
 80016dc:	e7ef      	b.n	80016be <sbrk_aligned+0x1e>
 80016de:	bf00      	nop
 80016e0:	200003f8 	.word	0x200003f8

080016e4 <_malloc_r>:
 80016e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016e8:	1ccd      	adds	r5, r1, #3
 80016ea:	f025 0503 	bic.w	r5, r5, #3
 80016ee:	3508      	adds	r5, #8
 80016f0:	2d0c      	cmp	r5, #12
 80016f2:	bf38      	it	cc
 80016f4:	250c      	movcc	r5, #12
 80016f6:	2d00      	cmp	r5, #0
 80016f8:	4606      	mov	r6, r0
 80016fa:	db01      	blt.n	8001700 <_malloc_r+0x1c>
 80016fc:	42a9      	cmp	r1, r5
 80016fe:	d904      	bls.n	800170a <_malloc_r+0x26>
 8001700:	230c      	movs	r3, #12
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	2000      	movs	r0, #0
 8001706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800170a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017e0 <_malloc_r+0xfc>
 800170e:	f000 f869 	bl	80017e4 <__malloc_lock>
 8001712:	f8d8 3000 	ldr.w	r3, [r8]
 8001716:	461c      	mov	r4, r3
 8001718:	bb44      	cbnz	r4, 800176c <_malloc_r+0x88>
 800171a:	4629      	mov	r1, r5
 800171c:	4630      	mov	r0, r6
 800171e:	f7ff ffbf 	bl	80016a0 <sbrk_aligned>
 8001722:	1c43      	adds	r3, r0, #1
 8001724:	4604      	mov	r4, r0
 8001726:	d158      	bne.n	80017da <_malloc_r+0xf6>
 8001728:	f8d8 4000 	ldr.w	r4, [r8]
 800172c:	4627      	mov	r7, r4
 800172e:	2f00      	cmp	r7, #0
 8001730:	d143      	bne.n	80017ba <_malloc_r+0xd6>
 8001732:	2c00      	cmp	r4, #0
 8001734:	d04b      	beq.n	80017ce <_malloc_r+0xea>
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	4639      	mov	r1, r7
 800173a:	4630      	mov	r0, r6
 800173c:	eb04 0903 	add.w	r9, r4, r3
 8001740:	f000 fc5a 	bl	8001ff8 <_sbrk_r>
 8001744:	4581      	cmp	r9, r0
 8001746:	d142      	bne.n	80017ce <_malloc_r+0xea>
 8001748:	6821      	ldr	r1, [r4, #0]
 800174a:	1a6d      	subs	r5, r5, r1
 800174c:	4629      	mov	r1, r5
 800174e:	4630      	mov	r0, r6
 8001750:	f7ff ffa6 	bl	80016a0 <sbrk_aligned>
 8001754:	3001      	adds	r0, #1
 8001756:	d03a      	beq.n	80017ce <_malloc_r+0xea>
 8001758:	6823      	ldr	r3, [r4, #0]
 800175a:	442b      	add	r3, r5
 800175c:	6023      	str	r3, [r4, #0]
 800175e:	f8d8 3000 	ldr.w	r3, [r8]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	bb62      	cbnz	r2, 80017c0 <_malloc_r+0xdc>
 8001766:	f8c8 7000 	str.w	r7, [r8]
 800176a:	e00f      	b.n	800178c <_malloc_r+0xa8>
 800176c:	6822      	ldr	r2, [r4, #0]
 800176e:	1b52      	subs	r2, r2, r5
 8001770:	d420      	bmi.n	80017b4 <_malloc_r+0xd0>
 8001772:	2a0b      	cmp	r2, #11
 8001774:	d917      	bls.n	80017a6 <_malloc_r+0xc2>
 8001776:	1961      	adds	r1, r4, r5
 8001778:	42a3      	cmp	r3, r4
 800177a:	6025      	str	r5, [r4, #0]
 800177c:	bf18      	it	ne
 800177e:	6059      	strne	r1, [r3, #4]
 8001780:	6863      	ldr	r3, [r4, #4]
 8001782:	bf08      	it	eq
 8001784:	f8c8 1000 	streq.w	r1, [r8]
 8001788:	5162      	str	r2, [r4, r5]
 800178a:	604b      	str	r3, [r1, #4]
 800178c:	4630      	mov	r0, r6
 800178e:	f000 f82f 	bl	80017f0 <__malloc_unlock>
 8001792:	f104 000b 	add.w	r0, r4, #11
 8001796:	1d23      	adds	r3, r4, #4
 8001798:	f020 0007 	bic.w	r0, r0, #7
 800179c:	1ac2      	subs	r2, r0, r3
 800179e:	bf1c      	itt	ne
 80017a0:	1a1b      	subne	r3, r3, r0
 80017a2:	50a3      	strne	r3, [r4, r2]
 80017a4:	e7af      	b.n	8001706 <_malloc_r+0x22>
 80017a6:	6862      	ldr	r2, [r4, #4]
 80017a8:	42a3      	cmp	r3, r4
 80017aa:	bf0c      	ite	eq
 80017ac:	f8c8 2000 	streq.w	r2, [r8]
 80017b0:	605a      	strne	r2, [r3, #4]
 80017b2:	e7eb      	b.n	800178c <_malloc_r+0xa8>
 80017b4:	4623      	mov	r3, r4
 80017b6:	6864      	ldr	r4, [r4, #4]
 80017b8:	e7ae      	b.n	8001718 <_malloc_r+0x34>
 80017ba:	463c      	mov	r4, r7
 80017bc:	687f      	ldr	r7, [r7, #4]
 80017be:	e7b6      	b.n	800172e <_malloc_r+0x4a>
 80017c0:	461a      	mov	r2, r3
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	42a3      	cmp	r3, r4
 80017c6:	d1fb      	bne.n	80017c0 <_malloc_r+0xdc>
 80017c8:	2300      	movs	r3, #0
 80017ca:	6053      	str	r3, [r2, #4]
 80017cc:	e7de      	b.n	800178c <_malloc_r+0xa8>
 80017ce:	230c      	movs	r3, #12
 80017d0:	6033      	str	r3, [r6, #0]
 80017d2:	4630      	mov	r0, r6
 80017d4:	f000 f80c 	bl	80017f0 <__malloc_unlock>
 80017d8:	e794      	b.n	8001704 <_malloc_r+0x20>
 80017da:	6005      	str	r5, [r0, #0]
 80017dc:	e7d6      	b.n	800178c <_malloc_r+0xa8>
 80017de:	bf00      	nop
 80017e0:	200003fc 	.word	0x200003fc

080017e4 <__malloc_lock>:
 80017e4:	4801      	ldr	r0, [pc, #4]	@ (80017ec <__malloc_lock+0x8>)
 80017e6:	f7ff bf0e 	b.w	8001606 <__retarget_lock_acquire_recursive>
 80017ea:	bf00      	nop
 80017ec:	200003f4 	.word	0x200003f4

080017f0 <__malloc_unlock>:
 80017f0:	4801      	ldr	r0, [pc, #4]	@ (80017f8 <__malloc_unlock+0x8>)
 80017f2:	f7ff bf09 	b.w	8001608 <__retarget_lock_release_recursive>
 80017f6:	bf00      	nop
 80017f8:	200003f4 	.word	0x200003f4

080017fc <__sfputc_r>:
 80017fc:	6893      	ldr	r3, [r2, #8]
 80017fe:	3b01      	subs	r3, #1
 8001800:	2b00      	cmp	r3, #0
 8001802:	b410      	push	{r4}
 8001804:	6093      	str	r3, [r2, #8]
 8001806:	da08      	bge.n	800181a <__sfputc_r+0x1e>
 8001808:	6994      	ldr	r4, [r2, #24]
 800180a:	42a3      	cmp	r3, r4
 800180c:	db01      	blt.n	8001812 <__sfputc_r+0x16>
 800180e:	290a      	cmp	r1, #10
 8001810:	d103      	bne.n	800181a <__sfputc_r+0x1e>
 8001812:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001816:	f7ff bde8 	b.w	80013ea <__swbuf_r>
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	1c58      	adds	r0, r3, #1
 800181e:	6010      	str	r0, [r2, #0]
 8001820:	7019      	strb	r1, [r3, #0]
 8001822:	4608      	mov	r0, r1
 8001824:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001828:	4770      	bx	lr

0800182a <__sfputs_r>:
 800182a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800182c:	4606      	mov	r6, r0
 800182e:	460f      	mov	r7, r1
 8001830:	4614      	mov	r4, r2
 8001832:	18d5      	adds	r5, r2, r3
 8001834:	42ac      	cmp	r4, r5
 8001836:	d101      	bne.n	800183c <__sfputs_r+0x12>
 8001838:	2000      	movs	r0, #0
 800183a:	e007      	b.n	800184c <__sfputs_r+0x22>
 800183c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001840:	463a      	mov	r2, r7
 8001842:	4630      	mov	r0, r6
 8001844:	f7ff ffda 	bl	80017fc <__sfputc_r>
 8001848:	1c43      	adds	r3, r0, #1
 800184a:	d1f3      	bne.n	8001834 <__sfputs_r+0xa>
 800184c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001850 <_vfiprintf_r>:
 8001850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001854:	460d      	mov	r5, r1
 8001856:	b09d      	sub	sp, #116	@ 0x74
 8001858:	4614      	mov	r4, r2
 800185a:	4698      	mov	r8, r3
 800185c:	4606      	mov	r6, r0
 800185e:	b118      	cbz	r0, 8001868 <_vfiprintf_r+0x18>
 8001860:	6a03      	ldr	r3, [r0, #32]
 8001862:	b90b      	cbnz	r3, 8001868 <_vfiprintf_r+0x18>
 8001864:	f7ff fcd8 	bl	8001218 <__sinit>
 8001868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800186a:	07d9      	lsls	r1, r3, #31
 800186c:	d405      	bmi.n	800187a <_vfiprintf_r+0x2a>
 800186e:	89ab      	ldrh	r3, [r5, #12]
 8001870:	059a      	lsls	r2, r3, #22
 8001872:	d402      	bmi.n	800187a <_vfiprintf_r+0x2a>
 8001874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001876:	f7ff fec6 	bl	8001606 <__retarget_lock_acquire_recursive>
 800187a:	89ab      	ldrh	r3, [r5, #12]
 800187c:	071b      	lsls	r3, r3, #28
 800187e:	d501      	bpl.n	8001884 <_vfiprintf_r+0x34>
 8001880:	692b      	ldr	r3, [r5, #16]
 8001882:	b99b      	cbnz	r3, 80018ac <_vfiprintf_r+0x5c>
 8001884:	4629      	mov	r1, r5
 8001886:	4630      	mov	r0, r6
 8001888:	f7ff fdee 	bl	8001468 <__swsetup_r>
 800188c:	b170      	cbz	r0, 80018ac <_vfiprintf_r+0x5c>
 800188e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001890:	07dc      	lsls	r4, r3, #31
 8001892:	d504      	bpl.n	800189e <_vfiprintf_r+0x4e>
 8001894:	f04f 30ff 	mov.w	r0, #4294967295
 8001898:	b01d      	add	sp, #116	@ 0x74
 800189a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800189e:	89ab      	ldrh	r3, [r5, #12]
 80018a0:	0598      	lsls	r0, r3, #22
 80018a2:	d4f7      	bmi.n	8001894 <_vfiprintf_r+0x44>
 80018a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80018a6:	f7ff feaf 	bl	8001608 <__retarget_lock_release_recursive>
 80018aa:	e7f3      	b.n	8001894 <_vfiprintf_r+0x44>
 80018ac:	2300      	movs	r3, #0
 80018ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80018b0:	2320      	movs	r3, #32
 80018b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80018b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80018ba:	2330      	movs	r3, #48	@ 0x30
 80018bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001a6c <_vfiprintf_r+0x21c>
 80018c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80018c4:	f04f 0901 	mov.w	r9, #1
 80018c8:	4623      	mov	r3, r4
 80018ca:	469a      	mov	sl, r3
 80018cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80018d0:	b10a      	cbz	r2, 80018d6 <_vfiprintf_r+0x86>
 80018d2:	2a25      	cmp	r2, #37	@ 0x25
 80018d4:	d1f9      	bne.n	80018ca <_vfiprintf_r+0x7a>
 80018d6:	ebba 0b04 	subs.w	fp, sl, r4
 80018da:	d00b      	beq.n	80018f4 <_vfiprintf_r+0xa4>
 80018dc:	465b      	mov	r3, fp
 80018de:	4622      	mov	r2, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	4630      	mov	r0, r6
 80018e4:	f7ff ffa1 	bl	800182a <__sfputs_r>
 80018e8:	3001      	adds	r0, #1
 80018ea:	f000 80a7 	beq.w	8001a3c <_vfiprintf_r+0x1ec>
 80018ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80018f0:	445a      	add	r2, fp
 80018f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80018f4:	f89a 3000 	ldrb.w	r3, [sl]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 809f 	beq.w	8001a3c <_vfiprintf_r+0x1ec>
 80018fe:	2300      	movs	r3, #0
 8001900:	f04f 32ff 	mov.w	r2, #4294967295
 8001904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001908:	f10a 0a01 	add.w	sl, sl, #1
 800190c:	9304      	str	r3, [sp, #16]
 800190e:	9307      	str	r3, [sp, #28]
 8001910:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001914:	931a      	str	r3, [sp, #104]	@ 0x68
 8001916:	4654      	mov	r4, sl
 8001918:	2205      	movs	r2, #5
 800191a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800191e:	4853      	ldr	r0, [pc, #332]	@ (8001a6c <_vfiprintf_r+0x21c>)
 8001920:	f7fe fc56 	bl	80001d0 <memchr>
 8001924:	9a04      	ldr	r2, [sp, #16]
 8001926:	b9d8      	cbnz	r0, 8001960 <_vfiprintf_r+0x110>
 8001928:	06d1      	lsls	r1, r2, #27
 800192a:	bf44      	itt	mi
 800192c:	2320      	movmi	r3, #32
 800192e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001932:	0713      	lsls	r3, r2, #28
 8001934:	bf44      	itt	mi
 8001936:	232b      	movmi	r3, #43	@ 0x2b
 8001938:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800193c:	f89a 3000 	ldrb.w	r3, [sl]
 8001940:	2b2a      	cmp	r3, #42	@ 0x2a
 8001942:	d015      	beq.n	8001970 <_vfiprintf_r+0x120>
 8001944:	9a07      	ldr	r2, [sp, #28]
 8001946:	4654      	mov	r4, sl
 8001948:	2000      	movs	r0, #0
 800194a:	f04f 0c0a 	mov.w	ip, #10
 800194e:	4621      	mov	r1, r4
 8001950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001954:	3b30      	subs	r3, #48	@ 0x30
 8001956:	2b09      	cmp	r3, #9
 8001958:	d94b      	bls.n	80019f2 <_vfiprintf_r+0x1a2>
 800195a:	b1b0      	cbz	r0, 800198a <_vfiprintf_r+0x13a>
 800195c:	9207      	str	r2, [sp, #28]
 800195e:	e014      	b.n	800198a <_vfiprintf_r+0x13a>
 8001960:	eba0 0308 	sub.w	r3, r0, r8
 8001964:	fa09 f303 	lsl.w	r3, r9, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	9304      	str	r3, [sp, #16]
 800196c:	46a2      	mov	sl, r4
 800196e:	e7d2      	b.n	8001916 <_vfiprintf_r+0xc6>
 8001970:	9b03      	ldr	r3, [sp, #12]
 8001972:	1d19      	adds	r1, r3, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	9103      	str	r1, [sp, #12]
 8001978:	2b00      	cmp	r3, #0
 800197a:	bfbb      	ittet	lt
 800197c:	425b      	neglt	r3, r3
 800197e:	f042 0202 	orrlt.w	r2, r2, #2
 8001982:	9307      	strge	r3, [sp, #28]
 8001984:	9307      	strlt	r3, [sp, #28]
 8001986:	bfb8      	it	lt
 8001988:	9204      	strlt	r2, [sp, #16]
 800198a:	7823      	ldrb	r3, [r4, #0]
 800198c:	2b2e      	cmp	r3, #46	@ 0x2e
 800198e:	d10a      	bne.n	80019a6 <_vfiprintf_r+0x156>
 8001990:	7863      	ldrb	r3, [r4, #1]
 8001992:	2b2a      	cmp	r3, #42	@ 0x2a
 8001994:	d132      	bne.n	80019fc <_vfiprintf_r+0x1ac>
 8001996:	9b03      	ldr	r3, [sp, #12]
 8001998:	1d1a      	adds	r2, r3, #4
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	9203      	str	r2, [sp, #12]
 800199e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80019a2:	3402      	adds	r4, #2
 80019a4:	9305      	str	r3, [sp, #20]
 80019a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001a7c <_vfiprintf_r+0x22c>
 80019aa:	7821      	ldrb	r1, [r4, #0]
 80019ac:	2203      	movs	r2, #3
 80019ae:	4650      	mov	r0, sl
 80019b0:	f7fe fc0e 	bl	80001d0 <memchr>
 80019b4:	b138      	cbz	r0, 80019c6 <_vfiprintf_r+0x176>
 80019b6:	9b04      	ldr	r3, [sp, #16]
 80019b8:	eba0 000a 	sub.w	r0, r0, sl
 80019bc:	2240      	movs	r2, #64	@ 0x40
 80019be:	4082      	lsls	r2, r0
 80019c0:	4313      	orrs	r3, r2
 80019c2:	3401      	adds	r4, #1
 80019c4:	9304      	str	r3, [sp, #16]
 80019c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80019ca:	4829      	ldr	r0, [pc, #164]	@ (8001a70 <_vfiprintf_r+0x220>)
 80019cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80019d0:	2206      	movs	r2, #6
 80019d2:	f7fe fbfd 	bl	80001d0 <memchr>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d03f      	beq.n	8001a5a <_vfiprintf_r+0x20a>
 80019da:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <_vfiprintf_r+0x224>)
 80019dc:	bb1b      	cbnz	r3, 8001a26 <_vfiprintf_r+0x1d6>
 80019de:	9b03      	ldr	r3, [sp, #12]
 80019e0:	3307      	adds	r3, #7
 80019e2:	f023 0307 	bic.w	r3, r3, #7
 80019e6:	3308      	adds	r3, #8
 80019e8:	9303      	str	r3, [sp, #12]
 80019ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80019ec:	443b      	add	r3, r7
 80019ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80019f0:	e76a      	b.n	80018c8 <_vfiprintf_r+0x78>
 80019f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80019f6:	460c      	mov	r4, r1
 80019f8:	2001      	movs	r0, #1
 80019fa:	e7a8      	b.n	800194e <_vfiprintf_r+0xfe>
 80019fc:	2300      	movs	r3, #0
 80019fe:	3401      	adds	r4, #1
 8001a00:	9305      	str	r3, [sp, #20]
 8001a02:	4619      	mov	r1, r3
 8001a04:	f04f 0c0a 	mov.w	ip, #10
 8001a08:	4620      	mov	r0, r4
 8001a0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001a0e:	3a30      	subs	r2, #48	@ 0x30
 8001a10:	2a09      	cmp	r2, #9
 8001a12:	d903      	bls.n	8001a1c <_vfiprintf_r+0x1cc>
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0c6      	beq.n	80019a6 <_vfiprintf_r+0x156>
 8001a18:	9105      	str	r1, [sp, #20]
 8001a1a:	e7c4      	b.n	80019a6 <_vfiprintf_r+0x156>
 8001a1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001a20:	4604      	mov	r4, r0
 8001a22:	2301      	movs	r3, #1
 8001a24:	e7f0      	b.n	8001a08 <_vfiprintf_r+0x1b8>
 8001a26:	ab03      	add	r3, sp, #12
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	462a      	mov	r2, r5
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <_vfiprintf_r+0x228>)
 8001a2e:	a904      	add	r1, sp, #16
 8001a30:	4630      	mov	r0, r6
 8001a32:	f3af 8000 	nop.w
 8001a36:	4607      	mov	r7, r0
 8001a38:	1c78      	adds	r0, r7, #1
 8001a3a:	d1d6      	bne.n	80019ea <_vfiprintf_r+0x19a>
 8001a3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001a3e:	07d9      	lsls	r1, r3, #31
 8001a40:	d405      	bmi.n	8001a4e <_vfiprintf_r+0x1fe>
 8001a42:	89ab      	ldrh	r3, [r5, #12]
 8001a44:	059a      	lsls	r2, r3, #22
 8001a46:	d402      	bmi.n	8001a4e <_vfiprintf_r+0x1fe>
 8001a48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001a4a:	f7ff fddd 	bl	8001608 <__retarget_lock_release_recursive>
 8001a4e:	89ab      	ldrh	r3, [r5, #12]
 8001a50:	065b      	lsls	r3, r3, #25
 8001a52:	f53f af1f 	bmi.w	8001894 <_vfiprintf_r+0x44>
 8001a56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001a58:	e71e      	b.n	8001898 <_vfiprintf_r+0x48>
 8001a5a:	ab03      	add	r3, sp, #12
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	462a      	mov	r2, r5
 8001a60:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <_vfiprintf_r+0x228>)
 8001a62:	a904      	add	r1, sp, #16
 8001a64:	4630      	mov	r0, r6
 8001a66:	f000 f879 	bl	8001b5c <_printf_i>
 8001a6a:	e7e4      	b.n	8001a36 <_vfiprintf_r+0x1e6>
 8001a6c:	08002054 	.word	0x08002054
 8001a70:	0800205e 	.word	0x0800205e
 8001a74:	00000000 	.word	0x00000000
 8001a78:	0800182b 	.word	0x0800182b
 8001a7c:	0800205a 	.word	0x0800205a

08001a80 <_printf_common>:
 8001a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a84:	4616      	mov	r6, r2
 8001a86:	4698      	mov	r8, r3
 8001a88:	688a      	ldr	r2, [r1, #8]
 8001a8a:	690b      	ldr	r3, [r1, #16]
 8001a8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bfb8      	it	lt
 8001a94:	4613      	movlt	r3, r2
 8001a96:	6033      	str	r3, [r6, #0]
 8001a98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001a9c:	4607      	mov	r7, r0
 8001a9e:	460c      	mov	r4, r1
 8001aa0:	b10a      	cbz	r2, 8001aa6 <_printf_common+0x26>
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	6033      	str	r3, [r6, #0]
 8001aa6:	6823      	ldr	r3, [r4, #0]
 8001aa8:	0699      	lsls	r1, r3, #26
 8001aaa:	bf42      	ittt	mi
 8001aac:	6833      	ldrmi	r3, [r6, #0]
 8001aae:	3302      	addmi	r3, #2
 8001ab0:	6033      	strmi	r3, [r6, #0]
 8001ab2:	6825      	ldr	r5, [r4, #0]
 8001ab4:	f015 0506 	ands.w	r5, r5, #6
 8001ab8:	d106      	bne.n	8001ac8 <_printf_common+0x48>
 8001aba:	f104 0a19 	add.w	sl, r4, #25
 8001abe:	68e3      	ldr	r3, [r4, #12]
 8001ac0:	6832      	ldr	r2, [r6, #0]
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	42ab      	cmp	r3, r5
 8001ac6:	dc26      	bgt.n	8001b16 <_printf_common+0x96>
 8001ac8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001acc:	6822      	ldr	r2, [r4, #0]
 8001ace:	3b00      	subs	r3, #0
 8001ad0:	bf18      	it	ne
 8001ad2:	2301      	movne	r3, #1
 8001ad4:	0692      	lsls	r2, r2, #26
 8001ad6:	d42b      	bmi.n	8001b30 <_printf_common+0xb0>
 8001ad8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001adc:	4641      	mov	r1, r8
 8001ade:	4638      	mov	r0, r7
 8001ae0:	47c8      	blx	r9
 8001ae2:	3001      	adds	r0, #1
 8001ae4:	d01e      	beq.n	8001b24 <_printf_common+0xa4>
 8001ae6:	6823      	ldr	r3, [r4, #0]
 8001ae8:	6922      	ldr	r2, [r4, #16]
 8001aea:	f003 0306 	and.w	r3, r3, #6
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf02      	ittt	eq
 8001af2:	68e5      	ldreq	r5, [r4, #12]
 8001af4:	6833      	ldreq	r3, [r6, #0]
 8001af6:	1aed      	subeq	r5, r5, r3
 8001af8:	68a3      	ldr	r3, [r4, #8]
 8001afa:	bf0c      	ite	eq
 8001afc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001b00:	2500      	movne	r5, #0
 8001b02:	4293      	cmp	r3, r2
 8001b04:	bfc4      	itt	gt
 8001b06:	1a9b      	subgt	r3, r3, r2
 8001b08:	18ed      	addgt	r5, r5, r3
 8001b0a:	2600      	movs	r6, #0
 8001b0c:	341a      	adds	r4, #26
 8001b0e:	42b5      	cmp	r5, r6
 8001b10:	d11a      	bne.n	8001b48 <_printf_common+0xc8>
 8001b12:	2000      	movs	r0, #0
 8001b14:	e008      	b.n	8001b28 <_printf_common+0xa8>
 8001b16:	2301      	movs	r3, #1
 8001b18:	4652      	mov	r2, sl
 8001b1a:	4641      	mov	r1, r8
 8001b1c:	4638      	mov	r0, r7
 8001b1e:	47c8      	blx	r9
 8001b20:	3001      	adds	r0, #1
 8001b22:	d103      	bne.n	8001b2c <_printf_common+0xac>
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295
 8001b28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b2c:	3501      	adds	r5, #1
 8001b2e:	e7c6      	b.n	8001abe <_printf_common+0x3e>
 8001b30:	18e1      	adds	r1, r4, r3
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	2030      	movs	r0, #48	@ 0x30
 8001b36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001b3a:	4422      	add	r2, r4
 8001b3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001b40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001b44:	3302      	adds	r3, #2
 8001b46:	e7c7      	b.n	8001ad8 <_printf_common+0x58>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	4622      	mov	r2, r4
 8001b4c:	4641      	mov	r1, r8
 8001b4e:	4638      	mov	r0, r7
 8001b50:	47c8      	blx	r9
 8001b52:	3001      	adds	r0, #1
 8001b54:	d0e6      	beq.n	8001b24 <_printf_common+0xa4>
 8001b56:	3601      	adds	r6, #1
 8001b58:	e7d9      	b.n	8001b0e <_printf_common+0x8e>
	...

08001b5c <_printf_i>:
 8001b5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b60:	7e0f      	ldrb	r7, [r1, #24]
 8001b62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001b64:	2f78      	cmp	r7, #120	@ 0x78
 8001b66:	4691      	mov	r9, r2
 8001b68:	4680      	mov	r8, r0
 8001b6a:	460c      	mov	r4, r1
 8001b6c:	469a      	mov	sl, r3
 8001b6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001b72:	d807      	bhi.n	8001b84 <_printf_i+0x28>
 8001b74:	2f62      	cmp	r7, #98	@ 0x62
 8001b76:	d80a      	bhi.n	8001b8e <_printf_i+0x32>
 8001b78:	2f00      	cmp	r7, #0
 8001b7a:	f000 80d1 	beq.w	8001d20 <_printf_i+0x1c4>
 8001b7e:	2f58      	cmp	r7, #88	@ 0x58
 8001b80:	f000 80b8 	beq.w	8001cf4 <_printf_i+0x198>
 8001b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001b88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001b8c:	e03a      	b.n	8001c04 <_printf_i+0xa8>
 8001b8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001b92:	2b15      	cmp	r3, #21
 8001b94:	d8f6      	bhi.n	8001b84 <_printf_i+0x28>
 8001b96:	a101      	add	r1, pc, #4	@ (adr r1, 8001b9c <_printf_i+0x40>)
 8001b98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001b9c:	08001bf5 	.word	0x08001bf5
 8001ba0:	08001c09 	.word	0x08001c09
 8001ba4:	08001b85 	.word	0x08001b85
 8001ba8:	08001b85 	.word	0x08001b85
 8001bac:	08001b85 	.word	0x08001b85
 8001bb0:	08001b85 	.word	0x08001b85
 8001bb4:	08001c09 	.word	0x08001c09
 8001bb8:	08001b85 	.word	0x08001b85
 8001bbc:	08001b85 	.word	0x08001b85
 8001bc0:	08001b85 	.word	0x08001b85
 8001bc4:	08001b85 	.word	0x08001b85
 8001bc8:	08001d07 	.word	0x08001d07
 8001bcc:	08001c33 	.word	0x08001c33
 8001bd0:	08001cc1 	.word	0x08001cc1
 8001bd4:	08001b85 	.word	0x08001b85
 8001bd8:	08001b85 	.word	0x08001b85
 8001bdc:	08001d29 	.word	0x08001d29
 8001be0:	08001b85 	.word	0x08001b85
 8001be4:	08001c33 	.word	0x08001c33
 8001be8:	08001b85 	.word	0x08001b85
 8001bec:	08001b85 	.word	0x08001b85
 8001bf0:	08001cc9 	.word	0x08001cc9
 8001bf4:	6833      	ldr	r3, [r6, #0]
 8001bf6:	1d1a      	adds	r2, r3, #4
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6032      	str	r2, [r6, #0]
 8001bfc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001c04:	2301      	movs	r3, #1
 8001c06:	e09c      	b.n	8001d42 <_printf_i+0x1e6>
 8001c08:	6833      	ldr	r3, [r6, #0]
 8001c0a:	6820      	ldr	r0, [r4, #0]
 8001c0c:	1d19      	adds	r1, r3, #4
 8001c0e:	6031      	str	r1, [r6, #0]
 8001c10:	0606      	lsls	r6, r0, #24
 8001c12:	d501      	bpl.n	8001c18 <_printf_i+0xbc>
 8001c14:	681d      	ldr	r5, [r3, #0]
 8001c16:	e003      	b.n	8001c20 <_printf_i+0xc4>
 8001c18:	0645      	lsls	r5, r0, #25
 8001c1a:	d5fb      	bpl.n	8001c14 <_printf_i+0xb8>
 8001c1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001c20:	2d00      	cmp	r5, #0
 8001c22:	da03      	bge.n	8001c2c <_printf_i+0xd0>
 8001c24:	232d      	movs	r3, #45	@ 0x2d
 8001c26:	426d      	negs	r5, r5
 8001c28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001c2c:	4858      	ldr	r0, [pc, #352]	@ (8001d90 <_printf_i+0x234>)
 8001c2e:	230a      	movs	r3, #10
 8001c30:	e011      	b.n	8001c56 <_printf_i+0xfa>
 8001c32:	6821      	ldr	r1, [r4, #0]
 8001c34:	6833      	ldr	r3, [r6, #0]
 8001c36:	0608      	lsls	r0, r1, #24
 8001c38:	f853 5b04 	ldr.w	r5, [r3], #4
 8001c3c:	d402      	bmi.n	8001c44 <_printf_i+0xe8>
 8001c3e:	0649      	lsls	r1, r1, #25
 8001c40:	bf48      	it	mi
 8001c42:	b2ad      	uxthmi	r5, r5
 8001c44:	2f6f      	cmp	r7, #111	@ 0x6f
 8001c46:	4852      	ldr	r0, [pc, #328]	@ (8001d90 <_printf_i+0x234>)
 8001c48:	6033      	str	r3, [r6, #0]
 8001c4a:	bf14      	ite	ne
 8001c4c:	230a      	movne	r3, #10
 8001c4e:	2308      	moveq	r3, #8
 8001c50:	2100      	movs	r1, #0
 8001c52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001c56:	6866      	ldr	r6, [r4, #4]
 8001c58:	60a6      	str	r6, [r4, #8]
 8001c5a:	2e00      	cmp	r6, #0
 8001c5c:	db05      	blt.n	8001c6a <_printf_i+0x10e>
 8001c5e:	6821      	ldr	r1, [r4, #0]
 8001c60:	432e      	orrs	r6, r5
 8001c62:	f021 0104 	bic.w	r1, r1, #4
 8001c66:	6021      	str	r1, [r4, #0]
 8001c68:	d04b      	beq.n	8001d02 <_printf_i+0x1a6>
 8001c6a:	4616      	mov	r6, r2
 8001c6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001c70:	fb03 5711 	mls	r7, r3, r1, r5
 8001c74:	5dc7      	ldrb	r7, [r0, r7]
 8001c76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001c7a:	462f      	mov	r7, r5
 8001c7c:	42bb      	cmp	r3, r7
 8001c7e:	460d      	mov	r5, r1
 8001c80:	d9f4      	bls.n	8001c6c <_printf_i+0x110>
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d10b      	bne.n	8001c9e <_printf_i+0x142>
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	07df      	lsls	r7, r3, #31
 8001c8a:	d508      	bpl.n	8001c9e <_printf_i+0x142>
 8001c8c:	6923      	ldr	r3, [r4, #16]
 8001c8e:	6861      	ldr	r1, [r4, #4]
 8001c90:	4299      	cmp	r1, r3
 8001c92:	bfde      	ittt	le
 8001c94:	2330      	movle	r3, #48	@ 0x30
 8001c96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001c9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001c9e:	1b92      	subs	r2, r2, r6
 8001ca0:	6122      	str	r2, [r4, #16]
 8001ca2:	f8cd a000 	str.w	sl, [sp]
 8001ca6:	464b      	mov	r3, r9
 8001ca8:	aa03      	add	r2, sp, #12
 8001caa:	4621      	mov	r1, r4
 8001cac:	4640      	mov	r0, r8
 8001cae:	f7ff fee7 	bl	8001a80 <_printf_common>
 8001cb2:	3001      	adds	r0, #1
 8001cb4:	d14a      	bne.n	8001d4c <_printf_i+0x1f0>
 8001cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cba:	b004      	add	sp, #16
 8001cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	6023      	str	r3, [r4, #0]
 8001cc8:	4832      	ldr	r0, [pc, #200]	@ (8001d94 <_printf_i+0x238>)
 8001cca:	2778      	movs	r7, #120	@ 0x78
 8001ccc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	6831      	ldr	r1, [r6, #0]
 8001cd4:	061f      	lsls	r7, r3, #24
 8001cd6:	f851 5b04 	ldr.w	r5, [r1], #4
 8001cda:	d402      	bmi.n	8001ce2 <_printf_i+0x186>
 8001cdc:	065f      	lsls	r7, r3, #25
 8001cde:	bf48      	it	mi
 8001ce0:	b2ad      	uxthmi	r5, r5
 8001ce2:	6031      	str	r1, [r6, #0]
 8001ce4:	07d9      	lsls	r1, r3, #31
 8001ce6:	bf44      	itt	mi
 8001ce8:	f043 0320 	orrmi.w	r3, r3, #32
 8001cec:	6023      	strmi	r3, [r4, #0]
 8001cee:	b11d      	cbz	r5, 8001cf8 <_printf_i+0x19c>
 8001cf0:	2310      	movs	r3, #16
 8001cf2:	e7ad      	b.n	8001c50 <_printf_i+0xf4>
 8001cf4:	4826      	ldr	r0, [pc, #152]	@ (8001d90 <_printf_i+0x234>)
 8001cf6:	e7e9      	b.n	8001ccc <_printf_i+0x170>
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	f023 0320 	bic.w	r3, r3, #32
 8001cfe:	6023      	str	r3, [r4, #0]
 8001d00:	e7f6      	b.n	8001cf0 <_printf_i+0x194>
 8001d02:	4616      	mov	r6, r2
 8001d04:	e7bd      	b.n	8001c82 <_printf_i+0x126>
 8001d06:	6833      	ldr	r3, [r6, #0]
 8001d08:	6825      	ldr	r5, [r4, #0]
 8001d0a:	6961      	ldr	r1, [r4, #20]
 8001d0c:	1d18      	adds	r0, r3, #4
 8001d0e:	6030      	str	r0, [r6, #0]
 8001d10:	062e      	lsls	r6, r5, #24
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	d501      	bpl.n	8001d1a <_printf_i+0x1be>
 8001d16:	6019      	str	r1, [r3, #0]
 8001d18:	e002      	b.n	8001d20 <_printf_i+0x1c4>
 8001d1a:	0668      	lsls	r0, r5, #25
 8001d1c:	d5fb      	bpl.n	8001d16 <_printf_i+0x1ba>
 8001d1e:	8019      	strh	r1, [r3, #0]
 8001d20:	2300      	movs	r3, #0
 8001d22:	6123      	str	r3, [r4, #16]
 8001d24:	4616      	mov	r6, r2
 8001d26:	e7bc      	b.n	8001ca2 <_printf_i+0x146>
 8001d28:	6833      	ldr	r3, [r6, #0]
 8001d2a:	1d1a      	adds	r2, r3, #4
 8001d2c:	6032      	str	r2, [r6, #0]
 8001d2e:	681e      	ldr	r6, [r3, #0]
 8001d30:	6862      	ldr	r2, [r4, #4]
 8001d32:	2100      	movs	r1, #0
 8001d34:	4630      	mov	r0, r6
 8001d36:	f7fe fa4b 	bl	80001d0 <memchr>
 8001d3a:	b108      	cbz	r0, 8001d40 <_printf_i+0x1e4>
 8001d3c:	1b80      	subs	r0, r0, r6
 8001d3e:	6060      	str	r0, [r4, #4]
 8001d40:	6863      	ldr	r3, [r4, #4]
 8001d42:	6123      	str	r3, [r4, #16]
 8001d44:	2300      	movs	r3, #0
 8001d46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d4a:	e7aa      	b.n	8001ca2 <_printf_i+0x146>
 8001d4c:	6923      	ldr	r3, [r4, #16]
 8001d4e:	4632      	mov	r2, r6
 8001d50:	4649      	mov	r1, r9
 8001d52:	4640      	mov	r0, r8
 8001d54:	47d0      	blx	sl
 8001d56:	3001      	adds	r0, #1
 8001d58:	d0ad      	beq.n	8001cb6 <_printf_i+0x15a>
 8001d5a:	6823      	ldr	r3, [r4, #0]
 8001d5c:	079b      	lsls	r3, r3, #30
 8001d5e:	d413      	bmi.n	8001d88 <_printf_i+0x22c>
 8001d60:	68e0      	ldr	r0, [r4, #12]
 8001d62:	9b03      	ldr	r3, [sp, #12]
 8001d64:	4298      	cmp	r0, r3
 8001d66:	bfb8      	it	lt
 8001d68:	4618      	movlt	r0, r3
 8001d6a:	e7a6      	b.n	8001cba <_printf_i+0x15e>
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	4632      	mov	r2, r6
 8001d70:	4649      	mov	r1, r9
 8001d72:	4640      	mov	r0, r8
 8001d74:	47d0      	blx	sl
 8001d76:	3001      	adds	r0, #1
 8001d78:	d09d      	beq.n	8001cb6 <_printf_i+0x15a>
 8001d7a:	3501      	adds	r5, #1
 8001d7c:	68e3      	ldr	r3, [r4, #12]
 8001d7e:	9903      	ldr	r1, [sp, #12]
 8001d80:	1a5b      	subs	r3, r3, r1
 8001d82:	42ab      	cmp	r3, r5
 8001d84:	dcf2      	bgt.n	8001d6c <_printf_i+0x210>
 8001d86:	e7eb      	b.n	8001d60 <_printf_i+0x204>
 8001d88:	2500      	movs	r5, #0
 8001d8a:	f104 0619 	add.w	r6, r4, #25
 8001d8e:	e7f5      	b.n	8001d7c <_printf_i+0x220>
 8001d90:	08002065 	.word	0x08002065
 8001d94:	08002076 	.word	0x08002076

08001d98 <__sflush_r>:
 8001d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001da0:	0716      	lsls	r6, r2, #28
 8001da2:	4605      	mov	r5, r0
 8001da4:	460c      	mov	r4, r1
 8001da6:	d454      	bmi.n	8001e52 <__sflush_r+0xba>
 8001da8:	684b      	ldr	r3, [r1, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	dc02      	bgt.n	8001db4 <__sflush_r+0x1c>
 8001dae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	dd48      	ble.n	8001e46 <__sflush_r+0xae>
 8001db4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001db6:	2e00      	cmp	r6, #0
 8001db8:	d045      	beq.n	8001e46 <__sflush_r+0xae>
 8001dba:	2300      	movs	r3, #0
 8001dbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001dc0:	682f      	ldr	r7, [r5, #0]
 8001dc2:	6a21      	ldr	r1, [r4, #32]
 8001dc4:	602b      	str	r3, [r5, #0]
 8001dc6:	d030      	beq.n	8001e2a <__sflush_r+0x92>
 8001dc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001dca:	89a3      	ldrh	r3, [r4, #12]
 8001dcc:	0759      	lsls	r1, r3, #29
 8001dce:	d505      	bpl.n	8001ddc <__sflush_r+0x44>
 8001dd0:	6863      	ldr	r3, [r4, #4]
 8001dd2:	1ad2      	subs	r2, r2, r3
 8001dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001dd6:	b10b      	cbz	r3, 8001ddc <__sflush_r+0x44>
 8001dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001dda:	1ad2      	subs	r2, r2, r3
 8001ddc:	2300      	movs	r3, #0
 8001dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001de0:	6a21      	ldr	r1, [r4, #32]
 8001de2:	4628      	mov	r0, r5
 8001de4:	47b0      	blx	r6
 8001de6:	1c43      	adds	r3, r0, #1
 8001de8:	89a3      	ldrh	r3, [r4, #12]
 8001dea:	d106      	bne.n	8001dfa <__sflush_r+0x62>
 8001dec:	6829      	ldr	r1, [r5, #0]
 8001dee:	291d      	cmp	r1, #29
 8001df0:	d82b      	bhi.n	8001e4a <__sflush_r+0xb2>
 8001df2:	4a2a      	ldr	r2, [pc, #168]	@ (8001e9c <__sflush_r+0x104>)
 8001df4:	40ca      	lsrs	r2, r1
 8001df6:	07d6      	lsls	r6, r2, #31
 8001df8:	d527      	bpl.n	8001e4a <__sflush_r+0xb2>
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	6062      	str	r2, [r4, #4]
 8001dfe:	04d9      	lsls	r1, r3, #19
 8001e00:	6922      	ldr	r2, [r4, #16]
 8001e02:	6022      	str	r2, [r4, #0]
 8001e04:	d504      	bpl.n	8001e10 <__sflush_r+0x78>
 8001e06:	1c42      	adds	r2, r0, #1
 8001e08:	d101      	bne.n	8001e0e <__sflush_r+0x76>
 8001e0a:	682b      	ldr	r3, [r5, #0]
 8001e0c:	b903      	cbnz	r3, 8001e10 <__sflush_r+0x78>
 8001e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001e12:	602f      	str	r7, [r5, #0]
 8001e14:	b1b9      	cbz	r1, 8001e46 <__sflush_r+0xae>
 8001e16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001e1a:	4299      	cmp	r1, r3
 8001e1c:	d002      	beq.n	8001e24 <__sflush_r+0x8c>
 8001e1e:	4628      	mov	r0, r5
 8001e20:	f7ff fbf4 	bl	800160c <_free_r>
 8001e24:	2300      	movs	r3, #0
 8001e26:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e28:	e00d      	b.n	8001e46 <__sflush_r+0xae>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	4628      	mov	r0, r5
 8001e2e:	47b0      	blx	r6
 8001e30:	4602      	mov	r2, r0
 8001e32:	1c50      	adds	r0, r2, #1
 8001e34:	d1c9      	bne.n	8001dca <__sflush_r+0x32>
 8001e36:	682b      	ldr	r3, [r5, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0c6      	beq.n	8001dca <__sflush_r+0x32>
 8001e3c:	2b1d      	cmp	r3, #29
 8001e3e:	d001      	beq.n	8001e44 <__sflush_r+0xac>
 8001e40:	2b16      	cmp	r3, #22
 8001e42:	d11e      	bne.n	8001e82 <__sflush_r+0xea>
 8001e44:	602f      	str	r7, [r5, #0]
 8001e46:	2000      	movs	r0, #0
 8001e48:	e022      	b.n	8001e90 <__sflush_r+0xf8>
 8001e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e4e:	b21b      	sxth	r3, r3
 8001e50:	e01b      	b.n	8001e8a <__sflush_r+0xf2>
 8001e52:	690f      	ldr	r7, [r1, #16]
 8001e54:	2f00      	cmp	r7, #0
 8001e56:	d0f6      	beq.n	8001e46 <__sflush_r+0xae>
 8001e58:	0793      	lsls	r3, r2, #30
 8001e5a:	680e      	ldr	r6, [r1, #0]
 8001e5c:	bf08      	it	eq
 8001e5e:	694b      	ldreq	r3, [r1, #20]
 8001e60:	600f      	str	r7, [r1, #0]
 8001e62:	bf18      	it	ne
 8001e64:	2300      	movne	r3, #0
 8001e66:	eba6 0807 	sub.w	r8, r6, r7
 8001e6a:	608b      	str	r3, [r1, #8]
 8001e6c:	f1b8 0f00 	cmp.w	r8, #0
 8001e70:	dde9      	ble.n	8001e46 <__sflush_r+0xae>
 8001e72:	6a21      	ldr	r1, [r4, #32]
 8001e74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001e76:	4643      	mov	r3, r8
 8001e78:	463a      	mov	r2, r7
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	47b0      	blx	r6
 8001e7e:	2800      	cmp	r0, #0
 8001e80:	dc08      	bgt.n	8001e94 <__sflush_r+0xfc>
 8001e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e8a:	81a3      	strh	r3, [r4, #12]
 8001e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e94:	4407      	add	r7, r0
 8001e96:	eba8 0800 	sub.w	r8, r8, r0
 8001e9a:	e7e7      	b.n	8001e6c <__sflush_r+0xd4>
 8001e9c:	20400001 	.word	0x20400001

08001ea0 <_fflush_r>:
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	690b      	ldr	r3, [r1, #16]
 8001ea4:	4605      	mov	r5, r0
 8001ea6:	460c      	mov	r4, r1
 8001ea8:	b913      	cbnz	r3, 8001eb0 <_fflush_r+0x10>
 8001eaa:	2500      	movs	r5, #0
 8001eac:	4628      	mov	r0, r5
 8001eae:	bd38      	pop	{r3, r4, r5, pc}
 8001eb0:	b118      	cbz	r0, 8001eba <_fflush_r+0x1a>
 8001eb2:	6a03      	ldr	r3, [r0, #32]
 8001eb4:	b90b      	cbnz	r3, 8001eba <_fflush_r+0x1a>
 8001eb6:	f7ff f9af 	bl	8001218 <__sinit>
 8001eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f3      	beq.n	8001eaa <_fflush_r+0xa>
 8001ec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001ec4:	07d0      	lsls	r0, r2, #31
 8001ec6:	d404      	bmi.n	8001ed2 <_fflush_r+0x32>
 8001ec8:	0599      	lsls	r1, r3, #22
 8001eca:	d402      	bmi.n	8001ed2 <_fflush_r+0x32>
 8001ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001ece:	f7ff fb9a 	bl	8001606 <__retarget_lock_acquire_recursive>
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	f7ff ff5f 	bl	8001d98 <__sflush_r>
 8001eda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001edc:	07da      	lsls	r2, r3, #31
 8001ede:	4605      	mov	r5, r0
 8001ee0:	d4e4      	bmi.n	8001eac <_fflush_r+0xc>
 8001ee2:	89a3      	ldrh	r3, [r4, #12]
 8001ee4:	059b      	lsls	r3, r3, #22
 8001ee6:	d4e1      	bmi.n	8001eac <_fflush_r+0xc>
 8001ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001eea:	f7ff fb8d 	bl	8001608 <__retarget_lock_release_recursive>
 8001eee:	e7dd      	b.n	8001eac <_fflush_r+0xc>

08001ef0 <__swhatbuf_r>:
 8001ef0:	b570      	push	{r4, r5, r6, lr}
 8001ef2:	460c      	mov	r4, r1
 8001ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ef8:	2900      	cmp	r1, #0
 8001efa:	b096      	sub	sp, #88	@ 0x58
 8001efc:	4615      	mov	r5, r2
 8001efe:	461e      	mov	r6, r3
 8001f00:	da0d      	bge.n	8001f1e <__swhatbuf_r+0x2e>
 8001f02:	89a3      	ldrh	r3, [r4, #12]
 8001f04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	bf14      	ite	ne
 8001f0e:	2340      	movne	r3, #64	@ 0x40
 8001f10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001f14:	2000      	movs	r0, #0
 8001f16:	6031      	str	r1, [r6, #0]
 8001f18:	602b      	str	r3, [r5, #0]
 8001f1a:	b016      	add	sp, #88	@ 0x58
 8001f1c:	bd70      	pop	{r4, r5, r6, pc}
 8001f1e:	466a      	mov	r2, sp
 8001f20:	f000 f848 	bl	8001fb4 <_fstat_r>
 8001f24:	2800      	cmp	r0, #0
 8001f26:	dbec      	blt.n	8001f02 <__swhatbuf_r+0x12>
 8001f28:	9901      	ldr	r1, [sp, #4]
 8001f2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001f2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001f32:	4259      	negs	r1, r3
 8001f34:	4159      	adcs	r1, r3
 8001f36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f3a:	e7eb      	b.n	8001f14 <__swhatbuf_r+0x24>

08001f3c <__smakebuf_r>:
 8001f3c:	898b      	ldrh	r3, [r1, #12]
 8001f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f40:	079d      	lsls	r5, r3, #30
 8001f42:	4606      	mov	r6, r0
 8001f44:	460c      	mov	r4, r1
 8001f46:	d507      	bpl.n	8001f58 <__smakebuf_r+0x1c>
 8001f48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001f4c:	6023      	str	r3, [r4, #0]
 8001f4e:	6123      	str	r3, [r4, #16]
 8001f50:	2301      	movs	r3, #1
 8001f52:	6163      	str	r3, [r4, #20]
 8001f54:	b003      	add	sp, #12
 8001f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f58:	ab01      	add	r3, sp, #4
 8001f5a:	466a      	mov	r2, sp
 8001f5c:	f7ff ffc8 	bl	8001ef0 <__swhatbuf_r>
 8001f60:	9f00      	ldr	r7, [sp, #0]
 8001f62:	4605      	mov	r5, r0
 8001f64:	4639      	mov	r1, r7
 8001f66:	4630      	mov	r0, r6
 8001f68:	f7ff fbbc 	bl	80016e4 <_malloc_r>
 8001f6c:	b948      	cbnz	r0, 8001f82 <__smakebuf_r+0x46>
 8001f6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f72:	059a      	lsls	r2, r3, #22
 8001f74:	d4ee      	bmi.n	8001f54 <__smakebuf_r+0x18>
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	81a3      	strh	r3, [r4, #12]
 8001f80:	e7e2      	b.n	8001f48 <__smakebuf_r+0xc>
 8001f82:	89a3      	ldrh	r3, [r4, #12]
 8001f84:	6020      	str	r0, [r4, #0]
 8001f86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f8a:	81a3      	strh	r3, [r4, #12]
 8001f8c:	9b01      	ldr	r3, [sp, #4]
 8001f8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001f92:	b15b      	cbz	r3, 8001fac <__smakebuf_r+0x70>
 8001f94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f98:	4630      	mov	r0, r6
 8001f9a:	f000 f81d 	bl	8001fd8 <_isatty_r>
 8001f9e:	b128      	cbz	r0, 8001fac <__smakebuf_r+0x70>
 8001fa0:	89a3      	ldrh	r3, [r4, #12]
 8001fa2:	f023 0303 	bic.w	r3, r3, #3
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	81a3      	strh	r3, [r4, #12]
 8001fac:	89a3      	ldrh	r3, [r4, #12]
 8001fae:	431d      	orrs	r5, r3
 8001fb0:	81a5      	strh	r5, [r4, #12]
 8001fb2:	e7cf      	b.n	8001f54 <__smakebuf_r+0x18>

08001fb4 <_fstat_r>:
 8001fb4:	b538      	push	{r3, r4, r5, lr}
 8001fb6:	4d07      	ldr	r5, [pc, #28]	@ (8001fd4 <_fstat_r+0x20>)
 8001fb8:	2300      	movs	r3, #0
 8001fba:	4604      	mov	r4, r0
 8001fbc:	4608      	mov	r0, r1
 8001fbe:	4611      	mov	r1, r2
 8001fc0:	602b      	str	r3, [r5, #0]
 8001fc2:	f7ff f814 	bl	8000fee <_fstat>
 8001fc6:	1c43      	adds	r3, r0, #1
 8001fc8:	d102      	bne.n	8001fd0 <_fstat_r+0x1c>
 8001fca:	682b      	ldr	r3, [r5, #0]
 8001fcc:	b103      	cbz	r3, 8001fd0 <_fstat_r+0x1c>
 8001fce:	6023      	str	r3, [r4, #0]
 8001fd0:	bd38      	pop	{r3, r4, r5, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200003f0 	.word	0x200003f0

08001fd8 <_isatty_r>:
 8001fd8:	b538      	push	{r3, r4, r5, lr}
 8001fda:	4d06      	ldr	r5, [pc, #24]	@ (8001ff4 <_isatty_r+0x1c>)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	4604      	mov	r4, r0
 8001fe0:	4608      	mov	r0, r1
 8001fe2:	602b      	str	r3, [r5, #0]
 8001fe4:	f7ff f813 	bl	800100e <_isatty>
 8001fe8:	1c43      	adds	r3, r0, #1
 8001fea:	d102      	bne.n	8001ff2 <_isatty_r+0x1a>
 8001fec:	682b      	ldr	r3, [r5, #0]
 8001fee:	b103      	cbz	r3, 8001ff2 <_isatty_r+0x1a>
 8001ff0:	6023      	str	r3, [r4, #0]
 8001ff2:	bd38      	pop	{r3, r4, r5, pc}
 8001ff4:	200003f0 	.word	0x200003f0

08001ff8 <_sbrk_r>:
 8001ff8:	b538      	push	{r3, r4, r5, lr}
 8001ffa:	4d06      	ldr	r5, [pc, #24]	@ (8002014 <_sbrk_r+0x1c>)
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	4604      	mov	r4, r0
 8002000:	4608      	mov	r0, r1
 8002002:	602b      	str	r3, [r5, #0]
 8002004:	f7ff f81c 	bl	8001040 <_sbrk>
 8002008:	1c43      	adds	r3, r0, #1
 800200a:	d102      	bne.n	8002012 <_sbrk_r+0x1a>
 800200c:	682b      	ldr	r3, [r5, #0]
 800200e:	b103      	cbz	r3, 8002012 <_sbrk_r+0x1a>
 8002010:	6023      	str	r3, [r4, #0]
 8002012:	bd38      	pop	{r3, r4, r5, pc}
 8002014:	200003f0 	.word	0x200003f0

08002018 <_init>:
 8002018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201a:	bf00      	nop
 800201c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800201e:	bc08      	pop	{r3}
 8002020:	469e      	mov	lr, r3
 8002022:	4770      	bx	lr

08002024 <_fini>:
 8002024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002026:	bf00      	nop
 8002028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800202a:	bc08      	pop	{r3}
 800202c:	469e      	mov	lr, r3
 800202e:	4770      	bx	lr
