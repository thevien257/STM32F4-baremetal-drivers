
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bd8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000d60  08000d60  00001d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d90  08000d90  0000201c  2**0
                  CONTENTS
  4 .ARM          00000000  08000d90  08000d90  0000201c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000d90  08000d90  0000201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d90  08000d90  00001d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000d94  08000d94  00001d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08000d98  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000201c  2**0
                  CONTENTS
 10 .bss          00000058  2000001c  2000001c  0000201c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  0000201c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000201c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014a7  00000000  00000000  0000204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000531  00000000  00000000  000034f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d2  00000000  00000000  00003b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002655  00000000  00000000  00003c2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002226  00000000  00000000  0000627f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008f3b  00000000  00000000  000084a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000113e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000037c  00000000  00000000  00011424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000117a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d48 	.word	0x08000d48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08000d48 	.word	0x08000d48

080001c8 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 80001c8:	b4b0      	push	{r4, r5, r7}
 80001ca:	b08f      	sub	sp, #60	@ 0x3c
 80001cc:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 80001ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000280 <Get_APB1_Clock_Speed+0xb8>)
 80001d0:	f107 0410 	add.w	r4, r7, #16
 80001d4:	461d      	mov	r5, r3
 80001d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 80001e2:	4b28      	ldr	r3, [pc, #160]	@ (8000284 <Get_APB1_Clock_Speed+0xbc>)
 80001e4:	463c      	mov	r4, r7
 80001e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 80001ec:	4b26      	ldr	r3, [pc, #152]	@ (8000288 <Get_APB1_Clock_Speed+0xc0>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	089b      	lsrs	r3, r3, #2
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	f003 0303 	and.w	r3, r3, #3
 80001f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 80001fc:	4b22      	ldr	r3, [pc, #136]	@ (8000288 <Get_APB1_Clock_Speed+0xc0>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	091b      	lsrs	r3, r3, #4
 8000202:	b2db      	uxtb	r3, r3
 8000204:	f003 030f 	and.w	r3, r3, #15
 8000208:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 800020c:	4b1e      	ldr	r3, [pc, #120]	@ (8000288 <Get_APB1_Clock_Speed+0xc0>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	0a9b      	lsrs	r3, r3, #10
 8000212:	b2db      	uxtb	r3, r3
 8000214:	f003 0307 	and.w	r3, r3, #7
 8000218:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 800021c:	2301      	movs	r3, #1
 800021e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 8000220:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000224:	2b07      	cmp	r3, #7
 8000226:	d908      	bls.n	800023a <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 8000228:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800022c:	3b08      	subs	r3, #8
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	3338      	adds	r3, #56	@ 0x38
 8000232:	443b      	add	r3, r7
 8000234:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000238:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 800023e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000242:	2b03      	cmp	r3, #3
 8000244:	d908      	bls.n	8000258 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 8000246:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800024a:	3b04      	subs	r3, #4
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	3338      	adds	r3, #56	@ 0x38
 8000250:	443b      	add	r3, r7
 8000252:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000256:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000258:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800025c:	2b00      	cmp	r3, #0
 800025e:	d109      	bne.n	8000274 <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000260:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000262:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <Get_APB1_Clock_Speed+0xc4>)
 8000264:	fb92 f2f3 	sdiv	r2, r2, r3
 8000268:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800026a:	fb92 f3f3 	sdiv	r3, r2, r3
 800026e:	461a      	mov	r2, r3
 8000270:	4b07      	ldr	r3, [pc, #28]	@ (8000290 <Get_APB1_Clock_Speed+0xc8>)
 8000272:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 8000274:	bf00      	nop
 8000276:	373c      	adds	r7, #60	@ 0x3c
 8000278:	46bd      	mov	sp, r7
 800027a:	bcb0      	pop	{r4, r5, r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	08000d60 	.word	0x08000d60
 8000284:	08000d80 	.word	0x08000d80
 8000288:	40023800 	.word	0x40023800
 800028c:	00f42400 	.word	0x00f42400
 8000290:	20000038 	.word	0x20000038

08000294 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a8f      	ldr	r2, [pc, #572]	@ (80004e0 <GPIO_INIT+0x24c>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <GPIO_INIT+0x20>
		GPIOA_EN();
 80002a6:	4b8f      	ldr	r3, [pc, #572]	@ (80004e4 <GPIO_INIT+0x250>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002aa:	4a8e      	ldr	r2, [pc, #568]	@ (80004e4 <GPIO_INIT+0x250>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002b2:	e05e      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a8b      	ldr	r2, [pc, #556]	@ (80004e8 <GPIO_INIT+0x254>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_INIT+0x38>
		GPIOB_EN();
 80002be:	4b89      	ldr	r3, [pc, #548]	@ (80004e4 <GPIO_INIT+0x250>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4a88      	ldr	r2, [pc, #544]	@ (80004e4 <GPIO_INIT+0x250>)
 80002c4:	f043 0302 	orr.w	r3, r3, #2
 80002c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ca:	e052      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a86      	ldr	r2, [pc, #536]	@ (80004ec <GPIO_INIT+0x258>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_INIT+0x50>
		GPIOC_EN();
 80002d6:	4b83      	ldr	r3, [pc, #524]	@ (80004e4 <GPIO_INIT+0x250>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002da:	4a82      	ldr	r2, [pc, #520]	@ (80004e4 <GPIO_INIT+0x250>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002e2:	e046      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a81      	ldr	r2, [pc, #516]	@ (80004f0 <GPIO_INIT+0x25c>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_INIT+0x68>
		GPIOD_EN();
 80002ee:	4b7d      	ldr	r3, [pc, #500]	@ (80004e4 <GPIO_INIT+0x250>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f2:	4a7c      	ldr	r2, [pc, #496]	@ (80004e4 <GPIO_INIT+0x250>)
 80002f4:	f043 0308 	orr.w	r3, r3, #8
 80002f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002fa:	e03a      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a7c      	ldr	r2, [pc, #496]	@ (80004f4 <GPIO_INIT+0x260>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_INIT+0x80>
		GPIOE_EN();
 8000306:	4b77      	ldr	r3, [pc, #476]	@ (80004e4 <GPIO_INIT+0x250>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030a:	4a76      	ldr	r2, [pc, #472]	@ (80004e4 <GPIO_INIT+0x250>)
 800030c:	f043 0310 	orr.w	r3, r3, #16
 8000310:	6313      	str	r3, [r2, #48]	@ 0x30
 8000312:	e02e      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a77      	ldr	r2, [pc, #476]	@ (80004f8 <GPIO_INIT+0x264>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_INIT+0x98>
		GPIOF_EN();
 800031e:	4b71      	ldr	r3, [pc, #452]	@ (80004e4 <GPIO_INIT+0x250>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000322:	4a70      	ldr	r2, [pc, #448]	@ (80004e4 <GPIO_INIT+0x250>)
 8000324:	f043 0320 	orr.w	r3, r3, #32
 8000328:	6313      	str	r3, [r2, #48]	@ 0x30
 800032a:	e022      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a72      	ldr	r2, [pc, #456]	@ (80004fc <GPIO_INIT+0x268>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000336:	4b6b      	ldr	r3, [pc, #428]	@ (80004e4 <GPIO_INIT+0x250>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033a:	4a6a      	ldr	r2, [pc, #424]	@ (80004e4 <GPIO_INIT+0x250>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000340:	6313      	str	r3, [r2, #48]	@ 0x30
 8000342:	e016      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a6d      	ldr	r2, [pc, #436]	@ (8000500 <GPIO_INIT+0x26c>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_INIT+0xc8>
		GPIOH_EN();
 800034e:	4b65      	ldr	r3, [pc, #404]	@ (80004e4 <GPIO_INIT+0x250>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000352:	4a64      	ldr	r2, [pc, #400]	@ (80004e4 <GPIO_INIT+0x250>)
 8000354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000358:	6313      	str	r3, [r2, #48]	@ 0x30
 800035a:	e00a      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a68      	ldr	r2, [pc, #416]	@ (8000504 <GPIO_INIT+0x270>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d105      	bne.n	8000372 <GPIO_INIT+0xde>
		GPIOI_EN();
 8000366:	4b5f      	ldr	r3, [pc, #380]	@ (80004e4 <GPIO_INIT+0x250>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a5e      	ldr	r2, [pc, #376]	@ (80004e4 <GPIO_INIT+0x250>)
 800036c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	2103      	movs	r1, #3
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000384:	43db      	mvns	r3, r3
 8000386:	4619      	mov	r1, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	400a      	ands	r2, r1
 800038e:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	791b      	ldrb	r3, [r3, #4]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	2103      	movs	r1, #3
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80003a2:	43db      	mvns	r3, r3
 80003a4:	4619      	mov	r1, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	400a      	ands	r2, r1
 80003ac:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	799b      	ldrb	r3, [r3, #6]
 80003b8:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	fa01 f303 	lsl.w	r3, r1, r3
 80003c4:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	795b      	ldrb	r3, [r3, #5]
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	f200 8098 	bhi.w	8000508 <GPIO_INIT+0x274>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	795b      	ldrb	r3, [r3, #5]
 80003e2:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	791b      	ldrb	r3, [r3, #4]
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	430a      	orrs	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	791b      	ldrb	r3, [r3, #4]
 8000402:	4619      	mov	r1, r3
 8000404:	2303      	movs	r3, #3
 8000406:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000408:	43db      	mvns	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	400a      	ands	r2, r1
 8000412:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	7a1b      	ldrb	r3, [r3, #8]
 800041e:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	430a      	orrs	r2, r1
 8000430:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	791b      	ldrb	r3, [r3, #4]
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	2103      	movs	r1, #3
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000444:	43db      	mvns	r3, r3
 8000446:	4619      	mov	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	400a      	ands	r2, r1
 800044e:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	689a      	ldr	r2, [r3, #8]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	79db      	ldrb	r3, [r3, #7]
 800045a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	430a      	orrs	r2, r1
 800046e:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b02      	cmp	r3, #2
 8000476:	f040 80ea 	bne.w	800064e <GPIO_INIT+0x3ba>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	f003 0307 	and.w	r3, r3, #7
 800048a:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	7b7a      	ldrb	r2, [r7, #13]
 8000492:	3208      	adds	r2, #8
 8000494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< gpioHandle->pin_number);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	791b      	ldrb	r3, [r3, #4]
 800049c:	461a      	mov	r2, r3
 800049e:	2303      	movs	r3, #3
 80004a0:	4093      	lsls	r3, r2
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 80004a2:	43db      	mvns	r3, r3
 80004a4:	4618      	mov	r0, r3
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	7b7a      	ldrb	r2, [r7, #13]
 80004ac:	4001      	ands	r1, r0
 80004ae:	3208      	adds	r2, #8
 80004b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	7b7a      	ldrb	r2, [r7, #13]
 80004ba:	3208      	adds	r2, #8
 80004bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	7a5b      	ldrb	r3, [r3, #9]
 80004c4:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 80004c6:	7b3b      	ldrb	r3, [r7, #12]
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	fa02 f303 	lsl.w	r3, r2, r3
 80004ce:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	7b7a      	ldrb	r2, [r7, #13]
 80004d6:	4301      	orrs	r1, r0
 80004d8:	3208      	adds	r2, #8
 80004da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 80004de:	e0b6      	b.n	800064e <GPIO_INIT+0x3ba>
 80004e0:	40020000 	.word	0x40020000
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40020400 	.word	0x40020400
 80004ec:	40020800 	.word	0x40020800
 80004f0:	40020c00 	.word	0x40020c00
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40021400 	.word	0x40021400
 80004fc:	40021800 	.word	0x40021800
 8000500:	40021c00 	.word	0x40021c00
 8000504:	40022000 	.word	0x40022000
		SYSCFG_EN();
 8000508:	4b54      	ldr	r3, [pc, #336]	@ (800065c <GPIO_INIT+0x3c8>)
 800050a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800050c:	4a53      	ldr	r2, [pc, #332]	@ (800065c <GPIO_INIT+0x3c8>)
 800050e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000512:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	795b      	ldrb	r3, [r3, #5]
 8000518:	2b06      	cmp	r3, #6
 800051a:	d12e      	bne.n	800057a <GPIO_INIT+0x2e6>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 800051c:	4b50      	ldr	r3, [pc, #320]	@ (8000660 <GPIO_INIT+0x3cc>)
 800051e:	689b      	ldr	r3, [r3, #8]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	7912      	ldrb	r2, [r2, #4]
 8000524:	4611      	mov	r1, r2
 8000526:	2201      	movs	r2, #1
 8000528:	408a      	lsls	r2, r1
 800052a:	43d2      	mvns	r2, r2
 800052c:	4611      	mov	r1, r2
 800052e:	4a4c      	ldr	r2, [pc, #304]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000530:	400b      	ands	r3, r1
 8000532:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000534:	4b4a      	ldr	r3, [pc, #296]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7912      	ldrb	r2, [r2, #4]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	43d2      	mvns	r2, r2
 8000544:	4611      	mov	r1, r2
 8000546:	4a46      	ldr	r2, [pc, #280]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000548:	400b      	ands	r3, r1
 800054a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 800054c:	4b44      	ldr	r3, [pc, #272]	@ (8000660 <GPIO_INIT+0x3cc>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	7912      	ldrb	r2, [r2, #4]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	4611      	mov	r1, r2
 800055c:	4a40      	ldr	r2, [pc, #256]	@ (8000660 <GPIO_INIT+0x3cc>)
 800055e:	430b      	orrs	r3, r1
 8000560:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000562:	4b3f      	ldr	r3, [pc, #252]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	4611      	mov	r1, r2
 8000572:	4a3b      	ldr	r2, [pc, #236]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000574:	430b      	orrs	r3, r1
 8000576:	60d3      	str	r3, [r2, #12]
 8000578:	e036      	b.n	80005e8 <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	795b      	ldrb	r3, [r3, #5]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d117      	bne.n	80005b2 <GPIO_INIT+0x31e>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000582:	4b37      	ldr	r3, [pc, #220]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	687a      	ldr	r2, [r7, #4]
 8000588:	7912      	ldrb	r2, [r2, #4]
 800058a:	4611      	mov	r1, r2
 800058c:	2201      	movs	r2, #1
 800058e:	408a      	lsls	r2, r1
 8000590:	43d2      	mvns	r2, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a32      	ldr	r2, [pc, #200]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000596:	400b      	ands	r3, r1
 8000598:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 800059a:	4b31      	ldr	r3, [pc, #196]	@ (8000660 <GPIO_INIT+0x3cc>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000660 <GPIO_INIT+0x3cc>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
 80005b0:	e01a      	b.n	80005e8 <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	795b      	ldrb	r3, [r3, #5]
 80005b6:	2b04      	cmp	r3, #4
 80005b8:	d116      	bne.n	80005e8 <GPIO_INIT+0x354>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80005ba:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <GPIO_INIT+0x3cc>)
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	7912      	ldrb	r2, [r2, #4]
 80005c2:	4611      	mov	r1, r2
 80005c4:	2201      	movs	r2, #1
 80005c6:	408a      	lsls	r2, r1
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a24      	ldr	r2, [pc, #144]	@ (8000660 <GPIO_INIT+0x3cc>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 80005d2:	4b23      	ldr	r3, [pc, #140]	@ (8000660 <GPIO_INIT+0x3cc>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	4611      	mov	r1, r2
 80005dc:	2201      	movs	r2, #1
 80005de:	408a      	lsls	r2, r1
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000660 <GPIO_INIT+0x3cc>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	089b      	lsrs	r3, r3, #2
 80005ee:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	f003 0303 	and.w	r3, r3, #3
 80005f8:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 80005fa:	4a1a      	ldr	r2, [pc, #104]	@ (8000664 <GPIO_INIT+0x3d0>)
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	3302      	adds	r3, #2
 8000600:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	7a9b      	ldrb	r3, [r3, #10]
 8000608:	4619      	mov	r1, r3
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	4618      	mov	r0, r3
 8000614:	4913      	ldr	r1, [pc, #76]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	4302      	orrs	r2, r0
 800061a:	3302      	adds	r3, #2
 800061c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8000620:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	7912      	ldrb	r2, [r2, #4]
 8000628:	4611      	mov	r1, r2
 800062a:	2201      	movs	r2, #1
 800062c:	408a      	lsls	r2, r1
 800062e:	43d2      	mvns	r2, r2
 8000630:	4611      	mov	r1, r2
 8000632:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000634:	400b      	ands	r3, r1
 8000636:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <GPIO_INIT+0x3cc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	687a      	ldr	r2, [r7, #4]
 800063e:	7912      	ldrb	r2, [r2, #4]
 8000640:	4611      	mov	r1, r2
 8000642:	2201      	movs	r2, #1
 8000644:	408a      	lsls	r2, r1
 8000646:	4611      	mov	r1, r2
 8000648:	4a05      	ldr	r2, [pc, #20]	@ (8000660 <GPIO_INIT+0x3cc>)
 800064a:	430b      	orrs	r3, r1
 800064c:	6013      	str	r3, [r2, #0]
}
 800064e:	bf00      	nop
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40023800 	.word	0x40023800
 8000660:	40013c00 	.word	0x40013c00
 8000664:	40013800 	.word	0x40013800

08000668 <GPIO_INPUT>:

uint8_t GPIO_INPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	460b      	mov	r3, r1
 8000672:	70fb      	strb	r3, [r7, #3]
	uint8_t val = ((gpiox->IDR >> gpio_pins) & GPIO_BIT_1_Mask);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	691a      	ldr	r2, [r3, #16]
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	fa22 f303 	lsr.w	r3, r2, r3
 800067e:	b2db      	uxtb	r3, r3
 8000680:	f003 0301 	and.w	r3, r3, #1
 8000684:	73fb      	strb	r3, [r7, #15]
	return val;
 8000686:	7bfb      	ldrb	r3, [r7, #15]
}
 8000688:	4618      	mov	r0, r3
 800068a:	3714      	adds	r7, #20
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <IRQ_Config>:
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 8000694:	b480      	push	{r7}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	460a      	mov	r2, r1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	4613      	mov	r3, r2
 80006a2:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	095b      	lsrs	r3, r3, #5
 80006a8:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 80006ae:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80006b2:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80006b6:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 80006b8:	7dfb      	ldrb	r3, [r7, #23]
 80006ba:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 80006bc:	4b12      	ldr	r3, [pc, #72]	@ (8000708 <IRQ_Config+0x74>)
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 80006c2:	79bb      	ldrb	r3, [r7, #6]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10b      	bne.n	80006e0 <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	79fa      	ldrb	r2, [r7, #7]
 80006ce:	f002 021f 	and.w	r2, r2, #31
 80006d2:	2101      	movs	r1, #1
 80006d4:	fa01 f202 	lsl.w	r2, r1, r2
 80006d8:	431a      	orrs	r2, r3
 80006da:	693b      	ldr	r3, [r7, #16]
 80006dc:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 80006de:	e00d      	b.n	80006fc <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d10a      	bne.n	80006fc <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	79fa      	ldrb	r2, [r7, #7]
 80006ec:	f002 021f 	and.w	r2, r2, #31
 80006f0:	2101      	movs	r1, #1
 80006f2:	fa01 f202 	lsl.w	r2, r1, r2
 80006f6:	431a      	orrs	r2, r3
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	601a      	str	r2, [r3, #0]
}
 80006fc:	bf00      	nop
 80006fe:	371c      	adds	r7, #28
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	e000e180 	.word	0xe000e180

0800070c <I2C_Close_Communicate>:
#include <stm32f4xx_cus_i2c.h>

I2C_Handle_IT I2C_Handle_it = { .ptx = NULL, .prx = NULL, .state = I2C_READY,
		.tx_len = 0, .rx_len = 0, .addr = 0 };

static void I2C_Close_Communicate(I2C_Handle_TypeDef *i2c_handle) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	I2C_Handle_it.ptx = NULL;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <I2C_Close_Communicate+0x68>)
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
	I2C_Handle_it.prx = NULL;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <I2C_Close_Communicate+0x68>)
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
	I2C_Handle_it.state = I2C_READY;
 8000720:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <I2C_Close_Communicate+0x68>)
 8000722:	2200      	movs	r2, #0
 8000724:	721a      	strb	r2, [r3, #8]
	I2C_Handle_it.tx_len = 0;
 8000726:	4b13      	ldr	r3, [pc, #76]	@ (8000774 <I2C_Close_Communicate+0x68>)
 8000728:	2200      	movs	r2, #0
 800072a:	60da      	str	r2, [r3, #12]
	I2C_Handle_it.rx_len = 0;
 800072c:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <I2C_Close_Communicate+0x68>)
 800072e:	2200      	movs	r2, #0
 8000730:	611a      	str	r2, [r3, #16]
	I2C_Handle_it.addr = 0;
 8000732:	4b10      	ldr	r3, [pc, #64]	@ (8000774 <I2C_Close_Communicate+0x68>)
 8000734:	2200      	movs	r2, #0
 8000736:	751a      	strb	r2, [r3, #20]

	// Generate Stop condition
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000746:	601a      	str	r2, [r3, #0]

	// Event interrupt disable
	i2c_handle->I2Cx->CR2 &= ~(HIGH << Shift_9_pos);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	685a      	ldr	r2, [r3, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000756:	605a      	str	r2, [r3, #4]

	// Buffer interrupt enable
	i2c_handle->I2Cx->CR2 &= ~(HIGH << Shift_10_pos);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	685a      	ldr	r2, [r3, #4]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000766:	605a      	str	r2, [r3, #4]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	2000003c 	.word	0x2000003c

08000778 <I2C_Send_DataIT>:

static void I2C_Send_DataIT(I2C_Handle_TypeDef *i2c_handle) {
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	if (I2C_Handle_it.tx_len > 0) {
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <I2C_Send_DataIT+0x3c>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	d00f      	beq.n	80007a8 <I2C_Send_DataIT+0x30>
		i2c_handle->I2Cx->DR = *(I2C_Handle_it.ptx);
 8000788:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <I2C_Send_DataIT+0x3c>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	611a      	str	r2, [r3, #16]
		I2C_Handle_it.ptx++;
 8000794:	4b07      	ldr	r3, [pc, #28]	@ (80007b4 <I2C_Send_DataIT+0x3c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3301      	adds	r3, #1
 800079a:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <I2C_Send_DataIT+0x3c>)
 800079c:	6013      	str	r3, [r2, #0]
		I2C_Handle_it.tx_len--;
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <I2C_Send_DataIT+0x3c>)
 80007a0:	68db      	ldr	r3, [r3, #12]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	4a03      	ldr	r2, [pc, #12]	@ (80007b4 <I2C_Send_DataIT+0x3c>)
 80007a6:	60d3      	str	r3, [r2, #12]
	}
}
 80007a8:	bf00      	nop
 80007aa:	370c      	adds	r7, #12
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	2000003c 	.word	0x2000003c

080007b8 <I2C_INIT>:

void I2C_INIT(I2C_Handle_TypeDef *i2c_handle) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	if (i2c_handle->I2Cx == I2C1) {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a7b      	ldr	r2, [pc, #492]	@ (80009b4 <I2C_INIT+0x1fc>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d106      	bne.n	80007d8 <I2C_INIT+0x20>
		I2C1_EN();
 80007ca:	4b7b      	ldr	r3, [pc, #492]	@ (80009b8 <I2C_INIT+0x200>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	4a7a      	ldr	r2, [pc, #488]	@ (80009b8 <I2C_INIT+0x200>)
 80007d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d6:	e016      	b.n	8000806 <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C2) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a77      	ldr	r2, [pc, #476]	@ (80009bc <I2C_INIT+0x204>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d106      	bne.n	80007f0 <I2C_INIT+0x38>
		I2C2_EN();
 80007e2:	4b75      	ldr	r3, [pc, #468]	@ (80009b8 <I2C_INIT+0x200>)
 80007e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007e6:	4a74      	ldr	r2, [pc, #464]	@ (80009b8 <I2C_INIT+0x200>)
 80007e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80007ee:	e00a      	b.n	8000806 <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C3) {
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a72      	ldr	r2, [pc, #456]	@ (80009c0 <I2C_INIT+0x208>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d105      	bne.n	8000806 <I2C_INIT+0x4e>
		I2C3_EN();
 80007fa:	4b6f      	ldr	r3, [pc, #444]	@ (80009b8 <I2C_INIT+0x200>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	4a6e      	ldr	r2, [pc, #440]	@ (80009b8 <I2C_INIT+0x200>)
 8000800:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000804:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	Get_APB1_Clock_Speed();
 8000806:	f7ff fcdf 	bl	80001c8 <Get_APB1_Clock_Speed>

	// Master mode
	if (i2c_handle->MasterOrSlave == I2C_Master_Mode) {
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	795b      	ldrb	r3, [r3, #5]
 800080e:	2b00      	cmp	r3, #0
 8000810:	f040 80b1 	bne.w	8000976 <I2C_INIT+0x1be>
		// Peripheral Clock Frequency (16Mhz)
		i2c_handle->I2Cx->CR2 &= ~(Five_BIT_1 << 0);
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	f022 021f 	bic.w	r2, r2, #31
 8000822:	605a      	str	r2, [r3, #4]
		i2c_handle->I2Cx->CR2 |= (Shift_16_pos << 0);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	685a      	ldr	r2, [r3, #4]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f042 0210 	orr.w	r2, r2, #16
 8000832:	605a      	str	r2, [r3, #4]

		// I2C Standard/Fast Mode
		i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_15_pos);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	69da      	ldr	r2, [r3, #28]
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000842:	61da      	str	r2, [r3, #28]
		i2c_handle->I2Cx->CCR |= (i2c_handle->mode << Shift_15_pos);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	69d9      	ldr	r1, [r3, #28]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	791b      	ldrb	r3, [r3, #4]
 800084e:	03da      	lsls	r2, r3, #15
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	430a      	orrs	r2, r1
 8000856:	61da      	str	r2, [r3, #28]

		// Tscl = Thigh + Tlow
		if (i2c_handle->mode == I2C_Standard_Mode) {
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	791b      	ldrb	r3, [r3, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d120      	bne.n	80008a2 <I2C_INIT+0xea>
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	69d9      	ldr	r1, [r3, #28]
					/ (2 * i2c_handle->scl_speed)) << 0);
 8000866:	4b57      	ldr	r3, [pc, #348]	@ (80009c4 <I2C_INIT+0x20c>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	fbb2 f2f3 	udiv	r2, r2, r3
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	430a      	orrs	r2, r1
 800087a:	61da      	str	r2, [r3, #28]
			// Trise
			i2c_handle->I2Cx->TRISE = 0;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc / 1000000)) + 1;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	6a19      	ldr	r1, [r3, #32]
 800088a:	4b4e      	ldr	r3, [pc, #312]	@ (80009c4 <I2C_INIT+0x20c>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4a4e      	ldr	r2, [pc, #312]	@ (80009c8 <I2C_INIT+0x210>)
 8000890:	fba2 2303 	umull	r2, r3, r2, r3
 8000894:	0c9b      	lsrs	r3, r3, #18
 8000896:	1c5a      	adds	r2, r3, #1
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	430a      	orrs	r2, r1
 800089e:	621a      	str	r2, [r3, #32]
 80008a0:	e053      	b.n	800094a <I2C_INIT+0x192>
		} else if (i2c_handle->mode == I2C_Fast_Mode) {
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	791b      	ldrb	r3, [r3, #4]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d14f      	bne.n	800094a <I2C_INIT+0x192>
			i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_14_pos);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	69da      	ldr	r2, [r3, #28]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80008b8:	61da      	str	r2, [r3, #28]
			i2c_handle->I2Cx->CCR |= (i2c_handle->duty_cycle << Shift_14_pos);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	69d9      	ldr	r1, [r3, #28]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	7b1b      	ldrb	r3, [r3, #12]
 80008c4:	039a      	lsls	r2, r3, #14
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	430a      	orrs	r2, r1
 80008cc:	61da      	str	r2, [r3, #28]
			if (i2c_handle->duty_cycle == I2C_Duty_Cycle_2) {
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	7b1b      	ldrb	r3, [r3, #12]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d110      	bne.n	80008f8 <I2C_INIT+0x140>
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	69d9      	ldr	r1, [r3, #28]
						/ (3 * i2c_handle->scl_speed)) << 0);
 80008dc:	4b39      	ldr	r3, [pc, #228]	@ (80009c4 <I2C_INIT+0x20c>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	4613      	mov	r3, r2
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	4413      	add	r3, r2
 80008ea:	fbb0 f2f3 	udiv	r2, r0, r3
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	430a      	orrs	r2, r1
 80008f4:	61da      	str	r2, [r3, #28]
 80008f6:	e015      	b.n	8000924 <I2C_INIT+0x16c>
			} else if (i2c_handle->duty_cycle == I2C_Duty_Cycle_16_9) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	7b1b      	ldrb	r3, [r3, #12]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d111      	bne.n	8000924 <I2C_INIT+0x16c>
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	69d9      	ldr	r1, [r3, #28]
						/ (25 * i2c_handle->scl_speed)) << 0);
 8000906:	4b2f      	ldr	r3, [pc, #188]	@ (80009c4 <I2C_INIT+0x20c>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	009a      	lsls	r2, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	fbb0 f2f3 	udiv	r2, r0, r3
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	430a      	orrs	r2, r1
 8000922:	61da      	str	r2, [r3, #28]
			}
			// Trise
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	6a19      	ldr	r1, [r3, #32]
					* I2C_TRISE_MAX_FAST_MODE / 1000000000)) + 1;
 800092a:	4b26      	ldr	r3, [pc, #152]	@ (80009c4 <I2C_INIT+0x20c>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	0a5b      	lsrs	r3, r3, #9
 8000938:	4a24      	ldr	r2, [pc, #144]	@ (80009cc <I2C_INIT+0x214>)
 800093a:	fba2 2303 	umull	r2, r3, r2, r3
 800093e:	09db      	lsrs	r3, r3, #7
 8000940:	1c5a      	adds	r2, r3, #1
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	430a      	orrs	r2, r1
 8000948:	621a      	str	r2, [r3, #32]
		}

// Adress mode - 7 bit
		if (i2c_handle->address_select_bit == I2C_7_Bit_Adress) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	799b      	ldrb	r3, [r3, #6]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d109      	bne.n	8000966 <I2C_INIT+0x1ae>
			i2c_handle->I2Cx->OAR1 |= (i2c_handle->address << HIGH);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6899      	ldr	r1, [r3, #8]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	79db      	ldrb	r3, [r3, #7]
 800095c:	005a      	lsls	r2, r3, #1
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	430a      	orrs	r2, r1
 8000964:	609a      	str	r2, [r3, #8]
		}
		i2c_handle->I2Cx->OAR1 |= (HIGH << Shift_14_pos);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000974:	609a      	str	r2, [r3, #8]
	}

	// Enable Peripheral
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_0_pos);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f042 0201 	orr.w	r2, r2, #1
 8000984:	601a      	str	r2, [r3, #0]

	// ACK bit En
	i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000994:	601a      	str	r2, [r3, #0]
	i2c_handle->I2Cx->CR1 |= (i2c_handle->ack_en << Shift_10_pos);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7b5b      	ldrb	r3, [r3, #13]
 80009a0:	029a      	lsls	r2, r3, #10
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	430a      	orrs	r2, r1
 80009a8:	601a      	str	r2, [r3, #0]
// Slave mode
}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40005400 	.word	0x40005400
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40005800 	.word	0x40005800
 80009c0:	40005c00 	.word	0x40005c00
 80009c4:	20000038 	.word	0x20000038
 80009c8:	431bde83 	.word	0x431bde83
 80009cc:	00044b83 	.word	0x00044b83

080009d0 <I2C_Master_Write_IT>:
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_10_pos);

}

uint8_t I2C_Master_Write_IT(I2C_Handle_TypeDef *i2c_handle, uint8_t addr,
		uint8_t *data, uint32_t size, uint8_t sr) {
 80009d0:	b480      	push	{r7}
 80009d2:	b087      	sub	sp, #28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	607a      	str	r2, [r7, #4]
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	460b      	mov	r3, r1
 80009de:	72fb      	strb	r3, [r7, #11]

	uint8_t busy_state = I2C_Handle_it.state;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <I2C_Master_Write_IT+0x84>)
 80009e2:	7a1b      	ldrb	r3, [r3, #8]
 80009e4:	75fb      	strb	r3, [r7, #23]
	if (I2C_Handle_it.state == I2C_READY) {
 80009e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a54 <I2C_Master_Write_IT+0x84>)
 80009e8:	7a1b      	ldrb	r3, [r3, #8]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d12b      	bne.n	8000a46 <I2C_Master_Write_IT+0x76>

		// Error interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_8_pos);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80009fc:	605a      	str	r2, [r3, #4]

		// Event interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_9_pos);
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000a0c:	605a      	str	r2, [r3, #4]

		// Buffer interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_10_pos);
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000a1c:	605a      	str	r2, [r3, #4]

		I2C_Handle_it.addr = addr;
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <I2C_Master_Write_IT+0x84>)
 8000a20:	7afb      	ldrb	r3, [r7, #11]
 8000a22:	7513      	strb	r3, [r2, #20]
		I2C_Handle_it.ptx = data;
 8000a24:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <I2C_Master_Write_IT+0x84>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
		I2C_Handle_it.tx_len = size;
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <I2C_Master_Write_IT+0x84>)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	60d3      	str	r3, [r2, #12]
		I2C_Handle_it.state = I2C_BUSY_TX;
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <I2C_Master_Write_IT+0x84>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	721a      	strb	r2, [r3, #8]

		// Generate Start condition
		i2c_handle->I2Cx->CR1 |= (HIGH << Shift_8_pos);
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	681a      	ldr	r2, [r3, #0]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000a44:	601a      	str	r2, [r3, #0]
	}
	return busy_state;
 8000a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	371c      	adds	r7, #28
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	2000003c 	.word	0x2000003c

08000a58 <I2C_EV_IRQ_Handling>:
uint8_t I2C_Master_Read_IT(I2C_Handle_TypeDef *i2c_handle, uint8_t addr,
		uint8_t *data, uint8_t size, uint8_t sr) {
	return 0;
}

void I2C_EV_IRQ_Handling(I2C_Handle_TypeDef *i2c_handle) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	uint8_t bit_it = ((i2c_handle->I2Cx->SR1 >> 0) & 0x1);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	695b      	ldr	r3, [r3, #20]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	75fb      	strb	r3, [r7, #23]
	if (bit_it == HIGH) {
 8000a6e:	7dfb      	ldrb	r3, [r7, #23]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	d11a      	bne.n	8000aaa <I2C_EV_IRQ_Handling+0x52>
		// Clear Start bit by reading SR1 register
		uint32_t read;
		read = i2c_handle->I2Cx->SR1;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
		(void) read;
		if (I2C_Handle_it.state == I2C_BUSY_TX) {
 8000a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8000b38 <I2C_EV_IRQ_Handling+0xe0>)
 8000a7e:	7a1b      	ldrb	r3, [r3, #8]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d107      	bne.n	8000a94 <I2C_EV_IRQ_Handling+0x3c>
			I2C_Address(i2c_handle, I2C_Handle_it.addr, I2C_WRITE_BIT);
 8000a84:	4b2c      	ldr	r3, [pc, #176]	@ (8000b38 <I2C_EV_IRQ_Handling+0xe0>)
 8000a86:	7d1b      	ldrb	r3, [r3, #20]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	6878      	ldr	r0, [r7, #4]
 8000a8e:	f000 f855 	bl	8000b3c <I2C_Address>
 8000a92:	e00a      	b.n	8000aaa <I2C_EV_IRQ_Handling+0x52>
		} else if (I2C_Handle_it.state == I2C_BUSY_RX) {
 8000a94:	4b28      	ldr	r3, [pc, #160]	@ (8000b38 <I2C_EV_IRQ_Handling+0xe0>)
 8000a96:	7a1b      	ldrb	r3, [r3, #8]
 8000a98:	2b02      	cmp	r3, #2
 8000a9a:	d106      	bne.n	8000aaa <I2C_EV_IRQ_Handling+0x52>
			I2C_Address(i2c_handle, I2C_Handle_it.addr, I2C_READ_BIT);
 8000a9c:	4b26      	ldr	r3, [pc, #152]	@ (8000b38 <I2C_EV_IRQ_Handling+0xe0>)
 8000a9e:	7d1b      	ldrb	r3, [r3, #20]
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f849 	bl	8000b3c <I2C_Address>
		}
	}
	bit_it = ((i2c_handle->I2Cx->SR1 >> 1) & 0x1);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	085b      	lsrs	r3, r3, #1
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	75fb      	strb	r3, [r7, #23]
	if (bit_it == HIGH) {
 8000aba:	7dfb      	ldrb	r3, [r7, #23]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	d107      	bne.n	8000ad0 <I2C_EV_IRQ_Handling+0x78>
		//Clear ADDR Flag
		uint32_t read = i2c_handle->I2Cx->SR1;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	60fb      	str	r3, [r7, #12]
		read = i2c_handle->I2Cx->SR2;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	60fb      	str	r3, [r7, #12]
		(void) read;
	}
	bit_it = ((i2c_handle->I2Cx->SR1 >> 2) & 0x1);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	089b      	lsrs	r3, r3, #2
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	75fb      	strb	r3, [r7, #23]
	// Check if BTF is HIGH or not
	// If we handled TXE first:
	//		+ We might write new data while BTF was signaling the transfer actually ended.
	//		+ We could miss the STOP condition timing → corrupt I2C protocol sequence.
	//		-> So we should handle the BTF first
	if (bit_it == HIGH) {
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d116      	bne.n	8000b14 <I2C_EV_IRQ_Handling+0xbc>
		if (I2C_Handle_it.state == I2C_BUSY_TX) {
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <I2C_EV_IRQ_Handling+0xe0>)
 8000ae8:	7a1b      	ldrb	r3, [r3, #8]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d10b      	bne.n	8000b06 <I2C_EV_IRQ_Handling+0xae>
			if ((i2c_handle->I2Cx->SR1 >> 7) & 0x1) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	695b      	ldr	r3, [r3, #20]
 8000af4:	09db      	lsrs	r3, r3, #7
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00a      	beq.n	8000b14 <I2C_EV_IRQ_Handling+0xbc>
				// Generate Stop condition
				I2C_Close_Communicate(i2c_handle);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f7ff fe04 	bl	800070c <I2C_Close_Communicate>
 8000b04:	e006      	b.n	8000b14 <I2C_EV_IRQ_Handling+0xbc>
			}
		} else if (I2C_Handle_it.state == I2C_BUSY_RX) {
 8000b06:	4b0c      	ldr	r3, [pc, #48]	@ (8000b38 <I2C_EV_IRQ_Handling+0xe0>)
 8000b08:	7a1b      	ldrb	r3, [r3, #8]
 8000b0a:	2b02      	cmp	r3, #2
 8000b0c:	d102      	bne.n	8000b14 <I2C_EV_IRQ_Handling+0xbc>
			if ((i2c_handle->I2Cx->SR1 >> 6) & 0x1) {
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	695b      	ldr	r3, [r3, #20]

			}
		}
	}

	bit_it = ((i2c_handle->I2Cx->SR1 >> 7) & 0x1);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	09db      	lsrs	r3, r3, #7
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	75fb      	strb	r3, [r7, #23]
	if (bit_it == HIGH) {
 8000b24:	7dfb      	ldrb	r3, [r7, #23]
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d102      	bne.n	8000b30 <I2C_EV_IRQ_Handling+0xd8>
		// Send data
		I2C_Send_DataIT(i2c_handle);
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f7ff fe24 	bl	8000778 <I2C_Send_DataIT>
	}

}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000003c 	.word	0x2000003c

08000b3c <I2C_Address>:

void I2C_Address(I2C_Handle_TypeDef *i2c_handle, uint8_t addr, uint8_t rnw) {
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	70bb      	strb	r3, [r7, #2]
	uint8_t slave_addr = addr << 1;
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	005b      	lsls	r3, r3, #1
 8000b50:	73fb      	strb	r3, [r7, #15]
	if (rnw == I2C_WRITE_BIT) {
 8000b52:	78bb      	ldrb	r3, [r7, #2]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d104      	bne.n	8000b62 <I2C_Address+0x26>
		slave_addr &= ~(HIGH);
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	f023 0301 	bic.w	r3, r3, #1
 8000b5e:	73fb      	strb	r3, [r7, #15]
 8000b60:	e006      	b.n	8000b70 <I2C_Address+0x34>
	} else if (rnw == I2C_READ_BIT) {
 8000b62:	78bb      	ldrb	r3, [r7, #2]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d103      	bne.n	8000b70 <I2C_Address+0x34>
		slave_addr |= (HIGH);
 8000b68:	7bfb      	ldrb	r3, [r7, #15]
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	73fb      	strb	r3, [r7, #15]
	}

	i2c_handle->I2Cx->DR = slave_addr;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	7bfa      	ldrb	r2, [r7, #15]
 8000b76:	611a      	str	r2, [r3, #16]

}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <main>:
uint8_t readInput;
uint8_t i2c_data[] = "STM32F407 to Arduino UNO";
void I2C_USER_INIT(void);
void GPIO_USER_INIT(void);

int main(void) {
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af02      	add	r7, sp, #8
	GPIO_USER_INIT();
 8000b8a:	f000 f84d 	bl	8000c28 <GPIO_USER_INIT>
	IRQ_Config(I2C1_IRQ31_EV, ENABLE);
 8000b8e:	2101      	movs	r1, #1
 8000b90:	201f      	movs	r0, #31
 8000b92:	f7ff fd7f 	bl	8000694 <IRQ_Config>
	IRQ_Config(I2C1_IRQ32_ER, ENABLE);
 8000b96:	2101      	movs	r1, #1
 8000b98:	2020      	movs	r0, #32
 8000b9a:	f7ff fd7b 	bl	8000694 <IRQ_Config>
	I2C_USER_INIT();
 8000b9e:	f000 f821 	bl	8000be4 <I2C_USER_INIT>
	while (1) {
		readInput = GPIO_INPUT(GPIOA, GPIO_PIN_0);
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	480b      	ldr	r0, [pc, #44]	@ (8000bd4 <main+0x50>)
 8000ba6:	f7ff fd5f 	bl	8000668 <GPIO_INPUT>
 8000baa:	4603      	mov	r3, r0
 8000bac:	461a      	mov	r2, r3
 8000bae:	4b0a      	ldr	r3, [pc, #40]	@ (8000bd8 <main+0x54>)
 8000bb0:	701a      	strb	r2, [r3, #0]
		if (readInput == HIGH) {
 8000bb2:	4b09      	ldr	r3, [pc, #36]	@ (8000bd8 <main+0x54>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d1f3      	bne.n	8000ba2 <main+0x1e>
			while (I2C_Master_Write_IT(&I2C_Handle, SLAVE_ADDR, i2c_data,
 8000bba:	bf00      	nop
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	9300      	str	r3, [sp, #0]
 8000bc0:	2319      	movs	r3, #25
 8000bc2:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <main+0x58>)
 8000bc4:	2168      	movs	r1, #104	@ 0x68
 8000bc6:	4806      	ldr	r0, [pc, #24]	@ (8000be0 <main+0x5c>)
 8000bc8:	f7ff ff02 	bl	80009d0 <I2C_Master_Write_IT>
 8000bcc:	4603      	mov	r3, r0
					sizeof(i2c_data), I2C_SR_DIS) != I2C_READY)
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d1f4      	bne.n	8000bbc <main+0x38>
		readInput = GPIO_INPUT(GPIOA, GPIO_PIN_0);
 8000bd2:	e7e6      	b.n	8000ba2 <main+0x1e>
 8000bd4:	40020000 	.word	0x40020000
 8000bd8:	20000070 	.word	0x20000070
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000054 	.word	0x20000054

08000be4 <I2C_USER_INIT>:
				;
		}
	}
}

void I2C_USER_INIT(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	I2C_Handle.I2Cx = I2C1;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <I2C_USER_INIT+0x38>)
 8000bea:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <I2C_USER_INIT+0x3c>)
 8000bec:	601a      	str	r2, [r3, #0]
	I2C_Handle.MasterOrSlave = I2C_Master_Mode;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <I2C_USER_INIT+0x38>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	715a      	strb	r2, [r3, #5]
	I2C_Handle.ack_en = I2C_ACK_EN;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <I2C_USER_INIT+0x38>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	735a      	strb	r2, [r3, #13]
	I2C_Handle.address = 0x61;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <I2C_USER_INIT+0x38>)
 8000bfc:	2261      	movs	r2, #97	@ 0x61
 8000bfe:	71da      	strb	r2, [r3, #7]
	I2C_Handle.address_select_bit = I2C_7_Bit_Adress;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <I2C_USER_INIT+0x38>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	719a      	strb	r2, [r3, #6]
	I2C_Handle.mode = I2C_Standard_Mode;
 8000c06:	4b05      	ldr	r3, [pc, #20]	@ (8000c1c <I2C_USER_INIT+0x38>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	711a      	strb	r2, [r3, #4]
	I2C_Handle.scl_speed = I2C_SCL_SPEED_100;
 8000c0c:	4b03      	ldr	r3, [pc, #12]	@ (8000c1c <I2C_USER_INIT+0x38>)
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <I2C_USER_INIT+0x40>)
 8000c10:	609a      	str	r2, [r3, #8]
	I2C_INIT(&I2C_Handle);
 8000c12:	4802      	ldr	r0, [pc, #8]	@ (8000c1c <I2C_USER_INIT+0x38>)
 8000c14:	f7ff fdd0 	bl	80007b8 <I2C_INIT>
}
 8000c18:	bf00      	nop
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000054 	.word	0x20000054
 8000c20:	40005400 	.word	0x40005400
 8000c24:	000186a0 	.word	0x000186a0

08000c28 <GPIO_USER_INIT>:

void GPIO_USER_INIT(void) {
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c2e:	4a18      	ldr	r2, [pc, #96]	@ (8000c90 <GPIO_USER_INIT+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8000c38:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8000c44:	4811      	ldr	r0, [pc, #68]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c46:	f7ff fb25 	bl	8000294 <GPIO_INIT>

// PB6 - I2C1_SCL
	GPIO_Handle.GPIOX = GPIOB;
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c4c:	4a11      	ldr	r2, [pc, #68]	@ (8000c94 <GPIO_USER_INIT+0x6c>)
 8000c4e:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8000c50:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c52:	2202      	movs	r2, #2
 8000c54:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000c56:	4b0d      	ldr	r3, [pc, #52]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c58:	2203      	movs	r2, #3
 8000c5a:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_OD;
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pin_number = GPIO_PIN_6;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c64:	2206      	movs	r2, #6
 8000c66:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
 8000c68:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	719a      	strb	r2, [r3, #6]
	GPIO_Handle.alternate_function_select = GPIO_AF4;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	725a      	strb	r2, [r3, #9]
	GPIO_INIT(&GPIO_Handle);
 8000c74:	4805      	ldr	r0, [pc, #20]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c76:	f7ff fb0d 	bl	8000294 <GPIO_INIT>

// PB9 - I2C1_SDA
	GPIO_Handle.pin_number = GPIO_PIN_9;
 8000c7a:	4b04      	ldr	r3, [pc, #16]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c7c:	2209      	movs	r2, #9
 8000c7e:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <GPIO_USER_INIT+0x64>)
 8000c82:	f7ff fb07 	bl	8000294 <GPIO_INIT>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000064 	.word	0x20000064
 8000c90:	40020000 	.word	0x40020000
 8000c94:	40020400 	.word	0x40020400

08000c98 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler() {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
	I2C_EV_IRQ_Handling(&I2C_Handle);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <I2C1_EV_IRQHandler+0x10>)
 8000c9e:	f7ff fedb 	bl	8000a58 <I2C_EV_IRQ_Handling>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000054 	.word	0x20000054

08000cac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cac:	480d      	ldr	r0, [pc, #52]	@ (8000ce4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb4:	480c      	ldr	r0, [pc, #48]	@ (8000ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cb6:	490d      	ldr	r1, [pc, #52]	@ (8000cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <LoopForever+0xe>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cbc:	e002      	b.n	8000cc4 <LoopCopyDataInit>

08000cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc2:	3304      	adds	r3, #4

08000cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc8:	d3f9      	bcc.n	8000cbe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cca:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ccc:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf8 <LoopForever+0x16>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd0:	e001      	b.n	8000cd6 <LoopFillZerobss>

08000cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd4:	3204      	adds	r2, #4

08000cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd8:	d3fb      	bcc.n	8000cd2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cda:	f000 f811 	bl	8000d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cde:	f7ff ff51 	bl	8000b84 <main>

08000ce2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ce2:	e7fe      	b.n	8000ce2 <LoopForever>
  ldr   r0, =_estack
 8000ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000cf0:	08000d98 	.word	0x08000d98
  ldr r2, =_sbss
 8000cf4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000cf8:	20000074 	.word	0x20000074

08000cfc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <__libc_init_array>:
 8000d00:	b570      	push	{r4, r5, r6, lr}
 8000d02:	4d0d      	ldr	r5, [pc, #52]	@ (8000d38 <__libc_init_array+0x38>)
 8000d04:	4c0d      	ldr	r4, [pc, #52]	@ (8000d3c <__libc_init_array+0x3c>)
 8000d06:	1b64      	subs	r4, r4, r5
 8000d08:	10a4      	asrs	r4, r4, #2
 8000d0a:	2600      	movs	r6, #0
 8000d0c:	42a6      	cmp	r6, r4
 8000d0e:	d109      	bne.n	8000d24 <__libc_init_array+0x24>
 8000d10:	4d0b      	ldr	r5, [pc, #44]	@ (8000d40 <__libc_init_array+0x40>)
 8000d12:	4c0c      	ldr	r4, [pc, #48]	@ (8000d44 <__libc_init_array+0x44>)
 8000d14:	f000 f818 	bl	8000d48 <_init>
 8000d18:	1b64      	subs	r4, r4, r5
 8000d1a:	10a4      	asrs	r4, r4, #2
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	42a6      	cmp	r6, r4
 8000d20:	d105      	bne.n	8000d2e <__libc_init_array+0x2e>
 8000d22:	bd70      	pop	{r4, r5, r6, pc}
 8000d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d28:	4798      	blx	r3
 8000d2a:	3601      	adds	r6, #1
 8000d2c:	e7ee      	b.n	8000d0c <__libc_init_array+0xc>
 8000d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d32:	4798      	blx	r3
 8000d34:	3601      	adds	r6, #1
 8000d36:	e7f2      	b.n	8000d1e <__libc_init_array+0x1e>
 8000d38:	08000d90 	.word	0x08000d90
 8000d3c:	08000d90 	.word	0x08000d90
 8000d40:	08000d90 	.word	0x08000d90
 8000d44:	08000d94 	.word	0x08000d94

08000d48 <_init>:
 8000d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4a:	bf00      	nop
 8000d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d4e:	bc08      	pop	{r3}
 8000d50:	469e      	mov	lr, r3
 8000d52:	4770      	bx	lr

08000d54 <_fini>:
 8000d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d56:	bf00      	nop
 8000d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5a:	bc08      	pop	{r3}
 8000d5c:	469e      	mov	lr, r3
 8000d5e:	4770      	bx	lr
