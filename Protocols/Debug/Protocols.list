
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000900  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000a88  08000a88  00001a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ab8  08000ab8  00001ac0  2**0
                  CONTENTS
  4 .ARM          00000000  08000ab8  08000ab8  00001ac0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ab8  08000ac0  00001ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ab8  08000ab8  00001ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000abc  08000abc  00001abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00001ac0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001ac0  2**0
                  CONTENTS
 10 .bss          00000048  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000048  20000048  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001ac0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000144b  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000511  00000000  00000000  00002f3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00003450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d1  00000000  00000000  00003580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d0d  00000000  00000000  00003651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000215d  00000000  00000000  0000635e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a777  00000000  00000000  000084bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012c32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000037c  00000000  00000000  00012c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  00012ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000a70 	.word	0x08000a70

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000a70 	.word	0x08000a70

080001c8 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 80001c8:	b4b0      	push	{r4, r5, r7}
 80001ca:	b08f      	sub	sp, #60	@ 0x3c
 80001cc:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 80001ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000280 <Get_APB1_Clock_Speed+0xb8>)
 80001d0:	f107 0410 	add.w	r4, r7, #16
 80001d4:	461d      	mov	r5, r3
 80001d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80001de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 80001e2:	4b28      	ldr	r3, [pc, #160]	@ (8000284 <Get_APB1_Clock_Speed+0xbc>)
 80001e4:	463c      	mov	r4, r7
 80001e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80001e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 80001ec:	4b26      	ldr	r3, [pc, #152]	@ (8000288 <Get_APB1_Clock_Speed+0xc0>)
 80001ee:	689b      	ldr	r3, [r3, #8]
 80001f0:	089b      	lsrs	r3, r3, #2
 80001f2:	b2db      	uxtb	r3, r3
 80001f4:	f003 0303 	and.w	r3, r3, #3
 80001f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 80001fc:	4b22      	ldr	r3, [pc, #136]	@ (8000288 <Get_APB1_Clock_Speed+0xc0>)
 80001fe:	689b      	ldr	r3, [r3, #8]
 8000200:	091b      	lsrs	r3, r3, #4
 8000202:	b2db      	uxtb	r3, r3
 8000204:	f003 030f 	and.w	r3, r3, #15
 8000208:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 800020c:	4b1e      	ldr	r3, [pc, #120]	@ (8000288 <Get_APB1_Clock_Speed+0xc0>)
 800020e:	689b      	ldr	r3, [r3, #8]
 8000210:	0a9b      	lsrs	r3, r3, #10
 8000212:	b2db      	uxtb	r3, r3
 8000214:	f003 0307 	and.w	r3, r3, #7
 8000218:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 800021c:	2301      	movs	r3, #1
 800021e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 8000220:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000224:	2b07      	cmp	r3, #7
 8000226:	d908      	bls.n	800023a <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 8000228:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800022c:	3b08      	subs	r3, #8
 800022e:	009b      	lsls	r3, r3, #2
 8000230:	3338      	adds	r3, #56	@ 0x38
 8000232:	443b      	add	r3, r7
 8000234:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000238:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 800023a:	2301      	movs	r3, #1
 800023c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 800023e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000242:	2b03      	cmp	r3, #3
 8000244:	d908      	bls.n	8000258 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 8000246:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800024a:	3b04      	subs	r3, #4
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	3338      	adds	r3, #56	@ 0x38
 8000250:	443b      	add	r3, r7
 8000252:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000256:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000258:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800025c:	2b00      	cmp	r3, #0
 800025e:	d109      	bne.n	8000274 <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000260:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000262:	4a0a      	ldr	r2, [pc, #40]	@ (800028c <Get_APB1_Clock_Speed+0xc4>)
 8000264:	fb92 f2f3 	sdiv	r2, r2, r3
 8000268:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800026a:	fb92 f3f3 	sdiv	r3, r2, r3
 800026e:	461a      	mov	r2, r3
 8000270:	4b07      	ldr	r3, [pc, #28]	@ (8000290 <Get_APB1_Clock_Speed+0xc8>)
 8000272:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 8000274:	bf00      	nop
 8000276:	373c      	adds	r7, #60	@ 0x3c
 8000278:	46bd      	mov	sp, r7
 800027a:	bcb0      	pop	{r4, r5, r7}
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop
 8000280:	08000a88 	.word	0x08000a88
 8000284:	08000aa8 	.word	0x08000aa8
 8000288:	40023800 	.word	0x40023800
 800028c:	00f42400 	.word	0x00f42400
 8000290:	2000001c 	.word	0x2000001c

08000294 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a90      	ldr	r2, [pc, #576]	@ (80004e4 <GPIO_INIT+0x250>)
 80002a2:	4293      	cmp	r3, r2
 80002a4:	d106      	bne.n	80002b4 <GPIO_INIT+0x20>
		GPIOA_EN();
 80002a6:	4b90      	ldr	r3, [pc, #576]	@ (80004e8 <GPIO_INIT+0x254>)
 80002a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002aa:	4a8f      	ldr	r2, [pc, #572]	@ (80004e8 <GPIO_INIT+0x254>)
 80002ac:	f043 0301 	orr.w	r3, r3, #1
 80002b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002b2:	e05e      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a8c      	ldr	r2, [pc, #560]	@ (80004ec <GPIO_INIT+0x258>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_INIT+0x38>
		GPIOB_EN();
 80002be:	4b8a      	ldr	r3, [pc, #552]	@ (80004e8 <GPIO_INIT+0x254>)
 80002c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c2:	4a89      	ldr	r2, [pc, #548]	@ (80004e8 <GPIO_INIT+0x254>)
 80002c4:	f043 0302 	orr.w	r3, r3, #2
 80002c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002ca:	e052      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a87      	ldr	r2, [pc, #540]	@ (80004f0 <GPIO_INIT+0x25c>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d106      	bne.n	80002e4 <GPIO_INIT+0x50>
		GPIOC_EN();
 80002d6:	4b84      	ldr	r3, [pc, #528]	@ (80004e8 <GPIO_INIT+0x254>)
 80002d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002da:	4a83      	ldr	r2, [pc, #524]	@ (80004e8 <GPIO_INIT+0x254>)
 80002dc:	f043 0304 	orr.w	r3, r3, #4
 80002e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80002e2:	e046      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a82      	ldr	r2, [pc, #520]	@ (80004f4 <GPIO_INIT+0x260>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d106      	bne.n	80002fc <GPIO_INIT+0x68>
		GPIOD_EN();
 80002ee:	4b7e      	ldr	r3, [pc, #504]	@ (80004e8 <GPIO_INIT+0x254>)
 80002f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f2:	4a7d      	ldr	r2, [pc, #500]	@ (80004e8 <GPIO_INIT+0x254>)
 80002f4:	f043 0308 	orr.w	r3, r3, #8
 80002f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80002fa:	e03a      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a7d      	ldr	r2, [pc, #500]	@ (80004f8 <GPIO_INIT+0x264>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_INIT+0x80>
		GPIOE_EN();
 8000306:	4b78      	ldr	r3, [pc, #480]	@ (80004e8 <GPIO_INIT+0x254>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030a:	4a77      	ldr	r2, [pc, #476]	@ (80004e8 <GPIO_INIT+0x254>)
 800030c:	f043 0310 	orr.w	r3, r3, #16
 8000310:	6313      	str	r3, [r2, #48]	@ 0x30
 8000312:	e02e      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a78      	ldr	r2, [pc, #480]	@ (80004fc <GPIO_INIT+0x268>)
 800031a:	4293      	cmp	r3, r2
 800031c:	d106      	bne.n	800032c <GPIO_INIT+0x98>
		GPIOF_EN();
 800031e:	4b72      	ldr	r3, [pc, #456]	@ (80004e8 <GPIO_INIT+0x254>)
 8000320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000322:	4a71      	ldr	r2, [pc, #452]	@ (80004e8 <GPIO_INIT+0x254>)
 8000324:	f043 0320 	orr.w	r3, r3, #32
 8000328:	6313      	str	r3, [r2, #48]	@ 0x30
 800032a:	e022      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a73      	ldr	r2, [pc, #460]	@ (8000500 <GPIO_INIT+0x26c>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000336:	4b6c      	ldr	r3, [pc, #432]	@ (80004e8 <GPIO_INIT+0x254>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033a:	4a6b      	ldr	r2, [pc, #428]	@ (80004e8 <GPIO_INIT+0x254>)
 800033c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000340:	6313      	str	r3, [r2, #48]	@ 0x30
 8000342:	e016      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a6e      	ldr	r2, [pc, #440]	@ (8000504 <GPIO_INIT+0x270>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_INIT+0xc8>
		GPIOH_EN();
 800034e:	4b66      	ldr	r3, [pc, #408]	@ (80004e8 <GPIO_INIT+0x254>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000352:	4a65      	ldr	r2, [pc, #404]	@ (80004e8 <GPIO_INIT+0x254>)
 8000354:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000358:	6313      	str	r3, [r2, #48]	@ 0x30
 800035a:	e00a      	b.n	8000372 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a69      	ldr	r2, [pc, #420]	@ (8000508 <GPIO_INIT+0x274>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d105      	bne.n	8000372 <GPIO_INIT+0xde>
		GPIOI_EN();
 8000366:	4b60      	ldr	r3, [pc, #384]	@ (80004e8 <GPIO_INIT+0x254>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036a:	4a5f      	ldr	r2, [pc, #380]	@ (80004e8 <GPIO_INIT+0x254>)
 800036c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000370:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	005b      	lsls	r3, r3, #1
 800037e:	2103      	movs	r1, #3
 8000380:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000384:	43db      	mvns	r3, r3
 8000386:	4619      	mov	r1, r3
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	400a      	ands	r2, r1
 800038e:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	791b      	ldrb	r3, [r3, #4]
 800039a:	005b      	lsls	r3, r3, #1
 800039c:	2103      	movs	r1, #3
 800039e:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 80003a2:	43db      	mvns	r3, r3
 80003a4:	4619      	mov	r1, r3
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	400a      	ands	r2, r1
 80003ac:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	68da      	ldr	r2, [r3, #12]
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	799b      	ldrb	r3, [r3, #6]
 80003b8:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	fa01 f303 	lsl.w	r3, r1, r3
 80003c4:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	430a      	orrs	r2, r1
 80003cc:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	795b      	ldrb	r3, [r3, #5]
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	f200 809a 	bhi.w	800050c <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	795b      	ldrb	r3, [r3, #5]
 80003e2:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	791b      	ldrb	r3, [r3, #4]
 80003e8:	005b      	lsls	r3, r3, #1
 80003ea:	fa01 f303 	lsl.w	r3, r1, r3
 80003ee:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	430a      	orrs	r2, r1
 80003f6:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	791b      	ldrb	r3, [r3, #4]
 8000402:	4619      	mov	r1, r3
 8000404:	2303      	movs	r3, #3
 8000406:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000408:	43db      	mvns	r3, r3
 800040a:	4619      	mov	r1, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	400a      	ands	r2, r1
 8000412:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	685a      	ldr	r2, [r3, #4]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	7a1b      	ldrb	r3, [r3, #8]
 800041e:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	791b      	ldrb	r3, [r3, #4]
 8000424:	fa01 f303 	lsl.w	r3, r1, r3
 8000428:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	430a      	orrs	r2, r1
 8000430:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	791b      	ldrb	r3, [r3, #4]
 800043c:	005b      	lsls	r3, r3, #1
 800043e:	2103      	movs	r1, #3
 8000440:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000444:	43db      	mvns	r3, r3
 8000446:	4619      	mov	r1, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	400a      	ands	r2, r1
 800044e:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	689a      	ldr	r2, [r3, #8]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	79db      	ldrb	r3, [r3, #7]
 800045a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	791b      	ldrb	r3, [r3, #4]
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	430a      	orrs	r2, r1
 800046e:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	795b      	ldrb	r3, [r3, #5]
 8000474:	2b02      	cmp	r3, #2
 8000476:	f040 80ec 	bne.w	8000652 <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 800047e:	08db      	lsrs	r3, r3, #3
 8000480:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	791b      	ldrb	r3, [r3, #4]
 8000486:	f003 0307 	and.w	r3, r3, #7
 800048a:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	7b7a      	ldrb	r2, [r7, #13]
 8000492:	3208      	adds	r2, #8
 8000494:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	791b      	ldrb	r3, [r3, #4]
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	2203      	movs	r2, #3
 80004a0:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 80004a4:	43db      	mvns	r3, r3
 80004a6:	4618      	mov	r0, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	7b7a      	ldrb	r2, [r7, #13]
 80004ae:	4001      	ands	r1, r0
 80004b0:	3208      	adds	r2, #8
 80004b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	7b7a      	ldrb	r2, [r7, #13]
 80004bc:	3208      	adds	r2, #8
 80004be:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	7a5b      	ldrb	r3, [r3, #9]
 80004c6:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 80004c8:	7b3b      	ldrb	r3, [r7, #12]
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	fa02 f303 	lsl.w	r3, r2, r3
 80004d0:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	7b7a      	ldrb	r2, [r7, #13]
 80004d8:	4301      	orrs	r1, r0
 80004da:	3208      	adds	r2, #8
 80004dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 80004e0:	e0b7      	b.n	8000652 <GPIO_INIT+0x3be>
 80004e2:	bf00      	nop
 80004e4:	40020000 	.word	0x40020000
 80004e8:	40023800 	.word	0x40023800
 80004ec:	40020400 	.word	0x40020400
 80004f0:	40020800 	.word	0x40020800
 80004f4:	40020c00 	.word	0x40020c00
 80004f8:	40021000 	.word	0x40021000
 80004fc:	40021400 	.word	0x40021400
 8000500:	40021800 	.word	0x40021800
 8000504:	40021c00 	.word	0x40021c00
 8000508:	40022000 	.word	0x40022000
		SYSCFG_EN();
 800050c:	4b54      	ldr	r3, [pc, #336]	@ (8000660 <GPIO_INIT+0x3cc>)
 800050e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000510:	4a53      	ldr	r2, [pc, #332]	@ (8000660 <GPIO_INIT+0x3cc>)
 8000512:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000516:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	795b      	ldrb	r3, [r3, #5]
 800051c:	2b06      	cmp	r3, #6
 800051e:	d12e      	bne.n	800057e <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000520:	4b50      	ldr	r3, [pc, #320]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000522:	689b      	ldr	r3, [r3, #8]
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	7912      	ldrb	r2, [r2, #4]
 8000528:	4611      	mov	r1, r2
 800052a:	2201      	movs	r2, #1
 800052c:	408a      	lsls	r2, r1
 800052e:	43d2      	mvns	r2, r2
 8000530:	4611      	mov	r1, r2
 8000532:	4a4c      	ldr	r2, [pc, #304]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000534:	400b      	ands	r3, r1
 8000536:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000538:	4b4a      	ldr	r3, [pc, #296]	@ (8000664 <GPIO_INIT+0x3d0>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	687a      	ldr	r2, [r7, #4]
 800053e:	7912      	ldrb	r2, [r2, #4]
 8000540:	4611      	mov	r1, r2
 8000542:	2201      	movs	r2, #1
 8000544:	408a      	lsls	r2, r1
 8000546:	43d2      	mvns	r2, r2
 8000548:	4611      	mov	r1, r2
 800054a:	4a46      	ldr	r2, [pc, #280]	@ (8000664 <GPIO_INIT+0x3d0>)
 800054c:	400b      	ands	r3, r1
 800054e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000550:	4b44      	ldr	r3, [pc, #272]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	7912      	ldrb	r2, [r2, #4]
 8000558:	4611      	mov	r1, r2
 800055a:	2201      	movs	r2, #1
 800055c:	408a      	lsls	r2, r1
 800055e:	4611      	mov	r1, r2
 8000560:	4a40      	ldr	r2, [pc, #256]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000562:	430b      	orrs	r3, r1
 8000564:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000566:	4b3f      	ldr	r3, [pc, #252]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000568:	68db      	ldr	r3, [r3, #12]
 800056a:	687a      	ldr	r2, [r7, #4]
 800056c:	7912      	ldrb	r2, [r2, #4]
 800056e:	4611      	mov	r1, r2
 8000570:	2201      	movs	r2, #1
 8000572:	408a      	lsls	r2, r1
 8000574:	4611      	mov	r1, r2
 8000576:	4a3b      	ldr	r2, [pc, #236]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000578:	430b      	orrs	r3, r1
 800057a:	60d3      	str	r3, [r2, #12]
 800057c:	e036      	b.n	80005ec <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	795b      	ldrb	r3, [r3, #5]
 8000582:	2b05      	cmp	r3, #5
 8000584:	d117      	bne.n	80005b6 <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000586:	4b37      	ldr	r3, [pc, #220]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	43d2      	mvns	r2, r2
 8000596:	4611      	mov	r1, r2
 8000598:	4a32      	ldr	r2, [pc, #200]	@ (8000664 <GPIO_INIT+0x3d0>)
 800059a:	400b      	ands	r3, r1
 800059c:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 800059e:	4b31      	ldr	r3, [pc, #196]	@ (8000664 <GPIO_INIT+0x3d0>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	687a      	ldr	r2, [r7, #4]
 80005a4:	7912      	ldrb	r2, [r2, #4]
 80005a6:	4611      	mov	r1, r2
 80005a8:	2201      	movs	r2, #1
 80005aa:	408a      	lsls	r2, r1
 80005ac:	4611      	mov	r1, r2
 80005ae:	4a2d      	ldr	r2, [pc, #180]	@ (8000664 <GPIO_INIT+0x3d0>)
 80005b0:	430b      	orrs	r3, r1
 80005b2:	60d3      	str	r3, [r2, #12]
 80005b4:	e01a      	b.n	80005ec <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	795b      	ldrb	r3, [r3, #5]
 80005ba:	2b04      	cmp	r3, #4
 80005bc:	d116      	bne.n	80005ec <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80005be:	4b29      	ldr	r3, [pc, #164]	@ (8000664 <GPIO_INIT+0x3d0>)
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	687a      	ldr	r2, [r7, #4]
 80005c4:	7912      	ldrb	r2, [r2, #4]
 80005c6:	4611      	mov	r1, r2
 80005c8:	2201      	movs	r2, #1
 80005ca:	408a      	lsls	r2, r1
 80005cc:	43d2      	mvns	r2, r2
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a24      	ldr	r2, [pc, #144]	@ (8000664 <GPIO_INIT+0x3d0>)
 80005d2:	400b      	ands	r3, r1
 80005d4:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 80005d6:	4b23      	ldr	r3, [pc, #140]	@ (8000664 <GPIO_INIT+0x3d0>)
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	7912      	ldrb	r2, [r2, #4]
 80005de:	4611      	mov	r1, r2
 80005e0:	2201      	movs	r2, #1
 80005e2:	408a      	lsls	r2, r1
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a1f      	ldr	r2, [pc, #124]	@ (8000664 <GPIO_INIT+0x3d0>)
 80005e8:	430b      	orrs	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	089b      	lsrs	r3, r3, #2
 80005f2:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	791b      	ldrb	r3, [r3, #4]
 80005f8:	f003 0303 	and.w	r3, r3, #3
 80005fc:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 80005fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <GPIO_INIT+0x3d4>)
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	3302      	adds	r3, #2
 8000604:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	7a9b      	ldrb	r3, [r3, #10]
 800060c:	4619      	mov	r1, r3
 800060e:	7bbb      	ldrb	r3, [r7, #14]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	4618      	mov	r0, r3
 8000618:	4913      	ldr	r1, [pc, #76]	@ (8000668 <GPIO_INIT+0x3d4>)
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	4302      	orrs	r2, r0
 800061e:	3302      	adds	r3, #2
 8000620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8000624:	4b0f      	ldr	r3, [pc, #60]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	2201      	movs	r2, #1
 8000630:	408a      	lsls	r2, r1
 8000632:	43d2      	mvns	r2, r2
 8000634:	4611      	mov	r1, r2
 8000636:	4a0b      	ldr	r2, [pc, #44]	@ (8000664 <GPIO_INIT+0x3d0>)
 8000638:	400b      	ands	r3, r1
 800063a:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <GPIO_INIT+0x3d0>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	7912      	ldrb	r2, [r2, #4]
 8000644:	4611      	mov	r1, r2
 8000646:	2201      	movs	r2, #1
 8000648:	408a      	lsls	r2, r1
 800064a:	4611      	mov	r1, r2
 800064c:	4a05      	ldr	r2, [pc, #20]	@ (8000664 <GPIO_INIT+0x3d0>)
 800064e:	430b      	orrs	r3, r1
 8000650:	6013      	str	r3, [r2, #0]
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40013c00 	.word	0x40013c00
 8000668:	40013800 	.word	0x40013800

0800066c <GPIO_TOGGLE>:
uint8_t GPIO_INPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
	uint8_t val = ((gpiox->IDR >> gpio_pins) & GPIO_BIT_1_Mask);
	return val;
}

void GPIO_TOGGLE(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	70fb      	strb	r3, [r7, #3]
	gpiox->ODR ^= (HIGH << gpio_pins);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	695b      	ldr	r3, [r3, #20]
 800067c:	78fa      	ldrb	r2, [r7, #3]
 800067e:	2101      	movs	r1, #1
 8000680:	fa01 f202 	lsl.w	r2, r1, r2
 8000684:	405a      	eors	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	615a      	str	r2, [r3, #20]
}
 800068a:	bf00      	nop
 800068c:	370c      	adds	r7, #12
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
	...

08000698 <IRQ_Config>:
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 8000698:	b480      	push	{r7}
 800069a:	b087      	sub	sp, #28
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	095b      	lsrs	r3, r3, #5
 80006ac:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 80006ae:	7dfb      	ldrb	r3, [r7, #23]
 80006b0:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 80006b2:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80006b6:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80006ba:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 80006bc:	7dfb      	ldrb	r3, [r7, #23]
 80006be:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <IRQ_Config+0x74>)
 80006c2:	4413      	add	r3, r2
 80006c4:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d10b      	bne.n	80006e4 <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 80006cc:	693b      	ldr	r3, [r7, #16]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	79fa      	ldrb	r2, [r7, #7]
 80006d2:	f002 021f 	and.w	r2, r2, #31
 80006d6:	2101      	movs	r1, #1
 80006d8:	fa01 f202 	lsl.w	r2, r1, r2
 80006dc:	431a      	orrs	r2, r3
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 80006e2:	e00d      	b.n	8000700 <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10a      	bne.n	8000700 <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	79fa      	ldrb	r2, [r7, #7]
 80006f0:	f002 021f 	and.w	r2, r2, #31
 80006f4:	2101      	movs	r1, #1
 80006f6:	fa01 f202 	lsl.w	r2, r1, r2
 80006fa:	431a      	orrs	r2, r3
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	601a      	str	r2, [r3, #0]
}
 8000700:	bf00      	nop
 8000702:	371c      	adds	r7, #28
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr
 800070c:	e000e180 	.word	0xe000e180

08000710 <TIM_ENABLE>:

	// Clear the update flag that was just set
	timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
}

void TIM_ENABLE(TIM_HandleTypeDef *timHandleTypeDef) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	// Timer enable
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_0_pos);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	f042 0201 	orr.w	r2, r2, #1
 8000726:	601a      	str	r2, [r3, #0]

	/*	UG: Update generation
	 This bit can be set by software, it is automatically cleared by hardware.
	 0: No action
	 1: Re-initialize the counter and generates an update of the registers.*/
	timHandleTypeDef->TIMx->EGR |= (HIGH << Shift_0_pos);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	695a      	ldr	r2, [r3, #20]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	f042 0201 	orr.w	r2, r2, #1
 8000736:	615a      	str	r2, [r3, #20]

	// Clear the update flag that was just set
	timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	691a      	ldr	r2, [r3, #16]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f022 0201 	bic.w	r2, r2, #1
 8000746:	611a      	str	r2, [r3, #16]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <TIM_DELAY_INIT>:

void TIM_DELAY_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	if (timHandleTypeDef->TIMx == TIM2) {
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000764:	d106      	bne.n	8000774 <TIM_DELAY_INIT+0x20>
		TIM2_EN();
 8000766:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <TIM_DELAY_INIT+0xe4>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076a:	4a33      	ldr	r2, [pc, #204]	@ (8000838 <TIM_DELAY_INIT+0xe4>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6413      	str	r3, [r2, #64]	@ 0x40
 8000772:	e022      	b.n	80007ba <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM3) {
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a30      	ldr	r2, [pc, #192]	@ (800083c <TIM_DELAY_INIT+0xe8>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <TIM_DELAY_INIT+0x38>
		TIM3_EN();
 800077e:	4b2e      	ldr	r3, [pc, #184]	@ (8000838 <TIM_DELAY_INIT+0xe4>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000782:	4a2d      	ldr	r2, [pc, #180]	@ (8000838 <TIM_DELAY_INIT+0xe4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6413      	str	r3, [r2, #64]	@ 0x40
 800078a:	e016      	b.n	80007ba <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM4) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a2b      	ldr	r2, [pc, #172]	@ (8000840 <TIM_DELAY_INIT+0xec>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d106      	bne.n	80007a4 <TIM_DELAY_INIT+0x50>
		TIM4_EN();
 8000796:	4b28      	ldr	r3, [pc, #160]	@ (8000838 <TIM_DELAY_INIT+0xe4>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	4a27      	ldr	r2, [pc, #156]	@ (8000838 <TIM_DELAY_INIT+0xe4>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007a2:	e00a      	b.n	80007ba <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM5) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a26      	ldr	r2, [pc, #152]	@ (8000844 <TIM_DELAY_INIT+0xf0>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d105      	bne.n	80007ba <TIM_DELAY_INIT+0x66>
		TIM5_EN();
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <TIM_DELAY_INIT+0xe4>)
 80007b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007b2:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <TIM_DELAY_INIT+0xe4>)
 80007b4:	f043 0308 	orr.w	r3, r3, #8
 80007b8:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	Get_APB1_Clock_Speed();
 80007ba:	f7ff fd05 	bl	80001c8 <Get_APB1_Clock_Speed>

	uint32_t psc = SystemClockSrc / ONE_MEGA_HERT;
 80007be:	4b22      	ldr	r3, [pc, #136]	@ (8000848 <TIM_DELAY_INIT+0xf4>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a22      	ldr	r2, [pc, #136]	@ (800084c <TIM_DELAY_INIT+0xf8>)
 80007c4:	fba2 2303 	umull	r2, r3, r2, r3
 80007c8:	0c9b      	lsrs	r3, r3, #18
 80007ca:	60fb      	str	r3, [r7, #12]

	// Ensure Counter is disable
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_0_pos);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f022 0201 	bic.w	r2, r2, #1
 80007da:	601a      	str	r2, [r3, #0]

	// Clock prescaler
	timHandleTypeDef->TIMx->PSC = (psc - 1);
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	68fa      	ldr	r2, [r7, #12]
 80007e2:	3a01      	subs	r2, #1
 80007e4:	629a      	str	r2, [r3, #40]	@ 0x28

	// Select Auto-reload value (This will generate interrupt every 1ms for millis, but if use delay fuction then this ARR actually don't care)
	timHandleTypeDef->TIMx->ARR = 999;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c

	// autoReloadPreload
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_7_pos);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	681a      	ldr	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80007fe:	601a      	str	r2, [r3, #0]

	// Count up
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_4_pos);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f022 0210 	bic.w	r2, r2, #16
 800080e:	601a      	str	r2, [r3, #0]

	// Enable update
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_1_pos);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f022 0202 	bic.w	r2, r2, #2
 800081e:	601a      	str	r2, [r3, #0]

	// Update request source (Select source)
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_2_pos);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f022 0204 	bic.w	r2, r2, #4
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	3710      	adds	r7, #16
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40023800 	.word	0x40023800
 800083c:	40000400 	.word	0x40000400
 8000840:	40000800 	.word	0x40000800
 8000844:	40000c00 	.word	0x40000c00
 8000848:	2000001c 	.word	0x2000001c
 800084c:	431bde83 	.word	0x431bde83

08000850 <TIM_MILLIS_INIT>:

void TIM_MILLIS_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	TIM_DELAY_INIT(timHandleTypeDef);
 8000858:	6878      	ldr	r0, [r7, #4]
 800085a:	f7ff ff7b 	bl	8000754 <TIM_DELAY_INIT>
	timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_0_pos);
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68da      	ldr	r2, [r3, #12]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f042 0201 	orr.w	r2, r2, #1
 800086c:	60da      	str	r2, [r3, #12]

	if (timHandleTypeDef->TIMx == TIM2) {
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000876:	d104      	bne.n	8000882 <TIM_MILLIS_INIT+0x32>
		IRQ_Config(TIM2_IRQ28, HIGH);
 8000878:	2101      	movs	r1, #1
 800087a:	201c      	movs	r0, #28
 800087c:	f7ff ff0c 	bl	8000698 <IRQ_Config>
	} else if (timHandleTypeDef->TIMx == TIM4) {
		IRQ_Config(TIM4_IRQ30, HIGH);
	} else if (timHandleTypeDef->TIMx == TIM5) {
		IRQ_Config(TIM5_IRQ50, HIGH);
	}
}
 8000880:	e01c      	b.n	80008bc <TIM_MILLIS_INIT+0x6c>
	} else if (timHandleTypeDef->TIMx == TIM3) {
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0f      	ldr	r2, [pc, #60]	@ (80008c4 <TIM_MILLIS_INIT+0x74>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d104      	bne.n	8000896 <TIM_MILLIS_INIT+0x46>
		IRQ_Config(TIM3_IRQ29, HIGH);
 800088c:	2101      	movs	r1, #1
 800088e:	201d      	movs	r0, #29
 8000890:	f7ff ff02 	bl	8000698 <IRQ_Config>
}
 8000894:	e012      	b.n	80008bc <TIM_MILLIS_INIT+0x6c>
	} else if (timHandleTypeDef->TIMx == TIM4) {
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a0b      	ldr	r2, [pc, #44]	@ (80008c8 <TIM_MILLIS_INIT+0x78>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d104      	bne.n	80008aa <TIM_MILLIS_INIT+0x5a>
		IRQ_Config(TIM4_IRQ30, HIGH);
 80008a0:	2101      	movs	r1, #1
 80008a2:	201e      	movs	r0, #30
 80008a4:	f7ff fef8 	bl	8000698 <IRQ_Config>
}
 80008a8:	e008      	b.n	80008bc <TIM_MILLIS_INIT+0x6c>
	} else if (timHandleTypeDef->TIMx == TIM5) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a07      	ldr	r2, [pc, #28]	@ (80008cc <TIM_MILLIS_INIT+0x7c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d103      	bne.n	80008bc <TIM_MILLIS_INIT+0x6c>
		IRQ_Config(TIM5_IRQ50, HIGH);
 80008b4:	2101      	movs	r1, #1
 80008b6:	2032      	movs	r0, #50	@ 0x32
 80008b8:	f7ff feee 	bl	8000698 <IRQ_Config>
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40000400 	.word	0x40000400
 80008c8:	40000800 	.word	0x40000800
 80008cc:	40000c00 	.word	0x40000c00

080008d0 <millis>:

uint32_t millis() {
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
	return mil;
 80008d4:	4b03      	ldr	r3, [pc, #12]	@ (80008e4 <millis+0x14>)
 80008d6:	681b      	ldr	r3, [r3, #0]
}
 80008d8:	4618      	mov	r0, r3
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	20000020 	.word	0x20000020

080008e8 <TIM_Handling>:

void TIM_Handling(TIM_HandleTypeDef *timHandleTypeDef) {
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
	if (((timHandleTypeDef->TIMx->SR) >> Shift_0_pos) & 0x1) {
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	691b      	ldr	r3, [r3, #16]
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d00c      	beq.n	8000918 <TIM_Handling+0x30>
		// Clear the update flag that was just set
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	691a      	ldr	r2, [r3, #16]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	f022 0201 	bic.w	r2, r2, #1
 800090c:	611a      	str	r2, [r3, #16]
		mil++;
 800090e:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <TIM_Handling+0x3c>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3301      	adds	r3, #1
 8000914:	4a03      	ldr	r2, [pc, #12]	@ (8000924 <TIM_Handling+0x3c>)
 8000916:	6013      	str	r3, [r2, #0]
	}
}
 8000918:	bf00      	nop
 800091a:	370c      	adds	r7, #12
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr
 8000924:	20000020 	.word	0x20000020

08000928 <main>:
TIM_HandleTypeDef tim_millis_handle;

void GPIO_USER_INIT(void);
void TIMER_USER_INIT(void);

int main(void) {
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
	GPIO_USER_INIT();
 800092e:	f000 f819 	bl	8000964 <GPIO_USER_INIT>
	TIMER_USER_INIT();
 8000932:	f000 f835 	bl	80009a0 <TIMER_USER_INIT>

	uint32_t previousMillis = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
	const uint32_t interval = 1000;  // 1 second in milliseconds
 800093a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800093e:	60bb      	str	r3, [r7, #8]

	while (1) {
		uint32_t currentMillis = millis();
 8000940:	f7ff ffc6 	bl	80008d0 <millis>
 8000944:	6078      	str	r0, [r7, #4]

		// Non-blocking blink using millis()
		if (currentMillis - previousMillis >= interval) {
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	1ad3      	subs	r3, r2, r3
 800094c:	68ba      	ldr	r2, [r7, #8]
 800094e:	429a      	cmp	r2, r3
 8000950:	d8f6      	bhi.n	8000940 <main+0x18>
			previousMillis = currentMillis;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	60fb      	str	r3, [r7, #12]

			// Toggle LED
			GPIO_TOGGLE(GPIOA, GPIO_PIN_8);
 8000956:	2108      	movs	r1, #8
 8000958:	4801      	ldr	r0, [pc, #4]	@ (8000960 <main+0x38>)
 800095a:	f7ff fe87 	bl	800066c <GPIO_TOGGLE>
	while (1) {
 800095e:	e7ef      	b.n	8000940 <main+0x18>
 8000960:	40020000 	.word	0x40020000

08000964 <GPIO_USER_INIT>:

		// Your other code can run here without blocking!
	}
}

void GPIO_USER_INIT(void) {
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	gpio_handle.GPIOX = GPIOA;
 8000968:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <GPIO_USER_INIT+0x34>)
 800096a:	4a0c      	ldr	r2, [pc, #48]	@ (800099c <GPIO_USER_INIT+0x38>)
 800096c:	601a      	str	r2, [r3, #0]
	gpio_handle.pin_number = GPIO_PIN_8;
 800096e:	4b0a      	ldr	r3, [pc, #40]	@ (8000998 <GPIO_USER_INIT+0x34>)
 8000970:	2208      	movs	r2, #8
 8000972:	711a      	strb	r2, [r3, #4]
	gpio_handle.mode = GPIO_MODE_OUTPUT;
 8000974:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <GPIO_USER_INIT+0x34>)
 8000976:	2201      	movs	r2, #1
 8000978:	715a      	strb	r2, [r3, #5]
	gpio_handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 800097a:	4b07      	ldr	r3, [pc, #28]	@ (8000998 <GPIO_USER_INIT+0x34>)
 800097c:	2203      	movs	r2, #3
 800097e:	71da      	strb	r2, [r3, #7]
	gpio_handle.output_type = GPIO_OUTPUT_TYPE_PP;
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <GPIO_USER_INIT+0x34>)
 8000982:	2200      	movs	r2, #0
 8000984:	721a      	strb	r2, [r3, #8]
	gpio_handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <GPIO_USER_INIT+0x34>)
 8000988:	2200      	movs	r2, #0
 800098a:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&gpio_handle);
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <GPIO_USER_INIT+0x34>)
 800098e:	f7ff fc81 	bl	8000294 <GPIO_INIT>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000024 	.word	0x20000024
 800099c:	40020000 	.word	0x40020000

080009a0 <TIMER_USER_INIT>:

void TIMER_USER_INIT(void) {
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
	tim_millis_handle.TIMx = TIM2;
 80009a4:	4b05      	ldr	r3, [pc, #20]	@ (80009bc <TIMER_USER_INIT+0x1c>)
 80009a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009aa:	601a      	str	r2, [r3, #0]
	TIM_MILLIS_INIT(&tim_millis_handle);
 80009ac:	4803      	ldr	r0, [pc, #12]	@ (80009bc <TIMER_USER_INIT+0x1c>)
 80009ae:	f7ff ff4f 	bl	8000850 <TIM_MILLIS_INIT>
	TIM_ENABLE(&tim_millis_handle);
 80009b2:	4802      	ldr	r0, [pc, #8]	@ (80009bc <TIMER_USER_INIT+0x1c>)
 80009b4:	f7ff feac 	bl	8000710 <TIM_ENABLE>
}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000030 	.word	0x20000030

080009c0 <TIM2_IRQHandler>:

// Interrupt handler
void TIM2_IRQHandler(void) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
	TIM_Handling(&tim_millis_handle);
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <TIM2_IRQHandler+0x10>)
 80009c6:	f7ff ff8f 	bl	80008e8 <TIM_Handling>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000030 	.word	0x20000030

080009d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009d4:	480d      	ldr	r0, [pc, #52]	@ (8000a0c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009d8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009dc:	480c      	ldr	r0, [pc, #48]	@ (8000a10 <LoopForever+0x6>)
  ldr r1, =_edata
 80009de:	490d      	ldr	r1, [pc, #52]	@ (8000a14 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <LoopForever+0xe>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0a      	ldr	r2, [pc, #40]	@ (8000a1c <LoopForever+0x12>)
  ldr r4, =_ebss
 80009f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000a20 <LoopForever+0x16>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a02:	f000 f811 	bl	8000a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a06:	f7ff ff8f 	bl	8000928 <main>

08000a0a <LoopForever>:

LoopForever:
  b LoopForever
 8000a0a:	e7fe      	b.n	8000a0a <LoopForever>
  ldr   r0, =_estack
 8000a0c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a14:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a18:	08000ac0 	.word	0x08000ac0
  ldr r2, =_sbss
 8000a1c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a20:	20000048 	.word	0x20000048

08000a24 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a24:	e7fe      	b.n	8000a24 <ADC_IRQHandler>
	...

08000a28 <__libc_init_array>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	4d0d      	ldr	r5, [pc, #52]	@ (8000a60 <__libc_init_array+0x38>)
 8000a2c:	4c0d      	ldr	r4, [pc, #52]	@ (8000a64 <__libc_init_array+0x3c>)
 8000a2e:	1b64      	subs	r4, r4, r5
 8000a30:	10a4      	asrs	r4, r4, #2
 8000a32:	2600      	movs	r6, #0
 8000a34:	42a6      	cmp	r6, r4
 8000a36:	d109      	bne.n	8000a4c <__libc_init_array+0x24>
 8000a38:	4d0b      	ldr	r5, [pc, #44]	@ (8000a68 <__libc_init_array+0x40>)
 8000a3a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a6c <__libc_init_array+0x44>)
 8000a3c:	f000 f818 	bl	8000a70 <_init>
 8000a40:	1b64      	subs	r4, r4, r5
 8000a42:	10a4      	asrs	r4, r4, #2
 8000a44:	2600      	movs	r6, #0
 8000a46:	42a6      	cmp	r6, r4
 8000a48:	d105      	bne.n	8000a56 <__libc_init_array+0x2e>
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a50:	4798      	blx	r3
 8000a52:	3601      	adds	r6, #1
 8000a54:	e7ee      	b.n	8000a34 <__libc_init_array+0xc>
 8000a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5a:	4798      	blx	r3
 8000a5c:	3601      	adds	r6, #1
 8000a5e:	e7f2      	b.n	8000a46 <__libc_init_array+0x1e>
 8000a60:	08000ab8 	.word	0x08000ab8
 8000a64:	08000ab8 	.word	0x08000ab8
 8000a68:	08000ab8 	.word	0x08000ab8
 8000a6c:	08000abc 	.word	0x08000abc

08000a70 <_init>:
 8000a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a72:	bf00      	nop
 8000a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a76:	bc08      	pop	{r3}
 8000a78:	469e      	mov	lr, r3
 8000a7a:	4770      	bx	lr

08000a7c <_fini>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	bf00      	nop
 8000a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a82:	bc08      	pop	{r3}
 8000a84:	469e      	mov	lr, r3
 8000a86:	4770      	bx	lr
