
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004724  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  080048b8  080048b8  000058b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc4  08004cc4  000061cc  2**0
                  CONTENTS
  4 .ARM          00000008  08004cc4  08004cc4  00005cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ccc  08004ccc  000061cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ccc  08004ccc  00005ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cd0  08004cd0  00005cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08004cd4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000061cc  2**0
                  CONTENTS
 10 .bss          000001d4  200001cc  200001cc  000061cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  000061cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000061cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000215e  00000000  00000000  000061fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000082a  00000000  00000000  0000835a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000230  00000000  00000000  00008b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000189  00000000  00000000  00008db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e81  00000000  00000000  00008f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000348a  00000000  00000000  0000cdc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000cbe3  00000000  00000000  0001024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001ce2f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001808  00000000  00000000  0001ce74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  0001e67c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001cc 	.word	0x200001cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800489c 	.word	0x0800489c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d0 	.word	0x200001d0
 80001cc:	0800489c 	.word	0x0800489c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 8000ba8:	b4b0      	push	{r4, r5, r7}
 8000baa:	b08f      	sub	sp, #60	@ 0x3c
 8000bac:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 8000bae:	4b2c      	ldr	r3, [pc, #176]	@ (8000c60 <Get_APB1_Clock_Speed+0xb8>)
 8000bb0:	f107 0410 	add.w	r4, r7, #16
 8000bb4:	461d      	mov	r5, r3
 8000bb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 8000bc2:	4b28      	ldr	r3, [pc, #160]	@ (8000c64 <Get_APB1_Clock_Speed+0xbc>)
 8000bc4:	463c      	mov	r4, r7
 8000bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 8000bcc:	4b26      	ldr	r3, [pc, #152]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	089b      	lsrs	r3, r3, #2
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	f003 0303 	and.w	r3, r3, #3
 8000bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bde:	689b      	ldr	r3, [r3, #8]
 8000be0:	091b      	lsrs	r3, r3, #4
 8000be2:	b2db      	uxtb	r3, r3
 8000be4:	f003 030f 	and.w	r3, r3, #15
 8000be8:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 8000bec:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <Get_APB1_Clock_Speed+0xc0>)
 8000bee:	689b      	ldr	r3, [r3, #8]
 8000bf0:	0a9b      	lsrs	r3, r3, #10
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	f003 0307 	and.w	r3, r3, #7
 8000bf8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 8000c00:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000c04:	2b07      	cmp	r3, #7
 8000c06:	d908      	bls.n	8000c1a <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 8000c08:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8000c0c:	3b08      	subs	r3, #8
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	3338      	adds	r3, #56	@ 0x38
 8000c12:	443b      	add	r3, r7
 8000c14:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8000c18:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 8000c1e:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d908      	bls.n	8000c38 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 8000c26:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000c2a:	3b04      	subs	r3, #4
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	3338      	adds	r3, #56	@ 0x38
 8000c30:	443b      	add	r3, r7
 8000c32:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8000c36:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000c38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d109      	bne.n	8000c54 <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000c40:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000c42:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <Get_APB1_Clock_Speed+0xc4>)
 8000c44:	fb92 f2f3 	sdiv	r2, r2, r3
 8000c48:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000c4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4b07      	ldr	r3, [pc, #28]	@ (8000c70 <Get_APB1_Clock_Speed+0xc8>)
 8000c52:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 8000c54:	bf00      	nop
 8000c56:	373c      	adds	r7, #60	@ 0x3c
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bcb0      	pop	{r4, r5, r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	080048b8 	.word	0x080048b8
 8000c64:	080048d8 	.word	0x080048d8
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	00f42400 	.word	0x00f42400
 8000c70:	200001e8 	.word	0x200001e8

08000c74 <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a90      	ldr	r2, [pc, #576]	@ (8000ec4 <GPIO_INIT+0x250>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d106      	bne.n	8000c94 <GPIO_INIT+0x20>
		GPIOA_EN();
 8000c86:	4b90      	ldr	r3, [pc, #576]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a8f      	ldr	r2, [pc, #572]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	e05e      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a8c      	ldr	r2, [pc, #560]	@ (8000ecc <GPIO_INIT+0x258>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d106      	bne.n	8000cac <GPIO_INIT+0x38>
		GPIOB_EN();
 8000c9e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca2:	4a89      	ldr	r2, [pc, #548]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000caa:	e052      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a87      	ldr	r2, [pc, #540]	@ (8000ed0 <GPIO_INIT+0x25c>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d106      	bne.n	8000cc4 <GPIO_INIT+0x50>
		GPIOC_EN();
 8000cb6:	4b84      	ldr	r3, [pc, #528]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a83      	ldr	r2, [pc, #524]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	e046      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a82      	ldr	r2, [pc, #520]	@ (8000ed4 <GPIO_INIT+0x260>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d106      	bne.n	8000cdc <GPIO_INIT+0x68>
		GPIOD_EN();
 8000cce:	4b7e      	ldr	r3, [pc, #504]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a7d      	ldr	r2, [pc, #500]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	e03a      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a7d      	ldr	r2, [pc, #500]	@ (8000ed8 <GPIO_INIT+0x264>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d106      	bne.n	8000cf4 <GPIO_INIT+0x80>
		GPIOE_EN();
 8000ce6:	4b78      	ldr	r3, [pc, #480]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a77      	ldr	r2, [pc, #476]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	e02e      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a78      	ldr	r2, [pc, #480]	@ (8000edc <GPIO_INIT+0x268>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d106      	bne.n	8000d0c <GPIO_INIT+0x98>
		GPIOF_EN();
 8000cfe:	4b72      	ldr	r3, [pc, #456]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a71      	ldr	r2, [pc, #452]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d04:	f043 0320 	orr.w	r3, r3, #32
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	e022      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a73      	ldr	r2, [pc, #460]	@ (8000ee0 <GPIO_INIT+0x26c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d106      	bne.n	8000d24 <GPIO_INIT+0xb0>
		GPIOG_EN();
 8000d16:	4b6c      	ldr	r3, [pc, #432]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	4a6b      	ldr	r2, [pc, #428]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d22:	e016      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a6e      	ldr	r2, [pc, #440]	@ (8000ee4 <GPIO_INIT+0x270>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d106      	bne.n	8000d3c <GPIO_INIT+0xc8>
		GPIOH_EN();
 8000d2e:	4b66      	ldr	r3, [pc, #408]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a65      	ldr	r2, [pc, #404]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	e00a      	b.n	8000d52 <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a69      	ldr	r2, [pc, #420]	@ (8000ee8 <GPIO_INIT+0x274>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d105      	bne.n	8000d52 <GPIO_INIT+0xde>
		GPIOI_EN();
 8000d46:	4b60      	ldr	r3, [pc, #384]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a5f      	ldr	r2, [pc, #380]	@ (8000ec8 <GPIO_INIT+0x254>)
 8000d4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	791b      	ldrb	r3, [r3, #4]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	2103      	movs	r1, #3
 8000d60:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 8000d64:	43db      	mvns	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	400a      	ands	r2, r1
 8000d6e:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	791b      	ldrb	r3, [r3, #4]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	2103      	movs	r1, #3
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000d82:	43db      	mvns	r3, r3
 8000d84:	4619      	mov	r1, r3
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	400a      	ands	r2, r1
 8000d8c:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	799b      	ldrb	r3, [r3, #6]
 8000d98:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	791b      	ldrb	r3, [r3, #4]
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	fa01 f303 	lsl.w	r3, r1, r3
 8000da4:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	795b      	ldrb	r3, [r3, #5]
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	f200 809a 	bhi.w	8000eec <GPIO_INIT+0x278>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	795b      	ldrb	r3, [r3, #5]
 8000dc2:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	791b      	ldrb	r3, [r3, #4]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	791b      	ldrb	r3, [r3, #4]
 8000de2:	4619      	mov	r1, r3
 8000de4:	2303      	movs	r3, #3
 8000de6:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 8000de8:	43db      	mvns	r3, r3
 8000dea:	4619      	mov	r1, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	400a      	ands	r2, r1
 8000df2:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7a1b      	ldrb	r3, [r3, #8]
 8000dfe:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	791b      	ldrb	r3, [r3, #4]
 8000e04:	fa01 f303 	lsl.w	r3, r1, r3
 8000e08:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	791b      	ldrb	r3, [r3, #4]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2103      	movs	r1, #3
 8000e20:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 8000e24:	43db      	mvns	r3, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	400a      	ands	r2, r1
 8000e2e:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	689a      	ldr	r2, [r3, #8]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	79db      	ldrb	r3, [r3, #7]
 8000e3a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	fa01 f303 	lsl.w	r3, r1, r3
 8000e46:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	430a      	orrs	r2, r1
 8000e4e:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	795b      	ldrb	r3, [r3, #5]
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	f040 80ec 	bne.w	8001032 <GPIO_INIT+0x3be>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	791b      	ldrb	r3, [r3, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	7b7a      	ldrb	r2, [r7, #13]
 8000e72:	3208      	adds	r2, #8
 8000e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< Shift_4_pos * gpioHandle->pin_number);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	791b      	ldrb	r3, [r3, #4]
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000e84:	43db      	mvns	r3, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	7b7a      	ldrb	r2, [r7, #13]
 8000e8e:	4001      	ands	r1, r0
 8000e90:	3208      	adds	r2, #8
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	7b7a      	ldrb	r2, [r7, #13]
 8000e9c:	3208      	adds	r2, #8
 8000e9e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	7a5b      	ldrb	r3, [r3, #9]
 8000ea6:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 8000ea8:	7b3b      	ldrb	r3, [r7, #12]
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	7b7a      	ldrb	r2, [r7, #13]
 8000eb8:	4301      	orrs	r1, r0
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 8000ec0:	e0b7      	b.n	8001032 <GPIO_INIT+0x3be>
 8000ec2:	bf00      	nop
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40021400 	.word	0x40021400
 8000ee0:	40021800 	.word	0x40021800
 8000ee4:	40021c00 	.word	0x40021c00
 8000ee8:	40022000 	.word	0x40022000
		SYSCFG_EN();
 8000eec:	4b54      	ldr	r3, [pc, #336]	@ (8001040 <GPIO_INIT+0x3cc>)
 8000eee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ef0:	4a53      	ldr	r2, [pc, #332]	@ (8001040 <GPIO_INIT+0x3cc>)
 8000ef2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ef6:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	795b      	ldrb	r3, [r3, #5]
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	d12e      	bne.n	8000f5e <GPIO_INIT+0x2ea>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f00:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	7912      	ldrb	r2, [r2, #4]
 8000f08:	4611      	mov	r1, r2
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	408a      	lsls	r2, r1
 8000f0e:	43d2      	mvns	r2, r2
 8000f10:	4611      	mov	r1, r2
 8000f12:	4a4c      	ldr	r2, [pc, #304]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f14:	400b      	ands	r3, r1
 8000f16:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f18:	4b4a      	ldr	r3, [pc, #296]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	7912      	ldrb	r2, [r2, #4]
 8000f20:	4611      	mov	r1, r2
 8000f22:	2201      	movs	r2, #1
 8000f24:	408a      	lsls	r2, r1
 8000f26:	43d2      	mvns	r2, r2
 8000f28:	4611      	mov	r1, r2
 8000f2a:	4a46      	ldr	r2, [pc, #280]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f2c:	400b      	ands	r3, r1
 8000f2e:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000f30:	4b44      	ldr	r3, [pc, #272]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	7912      	ldrb	r2, [r2, #4]
 8000f38:	4611      	mov	r1, r2
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	408a      	lsls	r2, r1
 8000f3e:	4611      	mov	r1, r2
 8000f40:	4a40      	ldr	r2, [pc, #256]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f42:	430b      	orrs	r3, r1
 8000f44:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000f46:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f48:	68db      	ldr	r3, [r3, #12]
 8000f4a:	687a      	ldr	r2, [r7, #4]
 8000f4c:	7912      	ldrb	r2, [r2, #4]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	2201      	movs	r2, #1
 8000f52:	408a      	lsls	r2, r1
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a3b      	ldr	r2, [pc, #236]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f58:	430b      	orrs	r3, r1
 8000f5a:	60d3      	str	r3, [r2, #12]
 8000f5c:	e036      	b.n	8000fcc <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	795b      	ldrb	r3, [r3, #5]
 8000f62:	2b05      	cmp	r3, #5
 8000f64:	d117      	bne.n	8000f96 <GPIO_INIT+0x322>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f66:	4b37      	ldr	r3, [pc, #220]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	7912      	ldrb	r2, [r2, #4]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	2201      	movs	r2, #1
 8000f72:	408a      	lsls	r2, r1
 8000f74:	43d2      	mvns	r2, r2
 8000f76:	4611      	mov	r1, r2
 8000f78:	4a32      	ldr	r2, [pc, #200]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f7a:	400b      	ands	r3, r1
 8000f7c:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	7912      	ldrb	r2, [r2, #4]
 8000f86:	4611      	mov	r1, r2
 8000f88:	2201      	movs	r2, #1
 8000f8a:	408a      	lsls	r2, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000f90:	430b      	orrs	r3, r1
 8000f92:	60d3      	str	r3, [r2, #12]
 8000f94:	e01a      	b.n	8000fcc <GPIO_INIT+0x358>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	795b      	ldrb	r3, [r3, #5]
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	d116      	bne.n	8000fcc <GPIO_INIT+0x358>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000f9e:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fa0:	689b      	ldr	r3, [r3, #8]
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	7912      	ldrb	r2, [r2, #4]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	2201      	movs	r2, #1
 8000faa:	408a      	lsls	r2, r1
 8000fac:	43d2      	mvns	r2, r2
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4a24      	ldr	r2, [pc, #144]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fb2:	400b      	ands	r3, r1
 8000fb4:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	7912      	ldrb	r2, [r2, #4]
 8000fbe:	4611      	mov	r1, r2
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	408a      	lsls	r2, r1
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <GPIO_INIT+0x3d0>)
 8000fc8:	430b      	orrs	r3, r1
 8000fca:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	791b      	ldrb	r3, [r3, #4]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	791b      	ldrb	r3, [r3, #4]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 8000fde:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <GPIO_INIT+0x3d4>)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3302      	adds	r3, #2
 8000fe4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7a9b      	ldrb	r3, [r3, #10]
 8000fec:	4619      	mov	r1, r3
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	4913      	ldr	r1, [pc, #76]	@ (8001048 <GPIO_INIT+0x3d4>)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	4302      	orrs	r2, r0
 8000ffe:	3302      	adds	r3, #2
 8001000:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 8001004:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <GPIO_INIT+0x3d0>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	7912      	ldrb	r2, [r2, #4]
 800100c:	4611      	mov	r1, r2
 800100e:	2201      	movs	r2, #1
 8001010:	408a      	lsls	r2, r1
 8001012:	43d2      	mvns	r2, r2
 8001014:	4611      	mov	r1, r2
 8001016:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <GPIO_INIT+0x3d0>)
 8001018:	400b      	ands	r3, r1
 800101a:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 800101c:	4b09      	ldr	r3, [pc, #36]	@ (8001044 <GPIO_INIT+0x3d0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	7912      	ldrb	r2, [r2, #4]
 8001024:	4611      	mov	r1, r2
 8001026:	2201      	movs	r2, #1
 8001028:	408a      	lsls	r2, r1
 800102a:	4611      	mov	r1, r2
 800102c:	4a05      	ldr	r2, [pc, #20]	@ (8001044 <GPIO_INIT+0x3d0>)
 800102e:	430b      	orrs	r3, r1
 8001030:	6013      	str	r3, [r2, #0]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40013c00 	.word	0x40013c00
 8001048:	40013800 	.word	0x40013800

0800104c <GPIO_OUTPUT>:

void GPIO_TOGGLE(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
	gpiox->ODR ^= (HIGH << gpio_pins);
}

void GPIO_OUTPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins, uint8_t val) {
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	460b      	mov	r3, r1
 8001056:	70fb      	strb	r3, [r7, #3]
 8001058:	4613      	mov	r3, r2
 800105a:	70bb      	strb	r3, [r7, #2]
	if (val == HIGH) {
 800105c:	78bb      	ldrb	r3, [r7, #2]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d109      	bne.n	8001076 <GPIO_OUTPUT+0x2a>
		gpiox->BSRR |= (HIGH << gpio_pins);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	78fa      	ldrb	r2, [r7, #3]
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	431a      	orrs	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}
 8001074:	e009      	b.n	800108a <GPIO_OUTPUT+0x3e>
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	78fa      	ldrb	r2, [r7, #3]
 800107c:	3210      	adds	r2, #16
 800107e:	2101      	movs	r1, #1
 8001080:	fa01 f202 	lsl.w	r2, r1, r2
 8001084:	431a      	orrs	r2, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	619a      	str	r2, [r3, #24]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <IRQ_Config>:

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	460a      	mov	r2, r1
 80010a2:	71fb      	strb	r3, [r7, #7]
 80010a4:	4613      	mov	r3, r2
 80010a6:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	095b      	lsrs	r3, r3, #5
 80010ac:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
 80010b0:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 80010b2:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 80010b6:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 80010ba:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 80010c0:	4b12      	ldr	r3, [pc, #72]	@ (800110c <IRQ_Config+0x74>)
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 80010c6:	79bb      	ldrb	r3, [r7, #6]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d10b      	bne.n	80010e4 <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	79fa      	ldrb	r2, [r7, #7]
 80010d2:	f002 021f 	and.w	r2, r2, #31
 80010d6:	2101      	movs	r1, #1
 80010d8:	fa01 f202 	lsl.w	r2, r1, r2
 80010dc:	431a      	orrs	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 80010e2:	e00d      	b.n	8001100 <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d10a      	bne.n	8001100 <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	79fa      	ldrb	r2, [r7, #7]
 80010f0:	f002 021f 	and.w	r2, r2, #31
 80010f4:	2101      	movs	r1, #1
 80010f6:	fa01 f202 	lsl.w	r2, r1, r2
 80010fa:	431a      	orrs	r2, r3
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	601a      	str	r2, [r3, #0]
}
 8001100:	bf00      	nop
 8001102:	371c      	adds	r7, #28
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e180 	.word	0xe000e180

08001110 <IRQ_SetPriority>:
void IRQ_SetPriority(uint8_t IRQn, uint8_t priority) {
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_4_pos;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	089b      	lsrs	r3, r3, #2
 8001124:	73fb      	strb	r3, [r7, #15]
	uint8_t cal_bit = IRQn % Shift_4_pos;
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	73bb      	strb	r3, [r7, #14]
	volatile uint32_t *cal_address_IPR = IPR_BASE_ADDR + cal_reg;
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 8001136:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
 800113a:	60bb      	str	r3, [r7, #8]

	// Priority just use upper part of 4 bits
	// (Upper part) 0000 | 0000 (Lower part)

	*cal_address_IPR &= ~(priority
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	681b      	ldr	r3, [r3, #0]
			<< (cal_bit * Shift_8_pos + Shift_Upper_Part_4_bits));
 8001140:	79b9      	ldrb	r1, [r7, #6]
 8001142:	7bba      	ldrb	r2, [r7, #14]
 8001144:	00d2      	lsls	r2, r2, #3
 8001146:	3204      	adds	r2, #4
 8001148:	fa01 f202 	lsl.w	r2, r1, r2
	*cal_address_IPR &= ~(priority
 800114c:	43d2      	mvns	r2, r2
 800114e:	401a      	ands	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	601a      	str	r2, [r3, #0]
	*cal_address_IPR |= (priority
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	681b      	ldr	r3, [r3, #0]
			<< (cal_bit * Shift_8_pos + Shift_Upper_Part_4_bits));
 8001158:	79b9      	ldrb	r1, [r7, #6]
 800115a:	7bba      	ldrb	r2, [r7, #14]
 800115c:	00d2      	lsls	r2, r2, #3
 800115e:	3204      	adds	r2, #4
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
	*cal_address_IPR |= (priority
 8001164:	431a      	orrs	r2, r3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	601a      	str	r2, [r3, #0]

}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <TIM_INIT>:
#include <stm32f4xx_cus_timer.h>

volatile uint32_t mil = 0;

void TIM_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	if (timHandleTypeDef->TIMx == TIM2) {
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001188:	d106      	bne.n	8001198 <TIM_INIT+0x20>
		TIM2_EN();
 800118a:	4b82      	ldr	r3, [pc, #520]	@ (8001394 <TIM_INIT+0x21c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800118e:	4a81      	ldr	r2, [pc, #516]	@ (8001394 <TIM_INIT+0x21c>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6413      	str	r3, [r2, #64]	@ 0x40
 8001196:	e022      	b.n	80011de <TIM_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM3) {
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a7e      	ldr	r2, [pc, #504]	@ (8001398 <TIM_INIT+0x220>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d106      	bne.n	80011b0 <TIM_INIT+0x38>
		TIM3_EN();
 80011a2:	4b7c      	ldr	r3, [pc, #496]	@ (8001394 <TIM_INIT+0x21c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	4a7b      	ldr	r2, [pc, #492]	@ (8001394 <TIM_INIT+0x21c>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ae:	e016      	b.n	80011de <TIM_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM4) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a79      	ldr	r2, [pc, #484]	@ (800139c <TIM_INIT+0x224>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d106      	bne.n	80011c8 <TIM_INIT+0x50>
		TIM4_EN();
 80011ba:	4b76      	ldr	r3, [pc, #472]	@ (8001394 <TIM_INIT+0x21c>)
 80011bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011be:	4a75      	ldr	r2, [pc, #468]	@ (8001394 <TIM_INIT+0x21c>)
 80011c0:	f043 0304 	orr.w	r3, r3, #4
 80011c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011c6:	e00a      	b.n	80011de <TIM_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM5) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a74      	ldr	r2, [pc, #464]	@ (80013a0 <TIM_INIT+0x228>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d105      	bne.n	80011de <TIM_INIT+0x66>
		TIM5_EN();
 80011d2:	4b70      	ldr	r3, [pc, #448]	@ (8001394 <TIM_INIT+0x21c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001394 <TIM_INIT+0x21c>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	// Ensure Counter is disable
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_0_pos);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f022 0201 	bic.w	r2, r2, #1
 80011ec:	601a      	str	r2, [r3, #0]

	// Clock prescaler
	timHandleTypeDef->TIMx->PSC = timHandleTypeDef->prescaler;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	6892      	ldr	r2, [r2, #8]
 80011f6:	629a      	str	r2, [r3, #40]	@ 0x28

	// Select Auto-reload value
	timHandleTypeDef->TIMx->ARR = timHandleTypeDef->autoReload;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	6912      	ldr	r2, [r2, #16]
 8001200:	62da      	str	r2, [r3, #44]	@ 0x2c
	 You write ARR = 500 while CNT = 750
	 CNT: 750 → 999 → 1000 (overflow with old ARR)
	 0 → 499 → 500 (now using new ARR) ✓*/

	// autoReloadPreload
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_7_pos);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001210:	601a      	str	r2, [r3, #0]
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->autoReloadPreload
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	7d1b      	ldrb	r3, [r3, #20]
			<< Shift_7_pos);
 800121c:	01da      	lsls	r2, r3, #7
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->autoReloadPreload
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

	// Select direction counter
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_4_pos);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f022 0210 	bic.w	r2, r2, #16
 8001234:	601a      	str	r2, [r3, #0]
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->directionCounter
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6819      	ldr	r1, [r3, #0]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	68db      	ldr	r3, [r3, #12]
			<< Shift_4_pos);
 8001240:	011a      	lsls	r2, r3, #4
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->directionCounter
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	430a      	orrs	r2, r1
 8001248:	601a      	str	r2, [r3, #0]

	// Update disable
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_1_pos);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 0202 	bic.w	r2, r2, #2
 8001258:	601a      	str	r2, [r3, #0]
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->updateDisable
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6819      	ldr	r1, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7d9b      	ldrb	r3, [r3, #22]
			<< Shift_1_pos);
 8001264:	005a      	lsls	r2, r3, #1
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->updateDisable
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	601a      	str	r2, [r3, #0]

	// Update request source (Select source)
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_2_pos);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0204 	bic.w	r2, r2, #4
 800127c:	601a      	str	r2, [r3, #0]
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->updateRequestSource
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6819      	ldr	r1, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	7d5b      	ldrb	r3, [r3, #21]
			<< Shift_2_pos);
 8001288:	009a      	lsls	r2, r3, #2
	timHandleTypeDef->TIMx->CR1 |= (timHandleTypeDef->updateRequestSource
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]

	// Configure Input Capture if mode is selected
	if (timHandleTypeDef->timerMode == TIM_INPUT_CAPTURE_MODE) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	791b      	ldrb	r3, [r3, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f040 81e8 	bne.w	800166c <TIM_INIT+0x4f4>
		uint8_t channel = timHandleTypeDef->TIM_IC_HandleTypeDef.channel;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7ddb      	ldrb	r3, [r3, #23]
 80012a0:	73fb      	strb	r3, [r7, #15]
		uint8_t selection = timHandleTypeDef->TIM_IC_HandleTypeDef.selection;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e5b      	ldrb	r3, [r3, #25]
 80012a6:	73bb      	strb	r3, [r7, #14]
		uint8_t prescaler = timHandleTypeDef->TIM_IC_HandleTypeDef.prescaler;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e9b      	ldrb	r3, [r3, #26]
 80012ac:	737b      	strb	r3, [r7, #13]
		uint8_t filter = timHandleTypeDef->TIM_IC_HandleTypeDef.filter;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7edb      	ldrb	r3, [r3, #27]
 80012b2:	733b      	strb	r3, [r7, #12]
		uint8_t polarity = timHandleTypeDef->TIM_IC_HandleTypeDef.polarity;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	7e1b      	ldrb	r3, [r3, #24]
 80012b8:	72fb      	strb	r3, [r7, #11]
		uint8_t enableInt =
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	7f1b      	ldrb	r3, [r3, #28]
 80012be:	72bb      	strb	r3, [r7, #10]
				timHandleTypeDef->TIM_IC_HandleTypeDef.enableInterrupt;

		if (channel == TIM_CHANNEL_1) {
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d16e      	bne.n	80013a4 <TIM_INIT+0x22c>
			// CC1S[1:0]: Capture/Compare 1 selection (bits 1:0)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699a      	ldr	r2, [r3, #24]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0203 	bic.w	r2, r2, #3
 80012d4:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (selection << Shift_0_pos);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	6999      	ldr	r1, [r3, #24]
 80012dc:	7bba      	ldrb	r2, [r7, #14]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	619a      	str	r2, [r3, #24]

			// IC1PSC[1:0]: Input capture 1 prescaler (bits 3:2)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_2_pos);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	699a      	ldr	r2, [r3, #24]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 020c 	bic.w	r2, r2, #12
 80012f4:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (prescaler << Shift_2_pos);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6999      	ldr	r1, [r3, #24]
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
 80012fe:	009a      	lsls	r2, r3, #2
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	619a      	str	r2, [r3, #24]

			// IC1F[3:0]: Input capture 1 filter (bits 7:4)
			timHandleTypeDef->TIMx->CCMR1 &= ~(0xF << Shift_4_pos);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001316:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (filter << Shift_4_pos);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	6999      	ldr	r1, [r3, #24]
 800131e:	7b3b      	ldrb	r3, [r7, #12]
 8001320:	011a      	lsls	r2, r3, #4
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	619a      	str	r2, [r3, #24]

			// Configure polarity: Clear CC1P (bit 1) and CC1NP (bit 3)
			timHandleTypeDef->TIMx->CCER &= ~((HIGH << Shift_1_pos)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	6a1a      	ldr	r2, [r3, #32]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 020a 	bic.w	r2, r2, #10
 8001338:	621a      	str	r2, [r3, #32]
					| (HIGH << Shift_3_pos));
			if (polarity == TIM_IC_FALLING_EDGE) {
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	2b01      	cmp	r3, #1
 800133e:	d108      	bne.n	8001352 <TIM_INIT+0x1da>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_1_pos); // CC1P = 1
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	6a1a      	ldr	r2, [r3, #32]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f042 0202 	orr.w	r2, r2, #2
 800134e:	621a      	str	r2, [r3, #32]
 8001350:	e00a      	b.n	8001368 <TIM_INIT+0x1f0>
			} else if (polarity == TIM_IC_BOTH_EDGES) {
 8001352:	7afb      	ldrb	r3, [r7, #11]
 8001354:	2b03      	cmp	r3, #3
 8001356:	d107      	bne.n	8001368 <TIM_INIT+0x1f0>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_1_pos)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6a1a      	ldr	r2, [r3, #32]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f042 020a 	orr.w	r2, r2, #10
 8001366:	621a      	str	r2, [r3, #32]
						| (HIGH << Shift_3_pos);
			}
			// Rising edge: both bits = 0 (default)

			// CC1E: Enable capture on channel 1 (bit 0)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_0_pos);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6a1a      	ldr	r2, [r3, #32]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 8001378:	7abb      	ldrb	r3, [r7, #10]
 800137a:	2b00      	cmp	r3, #0
 800137c:	f000 814c 	beq.w	8001618 <TIM_INIT+0x4a0>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_1_pos);  // CC1IE
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	68da      	ldr	r2, [r3, #12]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f042 0202 	orr.w	r2, r2, #2
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e142      	b.n	8001618 <TIM_INIT+0x4a0>
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40000400 	.word	0x40000400
 800139c:	40000800 	.word	0x40000800
 80013a0:	40000c00 	.word	0x40000c00
			}

		} else if (channel == TIM_CHANNEL_2) {
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d166      	bne.n	8001478 <TIM_INIT+0x300>
			// CC2S[1:0]: Capture/Compare 2 selection (bits 9:8)
			timHandleTypeDef->TIMx->CCMR1 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699a      	ldr	r2, [r3, #24]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80013b8:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (selection << Shift_8_pos);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6999      	ldr	r1, [r3, #24]
 80013c0:	7bbb      	ldrb	r3, [r7, #14]
 80013c2:	021a      	lsls	r2, r3, #8
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	430a      	orrs	r2, r1
 80013ca:	619a      	str	r2, [r3, #24]

			// IC2PSC[1:0]: Input capture 2 prescaler (bits 11:10)
			timHandleTypeDef->TIMx->CCMR1 &=
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699a      	ldr	r2, [r3, #24]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80013da:	619a      	str	r2, [r3, #24]
					~(GPIO_BIT_11_Mask << Shift_10_pos);
			timHandleTypeDef->TIMx->CCMR1 |= (prescaler << Shift_10_pos);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6999      	ldr	r1, [r3, #24]
 80013e2:	7b7b      	ldrb	r3, [r7, #13]
 80013e4:	029a      	lsls	r2, r3, #10
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	430a      	orrs	r2, r1
 80013ec:	619a      	str	r2, [r3, #24]

			// IC2F[3:0]: Input capture 2 filter (bits 15:12)
			timHandleTypeDef->TIMx->CCMR1 &= ~(0xF << Shift_12_pos);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	699a      	ldr	r2, [r3, #24]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80013fc:	619a      	str	r2, [r3, #24]
			timHandleTypeDef->TIMx->CCMR1 |= (filter << Shift_12_pos);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	6999      	ldr	r1, [r3, #24]
 8001404:	7b3b      	ldrb	r3, [r7, #12]
 8001406:	031a      	lsls	r2, r3, #12
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	619a      	str	r2, [r3, #24]

			// Configure polarity: Clear CC2P (bit 5) and CC2NP (bit 7)
			timHandleTypeDef->TIMx->CCER &= ~((HIGH << Shift_5_pos)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800141e:	621a      	str	r2, [r3, #32]
					| (HIGH << Shift_7_pos));
			if (polarity == TIM_IC_FALLING_EDGE) {
 8001420:	7afb      	ldrb	r3, [r7, #11]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d108      	bne.n	8001438 <TIM_INIT+0x2c0>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_5_pos); // CC2P = 1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1a      	ldr	r2, [r3, #32]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f042 0220 	orr.w	r2, r2, #32
 8001434:	621a      	str	r2, [r3, #32]
 8001436:	e00a      	b.n	800144e <TIM_INIT+0x2d6>
			} else if (polarity == TIM_IC_BOTH_EDGES) {
 8001438:	7afb      	ldrb	r3, [r7, #11]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d107      	bne.n	800144e <TIM_INIT+0x2d6>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_5_pos)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f042 02a0 	orr.w	r2, r2, #160	@ 0xa0
 800144c:	621a      	str	r2, [r3, #32]
						| (HIGH << Shift_7_pos);
			}

			// CC2E: Enable capture on channel 2 (bit 4)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_4_pos);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	6a1a      	ldr	r2, [r3, #32]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f042 0210 	orr.w	r2, r2, #16
 800145c:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 800145e:	7abb      	ldrb	r3, [r7, #10]
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 80d9 	beq.w	8001618 <TIM_INIT+0x4a0>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_2_pos);  // CC2IE
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f042 0204 	orr.w	r2, r2, #4
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	e0cf      	b.n	8001618 <TIM_INIT+0x4a0>
			}

		} else if (channel == TIM_CHANNEL_3) {
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b02      	cmp	r3, #2
 800147c:	d164      	bne.n	8001548 <TIM_INIT+0x3d0>
			// CC3S[1:0]: Capture/Compare 3 selection (bits 1:0 of CCMR2)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_0_pos);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	69da      	ldr	r2, [r3, #28]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f022 0203 	bic.w	r2, r2, #3
 800148c:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (selection << Shift_0_pos);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	69d9      	ldr	r1, [r3, #28]
 8001494:	7bba      	ldrb	r2, [r7, #14]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	430a      	orrs	r2, r1
 800149c:	61da      	str	r2, [r3, #28]

			// IC3PSC[1:0]: Input capture 3 prescaler (bits 3:2)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_2_pos);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	69da      	ldr	r2, [r3, #28]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 020c 	bic.w	r2, r2, #12
 80014ac:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (prescaler << Shift_2_pos);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	69d9      	ldr	r1, [r3, #28]
 80014b4:	7b7b      	ldrb	r3, [r7, #13]
 80014b6:	009a      	lsls	r2, r3, #2
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	61da      	str	r2, [r3, #28]

			// IC3F[3:0]: Input capture 3 filter (bits 7:4)
			timHandleTypeDef->TIMx->CCMR2 &= ~(0xF << Shift_4_pos);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	69da      	ldr	r2, [r3, #28]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80014ce:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (filter << Shift_4_pos);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	69d9      	ldr	r1, [r3, #28]
 80014d6:	7b3b      	ldrb	r3, [r7, #12]
 80014d8:	011a      	lsls	r2, r3, #4
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	61da      	str	r2, [r3, #28]

			// Configure polarity: Clear CC3P (bit 9) and CC3NP (bit 11)
			timHandleTypeDef->TIMx->CCER &= ~((HIGH << Shift_9_pos)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6a1a      	ldr	r2, [r3, #32]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 80014f0:	621a      	str	r2, [r3, #32]
					| (HIGH << Shift_11_pos));
			if (polarity == TIM_IC_FALLING_EDGE) {
 80014f2:	7afb      	ldrb	r3, [r7, #11]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d108      	bne.n	800150a <TIM_INIT+0x392>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_9_pos); // CC3P = 1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6a1a      	ldr	r2, [r3, #32]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001506:	621a      	str	r2, [r3, #32]
 8001508:	e00a      	b.n	8001520 <TIM_INIT+0x3a8>
			} else if (polarity == TIM_IC_BOTH_EDGES) {
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	2b03      	cmp	r3, #3
 800150e:	d107      	bne.n	8001520 <TIM_INIT+0x3a8>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_9_pos)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6a1a      	ldr	r2, [r3, #32]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f442 6220 	orr.w	r2, r2, #2560	@ 0xa00
 800151e:	621a      	str	r2, [r3, #32]
						| (HIGH << Shift_11_pos);
			}

			// CC3E: Enable capture on channel 3 (bit 8)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_8_pos);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6a1a      	ldr	r2, [r3, #32]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800152e:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 8001530:	7abb      	ldrb	r3, [r7, #10]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d070      	beq.n	8001618 <TIM_INIT+0x4a0>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_3_pos);  // CC3IE
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	68da      	ldr	r2, [r3, #12]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f042 0208 	orr.w	r2, r2, #8
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	e067      	b.n	8001618 <TIM_INIT+0x4a0>
			}

		} else if (channel == TIM_CHANNEL_4) {
 8001548:	7bfb      	ldrb	r3, [r7, #15]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d164      	bne.n	8001618 <TIM_INIT+0x4a0>
			// CC4S[1:0]: Capture/Compare 4 selection (bits 9:8 of CCMR2)
			timHandleTypeDef->TIMx->CCMR2 &= ~(GPIO_BIT_11_Mask << Shift_8_pos);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	69da      	ldr	r2, [r3, #28]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800155c:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (selection << Shift_8_pos);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	69d9      	ldr	r1, [r3, #28]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	021a      	lsls	r2, r3, #8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	430a      	orrs	r2, r1
 800156e:	61da      	str	r2, [r3, #28]

			// IC4PSC[1:0]: Input capture 4 prescaler (bits 11:10)
			timHandleTypeDef->TIMx->CCMR2 &=
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69da      	ldr	r2, [r3, #28]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800157e:	61da      	str	r2, [r3, #28]
					~(GPIO_BIT_11_Mask << Shift_10_pos);
			timHandleTypeDef->TIMx->CCMR2 |= (prescaler << Shift_10_pos);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	69d9      	ldr	r1, [r3, #28]
 8001586:	7b7b      	ldrb	r3, [r7, #13]
 8001588:	029a      	lsls	r2, r3, #10
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	61da      	str	r2, [r3, #28]

			// IC4F[3:0]: Input capture 4 filter (bits 15:12)
			timHandleTypeDef->TIMx->CCMR2 &= ~(0xF << Shift_12_pos);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	69da      	ldr	r2, [r3, #28]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 80015a0:	61da      	str	r2, [r3, #28]
			timHandleTypeDef->TIMx->CCMR2 |= (filter << Shift_12_pos);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	69d9      	ldr	r1, [r3, #28]
 80015a8:	7b3b      	ldrb	r3, [r7, #12]
 80015aa:	031a      	lsls	r2, r3, #12
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	430a      	orrs	r2, r1
 80015b2:	61da      	str	r2, [r3, #28]

			// Configure polarity: Clear CC4P (bit 13) and CC4NP (bit 15)
			timHandleTypeDef->TIMx->CCER &= ~((HIGH << Shift_13_pos)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	6a1a      	ldr	r2, [r3, #32]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f422 4220 	bic.w	r2, r2, #40960	@ 0xa000
 80015c2:	621a      	str	r2, [r3, #32]
					| (HIGH << Shift_15_pos));
			if (polarity == TIM_IC_FALLING_EDGE) {
 80015c4:	7afb      	ldrb	r3, [r7, #11]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d108      	bne.n	80015dc <TIM_INIT+0x464>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_13_pos); // CC4P = 1
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6a1a      	ldr	r2, [r3, #32]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80015d8:	621a      	str	r2, [r3, #32]
 80015da:	e00a      	b.n	80015f2 <TIM_INIT+0x47a>
			} else if (polarity == TIM_IC_BOTH_EDGES) {
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d107      	bne.n	80015f2 <TIM_INIT+0x47a>
				timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_13_pos)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6a1a      	ldr	r2, [r3, #32]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f442 4220 	orr.w	r2, r2, #40960	@ 0xa000
 80015f0:	621a      	str	r2, [r3, #32]
						| (HIGH << Shift_15_pos);
			}

			// CC4E: Enable capture on channel 4 (bit 12)
			timHandleTypeDef->TIMx->CCER |= (HIGH << Shift_12_pos);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6a1a      	ldr	r2, [r3, #32]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001600:	621a      	str	r2, [r3, #32]

			// Enable interrupt if requested
			if (enableInt) {
 8001602:	7abb      	ldrb	r3, [r7, #10]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d007      	beq.n	8001618 <TIM_INIT+0x4a0>
				timHandleTypeDef->TIMx->DIER |= (HIGH << Shift_4_pos);  // CC4IE
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0210 	orr.w	r2, r2, #16
 8001616:	60da      	str	r2, [r3, #12]
			}
		}

		// Enable NVIC interrupt for the timer if any channel interrupt is enabled
		if (enableInt) {
 8001618:	7abb      	ldrb	r3, [r7, #10]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d026      	beq.n	800166c <TIM_INIT+0x4f4>
			if (timHandleTypeDef->TIMx == TIM2) {
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001626:	d104      	bne.n	8001632 <TIM_INIT+0x4ba>
				IRQ_Config(TIM2_IRQ28, HIGH);
 8001628:	2101      	movs	r1, #1
 800162a:	201c      	movs	r0, #28
 800162c:	f7ff fd34 	bl	8001098 <IRQ_Config>
 8001630:	e01c      	b.n	800166c <TIM_INIT+0x4f4>
			} else if (timHandleTypeDef->TIMx == TIM3) {
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a19      	ldr	r2, [pc, #100]	@ (800169c <TIM_INIT+0x524>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d104      	bne.n	8001646 <TIM_INIT+0x4ce>
				IRQ_Config(TIM3_IRQ29, HIGH);
 800163c:	2101      	movs	r1, #1
 800163e:	201d      	movs	r0, #29
 8001640:	f7ff fd2a 	bl	8001098 <IRQ_Config>
 8001644:	e012      	b.n	800166c <TIM_INIT+0x4f4>
			} else if (timHandleTypeDef->TIMx == TIM4) {
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a15      	ldr	r2, [pc, #84]	@ (80016a0 <TIM_INIT+0x528>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d104      	bne.n	800165a <TIM_INIT+0x4e2>
				IRQ_Config(TIM4_IRQ30, HIGH);
 8001650:	2101      	movs	r1, #1
 8001652:	201e      	movs	r0, #30
 8001654:	f7ff fd20 	bl	8001098 <IRQ_Config>
 8001658:	e008      	b.n	800166c <TIM_INIT+0x4f4>
			} else if (timHandleTypeDef->TIMx == TIM5) {
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <TIM_INIT+0x52c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d103      	bne.n	800166c <TIM_INIT+0x4f4>
				IRQ_Config(TIM5_IRQ50, HIGH);
 8001664:	2101      	movs	r1, #1
 8001666:	2032      	movs	r0, #50	@ 0x32
 8001668:	f7ff fd16 	bl	8001098 <IRQ_Config>
			}
		}
	}

	// Timer enable
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_0_pos);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f042 0201 	orr.w	r2, r2, #1
 800167a:	601a      	str	r2, [r3, #0]

	/*	UG: Update generation
	 This bit can be set by software, it is automatically cleared by hardware.
	 0: No action
	 1: Re-initialize the counter and generates an update of the registers.*/
	timHandleTypeDef->TIMx->EGR |= (HIGH << Shift_0_pos);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	695a      	ldr	r2, [r3, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f042 0201 	orr.w	r2, r2, #1
 800168a:	615a      	str	r2, [r3, #20]

	// Clear the update flag that was just set
	timHandleTypeDef->TIMx->SR = 0;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2200      	movs	r2, #0
 8001692:	611a      	str	r2, [r3, #16]
}
 8001694:	bf00      	nop
 8001696:	3710      	adds	r7, #16
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40000400 	.word	0x40000400
 80016a0:	40000800 	.word	0x40000800
 80016a4:	40000c00 	.word	0x40000c00

080016a8 <TIM_IC_ReadCapture>:

uint32_t TIM_IC_ReadCapture(TIM_HandleTypeDef *timHandleTypeDef,
		uint8_t channel) {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	70fb      	strb	r3, [r7, #3]
	switch (channel) {
 80016b4:	78fb      	ldrb	r3, [r7, #3]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d81a      	bhi.n	80016f0 <TIM_IC_ReadCapture+0x48>
 80016ba:	a201      	add	r2, pc, #4	@ (adr r2, 80016c0 <TIM_IC_ReadCapture+0x18>)
 80016bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c0:	080016d1 	.word	0x080016d1
 80016c4:	080016d9 	.word	0x080016d9
 80016c8:	080016e1 	.word	0x080016e1
 80016cc:	080016e9 	.word	0x080016e9
	case TIM_CHANNEL_1:
		return timHandleTypeDef->TIMx->CCR1;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016d6:	e00c      	b.n	80016f2 <TIM_IC_ReadCapture+0x4a>
	case TIM_CHANNEL_2:
		return timHandleTypeDef->TIMx->CCR2;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016de:	e008      	b.n	80016f2 <TIM_IC_ReadCapture+0x4a>
	case TIM_CHANNEL_3:
		return timHandleTypeDef->TIMx->CCR3;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016e6:	e004      	b.n	80016f2 <TIM_IC_ReadCapture+0x4a>
	case TIM_CHANNEL_4:
		return timHandleTypeDef->TIMx->CCR4;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	e000      	b.n	80016f2 <TIM_IC_ReadCapture+0x4a>
	default:
		return 0;
 80016f0:	2300      	movs	r3, #0
	}
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop

08001700 <TIM_IC_ClearFlag>:

void TIM_IC_ClearFlag(TIM_HandleTypeDef *timHandleTypeDef, uint8_t channel) {
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	70fb      	strb	r3, [r7, #3]
	// Clear CCxIF flag (bit 1, 2, 3, or 4 in SR)
	if (channel == TIM_CHANNEL_1) {
 800170c:	78fb      	ldrb	r3, [r7, #3]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d108      	bne.n	8001724 <TIM_IC_ClearFlag+0x24>
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_1_pos);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	691a      	ldr	r2, [r3, #16]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0202 	bic.w	r2, r2, #2
 8001720:	611a      	str	r2, [r3, #16]
	} else if (channel == TIM_CHANNEL_3) {
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_3_pos);
	} else if (channel == TIM_CHANNEL_4) {
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_4_pos);
	}
}
 8001722:	e022      	b.n	800176a <TIM_IC_ClearFlag+0x6a>
	} else if (channel == TIM_CHANNEL_2) {
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d108      	bne.n	800173c <TIM_IC_ClearFlag+0x3c>
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_2_pos);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691a      	ldr	r2, [r3, #16]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0204 	bic.w	r2, r2, #4
 8001738:	611a      	str	r2, [r3, #16]
}
 800173a:	e016      	b.n	800176a <TIM_IC_ClearFlag+0x6a>
	} else if (channel == TIM_CHANNEL_3) {
 800173c:	78fb      	ldrb	r3, [r7, #3]
 800173e:	2b02      	cmp	r3, #2
 8001740:	d108      	bne.n	8001754 <TIM_IC_ClearFlag+0x54>
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_3_pos);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	691a      	ldr	r2, [r3, #16]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0208 	bic.w	r2, r2, #8
 8001750:	611a      	str	r2, [r3, #16]
}
 8001752:	e00a      	b.n	800176a <TIM_IC_ClearFlag+0x6a>
	} else if (channel == TIM_CHANNEL_4) {
 8001754:	78fb      	ldrb	r3, [r7, #3]
 8001756:	2b03      	cmp	r3, #3
 8001758:	d107      	bne.n	800176a <TIM_IC_ClearFlag+0x6a>
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_4_pos);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691a      	ldr	r2, [r3, #16]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0210 	bic.w	r2, r2, #16
 8001768:	611a      	str	r2, [r3, #16]
}
 800176a:	bf00      	nop
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <TIM_IC_GetFlag>:

uint8_t TIM_IC_GetFlag(TIM_HandleTypeDef *timHandleTypeDef, uint8_t channel) {
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
 800177e:	460b      	mov	r3, r1
 8001780:	70fb      	strb	r3, [r7, #3]
	// Check CCxIF flag (bit 1, 2, 3, or 4 in SR)
	if (channel == TIM_CHANNEL_1) {
 8001782:	78fb      	ldrb	r3, [r7, #3]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d108      	bne.n	800179a <TIM_IC_GetFlag+0x24>
		return (timHandleTypeDef->TIMx->SR >> Shift_1_pos) & GPIO_BIT_1_Mask;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	b2db      	uxtb	r3, r3
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	b2db      	uxtb	r3, r3
 8001798:	e024      	b.n	80017e4 <TIM_IC_GetFlag+0x6e>
	} else if (channel == TIM_CHANNEL_2) {
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	2b01      	cmp	r3, #1
 800179e:	d108      	bne.n	80017b2 <TIM_IC_GetFlag+0x3c>
		return (timHandleTypeDef->TIMx->SR >> Shift_2_pos) & GPIO_BIT_1_Mask;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	691b      	ldr	r3, [r3, #16]
 80017a6:	089b      	lsrs	r3, r3, #2
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	e018      	b.n	80017e4 <TIM_IC_GetFlag+0x6e>
	} else if (channel == TIM_CHANNEL_3) {
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d108      	bne.n	80017ca <TIM_IC_GetFlag+0x54>
		return (timHandleTypeDef->TIMx->SR >> Shift_3_pos) & GPIO_BIT_1_Mask;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	e00c      	b.n	80017e4 <TIM_IC_GetFlag+0x6e>
	} else if (channel == TIM_CHANNEL_4) {
 80017ca:	78fb      	ldrb	r3, [r7, #3]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d108      	bne.n	80017e2 <TIM_IC_GetFlag+0x6c>
		return (timHandleTypeDef->TIMx->SR >> Shift_4_pos) & GPIO_BIT_1_Mask;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	e000      	b.n	80017e4 <TIM_IC_GetFlag+0x6e>
	}
	return 0;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <TIM_ENABLE>:

void TIM_ENABLE(TIM_HandleTypeDef *timHandleTypeDef) {
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
	// Timer enable
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_0_pos);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f042 0201 	orr.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

	/*	UG: Update generation
	 This bit can be set by software, it is automatically cleared by hardware.
	 0: No action
	 1: Re-initialize the counter and generates an update of the registers.*/
	timHandleTypeDef->TIMx->EGR |= (HIGH << Shift_0_pos);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f042 0201 	orr.w	r2, r2, #1
 8001816:	615a      	str	r2, [r3, #20]

	while (!((timHandleTypeDef->TIMx->SR >> Shift_0_pos) & 0x1))
 8001818:	bf00      	nop
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b00      	cmp	r3, #0
 8001826:	d0f8      	beq.n	800181a <TIM_ENABLE+0x2a>
		;

	// Clear the update flag that was just set
	timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0201 	bic.w	r2, r2, #1
 8001836:	611a      	str	r2, [r3, #16]
}
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <TIM_DELAY_INIT>:

void TIM_DELAY_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	if (timHandleTypeDef->TIMx == TIM2) {
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001854:	d106      	bne.n	8001864 <TIM_DELAY_INIT+0x20>
		TIM2_EN();
 8001856:	4b3c      	ldr	r3, [pc, #240]	@ (8001948 <TIM_DELAY_INIT+0x104>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	4a3b      	ldr	r2, [pc, #236]	@ (8001948 <TIM_DELAY_INIT+0x104>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6413      	str	r3, [r2, #64]	@ 0x40
 8001862:	e022      	b.n	80018aa <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM3) {
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a38      	ldr	r2, [pc, #224]	@ (800194c <TIM_DELAY_INIT+0x108>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d106      	bne.n	800187c <TIM_DELAY_INIT+0x38>
		TIM3_EN();
 800186e:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <TIM_DELAY_INIT+0x104>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a35      	ldr	r2, [pc, #212]	@ (8001948 <TIM_DELAY_INIT+0x104>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	e016      	b.n	80018aa <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM4) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a33      	ldr	r2, [pc, #204]	@ (8001950 <TIM_DELAY_INIT+0x10c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d106      	bne.n	8001894 <TIM_DELAY_INIT+0x50>
		TIM4_EN();
 8001886:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <TIM_DELAY_INIT+0x104>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	4a2f      	ldr	r2, [pc, #188]	@ (8001948 <TIM_DELAY_INIT+0x104>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6413      	str	r3, [r2, #64]	@ 0x40
 8001892:	e00a      	b.n	80018aa <TIM_DELAY_INIT+0x66>
	} else if (timHandleTypeDef->TIMx == TIM5) {
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a2e      	ldr	r2, [pc, #184]	@ (8001954 <TIM_DELAY_INIT+0x110>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d105      	bne.n	80018aa <TIM_DELAY_INIT+0x66>
		TIM5_EN();
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <TIM_DELAY_INIT+0x104>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <TIM_DELAY_INIT+0x104>)
 80018a4:	f043 0308 	orr.w	r3, r3, #8
 80018a8:	6413      	str	r3, [r2, #64]	@ 0x40
	}

	Get_APB1_Clock_Speed();
 80018aa:	f7ff f97d 	bl	8000ba8 <Get_APB1_Clock_Speed>

	uint32_t psc = SystemClockSrc / ONE_MEGA_HERT;
 80018ae:	4b2a      	ldr	r3, [pc, #168]	@ (8001958 <TIM_DELAY_INIT+0x114>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a2a      	ldr	r2, [pc, #168]	@ (800195c <TIM_DELAY_INIT+0x118>)
 80018b4:	fba2 2303 	umull	r2, r3, r2, r3
 80018b8:	0c9b      	lsrs	r3, r3, #18
 80018ba:	60fb      	str	r3, [r7, #12]

	// Ensure Counter is disable
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_0_pos);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f022 0201 	bic.w	r2, r2, #1
 80018ca:	601a      	str	r2, [r3, #0]

	// Clock prescaler
	timHandleTypeDef->TIMx->PSC = (psc - 1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	3a01      	subs	r2, #1
 80018d4:	629a      	str	r2, [r3, #40]	@ 0x28

	if (timHandleTypeDef->TIMx == TIM2 || timHandleTypeDef->TIMx == TIM5) {
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018de:	d004      	beq.n	80018ea <TIM_DELAY_INIT+0xa6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <TIM_DELAY_INIT+0x110>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d105      	bne.n	80018f6 <TIM_DELAY_INIT+0xb2>
		timHandleTypeDef->TIMx->ARR = 0xFFFFFFFF;  // 32-bit max
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f04f 32ff 	mov.w	r2, #4294967295
 80018f2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018f4:	e004      	b.n	8001900 <TIM_DELAY_INIT+0xbc>
	} else {
		timHandleTypeDef->TIMx->ARR = 0xFFFF;      // 16-bit max
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// autoReloadPreload
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_7_pos);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800190e:	601a      	str	r2, [r3, #0]

	// Count up
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_4_pos);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 0210 	bic.w	r2, r2, #16
 800191e:	601a      	str	r2, [r3, #0]

	// Enable update
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_1_pos);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0202 	bic.w	r2, r2, #2
 800192e:	601a      	str	r2, [r3, #0]

	// Update request source (Select source)
	timHandleTypeDef->TIMx->CR1 &= ~(HIGH << Shift_2_pos);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0204 	bic.w	r2, r2, #4
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	bf00      	nop
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	40000400 	.word	0x40000400
 8001950:	40000800 	.word	0x40000800
 8001954:	40000c00 	.word	0x40000c00
 8001958:	200001e8 	.word	0x200001e8
 800195c:	431bde83 	.word	0x431bde83

08001960 <TIM_MICROS_INIT>:
	} else if (timHandleTypeDef->TIMx == TIM5) {
		IRQ_Config(TIM5_IRQ50, HIGH);
	}
}

void TIM_MICROS_INIT(TIM_HandleTypeDef *timHandleTypeDef) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	// Basic setup (1 MHz clock tick = 1 µs)
	TIM_DELAY_INIT(timHandleTypeDef);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff6b 	bl	8001844 <TIM_DELAY_INIT>

	// Use full 32-bit range for wide counting
	if (timHandleTypeDef->TIMx == TIM2 || timHandleTypeDef->TIMx == TIM5) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001976:	d004      	beq.n	8001982 <TIM_MICROS_INIT+0x22>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a10      	ldr	r2, [pc, #64]	@ (80019c0 <TIM_MICROS_INIT+0x60>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d105      	bne.n	800198e <TIM_MICROS_INIT+0x2e>
		timHandleTypeDef->TIMx->ARR = 0xFFFFFFFF;  // 32-bit timer
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f04f 32ff 	mov.w	r2, #4294967295
 800198a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800198c:	e004      	b.n	8001998 <TIM_MICROS_INIT+0x38>
	} else {
		timHandleTypeDef->TIMx->ARR = 0xFFFF;      // 16-bit timer
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001996:	62da      	str	r2, [r3, #44]	@ 0x2c
	}

	// Disable interrupt (we just want to read CNT)
	timHandleTypeDef->TIMx->DIER &= ~(HIGH << Shift_0_pos);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f022 0201 	bic.w	r2, r2, #1
 80019a6:	60da      	str	r2, [r3, #12]

	// Enable the timer
	timHandleTypeDef->TIMx->CR1 |= (HIGH << Shift_0_pos);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f042 0201 	orr.w	r2, r2, #1
 80019b6:	601a      	str	r2, [r3, #0]
}
 80019b8:	bf00      	nop
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40000c00 	.word	0x40000c00

080019c4 <micros>:

uint32_t millis() {
	return mil;
}

uint32_t micros() {
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
	return TIM2->CNT; // Current clock is 1MHZ, so each tich (count) will take 1us --> meet the condition
 80019c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80019cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <TIM_Handling>:

void TIM_Handling(TIM_HandleTypeDef *timHandleTypeDef) {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
	if (((timHandleTypeDef->TIMx->SR) >> Shift_0_pos) & 0x1) {
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691b      	ldr	r3, [r3, #16]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00c      	beq.n	8001a08 <TIM_Handling+0x30>
		// Clear the update flag that was just set
		timHandleTypeDef->TIMx->SR &= ~(HIGH << Shift_0_pos);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	611a      	str	r2, [r3, #16]
		mil++;
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <TIM_Handling+0x3c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a03      	ldr	r2, [pc, #12]	@ (8001a14 <TIM_Handling+0x3c>)
 8001a06:	6013      	str	r3, [r2, #0]
	}
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr
 8001a14:	200001ec 	.word	0x200001ec

08001a18 <ITM_SendChar>:

/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch) {
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= (1 << 24);
 8001a22:	4b0f      	ldr	r3, [pc, #60]	@ (8001a60 <ITM_SendChar+0x48>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0e      	ldr	r2, [pc, #56]	@ (8001a60 <ITM_SendChar+0x48>)
 8001a28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= (1 << 0);
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <ITM_SendChar+0x4c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a0c      	ldr	r2, [pc, #48]	@ (8001a64 <ITM_SendChar+0x4c>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while (!(ITM_STIMULUS_PORT0 & 1))
 8001a3a:	bf00      	nop
 8001a3c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f8      	beq.n	8001a3c <ITM_SendChar+0x24>
		;

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001a4a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	6013      	str	r3, [r2, #0]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000edfc 	.word	0xe000edfc
 8001a64:	e0000e00 	.word	0xe0000e00

08001a68 <_getpid>:

/* Functions */
void initialise_monitor_handles() {
}

int _getpid(void) {
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	return 1;
 8001a6c:	2301      	movs	r3, #1
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <_kill>:

int _kill(int pid, int sig) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	(void) pid;
	(void) sig;
	errno = EINVAL;
 8001a82:	f001 f8cb 	bl	8002c1c <__errno>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2216      	movs	r2, #22
 8001a8a:	601a      	str	r2, [r3, #0]
	return -1;
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <_exit>:

void _exit(int status) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff ffe7 	bl	8001a78 <_kill>
	while (1) {
 8001aaa:	bf00      	nop
 8001aac:	e7fd      	b.n	8001aaa <_exit+0x12>

08001aae <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e00a      	b.n	8001ad6 <_read+0x28>
		*ptr++ = __io_getchar();
 8001ac0:	f3af 8000 	nop.w
 8001ac4:	4601      	mov	r1, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	60ba      	str	r2, [r7, #8]
 8001acc:	b2ca      	uxtb	r2, r1
 8001ace:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697a      	ldr	r2, [r7, #20]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	dbf0      	blt.n	8001ac0 <_read+0x12>
	}

	return len;
 8001ade:	687b      	ldr	r3, [r7, #4]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e009      	b.n	8001b0e <_write+0x26>
//		__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	1c5a      	adds	r2, r3, #1
 8001afe:	60ba      	str	r2, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f7ff ff88 	bl	8001a18 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	dbf1      	blt.n	8001afa <_write+0x12>
	}
	return len;
 8001b16:	687b      	ldr	r3, [r7, #4]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <_close>:

int _close(int file) {
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 8001b28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_fstat>:

int _fstat(int file, struct stat *st) {
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b48:	605a      	str	r2, [r3, #4]
	return 0;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <_isatty>:

int _isatty(int file) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b90:	4a14      	ldr	r2, [pc, #80]	@ (8001be4 <_sbrk+0x5c>)
 8001b92:	4b15      	ldr	r3, [pc, #84]	@ (8001be8 <_sbrk+0x60>)
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <_sbrk+0x64>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d102      	bne.n	8001baa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <_sbrk+0x64>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <_sbrk+0x68>)
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <_sbrk+0x64>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d207      	bcs.n	8001bc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb8:	f001 f830 	bl	8002c1c <__errno>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	220c      	movs	r2, #12
 8001bc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	e009      	b.n	8001bdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc8:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <_sbrk+0x64>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bce:	4b07      	ldr	r3, [pc, #28]	@ (8001bec <_sbrk+0x64>)
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a05      	ldr	r2, [pc, #20]	@ (8001bec <_sbrk+0x64>)
 8001bd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bda:	68fb      	ldr	r3, [r7, #12]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3718      	adds	r7, #24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	20020000 	.word	0x20020000
 8001be8:	00000400 	.word	0x00000400
 8001bec:	200001f0 	.word	0x200001f0
 8001bf0:	200003a0 	.word	0x200003a0

08001bf4 <main>:
volatile uint8_t firstCapture = 1;
volatile uint32_t difference;
void GPIO_USER_INIT(void);
void TIMER_IC_USER_INIT(void);
volatile float frequency = 0;
int main(void) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
	// Enable FPU
	SCB->CPACR |= ((3UL << 20) | (3UL << 22));
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <main+0x70>)
 8001bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c00:	4a18      	ldr	r2, [pc, #96]	@ (8001c64 <main+0x70>)
 8001c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c06:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
	__asm volatile ("DSB");
 8001c0a:	f3bf 8f4f 	dsb	sy
	__asm volatile ("ISB");
 8001c0e:	f3bf 8f6f 	isb	sy

	GPIO_USER_INIT();
 8001c12:	f000 f82d 	bl	8001c70 <GPIO_USER_INIT>
	TIMER_IC_USER_INIT();
 8001c16:	f000 f85d 	bl	8001cd4 <TIMER_IC_USER_INIT>

	// Set interrupt priority
	IRQ_SetPriority(TIM2_IRQ28, 2);
 8001c1a:	2102      	movs	r1, #2
 8001c1c:	201c      	movs	r0, #28
 8001c1e:	f7ff fa77 	bl	8001110 <IRQ_SetPriority>

	printf("Starting frequency measurement with interrupt mode...\r\n");
 8001c22:	4811      	ldr	r0, [pc, #68]	@ (8001c68 <main+0x74>)
 8001c24:	f000 fec8 	bl	80029b8 <puts>

	// ✅ Non-blocking timing variables
	uint32_t lastToggleTime = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60fb      	str	r3, [r7, #12]
	uint8_t pinState = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	72fb      	strb	r3, [r7, #11]

	while (1) {
		// ✅ Generate test signal using millis() - NON-BLOCKING!
		uint32_t currentTime = micros();
 8001c30:	f7ff fec8 	bl	80019c4 <micros>
 8001c34:	6078      	str	r0, [r7, #4]
		if (currentTime - lastToggleTime >= 500) {
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001c40:	d3f6      	bcc.n	8001c30 <main+0x3c>
			lastToggleTime = currentTime;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	60fb      	str	r3, [r7, #12]
			pinState = !pinState;
 8001c46:	7afb      	ldrb	r3, [r7, #11]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	72fb      	strb	r3, [r7, #11]
			GPIO_OUTPUT(GPIOA, GPIO_PIN_8, pinState);
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	461a      	mov	r2, r3
 8001c58:	2108      	movs	r1, #8
 8001c5a:	4804      	ldr	r0, [pc, #16]	@ (8001c6c <main+0x78>)
 8001c5c:	f7ff f9f6 	bl	800104c <GPIO_OUTPUT>
	while (1) {
 8001c60:	e7e6      	b.n	8001c30 <main+0x3c>
 8001c62:	bf00      	nop
 8001c64:	e000ed00 	.word	0xe000ed00
 8001c68:	080048e8 	.word	0x080048e8
 8001c6c:	40020000 	.word	0x40020000

08001c70 <GPIO_USER_INIT>:
		}
	}
}

void GPIO_USER_INIT(void) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	// PA8 - OUTPUT (generates test signal)
	gpio_handle.GPIOX = GPIOA;
 8001c74:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001c76:	4a16      	ldr	r2, [pc, #88]	@ (8001cd0 <GPIO_USER_INIT+0x60>)
 8001c78:	601a      	str	r2, [r3, #0]
	gpio_handle.pin_number = GPIO_PIN_8;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	711a      	strb	r2, [r3, #4]
	gpio_handle.mode = GPIO_MODE_OUTPUT;
 8001c80:	4b12      	ldr	r3, [pc, #72]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	715a      	strb	r2, [r3, #5]
	gpio_handle.output_speed = GPIO_OUTPUT_SPEED_HIGH;
 8001c86:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001c88:	2202      	movs	r2, #2
 8001c8a:	71da      	strb	r2, [r3, #7]
	gpio_handle.output_type = GPIO_OUTPUT_TYPE_PP;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	721a      	strb	r2, [r3, #8]
	gpio_handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&gpio_handle);
 8001c98:	480c      	ldr	r0, [pc, #48]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001c9a:	f7fe ffeb 	bl	8000c74 <GPIO_INIT>

	// PA0 - INPUT CAPTURE (TIM2_CH1)
	gpio_handle.GPIOX = GPIOA;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001ca0:	4a0b      	ldr	r2, [pc, #44]	@ (8001cd0 <GPIO_USER_INIT+0x60>)
 8001ca2:	601a      	str	r2, [r3, #0]
	gpio_handle.pin_number = GPIO_PIN_0;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	711a      	strb	r2, [r3, #4]
	gpio_handle.mode = GPIO_MODE_AF;
 8001caa:	4b08      	ldr	r3, [pc, #32]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001cac:	2202      	movs	r2, #2
 8001cae:	715a      	strb	r2, [r3, #5]
	gpio_handle.alternate_function_select = GPIO_AF1;  // TIM2
 8001cb0:	4b06      	ldr	r3, [pc, #24]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	725a      	strb	r2, [r3, #9]
	gpio_handle.output_speed = GPIO_OUTPUT_SPEED_HIGH;
 8001cb6:	4b05      	ldr	r3, [pc, #20]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001cb8:	2202      	movs	r2, #2
 8001cba:	71da      	strb	r2, [r3, #7]
	gpio_handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&gpio_handle);
 8001cc2:	4802      	ldr	r0, [pc, #8]	@ (8001ccc <GPIO_USER_INIT+0x5c>)
 8001cc4:	f7fe ffd6 	bl	8000c74 <GPIO_INIT>
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200001f4 	.word	0x200001f4
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <TIMER_IC_USER_INIT>:

void TIMER_IC_USER_INIT(void) {
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
	// ✅ TIM3 for millis() function - MUST INITIALIZE FIRST!
	tim_millis_handle.TIMx = TIM3;
 8001cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d54 <TIMER_IC_USER_INIT+0x80>)
 8001cda:	4a1f      	ldr	r2, [pc, #124]	@ (8001d58 <TIMER_IC_USER_INIT+0x84>)
 8001cdc:	601a      	str	r2, [r3, #0]
	TIM_MICROS_INIT(&tim_millis_handle); // This enables interrupts for micros()
 8001cde:	481d      	ldr	r0, [pc, #116]	@ (8001d54 <TIMER_IC_USER_INIT+0x80>)
 8001ce0:	f7ff fe3e 	bl	8001960 <TIM_MICROS_INIT>
	TIM_ENABLE(&tim_millis_handle);
 8001ce4:	481b      	ldr	r0, [pc, #108]	@ (8001d54 <TIMER_IC_USER_INIT+0x80>)
 8001ce6:	f7ff fd83 	bl	80017f0 <TIM_ENABLE>

	// TIM2 for input capture
	tim_ic_handle.TIMx = TIM2;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001cec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cf0:	601a      	str	r2, [r3, #0]
	tim_ic_handle.timerMode = TIM_INPUT_CAPTURE_MODE;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	711a      	strb	r2, [r3, #4]
	tim_ic_handle.prescaler = 15;  // 16MHz / 16 = 1MHz (1μs per tick)
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001cfa:	220f      	movs	r2, #15
 8001cfc:	609a      	str	r2, [r3, #8]
	tim_ic_handle.autoReload = 0xFFFFFFFF;  // Max for 32-bit TIM2
 8001cfe:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d00:	f04f 32ff 	mov.w	r2, #4294967295
 8001d04:	611a      	str	r2, [r3, #16]
	tim_ic_handle.directionCounter = TIM_COUNT_UP;
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	60da      	str	r2, [r3, #12]
	tim_ic_handle.autoReloadPreload = LOW;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	751a      	strb	r2, [r3, #20]
	tim_ic_handle.updateDisable = LOW;
 8001d12:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	759a      	strb	r2, [r3, #22]
	tim_ic_handle.updateRequestSource = LOW;
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	755a      	strb	r2, [r3, #21]

	// Input capture configuration
	tim_ic_handle.TIM_IC_HandleTypeDef.channel = TIM_CHANNEL_1;
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	75da      	strb	r2, [r3, #23]
	tim_ic_handle.TIM_IC_HandleTypeDef.polarity = TIM_IC_RISING_EDGE;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	761a      	strb	r2, [r3, #24]
	tim_ic_handle.TIM_IC_HandleTypeDef.selection = TIM_IC_SELECTION_TI1;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	765a      	strb	r2, [r3, #25]
	tim_ic_handle.TIM_IC_HandleTypeDef.prescaler = TIM_ICPSC_DIV1;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	769a      	strb	r2, [r3, #26]
	tim_ic_handle.TIM_IC_HandleTypeDef.filter = TIM_IC_FILTER_NONE;
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	76da      	strb	r2, [r3, #27]
	tim_ic_handle.TIM_IC_HandleTypeDef.enableInterrupt = ENABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	771a      	strb	r2, [r3, #28]

	TIM_INIT(&tim_ic_handle);
 8001d42:	4806      	ldr	r0, [pc, #24]	@ (8001d5c <TIMER_IC_USER_INIT+0x88>)
 8001d44:	f7ff fa18 	bl	8001178 <TIM_INIT>

	printf("Timers initialized.\r\n");
 8001d48:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <TIMER_IC_USER_INIT+0x8c>)
 8001d4a:	f000 fe35 	bl	80029b8 <puts>
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20000220 	.word	0x20000220
 8001d58:	40000400 	.word	0x40000400
 8001d5c:	20000200 	.word	0x20000200
 8001d60:	08004920 	.word	0x08004920

08001d64 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	if (TIM_IC_GetFlag(&tim_ic_handle, TIM_CHANNEL_1)) {
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4831      	ldr	r0, [pc, #196]	@ (8001e30 <TIM2_IRQHandler+0xcc>)
 8001d6c:	f7ff fd03 	bl	8001776 <TIM_IC_GetFlag>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d05a      	beq.n	8001e2c <TIM2_IRQHandler+0xc8>
		if (firstCapture) {
 8001d76:	4b2f      	ldr	r3, [pc, #188]	@ (8001e34 <TIM2_IRQHandler+0xd0>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00a      	beq.n	8001d96 <TIM2_IRQHandler+0x32>
			// First capture - just save the value
			captureValue1 = TIM_IC_ReadCapture(&tim_ic_handle, TIM_CHANNEL_1);
 8001d80:	2100      	movs	r1, #0
 8001d82:	482b      	ldr	r0, [pc, #172]	@ (8001e30 <TIM2_IRQHandler+0xcc>)
 8001d84:	f7ff fc90 	bl	80016a8 <TIM_IC_ReadCapture>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	4a2b      	ldr	r2, [pc, #172]	@ (8001e38 <TIM2_IRQHandler+0xd4>)
 8001d8c:	6013      	str	r3, [r2, #0]
			firstCapture = 0;
 8001d8e:	4b29      	ldr	r3, [pc, #164]	@ (8001e34 <TIM2_IRQHandler+0xd0>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e046      	b.n	8001e24 <TIM2_IRQHandler+0xc0>
		} else {
			// Second capture - calculate frequency
			captureValue2 = TIM_IC_ReadCapture(&tim_ic_handle, TIM_CHANNEL_1);
 8001d96:	2100      	movs	r1, #0
 8001d98:	4825      	ldr	r0, [pc, #148]	@ (8001e30 <TIM2_IRQHandler+0xcc>)
 8001d9a:	f7ff fc85 	bl	80016a8 <TIM_IC_ReadCapture>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a26      	ldr	r2, [pc, #152]	@ (8001e3c <TIM2_IRQHandler+0xd8>)
 8001da2:	6013      	str	r3, [r2, #0]

			// Calculate difference (handle overflow for 32-bit TIM2)
			if (captureValue2 >= captureValue1) {
 8001da4:	4b25      	ldr	r3, [pc, #148]	@ (8001e3c <TIM2_IRQHandler+0xd8>)
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <TIM2_IRQHandler+0xd4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d307      	bcc.n	8001dc0 <TIM2_IRQHandler+0x5c>
				difference = captureValue2 - captureValue1;
 8001db0:	4b22      	ldr	r3, [pc, #136]	@ (8001e3c <TIM2_IRQHandler+0xd8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b20      	ldr	r3, [pc, #128]	@ (8001e38 <TIM2_IRQHandler+0xd4>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	4a21      	ldr	r2, [pc, #132]	@ (8001e40 <TIM2_IRQHandler+0xdc>)
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e006      	b.n	8001dce <TIM2_IRQHandler+0x6a>
			} else {
				// Overflow occurred
				difference = (0xFFFFFFFF - captureValue1) + captureValue2 + 1;
 8001dc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e3c <TIM2_IRQHandler+0xd8>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e38 <TIM2_IRQHandler+0xd4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	4a1d      	ldr	r2, [pc, #116]	@ (8001e40 <TIM2_IRQHandler+0xdc>)
 8001dcc:	6013      	str	r3, [r2, #0]
			}

			// Calculate frequency
			// Timer is running at 1MHz (1μs per tick)
			// Frequency = 1,000,000 / difference
			if (difference > 0) {
 8001dce:	4b1c      	ldr	r3, [pc, #112]	@ (8001e40 <TIM2_IRQHandler+0xdc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00c      	beq.n	8001df0 <TIM2_IRQHandler+0x8c>
				frequency = 1000000.0f / difference;  // Hz
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e40 <TIM2_IRQHandler+0xdc>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	ee07 3a90 	vmov	s15, r3
 8001dde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001de2:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8001e44 <TIM2_IRQHandler+0xe0>
 8001de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dea:	4b17      	ldr	r3, [pc, #92]	@ (8001e48 <TIM2_IRQHandler+0xe4>)
 8001dec:	edc3 7a00 	vstr	s15, [r3]
			}

			// Reset for next measurement
			captureValue1 = captureValue2;
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <TIM2_IRQHandler+0xd8>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a10      	ldr	r2, [pc, #64]	@ (8001e38 <TIM2_IRQHandler+0xd4>)
 8001df6:	6013      	str	r3, [r2, #0]

			static uint32_t printCounter = 0;
			if (++printCounter >= 100) {
 8001df8:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <TIM2_IRQHandler+0xe8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	4a13      	ldr	r2, [pc, #76]	@ (8001e4c <TIM2_IRQHandler+0xe8>)
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <TIM2_IRQHandler+0xe8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b63      	cmp	r3, #99	@ 0x63
 8001e08:	d90c      	bls.n	8001e24 <TIM2_IRQHandler+0xc0>
				printCounter = 0;
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <TIM2_IRQHandler+0xe8>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
				printf("Frequency: %.2f Hz\r\n", frequency);
 8001e10:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <TIM2_IRQHandler+0xe4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fb97 	bl	8000548 <__aeabi_f2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <TIM2_IRQHandler+0xec>)
 8001e20:	f000 fd62 	bl	80028e8 <iprintf>
			}

		}

		// Clear the capture flag
		TIM_IC_ClearFlag(&tim_ic_handle, TIM_CHANNEL_1);
 8001e24:	2100      	movs	r1, #0
 8001e26:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <TIM2_IRQHandler+0xcc>)
 8001e28:	f7ff fc6a 	bl	8001700 <TIM_IC_ClearFlag>
	}
}
 8001e2c:	bf00      	nop
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20000200 	.word	0x20000200
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000240 	.word	0x20000240
 8001e3c:	20000244 	.word	0x20000244
 8001e40:	20000248 	.word	0x20000248
 8001e44:	49742400 	.word	0x49742400
 8001e48:	2000024c 	.word	0x2000024c
 8001e4c:	20000250 	.word	0x20000250
 8001e50:	08004938 	.word	0x08004938

08001e54 <TIM3_IRQHandler>:

// ✅ TIM3 interrupt handler for millis()
void TIM3_IRQHandler(void) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	TIM_Handling(&tim_millis_handle);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <TIM3_IRQHandler+0x10>)
 8001e5a:	f7ff fdbd 	bl	80019d8 <TIM_Handling>
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000220 	.word	0x20000220

08001e68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001e68:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001e6a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001e6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	@ (8001ea8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <LoopForever+0xe>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb4 <LoopForever+0x16>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001e96:	f000 fec7 	bl	8002c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e9a:	f7ff feab 	bl	8001bf4 <main>

08001e9e <LoopForever>:

LoopForever:
  b LoopForever
 8001e9e:	e7fe      	b.n	8001e9e <LoopForever>
  ldr   r0, =_estack
 8001ea0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001eac:	08004cd4 	.word	0x08004cd4
  ldr r2, =_sbss
 8001eb0:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001eb4:	200003a0 	.word	0x200003a0

08001eb8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>

08001eba <__cvt>:
 8001eba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001ebe:	ec57 6b10 	vmov	r6, r7, d0
 8001ec2:	2f00      	cmp	r7, #0
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	463b      	mov	r3, r7
 8001eca:	bfbb      	ittet	lt
 8001ecc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001ed0:	461f      	movlt	r7, r3
 8001ed2:	2300      	movge	r3, #0
 8001ed4:	232d      	movlt	r3, #45	@ 0x2d
 8001ed6:	700b      	strb	r3, [r1, #0]
 8001ed8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001eda:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001ede:	4691      	mov	r9, r2
 8001ee0:	f023 0820 	bic.w	r8, r3, #32
 8001ee4:	bfbc      	itt	lt
 8001ee6:	4632      	movlt	r2, r6
 8001ee8:	4616      	movlt	r6, r2
 8001eea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001eee:	d005      	beq.n	8001efc <__cvt+0x42>
 8001ef0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001ef4:	d100      	bne.n	8001ef8 <__cvt+0x3e>
 8001ef6:	3401      	adds	r4, #1
 8001ef8:	2102      	movs	r1, #2
 8001efa:	e000      	b.n	8001efe <__cvt+0x44>
 8001efc:	2103      	movs	r1, #3
 8001efe:	ab03      	add	r3, sp, #12
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	ab02      	add	r3, sp, #8
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	ec47 6b10 	vmov	d0, r6, r7
 8001f0a:	4653      	mov	r3, sl
 8001f0c:	4622      	mov	r2, r4
 8001f0e:	f000 ff3b 	bl	8002d88 <_dtoa_r>
 8001f12:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001f16:	4605      	mov	r5, r0
 8001f18:	d119      	bne.n	8001f4e <__cvt+0x94>
 8001f1a:	f019 0f01 	tst.w	r9, #1
 8001f1e:	d00e      	beq.n	8001f3e <__cvt+0x84>
 8001f20:	eb00 0904 	add.w	r9, r0, r4
 8001f24:	2200      	movs	r2, #0
 8001f26:	2300      	movs	r3, #0
 8001f28:	4630      	mov	r0, r6
 8001f2a:	4639      	mov	r1, r7
 8001f2c:	f7fe fdcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f30:	b108      	cbz	r0, 8001f36 <__cvt+0x7c>
 8001f32:	f8cd 900c 	str.w	r9, [sp, #12]
 8001f36:	2230      	movs	r2, #48	@ 0x30
 8001f38:	9b03      	ldr	r3, [sp, #12]
 8001f3a:	454b      	cmp	r3, r9
 8001f3c:	d31e      	bcc.n	8001f7c <__cvt+0xc2>
 8001f3e:	9b03      	ldr	r3, [sp, #12]
 8001f40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001f42:	1b5b      	subs	r3, r3, r5
 8001f44:	4628      	mov	r0, r5
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	b004      	add	sp, #16
 8001f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f4e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001f52:	eb00 0904 	add.w	r9, r0, r4
 8001f56:	d1e5      	bne.n	8001f24 <__cvt+0x6a>
 8001f58:	7803      	ldrb	r3, [r0, #0]
 8001f5a:	2b30      	cmp	r3, #48	@ 0x30
 8001f5c:	d10a      	bne.n	8001f74 <__cvt+0xba>
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2300      	movs	r3, #0
 8001f62:	4630      	mov	r0, r6
 8001f64:	4639      	mov	r1, r7
 8001f66:	f7fe fdaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8001f6a:	b918      	cbnz	r0, 8001f74 <__cvt+0xba>
 8001f6c:	f1c4 0401 	rsb	r4, r4, #1
 8001f70:	f8ca 4000 	str.w	r4, [sl]
 8001f74:	f8da 3000 	ldr.w	r3, [sl]
 8001f78:	4499      	add	r9, r3
 8001f7a:	e7d3      	b.n	8001f24 <__cvt+0x6a>
 8001f7c:	1c59      	adds	r1, r3, #1
 8001f7e:	9103      	str	r1, [sp, #12]
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e7d9      	b.n	8001f38 <__cvt+0x7e>

08001f84 <__exponent>:
 8001f84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f86:	2900      	cmp	r1, #0
 8001f88:	bfba      	itte	lt
 8001f8a:	4249      	neglt	r1, r1
 8001f8c:	232d      	movlt	r3, #45	@ 0x2d
 8001f8e:	232b      	movge	r3, #43	@ 0x2b
 8001f90:	2909      	cmp	r1, #9
 8001f92:	7002      	strb	r2, [r0, #0]
 8001f94:	7043      	strb	r3, [r0, #1]
 8001f96:	dd29      	ble.n	8001fec <__exponent+0x68>
 8001f98:	f10d 0307 	add.w	r3, sp, #7
 8001f9c:	461d      	mov	r5, r3
 8001f9e:	270a      	movs	r7, #10
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	fbb1 f6f7 	udiv	r6, r1, r7
 8001fa6:	fb07 1416 	mls	r4, r7, r6, r1
 8001faa:	3430      	adds	r4, #48	@ 0x30
 8001fac:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	2c63      	cmp	r4, #99	@ 0x63
 8001fb4:	f103 33ff 	add.w	r3, r3, #4294967295
 8001fb8:	4631      	mov	r1, r6
 8001fba:	dcf1      	bgt.n	8001fa0 <__exponent+0x1c>
 8001fbc:	3130      	adds	r1, #48	@ 0x30
 8001fbe:	1e94      	subs	r4, r2, #2
 8001fc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001fc4:	1c41      	adds	r1, r0, #1
 8001fc6:	4623      	mov	r3, r4
 8001fc8:	42ab      	cmp	r3, r5
 8001fca:	d30a      	bcc.n	8001fe2 <__exponent+0x5e>
 8001fcc:	f10d 0309 	add.w	r3, sp, #9
 8001fd0:	1a9b      	subs	r3, r3, r2
 8001fd2:	42ac      	cmp	r4, r5
 8001fd4:	bf88      	it	hi
 8001fd6:	2300      	movhi	r3, #0
 8001fd8:	3302      	adds	r3, #2
 8001fda:	4403      	add	r3, r0
 8001fdc:	1a18      	subs	r0, r3, r0
 8001fde:	b003      	add	sp, #12
 8001fe0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fe2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001fe6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001fea:	e7ed      	b.n	8001fc8 <__exponent+0x44>
 8001fec:	2330      	movs	r3, #48	@ 0x30
 8001fee:	3130      	adds	r1, #48	@ 0x30
 8001ff0:	7083      	strb	r3, [r0, #2]
 8001ff2:	70c1      	strb	r1, [r0, #3]
 8001ff4:	1d03      	adds	r3, r0, #4
 8001ff6:	e7f1      	b.n	8001fdc <__exponent+0x58>

08001ff8 <_printf_float>:
 8001ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ffc:	b08d      	sub	sp, #52	@ 0x34
 8001ffe:	460c      	mov	r4, r1
 8002000:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002004:	4616      	mov	r6, r2
 8002006:	461f      	mov	r7, r3
 8002008:	4605      	mov	r5, r0
 800200a:	f000 fdbd 	bl	8002b88 <_localeconv_r>
 800200e:	6803      	ldr	r3, [r0, #0]
 8002010:	9304      	str	r3, [sp, #16]
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe f92c 	bl	8000270 <strlen>
 8002018:	2300      	movs	r3, #0
 800201a:	930a      	str	r3, [sp, #40]	@ 0x28
 800201c:	f8d8 3000 	ldr.w	r3, [r8]
 8002020:	9005      	str	r0, [sp, #20]
 8002022:	3307      	adds	r3, #7
 8002024:	f023 0307 	bic.w	r3, r3, #7
 8002028:	f103 0208 	add.w	r2, r3, #8
 800202c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002030:	f8d4 b000 	ldr.w	fp, [r4]
 8002034:	f8c8 2000 	str.w	r2, [r8]
 8002038:	e9d3 8900 	ldrd	r8, r9, [r3]
 800203c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002040:	9307      	str	r3, [sp, #28]
 8002042:	f8cd 8018 	str.w	r8, [sp, #24]
 8002046:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800204a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800204e:	4b9c      	ldr	r3, [pc, #624]	@ (80022c0 <_printf_float+0x2c8>)
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	f7fe fd6a 	bl	8000b2c <__aeabi_dcmpun>
 8002058:	bb70      	cbnz	r0, 80020b8 <_printf_float+0xc0>
 800205a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800205e:	4b98      	ldr	r3, [pc, #608]	@ (80022c0 <_printf_float+0x2c8>)
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	f7fe fd44 	bl	8000af0 <__aeabi_dcmple>
 8002068:	bb30      	cbnz	r0, 80020b8 <_printf_float+0xc0>
 800206a:	2200      	movs	r2, #0
 800206c:	2300      	movs	r3, #0
 800206e:	4640      	mov	r0, r8
 8002070:	4649      	mov	r1, r9
 8002072:	f7fe fd33 	bl	8000adc <__aeabi_dcmplt>
 8002076:	b110      	cbz	r0, 800207e <_printf_float+0x86>
 8002078:	232d      	movs	r3, #45	@ 0x2d
 800207a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800207e:	4a91      	ldr	r2, [pc, #580]	@ (80022c4 <_printf_float+0x2cc>)
 8002080:	4b91      	ldr	r3, [pc, #580]	@ (80022c8 <_printf_float+0x2d0>)
 8002082:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002086:	bf8c      	ite	hi
 8002088:	4690      	movhi	r8, r2
 800208a:	4698      	movls	r8, r3
 800208c:	2303      	movs	r3, #3
 800208e:	6123      	str	r3, [r4, #16]
 8002090:	f02b 0304 	bic.w	r3, fp, #4
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	f04f 0900 	mov.w	r9, #0
 800209a:	9700      	str	r7, [sp, #0]
 800209c:	4633      	mov	r3, r6
 800209e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80020a0:	4621      	mov	r1, r4
 80020a2:	4628      	mov	r0, r5
 80020a4:	f000 f9d2 	bl	800244c <_printf_common>
 80020a8:	3001      	adds	r0, #1
 80020aa:	f040 808d 	bne.w	80021c8 <_printf_float+0x1d0>
 80020ae:	f04f 30ff 	mov.w	r0, #4294967295
 80020b2:	b00d      	add	sp, #52	@ 0x34
 80020b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020b8:	4642      	mov	r2, r8
 80020ba:	464b      	mov	r3, r9
 80020bc:	4640      	mov	r0, r8
 80020be:	4649      	mov	r1, r9
 80020c0:	f7fe fd34 	bl	8000b2c <__aeabi_dcmpun>
 80020c4:	b140      	cbz	r0, 80020d8 <_printf_float+0xe0>
 80020c6:	464b      	mov	r3, r9
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bfbc      	itt	lt
 80020cc:	232d      	movlt	r3, #45	@ 0x2d
 80020ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80020d2:	4a7e      	ldr	r2, [pc, #504]	@ (80022cc <_printf_float+0x2d4>)
 80020d4:	4b7e      	ldr	r3, [pc, #504]	@ (80022d0 <_printf_float+0x2d8>)
 80020d6:	e7d4      	b.n	8002082 <_printf_float+0x8a>
 80020d8:	6863      	ldr	r3, [r4, #4]
 80020da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80020de:	9206      	str	r2, [sp, #24]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	d13b      	bne.n	800215c <_printf_float+0x164>
 80020e4:	2306      	movs	r3, #6
 80020e6:	6063      	str	r3, [r4, #4]
 80020e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80020ec:	2300      	movs	r3, #0
 80020ee:	6022      	str	r2, [r4, #0]
 80020f0:	9303      	str	r3, [sp, #12]
 80020f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80020f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80020f8:	ab09      	add	r3, sp, #36	@ 0x24
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	6861      	ldr	r1, [r4, #4]
 80020fe:	ec49 8b10 	vmov	d0, r8, r9
 8002102:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002106:	4628      	mov	r0, r5
 8002108:	f7ff fed7 	bl	8001eba <__cvt>
 800210c:	9b06      	ldr	r3, [sp, #24]
 800210e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002110:	2b47      	cmp	r3, #71	@ 0x47
 8002112:	4680      	mov	r8, r0
 8002114:	d129      	bne.n	800216a <_printf_float+0x172>
 8002116:	1cc8      	adds	r0, r1, #3
 8002118:	db02      	blt.n	8002120 <_printf_float+0x128>
 800211a:	6863      	ldr	r3, [r4, #4]
 800211c:	4299      	cmp	r1, r3
 800211e:	dd41      	ble.n	80021a4 <_printf_float+0x1ac>
 8002120:	f1aa 0a02 	sub.w	sl, sl, #2
 8002124:	fa5f fa8a 	uxtb.w	sl, sl
 8002128:	3901      	subs	r1, #1
 800212a:	4652      	mov	r2, sl
 800212c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002130:	9109      	str	r1, [sp, #36]	@ 0x24
 8002132:	f7ff ff27 	bl	8001f84 <__exponent>
 8002136:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002138:	1813      	adds	r3, r2, r0
 800213a:	2a01      	cmp	r2, #1
 800213c:	4681      	mov	r9, r0
 800213e:	6123      	str	r3, [r4, #16]
 8002140:	dc02      	bgt.n	8002148 <_printf_float+0x150>
 8002142:	6822      	ldr	r2, [r4, #0]
 8002144:	07d2      	lsls	r2, r2, #31
 8002146:	d501      	bpl.n	800214c <_printf_float+0x154>
 8002148:	3301      	adds	r3, #1
 800214a:	6123      	str	r3, [r4, #16]
 800214c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0a2      	beq.n	800209a <_printf_float+0xa2>
 8002154:	232d      	movs	r3, #45	@ 0x2d
 8002156:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800215a:	e79e      	b.n	800209a <_printf_float+0xa2>
 800215c:	9a06      	ldr	r2, [sp, #24]
 800215e:	2a47      	cmp	r2, #71	@ 0x47
 8002160:	d1c2      	bne.n	80020e8 <_printf_float+0xf0>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1c0      	bne.n	80020e8 <_printf_float+0xf0>
 8002166:	2301      	movs	r3, #1
 8002168:	e7bd      	b.n	80020e6 <_printf_float+0xee>
 800216a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800216e:	d9db      	bls.n	8002128 <_printf_float+0x130>
 8002170:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002174:	d118      	bne.n	80021a8 <_printf_float+0x1b0>
 8002176:	2900      	cmp	r1, #0
 8002178:	6863      	ldr	r3, [r4, #4]
 800217a:	dd0b      	ble.n	8002194 <_printf_float+0x19c>
 800217c:	6121      	str	r1, [r4, #16]
 800217e:	b913      	cbnz	r3, 8002186 <_printf_float+0x18e>
 8002180:	6822      	ldr	r2, [r4, #0]
 8002182:	07d0      	lsls	r0, r2, #31
 8002184:	d502      	bpl.n	800218c <_printf_float+0x194>
 8002186:	3301      	adds	r3, #1
 8002188:	440b      	add	r3, r1
 800218a:	6123      	str	r3, [r4, #16]
 800218c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800218e:	f04f 0900 	mov.w	r9, #0
 8002192:	e7db      	b.n	800214c <_printf_float+0x154>
 8002194:	b913      	cbnz	r3, 800219c <_printf_float+0x1a4>
 8002196:	6822      	ldr	r2, [r4, #0]
 8002198:	07d2      	lsls	r2, r2, #31
 800219a:	d501      	bpl.n	80021a0 <_printf_float+0x1a8>
 800219c:	3302      	adds	r3, #2
 800219e:	e7f4      	b.n	800218a <_printf_float+0x192>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e7f2      	b.n	800218a <_printf_float+0x192>
 80021a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80021a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80021aa:	4299      	cmp	r1, r3
 80021ac:	db05      	blt.n	80021ba <_printf_float+0x1c2>
 80021ae:	6823      	ldr	r3, [r4, #0]
 80021b0:	6121      	str	r1, [r4, #16]
 80021b2:	07d8      	lsls	r0, r3, #31
 80021b4:	d5ea      	bpl.n	800218c <_printf_float+0x194>
 80021b6:	1c4b      	adds	r3, r1, #1
 80021b8:	e7e7      	b.n	800218a <_printf_float+0x192>
 80021ba:	2900      	cmp	r1, #0
 80021bc:	bfd4      	ite	le
 80021be:	f1c1 0202 	rsble	r2, r1, #2
 80021c2:	2201      	movgt	r2, #1
 80021c4:	4413      	add	r3, r2
 80021c6:	e7e0      	b.n	800218a <_printf_float+0x192>
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	055a      	lsls	r2, r3, #21
 80021cc:	d407      	bmi.n	80021de <_printf_float+0x1e6>
 80021ce:	6923      	ldr	r3, [r4, #16]
 80021d0:	4642      	mov	r2, r8
 80021d2:	4631      	mov	r1, r6
 80021d4:	4628      	mov	r0, r5
 80021d6:	47b8      	blx	r7
 80021d8:	3001      	adds	r0, #1
 80021da:	d12b      	bne.n	8002234 <_printf_float+0x23c>
 80021dc:	e767      	b.n	80020ae <_printf_float+0xb6>
 80021de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80021e2:	f240 80dd 	bls.w	80023a0 <_printf_float+0x3a8>
 80021e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80021ea:	2200      	movs	r2, #0
 80021ec:	2300      	movs	r3, #0
 80021ee:	f7fe fc6b 	bl	8000ac8 <__aeabi_dcmpeq>
 80021f2:	2800      	cmp	r0, #0
 80021f4:	d033      	beq.n	800225e <_printf_float+0x266>
 80021f6:	4a37      	ldr	r2, [pc, #220]	@ (80022d4 <_printf_float+0x2dc>)
 80021f8:	2301      	movs	r3, #1
 80021fa:	4631      	mov	r1, r6
 80021fc:	4628      	mov	r0, r5
 80021fe:	47b8      	blx	r7
 8002200:	3001      	adds	r0, #1
 8002202:	f43f af54 	beq.w	80020ae <_printf_float+0xb6>
 8002206:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800220a:	4543      	cmp	r3, r8
 800220c:	db02      	blt.n	8002214 <_printf_float+0x21c>
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	07d8      	lsls	r0, r3, #31
 8002212:	d50f      	bpl.n	8002234 <_printf_float+0x23c>
 8002214:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002218:	4631      	mov	r1, r6
 800221a:	4628      	mov	r0, r5
 800221c:	47b8      	blx	r7
 800221e:	3001      	adds	r0, #1
 8002220:	f43f af45 	beq.w	80020ae <_printf_float+0xb6>
 8002224:	f04f 0900 	mov.w	r9, #0
 8002228:	f108 38ff 	add.w	r8, r8, #4294967295
 800222c:	f104 0a1a 	add.w	sl, r4, #26
 8002230:	45c8      	cmp	r8, r9
 8002232:	dc09      	bgt.n	8002248 <_printf_float+0x250>
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	079b      	lsls	r3, r3, #30
 8002238:	f100 8103 	bmi.w	8002442 <_printf_float+0x44a>
 800223c:	68e0      	ldr	r0, [r4, #12]
 800223e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002240:	4298      	cmp	r0, r3
 8002242:	bfb8      	it	lt
 8002244:	4618      	movlt	r0, r3
 8002246:	e734      	b.n	80020b2 <_printf_float+0xba>
 8002248:	2301      	movs	r3, #1
 800224a:	4652      	mov	r2, sl
 800224c:	4631      	mov	r1, r6
 800224e:	4628      	mov	r0, r5
 8002250:	47b8      	blx	r7
 8002252:	3001      	adds	r0, #1
 8002254:	f43f af2b 	beq.w	80020ae <_printf_float+0xb6>
 8002258:	f109 0901 	add.w	r9, r9, #1
 800225c:	e7e8      	b.n	8002230 <_printf_float+0x238>
 800225e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	dc39      	bgt.n	80022d8 <_printf_float+0x2e0>
 8002264:	4a1b      	ldr	r2, [pc, #108]	@ (80022d4 <_printf_float+0x2dc>)
 8002266:	2301      	movs	r3, #1
 8002268:	4631      	mov	r1, r6
 800226a:	4628      	mov	r0, r5
 800226c:	47b8      	blx	r7
 800226e:	3001      	adds	r0, #1
 8002270:	f43f af1d 	beq.w	80020ae <_printf_float+0xb6>
 8002274:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8002278:	ea59 0303 	orrs.w	r3, r9, r3
 800227c:	d102      	bne.n	8002284 <_printf_float+0x28c>
 800227e:	6823      	ldr	r3, [r4, #0]
 8002280:	07d9      	lsls	r1, r3, #31
 8002282:	d5d7      	bpl.n	8002234 <_printf_float+0x23c>
 8002284:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002288:	4631      	mov	r1, r6
 800228a:	4628      	mov	r0, r5
 800228c:	47b8      	blx	r7
 800228e:	3001      	adds	r0, #1
 8002290:	f43f af0d 	beq.w	80020ae <_printf_float+0xb6>
 8002294:	f04f 0a00 	mov.w	sl, #0
 8002298:	f104 0b1a 	add.w	fp, r4, #26
 800229c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800229e:	425b      	negs	r3, r3
 80022a0:	4553      	cmp	r3, sl
 80022a2:	dc01      	bgt.n	80022a8 <_printf_float+0x2b0>
 80022a4:	464b      	mov	r3, r9
 80022a6:	e793      	b.n	80021d0 <_printf_float+0x1d8>
 80022a8:	2301      	movs	r3, #1
 80022aa:	465a      	mov	r2, fp
 80022ac:	4631      	mov	r1, r6
 80022ae:	4628      	mov	r0, r5
 80022b0:	47b8      	blx	r7
 80022b2:	3001      	adds	r0, #1
 80022b4:	f43f aefb 	beq.w	80020ae <_printf_float+0xb6>
 80022b8:	f10a 0a01 	add.w	sl, sl, #1
 80022bc:	e7ee      	b.n	800229c <_printf_float+0x2a4>
 80022be:	bf00      	nop
 80022c0:	7fefffff 	.word	0x7fefffff
 80022c4:	08004951 	.word	0x08004951
 80022c8:	0800494d 	.word	0x0800494d
 80022cc:	08004959 	.word	0x08004959
 80022d0:	08004955 	.word	0x08004955
 80022d4:	0800495d 	.word	0x0800495d
 80022d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80022da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80022de:	4553      	cmp	r3, sl
 80022e0:	bfa8      	it	ge
 80022e2:	4653      	movge	r3, sl
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	4699      	mov	r9, r3
 80022e8:	dc36      	bgt.n	8002358 <_printf_float+0x360>
 80022ea:	f04f 0b00 	mov.w	fp, #0
 80022ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80022f2:	f104 021a 	add.w	r2, r4, #26
 80022f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80022f8:	9306      	str	r3, [sp, #24]
 80022fa:	eba3 0309 	sub.w	r3, r3, r9
 80022fe:	455b      	cmp	r3, fp
 8002300:	dc31      	bgt.n	8002366 <_printf_float+0x36e>
 8002302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002304:	459a      	cmp	sl, r3
 8002306:	dc3a      	bgt.n	800237e <_printf_float+0x386>
 8002308:	6823      	ldr	r3, [r4, #0]
 800230a:	07da      	lsls	r2, r3, #31
 800230c:	d437      	bmi.n	800237e <_printf_float+0x386>
 800230e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002310:	ebaa 0903 	sub.w	r9, sl, r3
 8002314:	9b06      	ldr	r3, [sp, #24]
 8002316:	ebaa 0303 	sub.w	r3, sl, r3
 800231a:	4599      	cmp	r9, r3
 800231c:	bfa8      	it	ge
 800231e:	4699      	movge	r9, r3
 8002320:	f1b9 0f00 	cmp.w	r9, #0
 8002324:	dc33      	bgt.n	800238e <_printf_float+0x396>
 8002326:	f04f 0800 	mov.w	r8, #0
 800232a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800232e:	f104 0b1a 	add.w	fp, r4, #26
 8002332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002334:	ebaa 0303 	sub.w	r3, sl, r3
 8002338:	eba3 0309 	sub.w	r3, r3, r9
 800233c:	4543      	cmp	r3, r8
 800233e:	f77f af79 	ble.w	8002234 <_printf_float+0x23c>
 8002342:	2301      	movs	r3, #1
 8002344:	465a      	mov	r2, fp
 8002346:	4631      	mov	r1, r6
 8002348:	4628      	mov	r0, r5
 800234a:	47b8      	blx	r7
 800234c:	3001      	adds	r0, #1
 800234e:	f43f aeae 	beq.w	80020ae <_printf_float+0xb6>
 8002352:	f108 0801 	add.w	r8, r8, #1
 8002356:	e7ec      	b.n	8002332 <_printf_float+0x33a>
 8002358:	4642      	mov	r2, r8
 800235a:	4631      	mov	r1, r6
 800235c:	4628      	mov	r0, r5
 800235e:	47b8      	blx	r7
 8002360:	3001      	adds	r0, #1
 8002362:	d1c2      	bne.n	80022ea <_printf_float+0x2f2>
 8002364:	e6a3      	b.n	80020ae <_printf_float+0xb6>
 8002366:	2301      	movs	r3, #1
 8002368:	4631      	mov	r1, r6
 800236a:	4628      	mov	r0, r5
 800236c:	9206      	str	r2, [sp, #24]
 800236e:	47b8      	blx	r7
 8002370:	3001      	adds	r0, #1
 8002372:	f43f ae9c 	beq.w	80020ae <_printf_float+0xb6>
 8002376:	9a06      	ldr	r2, [sp, #24]
 8002378:	f10b 0b01 	add.w	fp, fp, #1
 800237c:	e7bb      	b.n	80022f6 <_printf_float+0x2fe>
 800237e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002382:	4631      	mov	r1, r6
 8002384:	4628      	mov	r0, r5
 8002386:	47b8      	blx	r7
 8002388:	3001      	adds	r0, #1
 800238a:	d1c0      	bne.n	800230e <_printf_float+0x316>
 800238c:	e68f      	b.n	80020ae <_printf_float+0xb6>
 800238e:	9a06      	ldr	r2, [sp, #24]
 8002390:	464b      	mov	r3, r9
 8002392:	4442      	add	r2, r8
 8002394:	4631      	mov	r1, r6
 8002396:	4628      	mov	r0, r5
 8002398:	47b8      	blx	r7
 800239a:	3001      	adds	r0, #1
 800239c:	d1c3      	bne.n	8002326 <_printf_float+0x32e>
 800239e:	e686      	b.n	80020ae <_printf_float+0xb6>
 80023a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80023a4:	f1ba 0f01 	cmp.w	sl, #1
 80023a8:	dc01      	bgt.n	80023ae <_printf_float+0x3b6>
 80023aa:	07db      	lsls	r3, r3, #31
 80023ac:	d536      	bpl.n	800241c <_printf_float+0x424>
 80023ae:	2301      	movs	r3, #1
 80023b0:	4642      	mov	r2, r8
 80023b2:	4631      	mov	r1, r6
 80023b4:	4628      	mov	r0, r5
 80023b6:	47b8      	blx	r7
 80023b8:	3001      	adds	r0, #1
 80023ba:	f43f ae78 	beq.w	80020ae <_printf_float+0xb6>
 80023be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80023c2:	4631      	mov	r1, r6
 80023c4:	4628      	mov	r0, r5
 80023c6:	47b8      	blx	r7
 80023c8:	3001      	adds	r0, #1
 80023ca:	f43f ae70 	beq.w	80020ae <_printf_float+0xb6>
 80023ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80023d2:	2200      	movs	r2, #0
 80023d4:	2300      	movs	r3, #0
 80023d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80023da:	f7fe fb75 	bl	8000ac8 <__aeabi_dcmpeq>
 80023de:	b9c0      	cbnz	r0, 8002412 <_printf_float+0x41a>
 80023e0:	4653      	mov	r3, sl
 80023e2:	f108 0201 	add.w	r2, r8, #1
 80023e6:	4631      	mov	r1, r6
 80023e8:	4628      	mov	r0, r5
 80023ea:	47b8      	blx	r7
 80023ec:	3001      	adds	r0, #1
 80023ee:	d10c      	bne.n	800240a <_printf_float+0x412>
 80023f0:	e65d      	b.n	80020ae <_printf_float+0xb6>
 80023f2:	2301      	movs	r3, #1
 80023f4:	465a      	mov	r2, fp
 80023f6:	4631      	mov	r1, r6
 80023f8:	4628      	mov	r0, r5
 80023fa:	47b8      	blx	r7
 80023fc:	3001      	adds	r0, #1
 80023fe:	f43f ae56 	beq.w	80020ae <_printf_float+0xb6>
 8002402:	f108 0801 	add.w	r8, r8, #1
 8002406:	45d0      	cmp	r8, sl
 8002408:	dbf3      	blt.n	80023f2 <_printf_float+0x3fa>
 800240a:	464b      	mov	r3, r9
 800240c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8002410:	e6df      	b.n	80021d2 <_printf_float+0x1da>
 8002412:	f04f 0800 	mov.w	r8, #0
 8002416:	f104 0b1a 	add.w	fp, r4, #26
 800241a:	e7f4      	b.n	8002406 <_printf_float+0x40e>
 800241c:	2301      	movs	r3, #1
 800241e:	4642      	mov	r2, r8
 8002420:	e7e1      	b.n	80023e6 <_printf_float+0x3ee>
 8002422:	2301      	movs	r3, #1
 8002424:	464a      	mov	r2, r9
 8002426:	4631      	mov	r1, r6
 8002428:	4628      	mov	r0, r5
 800242a:	47b8      	blx	r7
 800242c:	3001      	adds	r0, #1
 800242e:	f43f ae3e 	beq.w	80020ae <_printf_float+0xb6>
 8002432:	f108 0801 	add.w	r8, r8, #1
 8002436:	68e3      	ldr	r3, [r4, #12]
 8002438:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800243a:	1a5b      	subs	r3, r3, r1
 800243c:	4543      	cmp	r3, r8
 800243e:	dcf0      	bgt.n	8002422 <_printf_float+0x42a>
 8002440:	e6fc      	b.n	800223c <_printf_float+0x244>
 8002442:	f04f 0800 	mov.w	r8, #0
 8002446:	f104 0919 	add.w	r9, r4, #25
 800244a:	e7f4      	b.n	8002436 <_printf_float+0x43e>

0800244c <_printf_common>:
 800244c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002450:	4616      	mov	r6, r2
 8002452:	4698      	mov	r8, r3
 8002454:	688a      	ldr	r2, [r1, #8]
 8002456:	690b      	ldr	r3, [r1, #16]
 8002458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800245c:	4293      	cmp	r3, r2
 800245e:	bfb8      	it	lt
 8002460:	4613      	movlt	r3, r2
 8002462:	6033      	str	r3, [r6, #0]
 8002464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002468:	4607      	mov	r7, r0
 800246a:	460c      	mov	r4, r1
 800246c:	b10a      	cbz	r2, 8002472 <_printf_common+0x26>
 800246e:	3301      	adds	r3, #1
 8002470:	6033      	str	r3, [r6, #0]
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	0699      	lsls	r1, r3, #26
 8002476:	bf42      	ittt	mi
 8002478:	6833      	ldrmi	r3, [r6, #0]
 800247a:	3302      	addmi	r3, #2
 800247c:	6033      	strmi	r3, [r6, #0]
 800247e:	6825      	ldr	r5, [r4, #0]
 8002480:	f015 0506 	ands.w	r5, r5, #6
 8002484:	d106      	bne.n	8002494 <_printf_common+0x48>
 8002486:	f104 0a19 	add.w	sl, r4, #25
 800248a:	68e3      	ldr	r3, [r4, #12]
 800248c:	6832      	ldr	r2, [r6, #0]
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	42ab      	cmp	r3, r5
 8002492:	dc26      	bgt.n	80024e2 <_printf_common+0x96>
 8002494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002498:	6822      	ldr	r2, [r4, #0]
 800249a:	3b00      	subs	r3, #0
 800249c:	bf18      	it	ne
 800249e:	2301      	movne	r3, #1
 80024a0:	0692      	lsls	r2, r2, #26
 80024a2:	d42b      	bmi.n	80024fc <_printf_common+0xb0>
 80024a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80024a8:	4641      	mov	r1, r8
 80024aa:	4638      	mov	r0, r7
 80024ac:	47c8      	blx	r9
 80024ae:	3001      	adds	r0, #1
 80024b0:	d01e      	beq.n	80024f0 <_printf_common+0xa4>
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	6922      	ldr	r2, [r4, #16]
 80024b6:	f003 0306 	and.w	r3, r3, #6
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf02      	ittt	eq
 80024be:	68e5      	ldreq	r5, [r4, #12]
 80024c0:	6833      	ldreq	r3, [r6, #0]
 80024c2:	1aed      	subeq	r5, r5, r3
 80024c4:	68a3      	ldr	r3, [r4, #8]
 80024c6:	bf0c      	ite	eq
 80024c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80024cc:	2500      	movne	r5, #0
 80024ce:	4293      	cmp	r3, r2
 80024d0:	bfc4      	itt	gt
 80024d2:	1a9b      	subgt	r3, r3, r2
 80024d4:	18ed      	addgt	r5, r5, r3
 80024d6:	2600      	movs	r6, #0
 80024d8:	341a      	adds	r4, #26
 80024da:	42b5      	cmp	r5, r6
 80024dc:	d11a      	bne.n	8002514 <_printf_common+0xc8>
 80024de:	2000      	movs	r0, #0
 80024e0:	e008      	b.n	80024f4 <_printf_common+0xa8>
 80024e2:	2301      	movs	r3, #1
 80024e4:	4652      	mov	r2, sl
 80024e6:	4641      	mov	r1, r8
 80024e8:	4638      	mov	r0, r7
 80024ea:	47c8      	blx	r9
 80024ec:	3001      	adds	r0, #1
 80024ee:	d103      	bne.n	80024f8 <_printf_common+0xac>
 80024f0:	f04f 30ff 	mov.w	r0, #4294967295
 80024f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024f8:	3501      	adds	r5, #1
 80024fa:	e7c6      	b.n	800248a <_printf_common+0x3e>
 80024fc:	18e1      	adds	r1, r4, r3
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	2030      	movs	r0, #48	@ 0x30
 8002502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002506:	4422      	add	r2, r4
 8002508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800250c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002510:	3302      	adds	r3, #2
 8002512:	e7c7      	b.n	80024a4 <_printf_common+0x58>
 8002514:	2301      	movs	r3, #1
 8002516:	4622      	mov	r2, r4
 8002518:	4641      	mov	r1, r8
 800251a:	4638      	mov	r0, r7
 800251c:	47c8      	blx	r9
 800251e:	3001      	adds	r0, #1
 8002520:	d0e6      	beq.n	80024f0 <_printf_common+0xa4>
 8002522:	3601      	adds	r6, #1
 8002524:	e7d9      	b.n	80024da <_printf_common+0x8e>
	...

08002528 <_printf_i>:
 8002528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800252c:	7e0f      	ldrb	r7, [r1, #24]
 800252e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002530:	2f78      	cmp	r7, #120	@ 0x78
 8002532:	4691      	mov	r9, r2
 8002534:	4680      	mov	r8, r0
 8002536:	460c      	mov	r4, r1
 8002538:	469a      	mov	sl, r3
 800253a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800253e:	d807      	bhi.n	8002550 <_printf_i+0x28>
 8002540:	2f62      	cmp	r7, #98	@ 0x62
 8002542:	d80a      	bhi.n	800255a <_printf_i+0x32>
 8002544:	2f00      	cmp	r7, #0
 8002546:	f000 80d1 	beq.w	80026ec <_printf_i+0x1c4>
 800254a:	2f58      	cmp	r7, #88	@ 0x58
 800254c:	f000 80b8 	beq.w	80026c0 <_printf_i+0x198>
 8002550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002558:	e03a      	b.n	80025d0 <_printf_i+0xa8>
 800255a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800255e:	2b15      	cmp	r3, #21
 8002560:	d8f6      	bhi.n	8002550 <_printf_i+0x28>
 8002562:	a101      	add	r1, pc, #4	@ (adr r1, 8002568 <_printf_i+0x40>)
 8002564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002568:	080025c1 	.word	0x080025c1
 800256c:	080025d5 	.word	0x080025d5
 8002570:	08002551 	.word	0x08002551
 8002574:	08002551 	.word	0x08002551
 8002578:	08002551 	.word	0x08002551
 800257c:	08002551 	.word	0x08002551
 8002580:	080025d5 	.word	0x080025d5
 8002584:	08002551 	.word	0x08002551
 8002588:	08002551 	.word	0x08002551
 800258c:	08002551 	.word	0x08002551
 8002590:	08002551 	.word	0x08002551
 8002594:	080026d3 	.word	0x080026d3
 8002598:	080025ff 	.word	0x080025ff
 800259c:	0800268d 	.word	0x0800268d
 80025a0:	08002551 	.word	0x08002551
 80025a4:	08002551 	.word	0x08002551
 80025a8:	080026f5 	.word	0x080026f5
 80025ac:	08002551 	.word	0x08002551
 80025b0:	080025ff 	.word	0x080025ff
 80025b4:	08002551 	.word	0x08002551
 80025b8:	08002551 	.word	0x08002551
 80025bc:	08002695 	.word	0x08002695
 80025c0:	6833      	ldr	r3, [r6, #0]
 80025c2:	1d1a      	adds	r2, r3, #4
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6032      	str	r2, [r6, #0]
 80025c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80025cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80025d0:	2301      	movs	r3, #1
 80025d2:	e09c      	b.n	800270e <_printf_i+0x1e6>
 80025d4:	6833      	ldr	r3, [r6, #0]
 80025d6:	6820      	ldr	r0, [r4, #0]
 80025d8:	1d19      	adds	r1, r3, #4
 80025da:	6031      	str	r1, [r6, #0]
 80025dc:	0606      	lsls	r6, r0, #24
 80025de:	d501      	bpl.n	80025e4 <_printf_i+0xbc>
 80025e0:	681d      	ldr	r5, [r3, #0]
 80025e2:	e003      	b.n	80025ec <_printf_i+0xc4>
 80025e4:	0645      	lsls	r5, r0, #25
 80025e6:	d5fb      	bpl.n	80025e0 <_printf_i+0xb8>
 80025e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80025ec:	2d00      	cmp	r5, #0
 80025ee:	da03      	bge.n	80025f8 <_printf_i+0xd0>
 80025f0:	232d      	movs	r3, #45	@ 0x2d
 80025f2:	426d      	negs	r5, r5
 80025f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025f8:	4858      	ldr	r0, [pc, #352]	@ (800275c <_printf_i+0x234>)
 80025fa:	230a      	movs	r3, #10
 80025fc:	e011      	b.n	8002622 <_printf_i+0xfa>
 80025fe:	6821      	ldr	r1, [r4, #0]
 8002600:	6833      	ldr	r3, [r6, #0]
 8002602:	0608      	lsls	r0, r1, #24
 8002604:	f853 5b04 	ldr.w	r5, [r3], #4
 8002608:	d402      	bmi.n	8002610 <_printf_i+0xe8>
 800260a:	0649      	lsls	r1, r1, #25
 800260c:	bf48      	it	mi
 800260e:	b2ad      	uxthmi	r5, r5
 8002610:	2f6f      	cmp	r7, #111	@ 0x6f
 8002612:	4852      	ldr	r0, [pc, #328]	@ (800275c <_printf_i+0x234>)
 8002614:	6033      	str	r3, [r6, #0]
 8002616:	bf14      	ite	ne
 8002618:	230a      	movne	r3, #10
 800261a:	2308      	moveq	r3, #8
 800261c:	2100      	movs	r1, #0
 800261e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002622:	6866      	ldr	r6, [r4, #4]
 8002624:	60a6      	str	r6, [r4, #8]
 8002626:	2e00      	cmp	r6, #0
 8002628:	db05      	blt.n	8002636 <_printf_i+0x10e>
 800262a:	6821      	ldr	r1, [r4, #0]
 800262c:	432e      	orrs	r6, r5
 800262e:	f021 0104 	bic.w	r1, r1, #4
 8002632:	6021      	str	r1, [r4, #0]
 8002634:	d04b      	beq.n	80026ce <_printf_i+0x1a6>
 8002636:	4616      	mov	r6, r2
 8002638:	fbb5 f1f3 	udiv	r1, r5, r3
 800263c:	fb03 5711 	mls	r7, r3, r1, r5
 8002640:	5dc7      	ldrb	r7, [r0, r7]
 8002642:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002646:	462f      	mov	r7, r5
 8002648:	42bb      	cmp	r3, r7
 800264a:	460d      	mov	r5, r1
 800264c:	d9f4      	bls.n	8002638 <_printf_i+0x110>
 800264e:	2b08      	cmp	r3, #8
 8002650:	d10b      	bne.n	800266a <_printf_i+0x142>
 8002652:	6823      	ldr	r3, [r4, #0]
 8002654:	07df      	lsls	r7, r3, #31
 8002656:	d508      	bpl.n	800266a <_printf_i+0x142>
 8002658:	6923      	ldr	r3, [r4, #16]
 800265a:	6861      	ldr	r1, [r4, #4]
 800265c:	4299      	cmp	r1, r3
 800265e:	bfde      	ittt	le
 8002660:	2330      	movle	r3, #48	@ 0x30
 8002662:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002666:	f106 36ff 	addle.w	r6, r6, #4294967295
 800266a:	1b92      	subs	r2, r2, r6
 800266c:	6122      	str	r2, [r4, #16]
 800266e:	f8cd a000 	str.w	sl, [sp]
 8002672:	464b      	mov	r3, r9
 8002674:	aa03      	add	r2, sp, #12
 8002676:	4621      	mov	r1, r4
 8002678:	4640      	mov	r0, r8
 800267a:	f7ff fee7 	bl	800244c <_printf_common>
 800267e:	3001      	adds	r0, #1
 8002680:	d14a      	bne.n	8002718 <_printf_i+0x1f0>
 8002682:	f04f 30ff 	mov.w	r0, #4294967295
 8002686:	b004      	add	sp, #16
 8002688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	f043 0320 	orr.w	r3, r3, #32
 8002692:	6023      	str	r3, [r4, #0]
 8002694:	4832      	ldr	r0, [pc, #200]	@ (8002760 <_printf_i+0x238>)
 8002696:	2778      	movs	r7, #120	@ 0x78
 8002698:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800269c:	6823      	ldr	r3, [r4, #0]
 800269e:	6831      	ldr	r1, [r6, #0]
 80026a0:	061f      	lsls	r7, r3, #24
 80026a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80026a6:	d402      	bmi.n	80026ae <_printf_i+0x186>
 80026a8:	065f      	lsls	r7, r3, #25
 80026aa:	bf48      	it	mi
 80026ac:	b2ad      	uxthmi	r5, r5
 80026ae:	6031      	str	r1, [r6, #0]
 80026b0:	07d9      	lsls	r1, r3, #31
 80026b2:	bf44      	itt	mi
 80026b4:	f043 0320 	orrmi.w	r3, r3, #32
 80026b8:	6023      	strmi	r3, [r4, #0]
 80026ba:	b11d      	cbz	r5, 80026c4 <_printf_i+0x19c>
 80026bc:	2310      	movs	r3, #16
 80026be:	e7ad      	b.n	800261c <_printf_i+0xf4>
 80026c0:	4826      	ldr	r0, [pc, #152]	@ (800275c <_printf_i+0x234>)
 80026c2:	e7e9      	b.n	8002698 <_printf_i+0x170>
 80026c4:	6823      	ldr	r3, [r4, #0]
 80026c6:	f023 0320 	bic.w	r3, r3, #32
 80026ca:	6023      	str	r3, [r4, #0]
 80026cc:	e7f6      	b.n	80026bc <_printf_i+0x194>
 80026ce:	4616      	mov	r6, r2
 80026d0:	e7bd      	b.n	800264e <_printf_i+0x126>
 80026d2:	6833      	ldr	r3, [r6, #0]
 80026d4:	6825      	ldr	r5, [r4, #0]
 80026d6:	6961      	ldr	r1, [r4, #20]
 80026d8:	1d18      	adds	r0, r3, #4
 80026da:	6030      	str	r0, [r6, #0]
 80026dc:	062e      	lsls	r6, r5, #24
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	d501      	bpl.n	80026e6 <_printf_i+0x1be>
 80026e2:	6019      	str	r1, [r3, #0]
 80026e4:	e002      	b.n	80026ec <_printf_i+0x1c4>
 80026e6:	0668      	lsls	r0, r5, #25
 80026e8:	d5fb      	bpl.n	80026e2 <_printf_i+0x1ba>
 80026ea:	8019      	strh	r1, [r3, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	6123      	str	r3, [r4, #16]
 80026f0:	4616      	mov	r6, r2
 80026f2:	e7bc      	b.n	800266e <_printf_i+0x146>
 80026f4:	6833      	ldr	r3, [r6, #0]
 80026f6:	1d1a      	adds	r2, r3, #4
 80026f8:	6032      	str	r2, [r6, #0]
 80026fa:	681e      	ldr	r6, [r3, #0]
 80026fc:	6862      	ldr	r2, [r4, #4]
 80026fe:	2100      	movs	r1, #0
 8002700:	4630      	mov	r0, r6
 8002702:	f7fd fd65 	bl	80001d0 <memchr>
 8002706:	b108      	cbz	r0, 800270c <_printf_i+0x1e4>
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	6060      	str	r0, [r4, #4]
 800270c:	6863      	ldr	r3, [r4, #4]
 800270e:	6123      	str	r3, [r4, #16]
 8002710:	2300      	movs	r3, #0
 8002712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002716:	e7aa      	b.n	800266e <_printf_i+0x146>
 8002718:	6923      	ldr	r3, [r4, #16]
 800271a:	4632      	mov	r2, r6
 800271c:	4649      	mov	r1, r9
 800271e:	4640      	mov	r0, r8
 8002720:	47d0      	blx	sl
 8002722:	3001      	adds	r0, #1
 8002724:	d0ad      	beq.n	8002682 <_printf_i+0x15a>
 8002726:	6823      	ldr	r3, [r4, #0]
 8002728:	079b      	lsls	r3, r3, #30
 800272a:	d413      	bmi.n	8002754 <_printf_i+0x22c>
 800272c:	68e0      	ldr	r0, [r4, #12]
 800272e:	9b03      	ldr	r3, [sp, #12]
 8002730:	4298      	cmp	r0, r3
 8002732:	bfb8      	it	lt
 8002734:	4618      	movlt	r0, r3
 8002736:	e7a6      	b.n	8002686 <_printf_i+0x15e>
 8002738:	2301      	movs	r3, #1
 800273a:	4632      	mov	r2, r6
 800273c:	4649      	mov	r1, r9
 800273e:	4640      	mov	r0, r8
 8002740:	47d0      	blx	sl
 8002742:	3001      	adds	r0, #1
 8002744:	d09d      	beq.n	8002682 <_printf_i+0x15a>
 8002746:	3501      	adds	r5, #1
 8002748:	68e3      	ldr	r3, [r4, #12]
 800274a:	9903      	ldr	r1, [sp, #12]
 800274c:	1a5b      	subs	r3, r3, r1
 800274e:	42ab      	cmp	r3, r5
 8002750:	dcf2      	bgt.n	8002738 <_printf_i+0x210>
 8002752:	e7eb      	b.n	800272c <_printf_i+0x204>
 8002754:	2500      	movs	r5, #0
 8002756:	f104 0619 	add.w	r6, r4, #25
 800275a:	e7f5      	b.n	8002748 <_printf_i+0x220>
 800275c:	0800495f 	.word	0x0800495f
 8002760:	08004970 	.word	0x08004970

08002764 <std>:
 8002764:	2300      	movs	r3, #0
 8002766:	b510      	push	{r4, lr}
 8002768:	4604      	mov	r4, r0
 800276a:	e9c0 3300 	strd	r3, r3, [r0]
 800276e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002772:	6083      	str	r3, [r0, #8]
 8002774:	8181      	strh	r1, [r0, #12]
 8002776:	6643      	str	r3, [r0, #100]	@ 0x64
 8002778:	81c2      	strh	r2, [r0, #14]
 800277a:	6183      	str	r3, [r0, #24]
 800277c:	4619      	mov	r1, r3
 800277e:	2208      	movs	r2, #8
 8002780:	305c      	adds	r0, #92	@ 0x5c
 8002782:	f000 f9f9 	bl	8002b78 <memset>
 8002786:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <std+0x58>)
 8002788:	6263      	str	r3, [r4, #36]	@ 0x24
 800278a:	4b0d      	ldr	r3, [pc, #52]	@ (80027c0 <std+0x5c>)
 800278c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800278e:	4b0d      	ldr	r3, [pc, #52]	@ (80027c4 <std+0x60>)
 8002790:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002792:	4b0d      	ldr	r3, [pc, #52]	@ (80027c8 <std+0x64>)
 8002794:	6323      	str	r3, [r4, #48]	@ 0x30
 8002796:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <std+0x68>)
 8002798:	6224      	str	r4, [r4, #32]
 800279a:	429c      	cmp	r4, r3
 800279c:	d006      	beq.n	80027ac <std+0x48>
 800279e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80027a2:	4294      	cmp	r4, r2
 80027a4:	d002      	beq.n	80027ac <std+0x48>
 80027a6:	33d0      	adds	r3, #208	@ 0xd0
 80027a8:	429c      	cmp	r4, r3
 80027aa:	d105      	bne.n	80027b8 <std+0x54>
 80027ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80027b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027b4:	f000 ba5c 	b.w	8002c70 <__retarget_lock_init_recursive>
 80027b8:	bd10      	pop	{r4, pc}
 80027ba:	bf00      	nop
 80027bc:	080029c9 	.word	0x080029c9
 80027c0:	080029eb 	.word	0x080029eb
 80027c4:	08002a23 	.word	0x08002a23
 80027c8:	08002a47 	.word	0x08002a47
 80027cc:	20000254 	.word	0x20000254

080027d0 <stdio_exit_handler>:
 80027d0:	4a02      	ldr	r2, [pc, #8]	@ (80027dc <stdio_exit_handler+0xc>)
 80027d2:	4903      	ldr	r1, [pc, #12]	@ (80027e0 <stdio_exit_handler+0x10>)
 80027d4:	4803      	ldr	r0, [pc, #12]	@ (80027e4 <stdio_exit_handler+0x14>)
 80027d6:	f000 b869 	b.w	80028ac <_fwalk_sglue>
 80027da:	bf00      	nop
 80027dc:	20000004 	.word	0x20000004
 80027e0:	080045a9 	.word	0x080045a9
 80027e4:	20000014 	.word	0x20000014

080027e8 <cleanup_stdio>:
 80027e8:	6841      	ldr	r1, [r0, #4]
 80027ea:	4b0c      	ldr	r3, [pc, #48]	@ (800281c <cleanup_stdio+0x34>)
 80027ec:	4299      	cmp	r1, r3
 80027ee:	b510      	push	{r4, lr}
 80027f0:	4604      	mov	r4, r0
 80027f2:	d001      	beq.n	80027f8 <cleanup_stdio+0x10>
 80027f4:	f001 fed8 	bl	80045a8 <_fflush_r>
 80027f8:	68a1      	ldr	r1, [r4, #8]
 80027fa:	4b09      	ldr	r3, [pc, #36]	@ (8002820 <cleanup_stdio+0x38>)
 80027fc:	4299      	cmp	r1, r3
 80027fe:	d002      	beq.n	8002806 <cleanup_stdio+0x1e>
 8002800:	4620      	mov	r0, r4
 8002802:	f001 fed1 	bl	80045a8 <_fflush_r>
 8002806:	68e1      	ldr	r1, [r4, #12]
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <cleanup_stdio+0x3c>)
 800280a:	4299      	cmp	r1, r3
 800280c:	d004      	beq.n	8002818 <cleanup_stdio+0x30>
 800280e:	4620      	mov	r0, r4
 8002810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002814:	f001 bec8 	b.w	80045a8 <_fflush_r>
 8002818:	bd10      	pop	{r4, pc}
 800281a:	bf00      	nop
 800281c:	20000254 	.word	0x20000254
 8002820:	200002bc 	.word	0x200002bc
 8002824:	20000324 	.word	0x20000324

08002828 <global_stdio_init.part.0>:
 8002828:	b510      	push	{r4, lr}
 800282a:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <global_stdio_init.part.0+0x30>)
 800282c:	4c0b      	ldr	r4, [pc, #44]	@ (800285c <global_stdio_init.part.0+0x34>)
 800282e:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <global_stdio_init.part.0+0x38>)
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	4620      	mov	r0, r4
 8002834:	2200      	movs	r2, #0
 8002836:	2104      	movs	r1, #4
 8002838:	f7ff ff94 	bl	8002764 <std>
 800283c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002840:	2201      	movs	r2, #1
 8002842:	2109      	movs	r1, #9
 8002844:	f7ff ff8e 	bl	8002764 <std>
 8002848:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800284c:	2202      	movs	r2, #2
 800284e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002852:	2112      	movs	r1, #18
 8002854:	f7ff bf86 	b.w	8002764 <std>
 8002858:	2000038c 	.word	0x2000038c
 800285c:	20000254 	.word	0x20000254
 8002860:	080027d1 	.word	0x080027d1

08002864 <__sfp_lock_acquire>:
 8002864:	4801      	ldr	r0, [pc, #4]	@ (800286c <__sfp_lock_acquire+0x8>)
 8002866:	f000 ba04 	b.w	8002c72 <__retarget_lock_acquire_recursive>
 800286a:	bf00      	nop
 800286c:	20000395 	.word	0x20000395

08002870 <__sfp_lock_release>:
 8002870:	4801      	ldr	r0, [pc, #4]	@ (8002878 <__sfp_lock_release+0x8>)
 8002872:	f000 b9ff 	b.w	8002c74 <__retarget_lock_release_recursive>
 8002876:	bf00      	nop
 8002878:	20000395 	.word	0x20000395

0800287c <__sinit>:
 800287c:	b510      	push	{r4, lr}
 800287e:	4604      	mov	r4, r0
 8002880:	f7ff fff0 	bl	8002864 <__sfp_lock_acquire>
 8002884:	6a23      	ldr	r3, [r4, #32]
 8002886:	b11b      	cbz	r3, 8002890 <__sinit+0x14>
 8002888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800288c:	f7ff bff0 	b.w	8002870 <__sfp_lock_release>
 8002890:	4b04      	ldr	r3, [pc, #16]	@ (80028a4 <__sinit+0x28>)
 8002892:	6223      	str	r3, [r4, #32]
 8002894:	4b04      	ldr	r3, [pc, #16]	@ (80028a8 <__sinit+0x2c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1f5      	bne.n	8002888 <__sinit+0xc>
 800289c:	f7ff ffc4 	bl	8002828 <global_stdio_init.part.0>
 80028a0:	e7f2      	b.n	8002888 <__sinit+0xc>
 80028a2:	bf00      	nop
 80028a4:	080027e9 	.word	0x080027e9
 80028a8:	2000038c 	.word	0x2000038c

080028ac <_fwalk_sglue>:
 80028ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028b0:	4607      	mov	r7, r0
 80028b2:	4688      	mov	r8, r1
 80028b4:	4614      	mov	r4, r2
 80028b6:	2600      	movs	r6, #0
 80028b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028bc:	f1b9 0901 	subs.w	r9, r9, #1
 80028c0:	d505      	bpl.n	80028ce <_fwalk_sglue+0x22>
 80028c2:	6824      	ldr	r4, [r4, #0]
 80028c4:	2c00      	cmp	r4, #0
 80028c6:	d1f7      	bne.n	80028b8 <_fwalk_sglue+0xc>
 80028c8:	4630      	mov	r0, r6
 80028ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028ce:	89ab      	ldrh	r3, [r5, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d907      	bls.n	80028e4 <_fwalk_sglue+0x38>
 80028d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028d8:	3301      	adds	r3, #1
 80028da:	d003      	beq.n	80028e4 <_fwalk_sglue+0x38>
 80028dc:	4629      	mov	r1, r5
 80028de:	4638      	mov	r0, r7
 80028e0:	47c0      	blx	r8
 80028e2:	4306      	orrs	r6, r0
 80028e4:	3568      	adds	r5, #104	@ 0x68
 80028e6:	e7e9      	b.n	80028bc <_fwalk_sglue+0x10>

080028e8 <iprintf>:
 80028e8:	b40f      	push	{r0, r1, r2, r3}
 80028ea:	b507      	push	{r0, r1, r2, lr}
 80028ec:	4906      	ldr	r1, [pc, #24]	@ (8002908 <iprintf+0x20>)
 80028ee:	ab04      	add	r3, sp, #16
 80028f0:	6808      	ldr	r0, [r1, #0]
 80028f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80028f6:	6881      	ldr	r1, [r0, #8]
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	f001 fcb9 	bl	8004270 <_vfiprintf_r>
 80028fe:	b003      	add	sp, #12
 8002900:	f85d eb04 	ldr.w	lr, [sp], #4
 8002904:	b004      	add	sp, #16
 8002906:	4770      	bx	lr
 8002908:	20000010 	.word	0x20000010

0800290c <_puts_r>:
 800290c:	6a03      	ldr	r3, [r0, #32]
 800290e:	b570      	push	{r4, r5, r6, lr}
 8002910:	6884      	ldr	r4, [r0, #8]
 8002912:	4605      	mov	r5, r0
 8002914:	460e      	mov	r6, r1
 8002916:	b90b      	cbnz	r3, 800291c <_puts_r+0x10>
 8002918:	f7ff ffb0 	bl	800287c <__sinit>
 800291c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800291e:	07db      	lsls	r3, r3, #31
 8002920:	d405      	bmi.n	800292e <_puts_r+0x22>
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	0598      	lsls	r0, r3, #22
 8002926:	d402      	bmi.n	800292e <_puts_r+0x22>
 8002928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800292a:	f000 f9a2 	bl	8002c72 <__retarget_lock_acquire_recursive>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	0719      	lsls	r1, r3, #28
 8002932:	d502      	bpl.n	800293a <_puts_r+0x2e>
 8002934:	6923      	ldr	r3, [r4, #16]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d135      	bne.n	80029a6 <_puts_r+0x9a>
 800293a:	4621      	mov	r1, r4
 800293c:	4628      	mov	r0, r5
 800293e:	f000 f8c5 	bl	8002acc <__swsetup_r>
 8002942:	b380      	cbz	r0, 80029a6 <_puts_r+0x9a>
 8002944:	f04f 35ff 	mov.w	r5, #4294967295
 8002948:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800294a:	07da      	lsls	r2, r3, #31
 800294c:	d405      	bmi.n	800295a <_puts_r+0x4e>
 800294e:	89a3      	ldrh	r3, [r4, #12]
 8002950:	059b      	lsls	r3, r3, #22
 8002952:	d402      	bmi.n	800295a <_puts_r+0x4e>
 8002954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002956:	f000 f98d 	bl	8002c74 <__retarget_lock_release_recursive>
 800295a:	4628      	mov	r0, r5
 800295c:	bd70      	pop	{r4, r5, r6, pc}
 800295e:	2b00      	cmp	r3, #0
 8002960:	da04      	bge.n	800296c <_puts_r+0x60>
 8002962:	69a2      	ldr	r2, [r4, #24]
 8002964:	429a      	cmp	r2, r3
 8002966:	dc17      	bgt.n	8002998 <_puts_r+0x8c>
 8002968:	290a      	cmp	r1, #10
 800296a:	d015      	beq.n	8002998 <_puts_r+0x8c>
 800296c:	6823      	ldr	r3, [r4, #0]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	6022      	str	r2, [r4, #0]
 8002972:	7019      	strb	r1, [r3, #0]
 8002974:	68a3      	ldr	r3, [r4, #8]
 8002976:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800297a:	3b01      	subs	r3, #1
 800297c:	60a3      	str	r3, [r4, #8]
 800297e:	2900      	cmp	r1, #0
 8002980:	d1ed      	bne.n	800295e <_puts_r+0x52>
 8002982:	2b00      	cmp	r3, #0
 8002984:	da11      	bge.n	80029aa <_puts_r+0x9e>
 8002986:	4622      	mov	r2, r4
 8002988:	210a      	movs	r1, #10
 800298a:	4628      	mov	r0, r5
 800298c:	f000 f85f 	bl	8002a4e <__swbuf_r>
 8002990:	3001      	adds	r0, #1
 8002992:	d0d7      	beq.n	8002944 <_puts_r+0x38>
 8002994:	250a      	movs	r5, #10
 8002996:	e7d7      	b.n	8002948 <_puts_r+0x3c>
 8002998:	4622      	mov	r2, r4
 800299a:	4628      	mov	r0, r5
 800299c:	f000 f857 	bl	8002a4e <__swbuf_r>
 80029a0:	3001      	adds	r0, #1
 80029a2:	d1e7      	bne.n	8002974 <_puts_r+0x68>
 80029a4:	e7ce      	b.n	8002944 <_puts_r+0x38>
 80029a6:	3e01      	subs	r6, #1
 80029a8:	e7e4      	b.n	8002974 <_puts_r+0x68>
 80029aa:	6823      	ldr	r3, [r4, #0]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	6022      	str	r2, [r4, #0]
 80029b0:	220a      	movs	r2, #10
 80029b2:	701a      	strb	r2, [r3, #0]
 80029b4:	e7ee      	b.n	8002994 <_puts_r+0x88>
	...

080029b8 <puts>:
 80029b8:	4b02      	ldr	r3, [pc, #8]	@ (80029c4 <puts+0xc>)
 80029ba:	4601      	mov	r1, r0
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	f7ff bfa5 	b.w	800290c <_puts_r>
 80029c2:	bf00      	nop
 80029c4:	20000010 	.word	0x20000010

080029c8 <__sread>:
 80029c8:	b510      	push	{r4, lr}
 80029ca:	460c      	mov	r4, r1
 80029cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80029d0:	f000 f900 	bl	8002bd4 <_read_r>
 80029d4:	2800      	cmp	r0, #0
 80029d6:	bfab      	itete	ge
 80029d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80029da:	89a3      	ldrhlt	r3, [r4, #12]
 80029dc:	181b      	addge	r3, r3, r0
 80029de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80029e2:	bfac      	ite	ge
 80029e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80029e6:	81a3      	strhlt	r3, [r4, #12]
 80029e8:	bd10      	pop	{r4, pc}

080029ea <__swrite>:
 80029ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029ee:	461f      	mov	r7, r3
 80029f0:	898b      	ldrh	r3, [r1, #12]
 80029f2:	05db      	lsls	r3, r3, #23
 80029f4:	4605      	mov	r5, r0
 80029f6:	460c      	mov	r4, r1
 80029f8:	4616      	mov	r6, r2
 80029fa:	d505      	bpl.n	8002a08 <__swrite+0x1e>
 80029fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a00:	2302      	movs	r3, #2
 8002a02:	2200      	movs	r2, #0
 8002a04:	f000 f8d4 	bl	8002bb0 <_lseek_r>
 8002a08:	89a3      	ldrh	r3, [r4, #12]
 8002a0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a12:	81a3      	strh	r3, [r4, #12]
 8002a14:	4632      	mov	r2, r6
 8002a16:	463b      	mov	r3, r7
 8002a18:	4628      	mov	r0, r5
 8002a1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002a1e:	f000 b8eb 	b.w	8002bf8 <_write_r>

08002a22 <__sseek>:
 8002a22:	b510      	push	{r4, lr}
 8002a24:	460c      	mov	r4, r1
 8002a26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a2a:	f000 f8c1 	bl	8002bb0 <_lseek_r>
 8002a2e:	1c43      	adds	r3, r0, #1
 8002a30:	89a3      	ldrh	r3, [r4, #12]
 8002a32:	bf15      	itete	ne
 8002a34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002a36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002a3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002a3e:	81a3      	strheq	r3, [r4, #12]
 8002a40:	bf18      	it	ne
 8002a42:	81a3      	strhne	r3, [r4, #12]
 8002a44:	bd10      	pop	{r4, pc}

08002a46 <__sclose>:
 8002a46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002a4a:	f000 b8a1 	b.w	8002b90 <_close_r>

08002a4e <__swbuf_r>:
 8002a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a50:	460e      	mov	r6, r1
 8002a52:	4614      	mov	r4, r2
 8002a54:	4605      	mov	r5, r0
 8002a56:	b118      	cbz	r0, 8002a60 <__swbuf_r+0x12>
 8002a58:	6a03      	ldr	r3, [r0, #32]
 8002a5a:	b90b      	cbnz	r3, 8002a60 <__swbuf_r+0x12>
 8002a5c:	f7ff ff0e 	bl	800287c <__sinit>
 8002a60:	69a3      	ldr	r3, [r4, #24]
 8002a62:	60a3      	str	r3, [r4, #8]
 8002a64:	89a3      	ldrh	r3, [r4, #12]
 8002a66:	071a      	lsls	r2, r3, #28
 8002a68:	d501      	bpl.n	8002a6e <__swbuf_r+0x20>
 8002a6a:	6923      	ldr	r3, [r4, #16]
 8002a6c:	b943      	cbnz	r3, 8002a80 <__swbuf_r+0x32>
 8002a6e:	4621      	mov	r1, r4
 8002a70:	4628      	mov	r0, r5
 8002a72:	f000 f82b 	bl	8002acc <__swsetup_r>
 8002a76:	b118      	cbz	r0, 8002a80 <__swbuf_r+0x32>
 8002a78:	f04f 37ff 	mov.w	r7, #4294967295
 8002a7c:	4638      	mov	r0, r7
 8002a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a80:	6823      	ldr	r3, [r4, #0]
 8002a82:	6922      	ldr	r2, [r4, #16]
 8002a84:	1a98      	subs	r0, r3, r2
 8002a86:	6963      	ldr	r3, [r4, #20]
 8002a88:	b2f6      	uxtb	r6, r6
 8002a8a:	4283      	cmp	r3, r0
 8002a8c:	4637      	mov	r7, r6
 8002a8e:	dc05      	bgt.n	8002a9c <__swbuf_r+0x4e>
 8002a90:	4621      	mov	r1, r4
 8002a92:	4628      	mov	r0, r5
 8002a94:	f001 fd88 	bl	80045a8 <_fflush_r>
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	d1ed      	bne.n	8002a78 <__swbuf_r+0x2a>
 8002a9c:	68a3      	ldr	r3, [r4, #8]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	60a3      	str	r3, [r4, #8]
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	6022      	str	r2, [r4, #0]
 8002aa8:	701e      	strb	r6, [r3, #0]
 8002aaa:	6962      	ldr	r2, [r4, #20]
 8002aac:	1c43      	adds	r3, r0, #1
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d004      	beq.n	8002abc <__swbuf_r+0x6e>
 8002ab2:	89a3      	ldrh	r3, [r4, #12]
 8002ab4:	07db      	lsls	r3, r3, #31
 8002ab6:	d5e1      	bpl.n	8002a7c <__swbuf_r+0x2e>
 8002ab8:	2e0a      	cmp	r6, #10
 8002aba:	d1df      	bne.n	8002a7c <__swbuf_r+0x2e>
 8002abc:	4621      	mov	r1, r4
 8002abe:	4628      	mov	r0, r5
 8002ac0:	f001 fd72 	bl	80045a8 <_fflush_r>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d0d9      	beq.n	8002a7c <__swbuf_r+0x2e>
 8002ac8:	e7d6      	b.n	8002a78 <__swbuf_r+0x2a>
	...

08002acc <__swsetup_r>:
 8002acc:	b538      	push	{r3, r4, r5, lr}
 8002ace:	4b29      	ldr	r3, [pc, #164]	@ (8002b74 <__swsetup_r+0xa8>)
 8002ad0:	4605      	mov	r5, r0
 8002ad2:	6818      	ldr	r0, [r3, #0]
 8002ad4:	460c      	mov	r4, r1
 8002ad6:	b118      	cbz	r0, 8002ae0 <__swsetup_r+0x14>
 8002ad8:	6a03      	ldr	r3, [r0, #32]
 8002ada:	b90b      	cbnz	r3, 8002ae0 <__swsetup_r+0x14>
 8002adc:	f7ff fece 	bl	800287c <__sinit>
 8002ae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ae4:	0719      	lsls	r1, r3, #28
 8002ae6:	d422      	bmi.n	8002b2e <__swsetup_r+0x62>
 8002ae8:	06da      	lsls	r2, r3, #27
 8002aea:	d407      	bmi.n	8002afc <__swsetup_r+0x30>
 8002aec:	2209      	movs	r2, #9
 8002aee:	602a      	str	r2, [r5, #0]
 8002af0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002af4:	81a3      	strh	r3, [r4, #12]
 8002af6:	f04f 30ff 	mov.w	r0, #4294967295
 8002afa:	e033      	b.n	8002b64 <__swsetup_r+0x98>
 8002afc:	0758      	lsls	r0, r3, #29
 8002afe:	d512      	bpl.n	8002b26 <__swsetup_r+0x5a>
 8002b00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002b02:	b141      	cbz	r1, 8002b16 <__swsetup_r+0x4a>
 8002b04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002b08:	4299      	cmp	r1, r3
 8002b0a:	d002      	beq.n	8002b12 <__swsetup_r+0x46>
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	f000 ff0b 	bl	8003928 <_free_r>
 8002b12:	2300      	movs	r3, #0
 8002b14:	6363      	str	r3, [r4, #52]	@ 0x34
 8002b16:	89a3      	ldrh	r3, [r4, #12]
 8002b18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002b1c:	81a3      	strh	r3, [r4, #12]
 8002b1e:	2300      	movs	r3, #0
 8002b20:	6063      	str	r3, [r4, #4]
 8002b22:	6923      	ldr	r3, [r4, #16]
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	89a3      	ldrh	r3, [r4, #12]
 8002b28:	f043 0308 	orr.w	r3, r3, #8
 8002b2c:	81a3      	strh	r3, [r4, #12]
 8002b2e:	6923      	ldr	r3, [r4, #16]
 8002b30:	b94b      	cbnz	r3, 8002b46 <__swsetup_r+0x7a>
 8002b32:	89a3      	ldrh	r3, [r4, #12]
 8002b34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002b38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b3c:	d003      	beq.n	8002b46 <__swsetup_r+0x7a>
 8002b3e:	4621      	mov	r1, r4
 8002b40:	4628      	mov	r0, r5
 8002b42:	f001 fd7f 	bl	8004644 <__smakebuf_r>
 8002b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b4a:	f013 0201 	ands.w	r2, r3, #1
 8002b4e:	d00a      	beq.n	8002b66 <__swsetup_r+0x9a>
 8002b50:	2200      	movs	r2, #0
 8002b52:	60a2      	str	r2, [r4, #8]
 8002b54:	6962      	ldr	r2, [r4, #20]
 8002b56:	4252      	negs	r2, r2
 8002b58:	61a2      	str	r2, [r4, #24]
 8002b5a:	6922      	ldr	r2, [r4, #16]
 8002b5c:	b942      	cbnz	r2, 8002b70 <__swsetup_r+0xa4>
 8002b5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002b62:	d1c5      	bne.n	8002af0 <__swsetup_r+0x24>
 8002b64:	bd38      	pop	{r3, r4, r5, pc}
 8002b66:	0799      	lsls	r1, r3, #30
 8002b68:	bf58      	it	pl
 8002b6a:	6962      	ldrpl	r2, [r4, #20]
 8002b6c:	60a2      	str	r2, [r4, #8]
 8002b6e:	e7f4      	b.n	8002b5a <__swsetup_r+0x8e>
 8002b70:	2000      	movs	r0, #0
 8002b72:	e7f7      	b.n	8002b64 <__swsetup_r+0x98>
 8002b74:	20000010 	.word	0x20000010

08002b78 <memset>:
 8002b78:	4402      	add	r2, r0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d100      	bne.n	8002b82 <memset+0xa>
 8002b80:	4770      	bx	lr
 8002b82:	f803 1b01 	strb.w	r1, [r3], #1
 8002b86:	e7f9      	b.n	8002b7c <memset+0x4>

08002b88 <_localeconv_r>:
 8002b88:	4800      	ldr	r0, [pc, #0]	@ (8002b8c <_localeconv_r+0x4>)
 8002b8a:	4770      	bx	lr
 8002b8c:	20000150 	.word	0x20000150

08002b90 <_close_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4d06      	ldr	r5, [pc, #24]	@ (8002bac <_close_r+0x1c>)
 8002b94:	2300      	movs	r3, #0
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	602b      	str	r3, [r5, #0]
 8002b9c:	f7fe ffc0 	bl	8001b20 <_close>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d102      	bne.n	8002baa <_close_r+0x1a>
 8002ba4:	682b      	ldr	r3, [r5, #0]
 8002ba6:	b103      	cbz	r3, 8002baa <_close_r+0x1a>
 8002ba8:	6023      	str	r3, [r4, #0]
 8002baa:	bd38      	pop	{r3, r4, r5, pc}
 8002bac:	20000390 	.word	0x20000390

08002bb0 <_lseek_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4d07      	ldr	r5, [pc, #28]	@ (8002bd0 <_lseek_r+0x20>)
 8002bb4:	4604      	mov	r4, r0
 8002bb6:	4608      	mov	r0, r1
 8002bb8:	4611      	mov	r1, r2
 8002bba:	2200      	movs	r2, #0
 8002bbc:	602a      	str	r2, [r5, #0]
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f7fe ffd5 	bl	8001b6e <_lseek>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d102      	bne.n	8002bce <_lseek_r+0x1e>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	b103      	cbz	r3, 8002bce <_lseek_r+0x1e>
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
 8002bd0:	20000390 	.word	0x20000390

08002bd4 <_read_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	4d07      	ldr	r5, [pc, #28]	@ (8002bf4 <_read_r+0x20>)
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4608      	mov	r0, r1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	2200      	movs	r2, #0
 8002be0:	602a      	str	r2, [r5, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7fe ff63 	bl	8001aae <_read>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_read_r+0x1e>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_read_r+0x1e>
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	20000390 	.word	0x20000390

08002bf8 <_write_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4d07      	ldr	r5, [pc, #28]	@ (8002c18 <_write_r+0x20>)
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	4608      	mov	r0, r1
 8002c00:	4611      	mov	r1, r2
 8002c02:	2200      	movs	r2, #0
 8002c04:	602a      	str	r2, [r5, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f7fe ff6e 	bl	8001ae8 <_write>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d102      	bne.n	8002c16 <_write_r+0x1e>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	b103      	cbz	r3, 8002c16 <_write_r+0x1e>
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	20000390 	.word	0x20000390

08002c1c <__errno>:
 8002c1c:	4b01      	ldr	r3, [pc, #4]	@ (8002c24 <__errno+0x8>)
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	20000010 	.word	0x20000010

08002c28 <__libc_init_array>:
 8002c28:	b570      	push	{r4, r5, r6, lr}
 8002c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8002c60 <__libc_init_array+0x38>)
 8002c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8002c64 <__libc_init_array+0x3c>)
 8002c2e:	1b64      	subs	r4, r4, r5
 8002c30:	10a4      	asrs	r4, r4, #2
 8002c32:	2600      	movs	r6, #0
 8002c34:	42a6      	cmp	r6, r4
 8002c36:	d109      	bne.n	8002c4c <__libc_init_array+0x24>
 8002c38:	4d0b      	ldr	r5, [pc, #44]	@ (8002c68 <__libc_init_array+0x40>)
 8002c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8002c6c <__libc_init_array+0x44>)
 8002c3c:	f001 fe2e 	bl	800489c <_init>
 8002c40:	1b64      	subs	r4, r4, r5
 8002c42:	10a4      	asrs	r4, r4, #2
 8002c44:	2600      	movs	r6, #0
 8002c46:	42a6      	cmp	r6, r4
 8002c48:	d105      	bne.n	8002c56 <__libc_init_array+0x2e>
 8002c4a:	bd70      	pop	{r4, r5, r6, pc}
 8002c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c50:	4798      	blx	r3
 8002c52:	3601      	adds	r6, #1
 8002c54:	e7ee      	b.n	8002c34 <__libc_init_array+0xc>
 8002c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c5a:	4798      	blx	r3
 8002c5c:	3601      	adds	r6, #1
 8002c5e:	e7f2      	b.n	8002c46 <__libc_init_array+0x1e>
 8002c60:	08004ccc 	.word	0x08004ccc
 8002c64:	08004ccc 	.word	0x08004ccc
 8002c68:	08004ccc 	.word	0x08004ccc
 8002c6c:	08004cd0 	.word	0x08004cd0

08002c70 <__retarget_lock_init_recursive>:
 8002c70:	4770      	bx	lr

08002c72 <__retarget_lock_acquire_recursive>:
 8002c72:	4770      	bx	lr

08002c74 <__retarget_lock_release_recursive>:
 8002c74:	4770      	bx	lr

08002c76 <quorem>:
 8002c76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7a:	6903      	ldr	r3, [r0, #16]
 8002c7c:	690c      	ldr	r4, [r1, #16]
 8002c7e:	42a3      	cmp	r3, r4
 8002c80:	4607      	mov	r7, r0
 8002c82:	db7e      	blt.n	8002d82 <quorem+0x10c>
 8002c84:	3c01      	subs	r4, #1
 8002c86:	f101 0814 	add.w	r8, r1, #20
 8002c8a:	00a3      	lsls	r3, r4, #2
 8002c8c:	f100 0514 	add.w	r5, r0, #20
 8002c90:	9300      	str	r3, [sp, #0]
 8002c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002c96:	9301      	str	r3, [sp, #4]
 8002c98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002ca8:	fbb2 f6f3 	udiv	r6, r2, r3
 8002cac:	d32e      	bcc.n	8002d0c <quorem+0x96>
 8002cae:	f04f 0a00 	mov.w	sl, #0
 8002cb2:	46c4      	mov	ip, r8
 8002cb4:	46ae      	mov	lr, r5
 8002cb6:	46d3      	mov	fp, sl
 8002cb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8002cbc:	b298      	uxth	r0, r3
 8002cbe:	fb06 a000 	mla	r0, r6, r0, sl
 8002cc2:	0c02      	lsrs	r2, r0, #16
 8002cc4:	0c1b      	lsrs	r3, r3, #16
 8002cc6:	fb06 2303 	mla	r3, r6, r3, r2
 8002cca:	f8de 2000 	ldr.w	r2, [lr]
 8002cce:	b280      	uxth	r0, r0
 8002cd0:	b292      	uxth	r2, r2
 8002cd2:	1a12      	subs	r2, r2, r0
 8002cd4:	445a      	add	r2, fp
 8002cd6:	f8de 0000 	ldr.w	r0, [lr]
 8002cda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002ce4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002cee:	45e1      	cmp	r9, ip
 8002cf0:	f84e 2b04 	str.w	r2, [lr], #4
 8002cf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002cf8:	d2de      	bcs.n	8002cb8 <quorem+0x42>
 8002cfa:	9b00      	ldr	r3, [sp, #0]
 8002cfc:	58eb      	ldr	r3, [r5, r3]
 8002cfe:	b92b      	cbnz	r3, 8002d0c <quorem+0x96>
 8002d00:	9b01      	ldr	r3, [sp, #4]
 8002d02:	3b04      	subs	r3, #4
 8002d04:	429d      	cmp	r5, r3
 8002d06:	461a      	mov	r2, r3
 8002d08:	d32f      	bcc.n	8002d6a <quorem+0xf4>
 8002d0a:	613c      	str	r4, [r7, #16]
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	f001 f97d 	bl	800400c <__mcmp>
 8002d12:	2800      	cmp	r0, #0
 8002d14:	db25      	blt.n	8002d62 <quorem+0xec>
 8002d16:	4629      	mov	r1, r5
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8002d1e:	f8d1 c000 	ldr.w	ip, [r1]
 8002d22:	fa1f fe82 	uxth.w	lr, r2
 8002d26:	fa1f f38c 	uxth.w	r3, ip
 8002d2a:	eba3 030e 	sub.w	r3, r3, lr
 8002d2e:	4403      	add	r3, r0
 8002d30:	0c12      	lsrs	r2, r2, #16
 8002d32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002d36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002d40:	45c1      	cmp	r9, r8
 8002d42:	f841 3b04 	str.w	r3, [r1], #4
 8002d46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002d4a:	d2e6      	bcs.n	8002d1a <quorem+0xa4>
 8002d4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002d50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002d54:	b922      	cbnz	r2, 8002d60 <quorem+0xea>
 8002d56:	3b04      	subs	r3, #4
 8002d58:	429d      	cmp	r5, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	d30b      	bcc.n	8002d76 <quorem+0x100>
 8002d5e:	613c      	str	r4, [r7, #16]
 8002d60:	3601      	adds	r6, #1
 8002d62:	4630      	mov	r0, r6
 8002d64:	b003      	add	sp, #12
 8002d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	3b04      	subs	r3, #4
 8002d6e:	2a00      	cmp	r2, #0
 8002d70:	d1cb      	bne.n	8002d0a <quorem+0x94>
 8002d72:	3c01      	subs	r4, #1
 8002d74:	e7c6      	b.n	8002d04 <quorem+0x8e>
 8002d76:	6812      	ldr	r2, [r2, #0]
 8002d78:	3b04      	subs	r3, #4
 8002d7a:	2a00      	cmp	r2, #0
 8002d7c:	d1ef      	bne.n	8002d5e <quorem+0xe8>
 8002d7e:	3c01      	subs	r4, #1
 8002d80:	e7ea      	b.n	8002d58 <quorem+0xe2>
 8002d82:	2000      	movs	r0, #0
 8002d84:	e7ee      	b.n	8002d64 <quorem+0xee>
	...

08002d88 <_dtoa_r>:
 8002d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d8c:	69c7      	ldr	r7, [r0, #28]
 8002d8e:	b097      	sub	sp, #92	@ 0x5c
 8002d90:	ed8d 0b04 	vstr	d0, [sp, #16]
 8002d94:	ec55 4b10 	vmov	r4, r5, d0
 8002d98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8002d9a:	9107      	str	r1, [sp, #28]
 8002d9c:	4681      	mov	r9, r0
 8002d9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8002da0:	9311      	str	r3, [sp, #68]	@ 0x44
 8002da2:	b97f      	cbnz	r7, 8002dc4 <_dtoa_r+0x3c>
 8002da4:	2010      	movs	r0, #16
 8002da6:	f000 fe09 	bl	80039bc <malloc>
 8002daa:	4602      	mov	r2, r0
 8002dac:	f8c9 001c 	str.w	r0, [r9, #28]
 8002db0:	b920      	cbnz	r0, 8002dbc <_dtoa_r+0x34>
 8002db2:	4ba9      	ldr	r3, [pc, #676]	@ (8003058 <_dtoa_r+0x2d0>)
 8002db4:	21ef      	movs	r1, #239	@ 0xef
 8002db6:	48a9      	ldr	r0, [pc, #676]	@ (800305c <_dtoa_r+0x2d4>)
 8002db8:	f001 fcc0 	bl	800473c <__assert_func>
 8002dbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002dc0:	6007      	str	r7, [r0, #0]
 8002dc2:	60c7      	str	r7, [r0, #12]
 8002dc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002dc8:	6819      	ldr	r1, [r3, #0]
 8002dca:	b159      	cbz	r1, 8002de4 <_dtoa_r+0x5c>
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	604a      	str	r2, [r1, #4]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	4093      	lsls	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]
 8002dd6:	4648      	mov	r0, r9
 8002dd8:	f000 fee6 	bl	8003ba8 <_Bfree>
 8002ddc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	1e2b      	subs	r3, r5, #0
 8002de6:	bfb9      	ittee	lt
 8002de8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002dec:	9305      	strlt	r3, [sp, #20]
 8002dee:	2300      	movge	r3, #0
 8002df0:	6033      	strge	r3, [r6, #0]
 8002df2:	9f05      	ldr	r7, [sp, #20]
 8002df4:	4b9a      	ldr	r3, [pc, #616]	@ (8003060 <_dtoa_r+0x2d8>)
 8002df6:	bfbc      	itt	lt
 8002df8:	2201      	movlt	r2, #1
 8002dfa:	6032      	strlt	r2, [r6, #0]
 8002dfc:	43bb      	bics	r3, r7
 8002dfe:	d112      	bne.n	8002e26 <_dtoa_r+0x9e>
 8002e00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002e02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002e0c:	4323      	orrs	r3, r4
 8002e0e:	f000 855a 	beq.w	80038c6 <_dtoa_r+0xb3e>
 8002e12:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002e14:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8003074 <_dtoa_r+0x2ec>
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 855c 	beq.w	80038d6 <_dtoa_r+0xb4e>
 8002e1e:	f10a 0303 	add.w	r3, sl, #3
 8002e22:	f000 bd56 	b.w	80038d2 <_dtoa_r+0xb4a>
 8002e26:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	ec51 0b17 	vmov	r0, r1, d7
 8002e30:	2300      	movs	r3, #0
 8002e32:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002e36:	f7fd fe47 	bl	8000ac8 <__aeabi_dcmpeq>
 8002e3a:	4680      	mov	r8, r0
 8002e3c:	b158      	cbz	r0, 8002e56 <_dtoa_r+0xce>
 8002e3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002e40:	2301      	movs	r3, #1
 8002e42:	6013      	str	r3, [r2, #0]
 8002e44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002e46:	b113      	cbz	r3, 8002e4e <_dtoa_r+0xc6>
 8002e48:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8002e4a:	4b86      	ldr	r3, [pc, #536]	@ (8003064 <_dtoa_r+0x2dc>)
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8003078 <_dtoa_r+0x2f0>
 8002e52:	f000 bd40 	b.w	80038d6 <_dtoa_r+0xb4e>
 8002e56:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8002e5a:	aa14      	add	r2, sp, #80	@ 0x50
 8002e5c:	a915      	add	r1, sp, #84	@ 0x54
 8002e5e:	4648      	mov	r0, r9
 8002e60:	f001 f984 	bl	800416c <__d2b>
 8002e64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002e68:	9002      	str	r0, [sp, #8]
 8002e6a:	2e00      	cmp	r6, #0
 8002e6c:	d078      	beq.n	8002f60 <_dtoa_r+0x1d8>
 8002e6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8002e70:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8002e74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002e7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002e80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002e84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002e88:	4619      	mov	r1, r3
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4b76      	ldr	r3, [pc, #472]	@ (8003068 <_dtoa_r+0x2e0>)
 8002e8e:	f7fd f9fb 	bl	8000288 <__aeabi_dsub>
 8002e92:	a36b      	add	r3, pc, #428	@ (adr r3, 8003040 <_dtoa_r+0x2b8>)
 8002e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e98:	f7fd fbae 	bl	80005f8 <__aeabi_dmul>
 8002e9c:	a36a      	add	r3, pc, #424	@ (adr r3, 8003048 <_dtoa_r+0x2c0>)
 8002e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea2:	f7fd f9f3 	bl	800028c <__adddf3>
 8002ea6:	4604      	mov	r4, r0
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	460d      	mov	r5, r1
 8002eac:	f7fd fb3a 	bl	8000524 <__aeabi_i2d>
 8002eb0:	a367      	add	r3, pc, #412	@ (adr r3, 8003050 <_dtoa_r+0x2c8>)
 8002eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb6:	f7fd fb9f 	bl	80005f8 <__aeabi_dmul>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	f7fd f9e3 	bl	800028c <__adddf3>
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	460d      	mov	r5, r1
 8002eca:	f7fd fe45 	bl	8000b58 <__aeabi_d2iz>
 8002ece:	2200      	movs	r2, #0
 8002ed0:	4607      	mov	r7, r0
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	4620      	mov	r0, r4
 8002ed6:	4629      	mov	r1, r5
 8002ed8:	f7fd fe00 	bl	8000adc <__aeabi_dcmplt>
 8002edc:	b140      	cbz	r0, 8002ef0 <_dtoa_r+0x168>
 8002ede:	4638      	mov	r0, r7
 8002ee0:	f7fd fb20 	bl	8000524 <__aeabi_i2d>
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	462b      	mov	r3, r5
 8002ee8:	f7fd fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 8002eec:	b900      	cbnz	r0, 8002ef0 <_dtoa_r+0x168>
 8002eee:	3f01      	subs	r7, #1
 8002ef0:	2f16      	cmp	r7, #22
 8002ef2:	d852      	bhi.n	8002f9a <_dtoa_r+0x212>
 8002ef4:	4b5d      	ldr	r3, [pc, #372]	@ (800306c <_dtoa_r+0x2e4>)
 8002ef6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002f02:	f7fd fdeb 	bl	8000adc <__aeabi_dcmplt>
 8002f06:	2800      	cmp	r0, #0
 8002f08:	d049      	beq.n	8002f9e <_dtoa_r+0x216>
 8002f0a:	3f01      	subs	r7, #1
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9310      	str	r3, [sp, #64]	@ 0x40
 8002f10:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002f12:	1b9b      	subs	r3, r3, r6
 8002f14:	1e5a      	subs	r2, r3, #1
 8002f16:	bf45      	ittet	mi
 8002f18:	f1c3 0301 	rsbmi	r3, r3, #1
 8002f1c:	9300      	strmi	r3, [sp, #0]
 8002f1e:	2300      	movpl	r3, #0
 8002f20:	2300      	movmi	r3, #0
 8002f22:	9206      	str	r2, [sp, #24]
 8002f24:	bf54      	ite	pl
 8002f26:	9300      	strpl	r3, [sp, #0]
 8002f28:	9306      	strmi	r3, [sp, #24]
 8002f2a:	2f00      	cmp	r7, #0
 8002f2c:	db39      	blt.n	8002fa2 <_dtoa_r+0x21a>
 8002f2e:	9b06      	ldr	r3, [sp, #24]
 8002f30:	970d      	str	r7, [sp, #52]	@ 0x34
 8002f32:	443b      	add	r3, r7
 8002f34:	9306      	str	r3, [sp, #24]
 8002f36:	2300      	movs	r3, #0
 8002f38:	9308      	str	r3, [sp, #32]
 8002f3a:	9b07      	ldr	r3, [sp, #28]
 8002f3c:	2b09      	cmp	r3, #9
 8002f3e:	d863      	bhi.n	8003008 <_dtoa_r+0x280>
 8002f40:	2b05      	cmp	r3, #5
 8002f42:	bfc4      	itt	gt
 8002f44:	3b04      	subgt	r3, #4
 8002f46:	9307      	strgt	r3, [sp, #28]
 8002f48:	9b07      	ldr	r3, [sp, #28]
 8002f4a:	f1a3 0302 	sub.w	r3, r3, #2
 8002f4e:	bfcc      	ite	gt
 8002f50:	2400      	movgt	r4, #0
 8002f52:	2401      	movle	r4, #1
 8002f54:	2b03      	cmp	r3, #3
 8002f56:	d863      	bhi.n	8003020 <_dtoa_r+0x298>
 8002f58:	e8df f003 	tbb	[pc, r3]
 8002f5c:	2b375452 	.word	0x2b375452
 8002f60:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8002f64:	441e      	add	r6, r3
 8002f66:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002f6a:	2b20      	cmp	r3, #32
 8002f6c:	bfc1      	itttt	gt
 8002f6e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002f72:	409f      	lslgt	r7, r3
 8002f74:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002f78:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002f7c:	bfd6      	itet	le
 8002f7e:	f1c3 0320 	rsble	r3, r3, #32
 8002f82:	ea47 0003 	orrgt.w	r0, r7, r3
 8002f86:	fa04 f003 	lslle.w	r0, r4, r3
 8002f8a:	f7fd fabb 	bl	8000504 <__aeabi_ui2d>
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002f94:	3e01      	subs	r6, #1
 8002f96:	9212      	str	r2, [sp, #72]	@ 0x48
 8002f98:	e776      	b.n	8002e88 <_dtoa_r+0x100>
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e7b7      	b.n	8002f0e <_dtoa_r+0x186>
 8002f9e:	9010      	str	r0, [sp, #64]	@ 0x40
 8002fa0:	e7b6      	b.n	8002f10 <_dtoa_r+0x188>
 8002fa2:	9b00      	ldr	r3, [sp, #0]
 8002fa4:	1bdb      	subs	r3, r3, r7
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	427b      	negs	r3, r7
 8002faa:	9308      	str	r3, [sp, #32]
 8002fac:	2300      	movs	r3, #0
 8002fae:	930d      	str	r3, [sp, #52]	@ 0x34
 8002fb0:	e7c3      	b.n	8002f3a <_dtoa_r+0x1b2>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fb6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002fb8:	eb07 0b03 	add.w	fp, r7, r3
 8002fbc:	f10b 0301 	add.w	r3, fp, #1
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	9303      	str	r3, [sp, #12]
 8002fc4:	bfb8      	it	lt
 8002fc6:	2301      	movlt	r3, #1
 8002fc8:	e006      	b.n	8002fd8 <_dtoa_r+0x250>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8002fce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	dd28      	ble.n	8003026 <_dtoa_r+0x29e>
 8002fd4:	469b      	mov	fp, r3
 8002fd6:	9303      	str	r3, [sp, #12]
 8002fd8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8002fdc:	2100      	movs	r1, #0
 8002fde:	2204      	movs	r2, #4
 8002fe0:	f102 0514 	add.w	r5, r2, #20
 8002fe4:	429d      	cmp	r5, r3
 8002fe6:	d926      	bls.n	8003036 <_dtoa_r+0x2ae>
 8002fe8:	6041      	str	r1, [r0, #4]
 8002fea:	4648      	mov	r0, r9
 8002fec:	f000 fd9c 	bl	8003b28 <_Balloc>
 8002ff0:	4682      	mov	sl, r0
 8002ff2:	2800      	cmp	r0, #0
 8002ff4:	d142      	bne.n	800307c <_dtoa_r+0x2f4>
 8002ff6:	4b1e      	ldr	r3, [pc, #120]	@ (8003070 <_dtoa_r+0x2e8>)
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	f240 11af 	movw	r1, #431	@ 0x1af
 8002ffe:	e6da      	b.n	8002db6 <_dtoa_r+0x2e>
 8003000:	2300      	movs	r3, #0
 8003002:	e7e3      	b.n	8002fcc <_dtoa_r+0x244>
 8003004:	2300      	movs	r3, #0
 8003006:	e7d5      	b.n	8002fb4 <_dtoa_r+0x22c>
 8003008:	2401      	movs	r4, #1
 800300a:	2300      	movs	r3, #0
 800300c:	9307      	str	r3, [sp, #28]
 800300e:	9409      	str	r4, [sp, #36]	@ 0x24
 8003010:	f04f 3bff 	mov.w	fp, #4294967295
 8003014:	2200      	movs	r2, #0
 8003016:	f8cd b00c 	str.w	fp, [sp, #12]
 800301a:	2312      	movs	r3, #18
 800301c:	920c      	str	r2, [sp, #48]	@ 0x30
 800301e:	e7db      	b.n	8002fd8 <_dtoa_r+0x250>
 8003020:	2301      	movs	r3, #1
 8003022:	9309      	str	r3, [sp, #36]	@ 0x24
 8003024:	e7f4      	b.n	8003010 <_dtoa_r+0x288>
 8003026:	f04f 0b01 	mov.w	fp, #1
 800302a:	f8cd b00c 	str.w	fp, [sp, #12]
 800302e:	465b      	mov	r3, fp
 8003030:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8003034:	e7d0      	b.n	8002fd8 <_dtoa_r+0x250>
 8003036:	3101      	adds	r1, #1
 8003038:	0052      	lsls	r2, r2, #1
 800303a:	e7d1      	b.n	8002fe0 <_dtoa_r+0x258>
 800303c:	f3af 8000 	nop.w
 8003040:	636f4361 	.word	0x636f4361
 8003044:	3fd287a7 	.word	0x3fd287a7
 8003048:	8b60c8b3 	.word	0x8b60c8b3
 800304c:	3fc68a28 	.word	0x3fc68a28
 8003050:	509f79fb 	.word	0x509f79fb
 8003054:	3fd34413 	.word	0x3fd34413
 8003058:	0800498e 	.word	0x0800498e
 800305c:	080049a5 	.word	0x080049a5
 8003060:	7ff00000 	.word	0x7ff00000
 8003064:	0800495e 	.word	0x0800495e
 8003068:	3ff80000 	.word	0x3ff80000
 800306c:	08004af8 	.word	0x08004af8
 8003070:	080049fd 	.word	0x080049fd
 8003074:	0800498a 	.word	0x0800498a
 8003078:	0800495d 	.word	0x0800495d
 800307c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003080:	6018      	str	r0, [r3, #0]
 8003082:	9b03      	ldr	r3, [sp, #12]
 8003084:	2b0e      	cmp	r3, #14
 8003086:	f200 80a1 	bhi.w	80031cc <_dtoa_r+0x444>
 800308a:	2c00      	cmp	r4, #0
 800308c:	f000 809e 	beq.w	80031cc <_dtoa_r+0x444>
 8003090:	2f00      	cmp	r7, #0
 8003092:	dd33      	ble.n	80030fc <_dtoa_r+0x374>
 8003094:	4b9c      	ldr	r3, [pc, #624]	@ (8003308 <_dtoa_r+0x580>)
 8003096:	f007 020f 	and.w	r2, r7, #15
 800309a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800309e:	ed93 7b00 	vldr	d7, [r3]
 80030a2:	05f8      	lsls	r0, r7, #23
 80030a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80030a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80030ac:	d516      	bpl.n	80030dc <_dtoa_r+0x354>
 80030ae:	4b97      	ldr	r3, [pc, #604]	@ (800330c <_dtoa_r+0x584>)
 80030b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80030b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80030b8:	f7fd fbc8 	bl	800084c <__aeabi_ddiv>
 80030bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030c0:	f004 040f 	and.w	r4, r4, #15
 80030c4:	2603      	movs	r6, #3
 80030c6:	4d91      	ldr	r5, [pc, #580]	@ (800330c <_dtoa_r+0x584>)
 80030c8:	b954      	cbnz	r4, 80030e0 <_dtoa_r+0x358>
 80030ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80030ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80030d2:	f7fd fbbb 	bl	800084c <__aeabi_ddiv>
 80030d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80030da:	e028      	b.n	800312e <_dtoa_r+0x3a6>
 80030dc:	2602      	movs	r6, #2
 80030de:	e7f2      	b.n	80030c6 <_dtoa_r+0x33e>
 80030e0:	07e1      	lsls	r1, r4, #31
 80030e2:	d508      	bpl.n	80030f6 <_dtoa_r+0x36e>
 80030e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80030e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80030ec:	f7fd fa84 	bl	80005f8 <__aeabi_dmul>
 80030f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80030f4:	3601      	adds	r6, #1
 80030f6:	1064      	asrs	r4, r4, #1
 80030f8:	3508      	adds	r5, #8
 80030fa:	e7e5      	b.n	80030c8 <_dtoa_r+0x340>
 80030fc:	f000 80af 	beq.w	800325e <_dtoa_r+0x4d6>
 8003100:	427c      	negs	r4, r7
 8003102:	4b81      	ldr	r3, [pc, #516]	@ (8003308 <_dtoa_r+0x580>)
 8003104:	4d81      	ldr	r5, [pc, #516]	@ (800330c <_dtoa_r+0x584>)
 8003106:	f004 020f 	and.w	r2, r4, #15
 800310a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003116:	f7fd fa6f 	bl	80005f8 <__aeabi_dmul>
 800311a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800311e:	1124      	asrs	r4, r4, #4
 8003120:	2300      	movs	r3, #0
 8003122:	2602      	movs	r6, #2
 8003124:	2c00      	cmp	r4, #0
 8003126:	f040 808f 	bne.w	8003248 <_dtoa_r+0x4c0>
 800312a:	2b00      	cmp	r3, #0
 800312c:	d1d3      	bne.n	80030d6 <_dtoa_r+0x34e>
 800312e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003130:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	f000 8094 	beq.w	8003262 <_dtoa_r+0x4da>
 800313a:	4b75      	ldr	r3, [pc, #468]	@ (8003310 <_dtoa_r+0x588>)
 800313c:	2200      	movs	r2, #0
 800313e:	4620      	mov	r0, r4
 8003140:	4629      	mov	r1, r5
 8003142:	f7fd fccb 	bl	8000adc <__aeabi_dcmplt>
 8003146:	2800      	cmp	r0, #0
 8003148:	f000 808b 	beq.w	8003262 <_dtoa_r+0x4da>
 800314c:	9b03      	ldr	r3, [sp, #12]
 800314e:	2b00      	cmp	r3, #0
 8003150:	f000 8087 	beq.w	8003262 <_dtoa_r+0x4da>
 8003154:	f1bb 0f00 	cmp.w	fp, #0
 8003158:	dd34      	ble.n	80031c4 <_dtoa_r+0x43c>
 800315a:	4620      	mov	r0, r4
 800315c:	4b6d      	ldr	r3, [pc, #436]	@ (8003314 <_dtoa_r+0x58c>)
 800315e:	2200      	movs	r2, #0
 8003160:	4629      	mov	r1, r5
 8003162:	f7fd fa49 	bl	80005f8 <__aeabi_dmul>
 8003166:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800316a:	f107 38ff 	add.w	r8, r7, #4294967295
 800316e:	3601      	adds	r6, #1
 8003170:	465c      	mov	r4, fp
 8003172:	4630      	mov	r0, r6
 8003174:	f7fd f9d6 	bl	8000524 <__aeabi_i2d>
 8003178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800317c:	f7fd fa3c 	bl	80005f8 <__aeabi_dmul>
 8003180:	4b65      	ldr	r3, [pc, #404]	@ (8003318 <_dtoa_r+0x590>)
 8003182:	2200      	movs	r2, #0
 8003184:	f7fd f882 	bl	800028c <__adddf3>
 8003188:	4605      	mov	r5, r0
 800318a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800318e:	2c00      	cmp	r4, #0
 8003190:	d16a      	bne.n	8003268 <_dtoa_r+0x4e0>
 8003192:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003196:	4b61      	ldr	r3, [pc, #388]	@ (800331c <_dtoa_r+0x594>)
 8003198:	2200      	movs	r2, #0
 800319a:	f7fd f875 	bl	8000288 <__aeabi_dsub>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80031a6:	462a      	mov	r2, r5
 80031a8:	4633      	mov	r3, r6
 80031aa:	f7fd fcb5 	bl	8000b18 <__aeabi_dcmpgt>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f040 8298 	bne.w	80036e4 <_dtoa_r+0x95c>
 80031b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80031b8:	462a      	mov	r2, r5
 80031ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80031be:	f7fd fc8d 	bl	8000adc <__aeabi_dcmplt>
 80031c2:	bb38      	cbnz	r0, 8003214 <_dtoa_r+0x48c>
 80031c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80031c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80031cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f2c0 8157 	blt.w	8003482 <_dtoa_r+0x6fa>
 80031d4:	2f0e      	cmp	r7, #14
 80031d6:	f300 8154 	bgt.w	8003482 <_dtoa_r+0x6fa>
 80031da:	4b4b      	ldr	r3, [pc, #300]	@ (8003308 <_dtoa_r+0x580>)
 80031dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80031e0:	ed93 7b00 	vldr	d7, [r3]
 80031e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	ed8d 7b00 	vstr	d7, [sp]
 80031ec:	f280 80e5 	bge.w	80033ba <_dtoa_r+0x632>
 80031f0:	9b03      	ldr	r3, [sp, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f300 80e1 	bgt.w	80033ba <_dtoa_r+0x632>
 80031f8:	d10c      	bne.n	8003214 <_dtoa_r+0x48c>
 80031fa:	4b48      	ldr	r3, [pc, #288]	@ (800331c <_dtoa_r+0x594>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	ec51 0b17 	vmov	r0, r1, d7
 8003202:	f7fd f9f9 	bl	80005f8 <__aeabi_dmul>
 8003206:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800320a:	f7fd fc7b 	bl	8000b04 <__aeabi_dcmpge>
 800320e:	2800      	cmp	r0, #0
 8003210:	f000 8266 	beq.w	80036e0 <_dtoa_r+0x958>
 8003214:	2400      	movs	r4, #0
 8003216:	4625      	mov	r5, r4
 8003218:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800321a:	4656      	mov	r6, sl
 800321c:	ea6f 0803 	mvn.w	r8, r3
 8003220:	2700      	movs	r7, #0
 8003222:	4621      	mov	r1, r4
 8003224:	4648      	mov	r0, r9
 8003226:	f000 fcbf 	bl	8003ba8 <_Bfree>
 800322a:	2d00      	cmp	r5, #0
 800322c:	f000 80bd 	beq.w	80033aa <_dtoa_r+0x622>
 8003230:	b12f      	cbz	r7, 800323e <_dtoa_r+0x4b6>
 8003232:	42af      	cmp	r7, r5
 8003234:	d003      	beq.n	800323e <_dtoa_r+0x4b6>
 8003236:	4639      	mov	r1, r7
 8003238:	4648      	mov	r0, r9
 800323a:	f000 fcb5 	bl	8003ba8 <_Bfree>
 800323e:	4629      	mov	r1, r5
 8003240:	4648      	mov	r0, r9
 8003242:	f000 fcb1 	bl	8003ba8 <_Bfree>
 8003246:	e0b0      	b.n	80033aa <_dtoa_r+0x622>
 8003248:	07e2      	lsls	r2, r4, #31
 800324a:	d505      	bpl.n	8003258 <_dtoa_r+0x4d0>
 800324c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003250:	f7fd f9d2 	bl	80005f8 <__aeabi_dmul>
 8003254:	3601      	adds	r6, #1
 8003256:	2301      	movs	r3, #1
 8003258:	1064      	asrs	r4, r4, #1
 800325a:	3508      	adds	r5, #8
 800325c:	e762      	b.n	8003124 <_dtoa_r+0x39c>
 800325e:	2602      	movs	r6, #2
 8003260:	e765      	b.n	800312e <_dtoa_r+0x3a6>
 8003262:	9c03      	ldr	r4, [sp, #12]
 8003264:	46b8      	mov	r8, r7
 8003266:	e784      	b.n	8003172 <_dtoa_r+0x3ea>
 8003268:	4b27      	ldr	r3, [pc, #156]	@ (8003308 <_dtoa_r+0x580>)
 800326a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800326c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8003270:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003274:	4454      	add	r4, sl
 8003276:	2900      	cmp	r1, #0
 8003278:	d054      	beq.n	8003324 <_dtoa_r+0x59c>
 800327a:	4929      	ldr	r1, [pc, #164]	@ (8003320 <_dtoa_r+0x598>)
 800327c:	2000      	movs	r0, #0
 800327e:	f7fd fae5 	bl	800084c <__aeabi_ddiv>
 8003282:	4633      	mov	r3, r6
 8003284:	462a      	mov	r2, r5
 8003286:	f7fc ffff 	bl	8000288 <__aeabi_dsub>
 800328a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800328e:	4656      	mov	r6, sl
 8003290:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003294:	f7fd fc60 	bl	8000b58 <__aeabi_d2iz>
 8003298:	4605      	mov	r5, r0
 800329a:	f7fd f943 	bl	8000524 <__aeabi_i2d>
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032a6:	f7fc ffef 	bl	8000288 <__aeabi_dsub>
 80032aa:	3530      	adds	r5, #48	@ 0x30
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80032b4:	f806 5b01 	strb.w	r5, [r6], #1
 80032b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80032bc:	f7fd fc0e 	bl	8000adc <__aeabi_dcmplt>
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d172      	bne.n	80033aa <_dtoa_r+0x622>
 80032c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032c8:	4911      	ldr	r1, [pc, #68]	@ (8003310 <_dtoa_r+0x588>)
 80032ca:	2000      	movs	r0, #0
 80032cc:	f7fc ffdc 	bl	8000288 <__aeabi_dsub>
 80032d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80032d4:	f7fd fc02 	bl	8000adc <__aeabi_dcmplt>
 80032d8:	2800      	cmp	r0, #0
 80032da:	f040 80b4 	bne.w	8003446 <_dtoa_r+0x6be>
 80032de:	42a6      	cmp	r6, r4
 80032e0:	f43f af70 	beq.w	80031c4 <_dtoa_r+0x43c>
 80032e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80032e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003314 <_dtoa_r+0x58c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	f7fd f984 	bl	80005f8 <__aeabi_dmul>
 80032f0:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <_dtoa_r+0x58c>)
 80032f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80032f6:	2200      	movs	r2, #0
 80032f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80032fc:	f7fd f97c 	bl	80005f8 <__aeabi_dmul>
 8003300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003304:	e7c4      	b.n	8003290 <_dtoa_r+0x508>
 8003306:	bf00      	nop
 8003308:	08004af8 	.word	0x08004af8
 800330c:	08004ad0 	.word	0x08004ad0
 8003310:	3ff00000 	.word	0x3ff00000
 8003314:	40240000 	.word	0x40240000
 8003318:	401c0000 	.word	0x401c0000
 800331c:	40140000 	.word	0x40140000
 8003320:	3fe00000 	.word	0x3fe00000
 8003324:	4631      	mov	r1, r6
 8003326:	4628      	mov	r0, r5
 8003328:	f7fd f966 	bl	80005f8 <__aeabi_dmul>
 800332c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8003330:	9413      	str	r4, [sp, #76]	@ 0x4c
 8003332:	4656      	mov	r6, sl
 8003334:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003338:	f7fd fc0e 	bl	8000b58 <__aeabi_d2iz>
 800333c:	4605      	mov	r5, r0
 800333e:	f7fd f8f1 	bl	8000524 <__aeabi_i2d>
 8003342:	4602      	mov	r2, r0
 8003344:	460b      	mov	r3, r1
 8003346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800334a:	f7fc ff9d 	bl	8000288 <__aeabi_dsub>
 800334e:	3530      	adds	r5, #48	@ 0x30
 8003350:	f806 5b01 	strb.w	r5, [r6], #1
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	42a6      	cmp	r6, r4
 800335a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	d124      	bne.n	80033ae <_dtoa_r+0x626>
 8003364:	4baf      	ldr	r3, [pc, #700]	@ (8003624 <_dtoa_r+0x89c>)
 8003366:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800336a:	f7fc ff8f 	bl	800028c <__adddf3>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003376:	f7fd fbcf 	bl	8000b18 <__aeabi_dcmpgt>
 800337a:	2800      	cmp	r0, #0
 800337c:	d163      	bne.n	8003446 <_dtoa_r+0x6be>
 800337e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8003382:	49a8      	ldr	r1, [pc, #672]	@ (8003624 <_dtoa_r+0x89c>)
 8003384:	2000      	movs	r0, #0
 8003386:	f7fc ff7f 	bl	8000288 <__aeabi_dsub>
 800338a:	4602      	mov	r2, r0
 800338c:	460b      	mov	r3, r1
 800338e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003392:	f7fd fba3 	bl	8000adc <__aeabi_dcmplt>
 8003396:	2800      	cmp	r0, #0
 8003398:	f43f af14 	beq.w	80031c4 <_dtoa_r+0x43c>
 800339c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800339e:	1e73      	subs	r3, r6, #1
 80033a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80033a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80033a6:	2b30      	cmp	r3, #48	@ 0x30
 80033a8:	d0f8      	beq.n	800339c <_dtoa_r+0x614>
 80033aa:	4647      	mov	r7, r8
 80033ac:	e03b      	b.n	8003426 <_dtoa_r+0x69e>
 80033ae:	4b9e      	ldr	r3, [pc, #632]	@ (8003628 <_dtoa_r+0x8a0>)
 80033b0:	f7fd f922 	bl	80005f8 <__aeabi_dmul>
 80033b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80033b8:	e7bc      	b.n	8003334 <_dtoa_r+0x5ac>
 80033ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80033be:	4656      	mov	r6, sl
 80033c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033c4:	4620      	mov	r0, r4
 80033c6:	4629      	mov	r1, r5
 80033c8:	f7fd fa40 	bl	800084c <__aeabi_ddiv>
 80033cc:	f7fd fbc4 	bl	8000b58 <__aeabi_d2iz>
 80033d0:	4680      	mov	r8, r0
 80033d2:	f7fd f8a7 	bl	8000524 <__aeabi_i2d>
 80033d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80033da:	f7fd f90d 	bl	80005f8 <__aeabi_dmul>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4620      	mov	r0, r4
 80033e4:	4629      	mov	r1, r5
 80033e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80033ea:	f7fc ff4d 	bl	8000288 <__aeabi_dsub>
 80033ee:	f806 4b01 	strb.w	r4, [r6], #1
 80033f2:	9d03      	ldr	r5, [sp, #12]
 80033f4:	eba6 040a 	sub.w	r4, r6, sl
 80033f8:	42a5      	cmp	r5, r4
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	d133      	bne.n	8003468 <_dtoa_r+0x6e0>
 8003400:	f7fc ff44 	bl	800028c <__adddf3>
 8003404:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003408:	4604      	mov	r4, r0
 800340a:	460d      	mov	r5, r1
 800340c:	f7fd fb84 	bl	8000b18 <__aeabi_dcmpgt>
 8003410:	b9c0      	cbnz	r0, 8003444 <_dtoa_r+0x6bc>
 8003412:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003416:	4620      	mov	r0, r4
 8003418:	4629      	mov	r1, r5
 800341a:	f7fd fb55 	bl	8000ac8 <__aeabi_dcmpeq>
 800341e:	b110      	cbz	r0, 8003426 <_dtoa_r+0x69e>
 8003420:	f018 0f01 	tst.w	r8, #1
 8003424:	d10e      	bne.n	8003444 <_dtoa_r+0x6bc>
 8003426:	9902      	ldr	r1, [sp, #8]
 8003428:	4648      	mov	r0, r9
 800342a:	f000 fbbd 	bl	8003ba8 <_Bfree>
 800342e:	2300      	movs	r3, #0
 8003430:	7033      	strb	r3, [r6, #0]
 8003432:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003434:	3701      	adds	r7, #1
 8003436:	601f      	str	r7, [r3, #0]
 8003438:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 824b 	beq.w	80038d6 <_dtoa_r+0xb4e>
 8003440:	601e      	str	r6, [r3, #0]
 8003442:	e248      	b.n	80038d6 <_dtoa_r+0xb4e>
 8003444:	46b8      	mov	r8, r7
 8003446:	4633      	mov	r3, r6
 8003448:	461e      	mov	r6, r3
 800344a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800344e:	2a39      	cmp	r2, #57	@ 0x39
 8003450:	d106      	bne.n	8003460 <_dtoa_r+0x6d8>
 8003452:	459a      	cmp	sl, r3
 8003454:	d1f8      	bne.n	8003448 <_dtoa_r+0x6c0>
 8003456:	2230      	movs	r2, #48	@ 0x30
 8003458:	f108 0801 	add.w	r8, r8, #1
 800345c:	f88a 2000 	strb.w	r2, [sl]
 8003460:	781a      	ldrb	r2, [r3, #0]
 8003462:	3201      	adds	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e7a0      	b.n	80033aa <_dtoa_r+0x622>
 8003468:	4b6f      	ldr	r3, [pc, #444]	@ (8003628 <_dtoa_r+0x8a0>)
 800346a:	2200      	movs	r2, #0
 800346c:	f7fd f8c4 	bl	80005f8 <__aeabi_dmul>
 8003470:	2200      	movs	r2, #0
 8003472:	2300      	movs	r3, #0
 8003474:	4604      	mov	r4, r0
 8003476:	460d      	mov	r5, r1
 8003478:	f7fd fb26 	bl	8000ac8 <__aeabi_dcmpeq>
 800347c:	2800      	cmp	r0, #0
 800347e:	d09f      	beq.n	80033c0 <_dtoa_r+0x638>
 8003480:	e7d1      	b.n	8003426 <_dtoa_r+0x69e>
 8003482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003484:	2a00      	cmp	r2, #0
 8003486:	f000 80ea 	beq.w	800365e <_dtoa_r+0x8d6>
 800348a:	9a07      	ldr	r2, [sp, #28]
 800348c:	2a01      	cmp	r2, #1
 800348e:	f300 80cd 	bgt.w	800362c <_dtoa_r+0x8a4>
 8003492:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003494:	2a00      	cmp	r2, #0
 8003496:	f000 80c1 	beq.w	800361c <_dtoa_r+0x894>
 800349a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800349e:	9c08      	ldr	r4, [sp, #32]
 80034a0:	9e00      	ldr	r6, [sp, #0]
 80034a2:	9a00      	ldr	r2, [sp, #0]
 80034a4:	441a      	add	r2, r3
 80034a6:	9200      	str	r2, [sp, #0]
 80034a8:	9a06      	ldr	r2, [sp, #24]
 80034aa:	2101      	movs	r1, #1
 80034ac:	441a      	add	r2, r3
 80034ae:	4648      	mov	r0, r9
 80034b0:	9206      	str	r2, [sp, #24]
 80034b2:	f000 fc2d 	bl	8003d10 <__i2b>
 80034b6:	4605      	mov	r5, r0
 80034b8:	b166      	cbz	r6, 80034d4 <_dtoa_r+0x74c>
 80034ba:	9b06      	ldr	r3, [sp, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	dd09      	ble.n	80034d4 <_dtoa_r+0x74c>
 80034c0:	42b3      	cmp	r3, r6
 80034c2:	9a00      	ldr	r2, [sp, #0]
 80034c4:	bfa8      	it	ge
 80034c6:	4633      	movge	r3, r6
 80034c8:	1ad2      	subs	r2, r2, r3
 80034ca:	9200      	str	r2, [sp, #0]
 80034cc:	9a06      	ldr	r2, [sp, #24]
 80034ce:	1af6      	subs	r6, r6, r3
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	9306      	str	r3, [sp, #24]
 80034d4:	9b08      	ldr	r3, [sp, #32]
 80034d6:	b30b      	cbz	r3, 800351c <_dtoa_r+0x794>
 80034d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 80c6 	beq.w	800366c <_dtoa_r+0x8e4>
 80034e0:	2c00      	cmp	r4, #0
 80034e2:	f000 80c0 	beq.w	8003666 <_dtoa_r+0x8de>
 80034e6:	4629      	mov	r1, r5
 80034e8:	4622      	mov	r2, r4
 80034ea:	4648      	mov	r0, r9
 80034ec:	f000 fcc8 	bl	8003e80 <__pow5mult>
 80034f0:	9a02      	ldr	r2, [sp, #8]
 80034f2:	4601      	mov	r1, r0
 80034f4:	4605      	mov	r5, r0
 80034f6:	4648      	mov	r0, r9
 80034f8:	f000 fc20 	bl	8003d3c <__multiply>
 80034fc:	9902      	ldr	r1, [sp, #8]
 80034fe:	4680      	mov	r8, r0
 8003500:	4648      	mov	r0, r9
 8003502:	f000 fb51 	bl	8003ba8 <_Bfree>
 8003506:	9b08      	ldr	r3, [sp, #32]
 8003508:	1b1b      	subs	r3, r3, r4
 800350a:	9308      	str	r3, [sp, #32]
 800350c:	f000 80b1 	beq.w	8003672 <_dtoa_r+0x8ea>
 8003510:	9a08      	ldr	r2, [sp, #32]
 8003512:	4641      	mov	r1, r8
 8003514:	4648      	mov	r0, r9
 8003516:	f000 fcb3 	bl	8003e80 <__pow5mult>
 800351a:	9002      	str	r0, [sp, #8]
 800351c:	2101      	movs	r1, #1
 800351e:	4648      	mov	r0, r9
 8003520:	f000 fbf6 	bl	8003d10 <__i2b>
 8003524:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003526:	4604      	mov	r4, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 81d8 	beq.w	80038de <_dtoa_r+0xb56>
 800352e:	461a      	mov	r2, r3
 8003530:	4601      	mov	r1, r0
 8003532:	4648      	mov	r0, r9
 8003534:	f000 fca4 	bl	8003e80 <__pow5mult>
 8003538:	9b07      	ldr	r3, [sp, #28]
 800353a:	2b01      	cmp	r3, #1
 800353c:	4604      	mov	r4, r0
 800353e:	f300 809f 	bgt.w	8003680 <_dtoa_r+0x8f8>
 8003542:	9b04      	ldr	r3, [sp, #16]
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8097 	bne.w	8003678 <_dtoa_r+0x8f0>
 800354a:	9b05      	ldr	r3, [sp, #20]
 800354c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003550:	2b00      	cmp	r3, #0
 8003552:	f040 8093 	bne.w	800367c <_dtoa_r+0x8f4>
 8003556:	9b05      	ldr	r3, [sp, #20]
 8003558:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800355c:	0d1b      	lsrs	r3, r3, #20
 800355e:	051b      	lsls	r3, r3, #20
 8003560:	b133      	cbz	r3, 8003570 <_dtoa_r+0x7e8>
 8003562:	9b00      	ldr	r3, [sp, #0]
 8003564:	3301      	adds	r3, #1
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	9b06      	ldr	r3, [sp, #24]
 800356a:	3301      	adds	r3, #1
 800356c:	9306      	str	r3, [sp, #24]
 800356e:	2301      	movs	r3, #1
 8003570:	9308      	str	r3, [sp, #32]
 8003572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 81b8 	beq.w	80038ea <_dtoa_r+0xb62>
 800357a:	6923      	ldr	r3, [r4, #16]
 800357c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003580:	6918      	ldr	r0, [r3, #16]
 8003582:	f000 fb79 	bl	8003c78 <__hi0bits>
 8003586:	f1c0 0020 	rsb	r0, r0, #32
 800358a:	9b06      	ldr	r3, [sp, #24]
 800358c:	4418      	add	r0, r3
 800358e:	f010 001f 	ands.w	r0, r0, #31
 8003592:	f000 8082 	beq.w	800369a <_dtoa_r+0x912>
 8003596:	f1c0 0320 	rsb	r3, r0, #32
 800359a:	2b04      	cmp	r3, #4
 800359c:	dd73      	ble.n	8003686 <_dtoa_r+0x8fe>
 800359e:	9b00      	ldr	r3, [sp, #0]
 80035a0:	f1c0 001c 	rsb	r0, r0, #28
 80035a4:	4403      	add	r3, r0
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	9b06      	ldr	r3, [sp, #24]
 80035aa:	4403      	add	r3, r0
 80035ac:	4406      	add	r6, r0
 80035ae:	9306      	str	r3, [sp, #24]
 80035b0:	9b00      	ldr	r3, [sp, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	dd05      	ble.n	80035c2 <_dtoa_r+0x83a>
 80035b6:	9902      	ldr	r1, [sp, #8]
 80035b8:	461a      	mov	r2, r3
 80035ba:	4648      	mov	r0, r9
 80035bc:	f000 fcba 	bl	8003f34 <__lshift>
 80035c0:	9002      	str	r0, [sp, #8]
 80035c2:	9b06      	ldr	r3, [sp, #24]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	dd05      	ble.n	80035d4 <_dtoa_r+0x84c>
 80035c8:	4621      	mov	r1, r4
 80035ca:	461a      	mov	r2, r3
 80035cc:	4648      	mov	r0, r9
 80035ce:	f000 fcb1 	bl	8003f34 <__lshift>
 80035d2:	4604      	mov	r4, r0
 80035d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d061      	beq.n	800369e <_dtoa_r+0x916>
 80035da:	9802      	ldr	r0, [sp, #8]
 80035dc:	4621      	mov	r1, r4
 80035de:	f000 fd15 	bl	800400c <__mcmp>
 80035e2:	2800      	cmp	r0, #0
 80035e4:	da5b      	bge.n	800369e <_dtoa_r+0x916>
 80035e6:	2300      	movs	r3, #0
 80035e8:	9902      	ldr	r1, [sp, #8]
 80035ea:	220a      	movs	r2, #10
 80035ec:	4648      	mov	r0, r9
 80035ee:	f000 fafd 	bl	8003bec <__multadd>
 80035f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035f4:	9002      	str	r0, [sp, #8]
 80035f6:	f107 38ff 	add.w	r8, r7, #4294967295
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 8177 	beq.w	80038ee <_dtoa_r+0xb66>
 8003600:	4629      	mov	r1, r5
 8003602:	2300      	movs	r3, #0
 8003604:	220a      	movs	r2, #10
 8003606:	4648      	mov	r0, r9
 8003608:	f000 faf0 	bl	8003bec <__multadd>
 800360c:	f1bb 0f00 	cmp.w	fp, #0
 8003610:	4605      	mov	r5, r0
 8003612:	dc6f      	bgt.n	80036f4 <_dtoa_r+0x96c>
 8003614:	9b07      	ldr	r3, [sp, #28]
 8003616:	2b02      	cmp	r3, #2
 8003618:	dc49      	bgt.n	80036ae <_dtoa_r+0x926>
 800361a:	e06b      	b.n	80036f4 <_dtoa_r+0x96c>
 800361c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800361e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003622:	e73c      	b.n	800349e <_dtoa_r+0x716>
 8003624:	3fe00000 	.word	0x3fe00000
 8003628:	40240000 	.word	0x40240000
 800362c:	9b03      	ldr	r3, [sp, #12]
 800362e:	1e5c      	subs	r4, r3, #1
 8003630:	9b08      	ldr	r3, [sp, #32]
 8003632:	42a3      	cmp	r3, r4
 8003634:	db09      	blt.n	800364a <_dtoa_r+0x8c2>
 8003636:	1b1c      	subs	r4, r3, r4
 8003638:	9b03      	ldr	r3, [sp, #12]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f6bf af30 	bge.w	80034a0 <_dtoa_r+0x718>
 8003640:	9b00      	ldr	r3, [sp, #0]
 8003642:	9a03      	ldr	r2, [sp, #12]
 8003644:	1a9e      	subs	r6, r3, r2
 8003646:	2300      	movs	r3, #0
 8003648:	e72b      	b.n	80034a2 <_dtoa_r+0x71a>
 800364a:	9b08      	ldr	r3, [sp, #32]
 800364c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800364e:	9408      	str	r4, [sp, #32]
 8003650:	1ae3      	subs	r3, r4, r3
 8003652:	441a      	add	r2, r3
 8003654:	9e00      	ldr	r6, [sp, #0]
 8003656:	9b03      	ldr	r3, [sp, #12]
 8003658:	920d      	str	r2, [sp, #52]	@ 0x34
 800365a:	2400      	movs	r4, #0
 800365c:	e721      	b.n	80034a2 <_dtoa_r+0x71a>
 800365e:	9c08      	ldr	r4, [sp, #32]
 8003660:	9e00      	ldr	r6, [sp, #0]
 8003662:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8003664:	e728      	b.n	80034b8 <_dtoa_r+0x730>
 8003666:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800366a:	e751      	b.n	8003510 <_dtoa_r+0x788>
 800366c:	9a08      	ldr	r2, [sp, #32]
 800366e:	9902      	ldr	r1, [sp, #8]
 8003670:	e750      	b.n	8003514 <_dtoa_r+0x78c>
 8003672:	f8cd 8008 	str.w	r8, [sp, #8]
 8003676:	e751      	b.n	800351c <_dtoa_r+0x794>
 8003678:	2300      	movs	r3, #0
 800367a:	e779      	b.n	8003570 <_dtoa_r+0x7e8>
 800367c:	9b04      	ldr	r3, [sp, #16]
 800367e:	e777      	b.n	8003570 <_dtoa_r+0x7e8>
 8003680:	2300      	movs	r3, #0
 8003682:	9308      	str	r3, [sp, #32]
 8003684:	e779      	b.n	800357a <_dtoa_r+0x7f2>
 8003686:	d093      	beq.n	80035b0 <_dtoa_r+0x828>
 8003688:	9a00      	ldr	r2, [sp, #0]
 800368a:	331c      	adds	r3, #28
 800368c:	441a      	add	r2, r3
 800368e:	9200      	str	r2, [sp, #0]
 8003690:	9a06      	ldr	r2, [sp, #24]
 8003692:	441a      	add	r2, r3
 8003694:	441e      	add	r6, r3
 8003696:	9206      	str	r2, [sp, #24]
 8003698:	e78a      	b.n	80035b0 <_dtoa_r+0x828>
 800369a:	4603      	mov	r3, r0
 800369c:	e7f4      	b.n	8003688 <_dtoa_r+0x900>
 800369e:	9b03      	ldr	r3, [sp, #12]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	46b8      	mov	r8, r7
 80036a4:	dc20      	bgt.n	80036e8 <_dtoa_r+0x960>
 80036a6:	469b      	mov	fp, r3
 80036a8:	9b07      	ldr	r3, [sp, #28]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	dd1e      	ble.n	80036ec <_dtoa_r+0x964>
 80036ae:	f1bb 0f00 	cmp.w	fp, #0
 80036b2:	f47f adb1 	bne.w	8003218 <_dtoa_r+0x490>
 80036b6:	4621      	mov	r1, r4
 80036b8:	465b      	mov	r3, fp
 80036ba:	2205      	movs	r2, #5
 80036bc:	4648      	mov	r0, r9
 80036be:	f000 fa95 	bl	8003bec <__multadd>
 80036c2:	4601      	mov	r1, r0
 80036c4:	4604      	mov	r4, r0
 80036c6:	9802      	ldr	r0, [sp, #8]
 80036c8:	f000 fca0 	bl	800400c <__mcmp>
 80036cc:	2800      	cmp	r0, #0
 80036ce:	f77f ada3 	ble.w	8003218 <_dtoa_r+0x490>
 80036d2:	4656      	mov	r6, sl
 80036d4:	2331      	movs	r3, #49	@ 0x31
 80036d6:	f806 3b01 	strb.w	r3, [r6], #1
 80036da:	f108 0801 	add.w	r8, r8, #1
 80036de:	e59f      	b.n	8003220 <_dtoa_r+0x498>
 80036e0:	9c03      	ldr	r4, [sp, #12]
 80036e2:	46b8      	mov	r8, r7
 80036e4:	4625      	mov	r5, r4
 80036e6:	e7f4      	b.n	80036d2 <_dtoa_r+0x94a>
 80036e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80036ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8101 	beq.w	80038f6 <_dtoa_r+0xb6e>
 80036f4:	2e00      	cmp	r6, #0
 80036f6:	dd05      	ble.n	8003704 <_dtoa_r+0x97c>
 80036f8:	4629      	mov	r1, r5
 80036fa:	4632      	mov	r2, r6
 80036fc:	4648      	mov	r0, r9
 80036fe:	f000 fc19 	bl	8003f34 <__lshift>
 8003702:	4605      	mov	r5, r0
 8003704:	9b08      	ldr	r3, [sp, #32]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d05c      	beq.n	80037c4 <_dtoa_r+0xa3c>
 800370a:	6869      	ldr	r1, [r5, #4]
 800370c:	4648      	mov	r0, r9
 800370e:	f000 fa0b 	bl	8003b28 <_Balloc>
 8003712:	4606      	mov	r6, r0
 8003714:	b928      	cbnz	r0, 8003722 <_dtoa_r+0x99a>
 8003716:	4b82      	ldr	r3, [pc, #520]	@ (8003920 <_dtoa_r+0xb98>)
 8003718:	4602      	mov	r2, r0
 800371a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800371e:	f7ff bb4a 	b.w	8002db6 <_dtoa_r+0x2e>
 8003722:	692a      	ldr	r2, [r5, #16]
 8003724:	3202      	adds	r2, #2
 8003726:	0092      	lsls	r2, r2, #2
 8003728:	f105 010c 	add.w	r1, r5, #12
 800372c:	300c      	adds	r0, #12
 800372e:	f000 fff7 	bl	8004720 <memcpy>
 8003732:	2201      	movs	r2, #1
 8003734:	4631      	mov	r1, r6
 8003736:	4648      	mov	r0, r9
 8003738:	f000 fbfc 	bl	8003f34 <__lshift>
 800373c:	f10a 0301 	add.w	r3, sl, #1
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	eb0a 030b 	add.w	r3, sl, fp
 8003746:	9308      	str	r3, [sp, #32]
 8003748:	9b04      	ldr	r3, [sp, #16]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	462f      	mov	r7, r5
 8003750:	9306      	str	r3, [sp, #24]
 8003752:	4605      	mov	r5, r0
 8003754:	9b00      	ldr	r3, [sp, #0]
 8003756:	9802      	ldr	r0, [sp, #8]
 8003758:	4621      	mov	r1, r4
 800375a:	f103 3bff 	add.w	fp, r3, #4294967295
 800375e:	f7ff fa8a 	bl	8002c76 <quorem>
 8003762:	4603      	mov	r3, r0
 8003764:	3330      	adds	r3, #48	@ 0x30
 8003766:	9003      	str	r0, [sp, #12]
 8003768:	4639      	mov	r1, r7
 800376a:	9802      	ldr	r0, [sp, #8]
 800376c:	9309      	str	r3, [sp, #36]	@ 0x24
 800376e:	f000 fc4d 	bl	800400c <__mcmp>
 8003772:	462a      	mov	r2, r5
 8003774:	9004      	str	r0, [sp, #16]
 8003776:	4621      	mov	r1, r4
 8003778:	4648      	mov	r0, r9
 800377a:	f000 fc63 	bl	8004044 <__mdiff>
 800377e:	68c2      	ldr	r2, [r0, #12]
 8003780:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003782:	4606      	mov	r6, r0
 8003784:	bb02      	cbnz	r2, 80037c8 <_dtoa_r+0xa40>
 8003786:	4601      	mov	r1, r0
 8003788:	9802      	ldr	r0, [sp, #8]
 800378a:	f000 fc3f 	bl	800400c <__mcmp>
 800378e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003790:	4602      	mov	r2, r0
 8003792:	4631      	mov	r1, r6
 8003794:	4648      	mov	r0, r9
 8003796:	920c      	str	r2, [sp, #48]	@ 0x30
 8003798:	9309      	str	r3, [sp, #36]	@ 0x24
 800379a:	f000 fa05 	bl	8003ba8 <_Bfree>
 800379e:	9b07      	ldr	r3, [sp, #28]
 80037a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80037a2:	9e00      	ldr	r6, [sp, #0]
 80037a4:	ea42 0103 	orr.w	r1, r2, r3
 80037a8:	9b06      	ldr	r3, [sp, #24]
 80037aa:	4319      	orrs	r1, r3
 80037ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80037ae:	d10d      	bne.n	80037cc <_dtoa_r+0xa44>
 80037b0:	2b39      	cmp	r3, #57	@ 0x39
 80037b2:	d027      	beq.n	8003804 <_dtoa_r+0xa7c>
 80037b4:	9a04      	ldr	r2, [sp, #16]
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	dd01      	ble.n	80037be <_dtoa_r+0xa36>
 80037ba:	9b03      	ldr	r3, [sp, #12]
 80037bc:	3331      	adds	r3, #49	@ 0x31
 80037be:	f88b 3000 	strb.w	r3, [fp]
 80037c2:	e52e      	b.n	8003222 <_dtoa_r+0x49a>
 80037c4:	4628      	mov	r0, r5
 80037c6:	e7b9      	b.n	800373c <_dtoa_r+0x9b4>
 80037c8:	2201      	movs	r2, #1
 80037ca:	e7e2      	b.n	8003792 <_dtoa_r+0xa0a>
 80037cc:	9904      	ldr	r1, [sp, #16]
 80037ce:	2900      	cmp	r1, #0
 80037d0:	db04      	blt.n	80037dc <_dtoa_r+0xa54>
 80037d2:	9807      	ldr	r0, [sp, #28]
 80037d4:	4301      	orrs	r1, r0
 80037d6:	9806      	ldr	r0, [sp, #24]
 80037d8:	4301      	orrs	r1, r0
 80037da:	d120      	bne.n	800381e <_dtoa_r+0xa96>
 80037dc:	2a00      	cmp	r2, #0
 80037de:	ddee      	ble.n	80037be <_dtoa_r+0xa36>
 80037e0:	9902      	ldr	r1, [sp, #8]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2201      	movs	r2, #1
 80037e6:	4648      	mov	r0, r9
 80037e8:	f000 fba4 	bl	8003f34 <__lshift>
 80037ec:	4621      	mov	r1, r4
 80037ee:	9002      	str	r0, [sp, #8]
 80037f0:	f000 fc0c 	bl	800400c <__mcmp>
 80037f4:	2800      	cmp	r0, #0
 80037f6:	9b00      	ldr	r3, [sp, #0]
 80037f8:	dc02      	bgt.n	8003800 <_dtoa_r+0xa78>
 80037fa:	d1e0      	bne.n	80037be <_dtoa_r+0xa36>
 80037fc:	07da      	lsls	r2, r3, #31
 80037fe:	d5de      	bpl.n	80037be <_dtoa_r+0xa36>
 8003800:	2b39      	cmp	r3, #57	@ 0x39
 8003802:	d1da      	bne.n	80037ba <_dtoa_r+0xa32>
 8003804:	2339      	movs	r3, #57	@ 0x39
 8003806:	f88b 3000 	strb.w	r3, [fp]
 800380a:	4633      	mov	r3, r6
 800380c:	461e      	mov	r6, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003814:	2a39      	cmp	r2, #57	@ 0x39
 8003816:	d04e      	beq.n	80038b6 <_dtoa_r+0xb2e>
 8003818:	3201      	adds	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e501      	b.n	8003222 <_dtoa_r+0x49a>
 800381e:	2a00      	cmp	r2, #0
 8003820:	dd03      	ble.n	800382a <_dtoa_r+0xaa2>
 8003822:	2b39      	cmp	r3, #57	@ 0x39
 8003824:	d0ee      	beq.n	8003804 <_dtoa_r+0xa7c>
 8003826:	3301      	adds	r3, #1
 8003828:	e7c9      	b.n	80037be <_dtoa_r+0xa36>
 800382a:	9a00      	ldr	r2, [sp, #0]
 800382c:	9908      	ldr	r1, [sp, #32]
 800382e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003832:	428a      	cmp	r2, r1
 8003834:	d028      	beq.n	8003888 <_dtoa_r+0xb00>
 8003836:	9902      	ldr	r1, [sp, #8]
 8003838:	2300      	movs	r3, #0
 800383a:	220a      	movs	r2, #10
 800383c:	4648      	mov	r0, r9
 800383e:	f000 f9d5 	bl	8003bec <__multadd>
 8003842:	42af      	cmp	r7, r5
 8003844:	9002      	str	r0, [sp, #8]
 8003846:	f04f 0300 	mov.w	r3, #0
 800384a:	f04f 020a 	mov.w	r2, #10
 800384e:	4639      	mov	r1, r7
 8003850:	4648      	mov	r0, r9
 8003852:	d107      	bne.n	8003864 <_dtoa_r+0xadc>
 8003854:	f000 f9ca 	bl	8003bec <__multadd>
 8003858:	4607      	mov	r7, r0
 800385a:	4605      	mov	r5, r0
 800385c:	9b00      	ldr	r3, [sp, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	e777      	b.n	8003754 <_dtoa_r+0x9cc>
 8003864:	f000 f9c2 	bl	8003bec <__multadd>
 8003868:	4629      	mov	r1, r5
 800386a:	4607      	mov	r7, r0
 800386c:	2300      	movs	r3, #0
 800386e:	220a      	movs	r2, #10
 8003870:	4648      	mov	r0, r9
 8003872:	f000 f9bb 	bl	8003bec <__multadd>
 8003876:	4605      	mov	r5, r0
 8003878:	e7f0      	b.n	800385c <_dtoa_r+0xad4>
 800387a:	f1bb 0f00 	cmp.w	fp, #0
 800387e:	bfcc      	ite	gt
 8003880:	465e      	movgt	r6, fp
 8003882:	2601      	movle	r6, #1
 8003884:	4456      	add	r6, sl
 8003886:	2700      	movs	r7, #0
 8003888:	9902      	ldr	r1, [sp, #8]
 800388a:	9300      	str	r3, [sp, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	4648      	mov	r0, r9
 8003890:	f000 fb50 	bl	8003f34 <__lshift>
 8003894:	4621      	mov	r1, r4
 8003896:	9002      	str	r0, [sp, #8]
 8003898:	f000 fbb8 	bl	800400c <__mcmp>
 800389c:	2800      	cmp	r0, #0
 800389e:	dcb4      	bgt.n	800380a <_dtoa_r+0xa82>
 80038a0:	d102      	bne.n	80038a8 <_dtoa_r+0xb20>
 80038a2:	9b00      	ldr	r3, [sp, #0]
 80038a4:	07db      	lsls	r3, r3, #31
 80038a6:	d4b0      	bmi.n	800380a <_dtoa_r+0xa82>
 80038a8:	4633      	mov	r3, r6
 80038aa:	461e      	mov	r6, r3
 80038ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80038b0:	2a30      	cmp	r2, #48	@ 0x30
 80038b2:	d0fa      	beq.n	80038aa <_dtoa_r+0xb22>
 80038b4:	e4b5      	b.n	8003222 <_dtoa_r+0x49a>
 80038b6:	459a      	cmp	sl, r3
 80038b8:	d1a8      	bne.n	800380c <_dtoa_r+0xa84>
 80038ba:	2331      	movs	r3, #49	@ 0x31
 80038bc:	f108 0801 	add.w	r8, r8, #1
 80038c0:	f88a 3000 	strb.w	r3, [sl]
 80038c4:	e4ad      	b.n	8003222 <_dtoa_r+0x49a>
 80038c6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80038c8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003924 <_dtoa_r+0xb9c>
 80038cc:	b11b      	cbz	r3, 80038d6 <_dtoa_r+0xb4e>
 80038ce:	f10a 0308 	add.w	r3, sl, #8
 80038d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4650      	mov	r0, sl
 80038d8:	b017      	add	sp, #92	@ 0x5c
 80038da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038de:	9b07      	ldr	r3, [sp, #28]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f77f ae2e 	ble.w	8003542 <_dtoa_r+0x7ba>
 80038e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80038e8:	9308      	str	r3, [sp, #32]
 80038ea:	2001      	movs	r0, #1
 80038ec:	e64d      	b.n	800358a <_dtoa_r+0x802>
 80038ee:	f1bb 0f00 	cmp.w	fp, #0
 80038f2:	f77f aed9 	ble.w	80036a8 <_dtoa_r+0x920>
 80038f6:	4656      	mov	r6, sl
 80038f8:	9802      	ldr	r0, [sp, #8]
 80038fa:	4621      	mov	r1, r4
 80038fc:	f7ff f9bb 	bl	8002c76 <quorem>
 8003900:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003904:	f806 3b01 	strb.w	r3, [r6], #1
 8003908:	eba6 020a 	sub.w	r2, r6, sl
 800390c:	4593      	cmp	fp, r2
 800390e:	ddb4      	ble.n	800387a <_dtoa_r+0xaf2>
 8003910:	9902      	ldr	r1, [sp, #8]
 8003912:	2300      	movs	r3, #0
 8003914:	220a      	movs	r2, #10
 8003916:	4648      	mov	r0, r9
 8003918:	f000 f968 	bl	8003bec <__multadd>
 800391c:	9002      	str	r0, [sp, #8]
 800391e:	e7eb      	b.n	80038f8 <_dtoa_r+0xb70>
 8003920:	080049fd 	.word	0x080049fd
 8003924:	08004981 	.word	0x08004981

08003928 <_free_r>:
 8003928:	b538      	push	{r3, r4, r5, lr}
 800392a:	4605      	mov	r5, r0
 800392c:	2900      	cmp	r1, #0
 800392e:	d041      	beq.n	80039b4 <_free_r+0x8c>
 8003930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003934:	1f0c      	subs	r4, r1, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	bfb8      	it	lt
 800393a:	18e4      	addlt	r4, r4, r3
 800393c:	f000 f8e8 	bl	8003b10 <__malloc_lock>
 8003940:	4a1d      	ldr	r2, [pc, #116]	@ (80039b8 <_free_r+0x90>)
 8003942:	6813      	ldr	r3, [r2, #0]
 8003944:	b933      	cbnz	r3, 8003954 <_free_r+0x2c>
 8003946:	6063      	str	r3, [r4, #4]
 8003948:	6014      	str	r4, [r2, #0]
 800394a:	4628      	mov	r0, r5
 800394c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003950:	f000 b8e4 	b.w	8003b1c <__malloc_unlock>
 8003954:	42a3      	cmp	r3, r4
 8003956:	d908      	bls.n	800396a <_free_r+0x42>
 8003958:	6820      	ldr	r0, [r4, #0]
 800395a:	1821      	adds	r1, r4, r0
 800395c:	428b      	cmp	r3, r1
 800395e:	bf01      	itttt	eq
 8003960:	6819      	ldreq	r1, [r3, #0]
 8003962:	685b      	ldreq	r3, [r3, #4]
 8003964:	1809      	addeq	r1, r1, r0
 8003966:	6021      	streq	r1, [r4, #0]
 8003968:	e7ed      	b.n	8003946 <_free_r+0x1e>
 800396a:	461a      	mov	r2, r3
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	b10b      	cbz	r3, 8003974 <_free_r+0x4c>
 8003970:	42a3      	cmp	r3, r4
 8003972:	d9fa      	bls.n	800396a <_free_r+0x42>
 8003974:	6811      	ldr	r1, [r2, #0]
 8003976:	1850      	adds	r0, r2, r1
 8003978:	42a0      	cmp	r0, r4
 800397a:	d10b      	bne.n	8003994 <_free_r+0x6c>
 800397c:	6820      	ldr	r0, [r4, #0]
 800397e:	4401      	add	r1, r0
 8003980:	1850      	adds	r0, r2, r1
 8003982:	4283      	cmp	r3, r0
 8003984:	6011      	str	r1, [r2, #0]
 8003986:	d1e0      	bne.n	800394a <_free_r+0x22>
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	6053      	str	r3, [r2, #4]
 800398e:	4408      	add	r0, r1
 8003990:	6010      	str	r0, [r2, #0]
 8003992:	e7da      	b.n	800394a <_free_r+0x22>
 8003994:	d902      	bls.n	800399c <_free_r+0x74>
 8003996:	230c      	movs	r3, #12
 8003998:	602b      	str	r3, [r5, #0]
 800399a:	e7d6      	b.n	800394a <_free_r+0x22>
 800399c:	6820      	ldr	r0, [r4, #0]
 800399e:	1821      	adds	r1, r4, r0
 80039a0:	428b      	cmp	r3, r1
 80039a2:	bf04      	itt	eq
 80039a4:	6819      	ldreq	r1, [r3, #0]
 80039a6:	685b      	ldreq	r3, [r3, #4]
 80039a8:	6063      	str	r3, [r4, #4]
 80039aa:	bf04      	itt	eq
 80039ac:	1809      	addeq	r1, r1, r0
 80039ae:	6021      	streq	r1, [r4, #0]
 80039b0:	6054      	str	r4, [r2, #4]
 80039b2:	e7ca      	b.n	800394a <_free_r+0x22>
 80039b4:	bd38      	pop	{r3, r4, r5, pc}
 80039b6:	bf00      	nop
 80039b8:	2000039c 	.word	0x2000039c

080039bc <malloc>:
 80039bc:	4b02      	ldr	r3, [pc, #8]	@ (80039c8 <malloc+0xc>)
 80039be:	4601      	mov	r1, r0
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	f000 b825 	b.w	8003a10 <_malloc_r>
 80039c6:	bf00      	nop
 80039c8:	20000010 	.word	0x20000010

080039cc <sbrk_aligned>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	4e0f      	ldr	r6, [pc, #60]	@ (8003a0c <sbrk_aligned+0x40>)
 80039d0:	460c      	mov	r4, r1
 80039d2:	6831      	ldr	r1, [r6, #0]
 80039d4:	4605      	mov	r5, r0
 80039d6:	b911      	cbnz	r1, 80039de <sbrk_aligned+0x12>
 80039d8:	f000 fe92 	bl	8004700 <_sbrk_r>
 80039dc:	6030      	str	r0, [r6, #0]
 80039de:	4621      	mov	r1, r4
 80039e0:	4628      	mov	r0, r5
 80039e2:	f000 fe8d 	bl	8004700 <_sbrk_r>
 80039e6:	1c43      	adds	r3, r0, #1
 80039e8:	d103      	bne.n	80039f2 <sbrk_aligned+0x26>
 80039ea:	f04f 34ff 	mov.w	r4, #4294967295
 80039ee:	4620      	mov	r0, r4
 80039f0:	bd70      	pop	{r4, r5, r6, pc}
 80039f2:	1cc4      	adds	r4, r0, #3
 80039f4:	f024 0403 	bic.w	r4, r4, #3
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	d0f8      	beq.n	80039ee <sbrk_aligned+0x22>
 80039fc:	1a21      	subs	r1, r4, r0
 80039fe:	4628      	mov	r0, r5
 8003a00:	f000 fe7e 	bl	8004700 <_sbrk_r>
 8003a04:	3001      	adds	r0, #1
 8003a06:	d1f2      	bne.n	80039ee <sbrk_aligned+0x22>
 8003a08:	e7ef      	b.n	80039ea <sbrk_aligned+0x1e>
 8003a0a:	bf00      	nop
 8003a0c:	20000398 	.word	0x20000398

08003a10 <_malloc_r>:
 8003a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a14:	1ccd      	adds	r5, r1, #3
 8003a16:	f025 0503 	bic.w	r5, r5, #3
 8003a1a:	3508      	adds	r5, #8
 8003a1c:	2d0c      	cmp	r5, #12
 8003a1e:	bf38      	it	cc
 8003a20:	250c      	movcc	r5, #12
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	4606      	mov	r6, r0
 8003a26:	db01      	blt.n	8003a2c <_malloc_r+0x1c>
 8003a28:	42a9      	cmp	r1, r5
 8003a2a:	d904      	bls.n	8003a36 <_malloc_r+0x26>
 8003a2c:	230c      	movs	r3, #12
 8003a2e:	6033      	str	r3, [r6, #0]
 8003a30:	2000      	movs	r0, #0
 8003a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b0c <_malloc_r+0xfc>
 8003a3a:	f000 f869 	bl	8003b10 <__malloc_lock>
 8003a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a42:	461c      	mov	r4, r3
 8003a44:	bb44      	cbnz	r4, 8003a98 <_malloc_r+0x88>
 8003a46:	4629      	mov	r1, r5
 8003a48:	4630      	mov	r0, r6
 8003a4a:	f7ff ffbf 	bl	80039cc <sbrk_aligned>
 8003a4e:	1c43      	adds	r3, r0, #1
 8003a50:	4604      	mov	r4, r0
 8003a52:	d158      	bne.n	8003b06 <_malloc_r+0xf6>
 8003a54:	f8d8 4000 	ldr.w	r4, [r8]
 8003a58:	4627      	mov	r7, r4
 8003a5a:	2f00      	cmp	r7, #0
 8003a5c:	d143      	bne.n	8003ae6 <_malloc_r+0xd6>
 8003a5e:	2c00      	cmp	r4, #0
 8003a60:	d04b      	beq.n	8003afa <_malloc_r+0xea>
 8003a62:	6823      	ldr	r3, [r4, #0]
 8003a64:	4639      	mov	r1, r7
 8003a66:	4630      	mov	r0, r6
 8003a68:	eb04 0903 	add.w	r9, r4, r3
 8003a6c:	f000 fe48 	bl	8004700 <_sbrk_r>
 8003a70:	4581      	cmp	r9, r0
 8003a72:	d142      	bne.n	8003afa <_malloc_r+0xea>
 8003a74:	6821      	ldr	r1, [r4, #0]
 8003a76:	1a6d      	subs	r5, r5, r1
 8003a78:	4629      	mov	r1, r5
 8003a7a:	4630      	mov	r0, r6
 8003a7c:	f7ff ffa6 	bl	80039cc <sbrk_aligned>
 8003a80:	3001      	adds	r0, #1
 8003a82:	d03a      	beq.n	8003afa <_malloc_r+0xea>
 8003a84:	6823      	ldr	r3, [r4, #0]
 8003a86:	442b      	add	r3, r5
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a8e:	685a      	ldr	r2, [r3, #4]
 8003a90:	bb62      	cbnz	r2, 8003aec <_malloc_r+0xdc>
 8003a92:	f8c8 7000 	str.w	r7, [r8]
 8003a96:	e00f      	b.n	8003ab8 <_malloc_r+0xa8>
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	1b52      	subs	r2, r2, r5
 8003a9c:	d420      	bmi.n	8003ae0 <_malloc_r+0xd0>
 8003a9e:	2a0b      	cmp	r2, #11
 8003aa0:	d917      	bls.n	8003ad2 <_malloc_r+0xc2>
 8003aa2:	1961      	adds	r1, r4, r5
 8003aa4:	42a3      	cmp	r3, r4
 8003aa6:	6025      	str	r5, [r4, #0]
 8003aa8:	bf18      	it	ne
 8003aaa:	6059      	strne	r1, [r3, #4]
 8003aac:	6863      	ldr	r3, [r4, #4]
 8003aae:	bf08      	it	eq
 8003ab0:	f8c8 1000 	streq.w	r1, [r8]
 8003ab4:	5162      	str	r2, [r4, r5]
 8003ab6:	604b      	str	r3, [r1, #4]
 8003ab8:	4630      	mov	r0, r6
 8003aba:	f000 f82f 	bl	8003b1c <__malloc_unlock>
 8003abe:	f104 000b 	add.w	r0, r4, #11
 8003ac2:	1d23      	adds	r3, r4, #4
 8003ac4:	f020 0007 	bic.w	r0, r0, #7
 8003ac8:	1ac2      	subs	r2, r0, r3
 8003aca:	bf1c      	itt	ne
 8003acc:	1a1b      	subne	r3, r3, r0
 8003ace:	50a3      	strne	r3, [r4, r2]
 8003ad0:	e7af      	b.n	8003a32 <_malloc_r+0x22>
 8003ad2:	6862      	ldr	r2, [r4, #4]
 8003ad4:	42a3      	cmp	r3, r4
 8003ad6:	bf0c      	ite	eq
 8003ad8:	f8c8 2000 	streq.w	r2, [r8]
 8003adc:	605a      	strne	r2, [r3, #4]
 8003ade:	e7eb      	b.n	8003ab8 <_malloc_r+0xa8>
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	6864      	ldr	r4, [r4, #4]
 8003ae4:	e7ae      	b.n	8003a44 <_malloc_r+0x34>
 8003ae6:	463c      	mov	r4, r7
 8003ae8:	687f      	ldr	r7, [r7, #4]
 8003aea:	e7b6      	b.n	8003a5a <_malloc_r+0x4a>
 8003aec:	461a      	mov	r2, r3
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	42a3      	cmp	r3, r4
 8003af2:	d1fb      	bne.n	8003aec <_malloc_r+0xdc>
 8003af4:	2300      	movs	r3, #0
 8003af6:	6053      	str	r3, [r2, #4]
 8003af8:	e7de      	b.n	8003ab8 <_malloc_r+0xa8>
 8003afa:	230c      	movs	r3, #12
 8003afc:	6033      	str	r3, [r6, #0]
 8003afe:	4630      	mov	r0, r6
 8003b00:	f000 f80c 	bl	8003b1c <__malloc_unlock>
 8003b04:	e794      	b.n	8003a30 <_malloc_r+0x20>
 8003b06:	6005      	str	r5, [r0, #0]
 8003b08:	e7d6      	b.n	8003ab8 <_malloc_r+0xa8>
 8003b0a:	bf00      	nop
 8003b0c:	2000039c 	.word	0x2000039c

08003b10 <__malloc_lock>:
 8003b10:	4801      	ldr	r0, [pc, #4]	@ (8003b18 <__malloc_lock+0x8>)
 8003b12:	f7ff b8ae 	b.w	8002c72 <__retarget_lock_acquire_recursive>
 8003b16:	bf00      	nop
 8003b18:	20000394 	.word	0x20000394

08003b1c <__malloc_unlock>:
 8003b1c:	4801      	ldr	r0, [pc, #4]	@ (8003b24 <__malloc_unlock+0x8>)
 8003b1e:	f7ff b8a9 	b.w	8002c74 <__retarget_lock_release_recursive>
 8003b22:	bf00      	nop
 8003b24:	20000394 	.word	0x20000394

08003b28 <_Balloc>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	69c6      	ldr	r6, [r0, #28]
 8003b2c:	4604      	mov	r4, r0
 8003b2e:	460d      	mov	r5, r1
 8003b30:	b976      	cbnz	r6, 8003b50 <_Balloc+0x28>
 8003b32:	2010      	movs	r0, #16
 8003b34:	f7ff ff42 	bl	80039bc <malloc>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	61e0      	str	r0, [r4, #28]
 8003b3c:	b920      	cbnz	r0, 8003b48 <_Balloc+0x20>
 8003b3e:	4b18      	ldr	r3, [pc, #96]	@ (8003ba0 <_Balloc+0x78>)
 8003b40:	4818      	ldr	r0, [pc, #96]	@ (8003ba4 <_Balloc+0x7c>)
 8003b42:	216b      	movs	r1, #107	@ 0x6b
 8003b44:	f000 fdfa 	bl	800473c <__assert_func>
 8003b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003b4c:	6006      	str	r6, [r0, #0]
 8003b4e:	60c6      	str	r6, [r0, #12]
 8003b50:	69e6      	ldr	r6, [r4, #28]
 8003b52:	68f3      	ldr	r3, [r6, #12]
 8003b54:	b183      	cbz	r3, 8003b78 <_Balloc+0x50>
 8003b56:	69e3      	ldr	r3, [r4, #28]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003b5e:	b9b8      	cbnz	r0, 8003b90 <_Balloc+0x68>
 8003b60:	2101      	movs	r1, #1
 8003b62:	fa01 f605 	lsl.w	r6, r1, r5
 8003b66:	1d72      	adds	r2, r6, #5
 8003b68:	0092      	lsls	r2, r2, #2
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	f000 fe04 	bl	8004778 <_calloc_r>
 8003b70:	b160      	cbz	r0, 8003b8c <_Balloc+0x64>
 8003b72:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003b76:	e00e      	b.n	8003b96 <_Balloc+0x6e>
 8003b78:	2221      	movs	r2, #33	@ 0x21
 8003b7a:	2104      	movs	r1, #4
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	f000 fdfb 	bl	8004778 <_calloc_r>
 8003b82:	69e3      	ldr	r3, [r4, #28]
 8003b84:	60f0      	str	r0, [r6, #12]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e4      	bne.n	8003b56 <_Balloc+0x2e>
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	bd70      	pop	{r4, r5, r6, pc}
 8003b90:	6802      	ldr	r2, [r0, #0]
 8003b92:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003b96:	2300      	movs	r3, #0
 8003b98:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003b9c:	e7f7      	b.n	8003b8e <_Balloc+0x66>
 8003b9e:	bf00      	nop
 8003ba0:	0800498e 	.word	0x0800498e
 8003ba4:	08004a0e 	.word	0x08004a0e

08003ba8 <_Bfree>:
 8003ba8:	b570      	push	{r4, r5, r6, lr}
 8003baa:	69c6      	ldr	r6, [r0, #28]
 8003bac:	4605      	mov	r5, r0
 8003bae:	460c      	mov	r4, r1
 8003bb0:	b976      	cbnz	r6, 8003bd0 <_Bfree+0x28>
 8003bb2:	2010      	movs	r0, #16
 8003bb4:	f7ff ff02 	bl	80039bc <malloc>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	61e8      	str	r0, [r5, #28]
 8003bbc:	b920      	cbnz	r0, 8003bc8 <_Bfree+0x20>
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <_Bfree+0x3c>)
 8003bc0:	4809      	ldr	r0, [pc, #36]	@ (8003be8 <_Bfree+0x40>)
 8003bc2:	218f      	movs	r1, #143	@ 0x8f
 8003bc4:	f000 fdba 	bl	800473c <__assert_func>
 8003bc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003bcc:	6006      	str	r6, [r0, #0]
 8003bce:	60c6      	str	r6, [r0, #12]
 8003bd0:	b13c      	cbz	r4, 8003be2 <_Bfree+0x3a>
 8003bd2:	69eb      	ldr	r3, [r5, #28]
 8003bd4:	6862      	ldr	r2, [r4, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bdc:	6021      	str	r1, [r4, #0]
 8003bde:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003be2:	bd70      	pop	{r4, r5, r6, pc}
 8003be4:	0800498e 	.word	0x0800498e
 8003be8:	08004a0e 	.word	0x08004a0e

08003bec <__multadd>:
 8003bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf0:	690d      	ldr	r5, [r1, #16]
 8003bf2:	4607      	mov	r7, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	461e      	mov	r6, r3
 8003bf8:	f101 0c14 	add.w	ip, r1, #20
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f8dc 3000 	ldr.w	r3, [ip]
 8003c02:	b299      	uxth	r1, r3
 8003c04:	fb02 6101 	mla	r1, r2, r1, r6
 8003c08:	0c1e      	lsrs	r6, r3, #16
 8003c0a:	0c0b      	lsrs	r3, r1, #16
 8003c0c:	fb02 3306 	mla	r3, r2, r6, r3
 8003c10:	b289      	uxth	r1, r1
 8003c12:	3001      	adds	r0, #1
 8003c14:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003c18:	4285      	cmp	r5, r0
 8003c1a:	f84c 1b04 	str.w	r1, [ip], #4
 8003c1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003c22:	dcec      	bgt.n	8003bfe <__multadd+0x12>
 8003c24:	b30e      	cbz	r6, 8003c6a <__multadd+0x7e>
 8003c26:	68a3      	ldr	r3, [r4, #8]
 8003c28:	42ab      	cmp	r3, r5
 8003c2a:	dc19      	bgt.n	8003c60 <__multadd+0x74>
 8003c2c:	6861      	ldr	r1, [r4, #4]
 8003c2e:	4638      	mov	r0, r7
 8003c30:	3101      	adds	r1, #1
 8003c32:	f7ff ff79 	bl	8003b28 <_Balloc>
 8003c36:	4680      	mov	r8, r0
 8003c38:	b928      	cbnz	r0, 8003c46 <__multadd+0x5a>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <__multadd+0x84>)
 8003c3e:	480d      	ldr	r0, [pc, #52]	@ (8003c74 <__multadd+0x88>)
 8003c40:	21ba      	movs	r1, #186	@ 0xba
 8003c42:	f000 fd7b 	bl	800473c <__assert_func>
 8003c46:	6922      	ldr	r2, [r4, #16]
 8003c48:	3202      	adds	r2, #2
 8003c4a:	f104 010c 	add.w	r1, r4, #12
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	300c      	adds	r0, #12
 8003c52:	f000 fd65 	bl	8004720 <memcpy>
 8003c56:	4621      	mov	r1, r4
 8003c58:	4638      	mov	r0, r7
 8003c5a:	f7ff ffa5 	bl	8003ba8 <_Bfree>
 8003c5e:	4644      	mov	r4, r8
 8003c60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003c64:	3501      	adds	r5, #1
 8003c66:	615e      	str	r6, [r3, #20]
 8003c68:	6125      	str	r5, [r4, #16]
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c70:	080049fd 	.word	0x080049fd
 8003c74:	08004a0e 	.word	0x08004a0e

08003c78 <__hi0bits>:
 8003c78:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	bf36      	itet	cc
 8003c80:	0403      	lslcc	r3, r0, #16
 8003c82:	2000      	movcs	r0, #0
 8003c84:	2010      	movcc	r0, #16
 8003c86:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c8a:	bf3c      	itt	cc
 8003c8c:	021b      	lslcc	r3, r3, #8
 8003c8e:	3008      	addcc	r0, #8
 8003c90:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c94:	bf3c      	itt	cc
 8003c96:	011b      	lslcc	r3, r3, #4
 8003c98:	3004      	addcc	r0, #4
 8003c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c9e:	bf3c      	itt	cc
 8003ca0:	009b      	lslcc	r3, r3, #2
 8003ca2:	3002      	addcc	r0, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	db05      	blt.n	8003cb4 <__hi0bits+0x3c>
 8003ca8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8003cac:	f100 0001 	add.w	r0, r0, #1
 8003cb0:	bf08      	it	eq
 8003cb2:	2020      	moveq	r0, #32
 8003cb4:	4770      	bx	lr

08003cb6 <__lo0bits>:
 8003cb6:	6803      	ldr	r3, [r0, #0]
 8003cb8:	4602      	mov	r2, r0
 8003cba:	f013 0007 	ands.w	r0, r3, #7
 8003cbe:	d00b      	beq.n	8003cd8 <__lo0bits+0x22>
 8003cc0:	07d9      	lsls	r1, r3, #31
 8003cc2:	d421      	bmi.n	8003d08 <__lo0bits+0x52>
 8003cc4:	0798      	lsls	r0, r3, #30
 8003cc6:	bf49      	itett	mi
 8003cc8:	085b      	lsrmi	r3, r3, #1
 8003cca:	089b      	lsrpl	r3, r3, #2
 8003ccc:	2001      	movmi	r0, #1
 8003cce:	6013      	strmi	r3, [r2, #0]
 8003cd0:	bf5c      	itt	pl
 8003cd2:	6013      	strpl	r3, [r2, #0]
 8003cd4:	2002      	movpl	r0, #2
 8003cd6:	4770      	bx	lr
 8003cd8:	b299      	uxth	r1, r3
 8003cda:	b909      	cbnz	r1, 8003ce0 <__lo0bits+0x2a>
 8003cdc:	0c1b      	lsrs	r3, r3, #16
 8003cde:	2010      	movs	r0, #16
 8003ce0:	b2d9      	uxtb	r1, r3
 8003ce2:	b909      	cbnz	r1, 8003ce8 <__lo0bits+0x32>
 8003ce4:	3008      	adds	r0, #8
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	0719      	lsls	r1, r3, #28
 8003cea:	bf04      	itt	eq
 8003cec:	091b      	lsreq	r3, r3, #4
 8003cee:	3004      	addeq	r0, #4
 8003cf0:	0799      	lsls	r1, r3, #30
 8003cf2:	bf04      	itt	eq
 8003cf4:	089b      	lsreq	r3, r3, #2
 8003cf6:	3002      	addeq	r0, #2
 8003cf8:	07d9      	lsls	r1, r3, #31
 8003cfa:	d403      	bmi.n	8003d04 <__lo0bits+0x4e>
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	f100 0001 	add.w	r0, r0, #1
 8003d02:	d003      	beq.n	8003d0c <__lo0bits+0x56>
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4770      	bx	lr
 8003d08:	2000      	movs	r0, #0
 8003d0a:	4770      	bx	lr
 8003d0c:	2020      	movs	r0, #32
 8003d0e:	4770      	bx	lr

08003d10 <__i2b>:
 8003d10:	b510      	push	{r4, lr}
 8003d12:	460c      	mov	r4, r1
 8003d14:	2101      	movs	r1, #1
 8003d16:	f7ff ff07 	bl	8003b28 <_Balloc>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	b928      	cbnz	r0, 8003d2a <__i2b+0x1a>
 8003d1e:	4b05      	ldr	r3, [pc, #20]	@ (8003d34 <__i2b+0x24>)
 8003d20:	4805      	ldr	r0, [pc, #20]	@ (8003d38 <__i2b+0x28>)
 8003d22:	f240 1145 	movw	r1, #325	@ 0x145
 8003d26:	f000 fd09 	bl	800473c <__assert_func>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	6144      	str	r4, [r0, #20]
 8003d2e:	6103      	str	r3, [r0, #16]
 8003d30:	bd10      	pop	{r4, pc}
 8003d32:	bf00      	nop
 8003d34:	080049fd 	.word	0x080049fd
 8003d38:	08004a0e 	.word	0x08004a0e

08003d3c <__multiply>:
 8003d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d40:	4617      	mov	r7, r2
 8003d42:	690a      	ldr	r2, [r1, #16]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	bfa8      	it	ge
 8003d4a:	463b      	movge	r3, r7
 8003d4c:	4689      	mov	r9, r1
 8003d4e:	bfa4      	itt	ge
 8003d50:	460f      	movge	r7, r1
 8003d52:	4699      	movge	r9, r3
 8003d54:	693d      	ldr	r5, [r7, #16]
 8003d56:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	6879      	ldr	r1, [r7, #4]
 8003d5e:	eb05 060a 	add.w	r6, r5, sl
 8003d62:	42b3      	cmp	r3, r6
 8003d64:	b085      	sub	sp, #20
 8003d66:	bfb8      	it	lt
 8003d68:	3101      	addlt	r1, #1
 8003d6a:	f7ff fedd 	bl	8003b28 <_Balloc>
 8003d6e:	b930      	cbnz	r0, 8003d7e <__multiply+0x42>
 8003d70:	4602      	mov	r2, r0
 8003d72:	4b41      	ldr	r3, [pc, #260]	@ (8003e78 <__multiply+0x13c>)
 8003d74:	4841      	ldr	r0, [pc, #260]	@ (8003e7c <__multiply+0x140>)
 8003d76:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003d7a:	f000 fcdf 	bl	800473c <__assert_func>
 8003d7e:	f100 0414 	add.w	r4, r0, #20
 8003d82:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8003d86:	4623      	mov	r3, r4
 8003d88:	2200      	movs	r2, #0
 8003d8a:	4573      	cmp	r3, lr
 8003d8c:	d320      	bcc.n	8003dd0 <__multiply+0x94>
 8003d8e:	f107 0814 	add.w	r8, r7, #20
 8003d92:	f109 0114 	add.w	r1, r9, #20
 8003d96:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8003d9a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8003d9e:	9302      	str	r3, [sp, #8]
 8003da0:	1beb      	subs	r3, r5, r7
 8003da2:	3b15      	subs	r3, #21
 8003da4:	f023 0303 	bic.w	r3, r3, #3
 8003da8:	3304      	adds	r3, #4
 8003daa:	3715      	adds	r7, #21
 8003dac:	42bd      	cmp	r5, r7
 8003dae:	bf38      	it	cc
 8003db0:	2304      	movcc	r3, #4
 8003db2:	9301      	str	r3, [sp, #4]
 8003db4:	9b02      	ldr	r3, [sp, #8]
 8003db6:	9103      	str	r1, [sp, #12]
 8003db8:	428b      	cmp	r3, r1
 8003dba:	d80c      	bhi.n	8003dd6 <__multiply+0x9a>
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	dd03      	ble.n	8003dc8 <__multiply+0x8c>
 8003dc0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d055      	beq.n	8003e74 <__multiply+0x138>
 8003dc8:	6106      	str	r6, [r0, #16]
 8003dca:	b005      	add	sp, #20
 8003dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dd0:	f843 2b04 	str.w	r2, [r3], #4
 8003dd4:	e7d9      	b.n	8003d8a <__multiply+0x4e>
 8003dd6:	f8b1 a000 	ldrh.w	sl, [r1]
 8003dda:	f1ba 0f00 	cmp.w	sl, #0
 8003dde:	d01f      	beq.n	8003e20 <__multiply+0xe4>
 8003de0:	46c4      	mov	ip, r8
 8003de2:	46a1      	mov	r9, r4
 8003de4:	2700      	movs	r7, #0
 8003de6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003dea:	f8d9 3000 	ldr.w	r3, [r9]
 8003dee:	fa1f fb82 	uxth.w	fp, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	fb0a 330b 	mla	r3, sl, fp, r3
 8003df8:	443b      	add	r3, r7
 8003dfa:	f8d9 7000 	ldr.w	r7, [r9]
 8003dfe:	0c12      	lsrs	r2, r2, #16
 8003e00:	0c3f      	lsrs	r7, r7, #16
 8003e02:	fb0a 7202 	mla	r2, sl, r2, r7
 8003e06:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e10:	4565      	cmp	r5, ip
 8003e12:	f849 3b04 	str.w	r3, [r9], #4
 8003e16:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8003e1a:	d8e4      	bhi.n	8003de6 <__multiply+0xaa>
 8003e1c:	9b01      	ldr	r3, [sp, #4]
 8003e1e:	50e7      	str	r7, [r4, r3]
 8003e20:	9b03      	ldr	r3, [sp, #12]
 8003e22:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003e26:	3104      	adds	r1, #4
 8003e28:	f1b9 0f00 	cmp.w	r9, #0
 8003e2c:	d020      	beq.n	8003e70 <__multiply+0x134>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	4647      	mov	r7, r8
 8003e32:	46a4      	mov	ip, r4
 8003e34:	f04f 0a00 	mov.w	sl, #0
 8003e38:	f8b7 b000 	ldrh.w	fp, [r7]
 8003e3c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8003e40:	fb09 220b 	mla	r2, r9, fp, r2
 8003e44:	4452      	add	r2, sl
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e4c:	f84c 3b04 	str.w	r3, [ip], #4
 8003e50:	f857 3b04 	ldr.w	r3, [r7], #4
 8003e54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e58:	f8bc 3000 	ldrh.w	r3, [ip]
 8003e5c:	fb09 330a 	mla	r3, r9, sl, r3
 8003e60:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8003e64:	42bd      	cmp	r5, r7
 8003e66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003e6a:	d8e5      	bhi.n	8003e38 <__multiply+0xfc>
 8003e6c:	9a01      	ldr	r2, [sp, #4]
 8003e6e:	50a3      	str	r3, [r4, r2]
 8003e70:	3404      	adds	r4, #4
 8003e72:	e79f      	b.n	8003db4 <__multiply+0x78>
 8003e74:	3e01      	subs	r6, #1
 8003e76:	e7a1      	b.n	8003dbc <__multiply+0x80>
 8003e78:	080049fd 	.word	0x080049fd
 8003e7c:	08004a0e 	.word	0x08004a0e

08003e80 <__pow5mult>:
 8003e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e84:	4615      	mov	r5, r2
 8003e86:	f012 0203 	ands.w	r2, r2, #3
 8003e8a:	4607      	mov	r7, r0
 8003e8c:	460e      	mov	r6, r1
 8003e8e:	d007      	beq.n	8003ea0 <__pow5mult+0x20>
 8003e90:	4c25      	ldr	r4, [pc, #148]	@ (8003f28 <__pow5mult+0xa8>)
 8003e92:	3a01      	subs	r2, #1
 8003e94:	2300      	movs	r3, #0
 8003e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003e9a:	f7ff fea7 	bl	8003bec <__multadd>
 8003e9e:	4606      	mov	r6, r0
 8003ea0:	10ad      	asrs	r5, r5, #2
 8003ea2:	d03d      	beq.n	8003f20 <__pow5mult+0xa0>
 8003ea4:	69fc      	ldr	r4, [r7, #28]
 8003ea6:	b97c      	cbnz	r4, 8003ec8 <__pow5mult+0x48>
 8003ea8:	2010      	movs	r0, #16
 8003eaa:	f7ff fd87 	bl	80039bc <malloc>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	61f8      	str	r0, [r7, #28]
 8003eb2:	b928      	cbnz	r0, 8003ec0 <__pow5mult+0x40>
 8003eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f2c <__pow5mult+0xac>)
 8003eb6:	481e      	ldr	r0, [pc, #120]	@ (8003f30 <__pow5mult+0xb0>)
 8003eb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003ebc:	f000 fc3e 	bl	800473c <__assert_func>
 8003ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ec4:	6004      	str	r4, [r0, #0]
 8003ec6:	60c4      	str	r4, [r0, #12]
 8003ec8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003ed0:	b94c      	cbnz	r4, 8003ee6 <__pow5mult+0x66>
 8003ed2:	f240 2171 	movw	r1, #625	@ 0x271
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	f7ff ff1a 	bl	8003d10 <__i2b>
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ee2:	4604      	mov	r4, r0
 8003ee4:	6003      	str	r3, [r0, #0]
 8003ee6:	f04f 0900 	mov.w	r9, #0
 8003eea:	07eb      	lsls	r3, r5, #31
 8003eec:	d50a      	bpl.n	8003f04 <__pow5mult+0x84>
 8003eee:	4631      	mov	r1, r6
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	4638      	mov	r0, r7
 8003ef4:	f7ff ff22 	bl	8003d3c <__multiply>
 8003ef8:	4631      	mov	r1, r6
 8003efa:	4680      	mov	r8, r0
 8003efc:	4638      	mov	r0, r7
 8003efe:	f7ff fe53 	bl	8003ba8 <_Bfree>
 8003f02:	4646      	mov	r6, r8
 8003f04:	106d      	asrs	r5, r5, #1
 8003f06:	d00b      	beq.n	8003f20 <__pow5mult+0xa0>
 8003f08:	6820      	ldr	r0, [r4, #0]
 8003f0a:	b938      	cbnz	r0, 8003f1c <__pow5mult+0x9c>
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	4621      	mov	r1, r4
 8003f10:	4638      	mov	r0, r7
 8003f12:	f7ff ff13 	bl	8003d3c <__multiply>
 8003f16:	6020      	str	r0, [r4, #0]
 8003f18:	f8c0 9000 	str.w	r9, [r0]
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	e7e4      	b.n	8003eea <__pow5mult+0x6a>
 8003f20:	4630      	mov	r0, r6
 8003f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f26:	bf00      	nop
 8003f28:	08004ac0 	.word	0x08004ac0
 8003f2c:	0800498e 	.word	0x0800498e
 8003f30:	08004a0e 	.word	0x08004a0e

08003f34 <__lshift>:
 8003f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f38:	460c      	mov	r4, r1
 8003f3a:	6849      	ldr	r1, [r1, #4]
 8003f3c:	6923      	ldr	r3, [r4, #16]
 8003f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003f42:	68a3      	ldr	r3, [r4, #8]
 8003f44:	4607      	mov	r7, r0
 8003f46:	4691      	mov	r9, r2
 8003f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003f4c:	f108 0601 	add.w	r6, r8, #1
 8003f50:	42b3      	cmp	r3, r6
 8003f52:	db0b      	blt.n	8003f6c <__lshift+0x38>
 8003f54:	4638      	mov	r0, r7
 8003f56:	f7ff fde7 	bl	8003b28 <_Balloc>
 8003f5a:	4605      	mov	r5, r0
 8003f5c:	b948      	cbnz	r0, 8003f72 <__lshift+0x3e>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b28      	ldr	r3, [pc, #160]	@ (8004004 <__lshift+0xd0>)
 8003f62:	4829      	ldr	r0, [pc, #164]	@ (8004008 <__lshift+0xd4>)
 8003f64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003f68:	f000 fbe8 	bl	800473c <__assert_func>
 8003f6c:	3101      	adds	r1, #1
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	e7ee      	b.n	8003f50 <__lshift+0x1c>
 8003f72:	2300      	movs	r3, #0
 8003f74:	f100 0114 	add.w	r1, r0, #20
 8003f78:	f100 0210 	add.w	r2, r0, #16
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	4553      	cmp	r3, sl
 8003f80:	db33      	blt.n	8003fea <__lshift+0xb6>
 8003f82:	6920      	ldr	r0, [r4, #16]
 8003f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003f88:	f104 0314 	add.w	r3, r4, #20
 8003f8c:	f019 091f 	ands.w	r9, r9, #31
 8003f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003f98:	d02b      	beq.n	8003ff2 <__lshift+0xbe>
 8003f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8003f9e:	468a      	mov	sl, r1
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8003fa8:	4310      	orrs	r0, r2
 8003faa:	f84a 0b04 	str.w	r0, [sl], #4
 8003fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fb2:	459c      	cmp	ip, r3
 8003fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8003fb8:	d8f3      	bhi.n	8003fa2 <__lshift+0x6e>
 8003fba:	ebac 0304 	sub.w	r3, ip, r4
 8003fbe:	3b15      	subs	r3, #21
 8003fc0:	f023 0303 	bic.w	r3, r3, #3
 8003fc4:	3304      	adds	r3, #4
 8003fc6:	f104 0015 	add.w	r0, r4, #21
 8003fca:	4560      	cmp	r0, ip
 8003fcc:	bf88      	it	hi
 8003fce:	2304      	movhi	r3, #4
 8003fd0:	50ca      	str	r2, [r1, r3]
 8003fd2:	b10a      	cbz	r2, 8003fd8 <__lshift+0xa4>
 8003fd4:	f108 0602 	add.w	r6, r8, #2
 8003fd8:	3e01      	subs	r6, #1
 8003fda:	4638      	mov	r0, r7
 8003fdc:	612e      	str	r6, [r5, #16]
 8003fde:	4621      	mov	r1, r4
 8003fe0:	f7ff fde2 	bl	8003ba8 <_Bfree>
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8003fee:	3301      	adds	r3, #1
 8003ff0:	e7c5      	b.n	8003f7e <__lshift+0x4a>
 8003ff2:	3904      	subs	r1, #4
 8003ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003ffc:	459c      	cmp	ip, r3
 8003ffe:	d8f9      	bhi.n	8003ff4 <__lshift+0xc0>
 8004000:	e7ea      	b.n	8003fd8 <__lshift+0xa4>
 8004002:	bf00      	nop
 8004004:	080049fd 	.word	0x080049fd
 8004008:	08004a0e 	.word	0x08004a0e

0800400c <__mcmp>:
 800400c:	690a      	ldr	r2, [r1, #16]
 800400e:	4603      	mov	r3, r0
 8004010:	6900      	ldr	r0, [r0, #16]
 8004012:	1a80      	subs	r0, r0, r2
 8004014:	b530      	push	{r4, r5, lr}
 8004016:	d10e      	bne.n	8004036 <__mcmp+0x2a>
 8004018:	3314      	adds	r3, #20
 800401a:	3114      	adds	r1, #20
 800401c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004020:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004024:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004028:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800402c:	4295      	cmp	r5, r2
 800402e:	d003      	beq.n	8004038 <__mcmp+0x2c>
 8004030:	d205      	bcs.n	800403e <__mcmp+0x32>
 8004032:	f04f 30ff 	mov.w	r0, #4294967295
 8004036:	bd30      	pop	{r4, r5, pc}
 8004038:	42a3      	cmp	r3, r4
 800403a:	d3f3      	bcc.n	8004024 <__mcmp+0x18>
 800403c:	e7fb      	b.n	8004036 <__mcmp+0x2a>
 800403e:	2001      	movs	r0, #1
 8004040:	e7f9      	b.n	8004036 <__mcmp+0x2a>
	...

08004044 <__mdiff>:
 8004044:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004048:	4689      	mov	r9, r1
 800404a:	4606      	mov	r6, r0
 800404c:	4611      	mov	r1, r2
 800404e:	4648      	mov	r0, r9
 8004050:	4614      	mov	r4, r2
 8004052:	f7ff ffdb 	bl	800400c <__mcmp>
 8004056:	1e05      	subs	r5, r0, #0
 8004058:	d112      	bne.n	8004080 <__mdiff+0x3c>
 800405a:	4629      	mov	r1, r5
 800405c:	4630      	mov	r0, r6
 800405e:	f7ff fd63 	bl	8003b28 <_Balloc>
 8004062:	4602      	mov	r2, r0
 8004064:	b928      	cbnz	r0, 8004072 <__mdiff+0x2e>
 8004066:	4b3f      	ldr	r3, [pc, #252]	@ (8004164 <__mdiff+0x120>)
 8004068:	f240 2137 	movw	r1, #567	@ 0x237
 800406c:	483e      	ldr	r0, [pc, #248]	@ (8004168 <__mdiff+0x124>)
 800406e:	f000 fb65 	bl	800473c <__assert_func>
 8004072:	2301      	movs	r3, #1
 8004074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004078:	4610      	mov	r0, r2
 800407a:	b003      	add	sp, #12
 800407c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004080:	bfbc      	itt	lt
 8004082:	464b      	movlt	r3, r9
 8004084:	46a1      	movlt	r9, r4
 8004086:	4630      	mov	r0, r6
 8004088:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800408c:	bfba      	itte	lt
 800408e:	461c      	movlt	r4, r3
 8004090:	2501      	movlt	r5, #1
 8004092:	2500      	movge	r5, #0
 8004094:	f7ff fd48 	bl	8003b28 <_Balloc>
 8004098:	4602      	mov	r2, r0
 800409a:	b918      	cbnz	r0, 80040a4 <__mdiff+0x60>
 800409c:	4b31      	ldr	r3, [pc, #196]	@ (8004164 <__mdiff+0x120>)
 800409e:	f240 2145 	movw	r1, #581	@ 0x245
 80040a2:	e7e3      	b.n	800406c <__mdiff+0x28>
 80040a4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80040a8:	6926      	ldr	r6, [r4, #16]
 80040aa:	60c5      	str	r5, [r0, #12]
 80040ac:	f109 0310 	add.w	r3, r9, #16
 80040b0:	f109 0514 	add.w	r5, r9, #20
 80040b4:	f104 0e14 	add.w	lr, r4, #20
 80040b8:	f100 0b14 	add.w	fp, r0, #20
 80040bc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80040c0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	46d9      	mov	r9, fp
 80040c8:	f04f 0c00 	mov.w	ip, #0
 80040cc:	9b01      	ldr	r3, [sp, #4]
 80040ce:	f85e 0b04 	ldr.w	r0, [lr], #4
 80040d2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80040d6:	9301      	str	r3, [sp, #4]
 80040d8:	fa1f f38a 	uxth.w	r3, sl
 80040dc:	4619      	mov	r1, r3
 80040de:	b283      	uxth	r3, r0
 80040e0:	1acb      	subs	r3, r1, r3
 80040e2:	0c00      	lsrs	r0, r0, #16
 80040e4:	4463      	add	r3, ip
 80040e6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80040ea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80040f4:	4576      	cmp	r6, lr
 80040f6:	f849 3b04 	str.w	r3, [r9], #4
 80040fa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80040fe:	d8e5      	bhi.n	80040cc <__mdiff+0x88>
 8004100:	1b33      	subs	r3, r6, r4
 8004102:	3b15      	subs	r3, #21
 8004104:	f023 0303 	bic.w	r3, r3, #3
 8004108:	3415      	adds	r4, #21
 800410a:	3304      	adds	r3, #4
 800410c:	42a6      	cmp	r6, r4
 800410e:	bf38      	it	cc
 8004110:	2304      	movcc	r3, #4
 8004112:	441d      	add	r5, r3
 8004114:	445b      	add	r3, fp
 8004116:	461e      	mov	r6, r3
 8004118:	462c      	mov	r4, r5
 800411a:	4544      	cmp	r4, r8
 800411c:	d30e      	bcc.n	800413c <__mdiff+0xf8>
 800411e:	f108 0103 	add.w	r1, r8, #3
 8004122:	1b49      	subs	r1, r1, r5
 8004124:	f021 0103 	bic.w	r1, r1, #3
 8004128:	3d03      	subs	r5, #3
 800412a:	45a8      	cmp	r8, r5
 800412c:	bf38      	it	cc
 800412e:	2100      	movcc	r1, #0
 8004130:	440b      	add	r3, r1
 8004132:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004136:	b191      	cbz	r1, 800415e <__mdiff+0x11a>
 8004138:	6117      	str	r7, [r2, #16]
 800413a:	e79d      	b.n	8004078 <__mdiff+0x34>
 800413c:	f854 1b04 	ldr.w	r1, [r4], #4
 8004140:	46e6      	mov	lr, ip
 8004142:	0c08      	lsrs	r0, r1, #16
 8004144:	fa1c fc81 	uxtah	ip, ip, r1
 8004148:	4471      	add	r1, lr
 800414a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800414e:	b289      	uxth	r1, r1
 8004150:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004154:	f846 1b04 	str.w	r1, [r6], #4
 8004158:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800415c:	e7dd      	b.n	800411a <__mdiff+0xd6>
 800415e:	3f01      	subs	r7, #1
 8004160:	e7e7      	b.n	8004132 <__mdiff+0xee>
 8004162:	bf00      	nop
 8004164:	080049fd 	.word	0x080049fd
 8004168:	08004a0e 	.word	0x08004a0e

0800416c <__d2b>:
 800416c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004170:	460f      	mov	r7, r1
 8004172:	2101      	movs	r1, #1
 8004174:	ec59 8b10 	vmov	r8, r9, d0
 8004178:	4616      	mov	r6, r2
 800417a:	f7ff fcd5 	bl	8003b28 <_Balloc>
 800417e:	4604      	mov	r4, r0
 8004180:	b930      	cbnz	r0, 8004190 <__d2b+0x24>
 8004182:	4602      	mov	r2, r0
 8004184:	4b23      	ldr	r3, [pc, #140]	@ (8004214 <__d2b+0xa8>)
 8004186:	4824      	ldr	r0, [pc, #144]	@ (8004218 <__d2b+0xac>)
 8004188:	f240 310f 	movw	r1, #783	@ 0x30f
 800418c:	f000 fad6 	bl	800473c <__assert_func>
 8004190:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8004194:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004198:	b10d      	cbz	r5, 800419e <__d2b+0x32>
 800419a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800419e:	9301      	str	r3, [sp, #4]
 80041a0:	f1b8 0300 	subs.w	r3, r8, #0
 80041a4:	d023      	beq.n	80041ee <__d2b+0x82>
 80041a6:	4668      	mov	r0, sp
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	f7ff fd84 	bl	8003cb6 <__lo0bits>
 80041ae:	e9dd 1200 	ldrd	r1, r2, [sp]
 80041b2:	b1d0      	cbz	r0, 80041ea <__d2b+0x7e>
 80041b4:	f1c0 0320 	rsb	r3, r0, #32
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	430b      	orrs	r3, r1
 80041be:	40c2      	lsrs	r2, r0
 80041c0:	6163      	str	r3, [r4, #20]
 80041c2:	9201      	str	r2, [sp, #4]
 80041c4:	9b01      	ldr	r3, [sp, #4]
 80041c6:	61a3      	str	r3, [r4, #24]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	bf0c      	ite	eq
 80041cc:	2201      	moveq	r2, #1
 80041ce:	2202      	movne	r2, #2
 80041d0:	6122      	str	r2, [r4, #16]
 80041d2:	b1a5      	cbz	r5, 80041fe <__d2b+0x92>
 80041d4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80041d8:	4405      	add	r5, r0
 80041da:	603d      	str	r5, [r7, #0]
 80041dc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80041e0:	6030      	str	r0, [r6, #0]
 80041e2:	4620      	mov	r0, r4
 80041e4:	b003      	add	sp, #12
 80041e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041ea:	6161      	str	r1, [r4, #20]
 80041ec:	e7ea      	b.n	80041c4 <__d2b+0x58>
 80041ee:	a801      	add	r0, sp, #4
 80041f0:	f7ff fd61 	bl	8003cb6 <__lo0bits>
 80041f4:	9b01      	ldr	r3, [sp, #4]
 80041f6:	6163      	str	r3, [r4, #20]
 80041f8:	3020      	adds	r0, #32
 80041fa:	2201      	movs	r2, #1
 80041fc:	e7e8      	b.n	80041d0 <__d2b+0x64>
 80041fe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8004202:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8004206:	6038      	str	r0, [r7, #0]
 8004208:	6918      	ldr	r0, [r3, #16]
 800420a:	f7ff fd35 	bl	8003c78 <__hi0bits>
 800420e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8004212:	e7e5      	b.n	80041e0 <__d2b+0x74>
 8004214:	080049fd 	.word	0x080049fd
 8004218:	08004a0e 	.word	0x08004a0e

0800421c <__sfputc_r>:
 800421c:	6893      	ldr	r3, [r2, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	b410      	push	{r4}
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	da08      	bge.n	800423a <__sfputc_r+0x1e>
 8004228:	6994      	ldr	r4, [r2, #24]
 800422a:	42a3      	cmp	r3, r4
 800422c:	db01      	blt.n	8004232 <__sfputc_r+0x16>
 800422e:	290a      	cmp	r1, #10
 8004230:	d103      	bne.n	800423a <__sfputc_r+0x1e>
 8004232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004236:	f7fe bc0a 	b.w	8002a4e <__swbuf_r>
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	1c58      	adds	r0, r3, #1
 800423e:	6010      	str	r0, [r2, #0]
 8004240:	7019      	strb	r1, [r3, #0]
 8004242:	4608      	mov	r0, r1
 8004244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004248:	4770      	bx	lr

0800424a <__sfputs_r>:
 800424a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424c:	4606      	mov	r6, r0
 800424e:	460f      	mov	r7, r1
 8004250:	4614      	mov	r4, r2
 8004252:	18d5      	adds	r5, r2, r3
 8004254:	42ac      	cmp	r4, r5
 8004256:	d101      	bne.n	800425c <__sfputs_r+0x12>
 8004258:	2000      	movs	r0, #0
 800425a:	e007      	b.n	800426c <__sfputs_r+0x22>
 800425c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004260:	463a      	mov	r2, r7
 8004262:	4630      	mov	r0, r6
 8004264:	f7ff ffda 	bl	800421c <__sfputc_r>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d1f3      	bne.n	8004254 <__sfputs_r+0xa>
 800426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004270 <_vfiprintf_r>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	460d      	mov	r5, r1
 8004276:	b09d      	sub	sp, #116	@ 0x74
 8004278:	4614      	mov	r4, r2
 800427a:	4698      	mov	r8, r3
 800427c:	4606      	mov	r6, r0
 800427e:	b118      	cbz	r0, 8004288 <_vfiprintf_r+0x18>
 8004280:	6a03      	ldr	r3, [r0, #32]
 8004282:	b90b      	cbnz	r3, 8004288 <_vfiprintf_r+0x18>
 8004284:	f7fe fafa 	bl	800287c <__sinit>
 8004288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800428a:	07d9      	lsls	r1, r3, #31
 800428c:	d405      	bmi.n	800429a <_vfiprintf_r+0x2a>
 800428e:	89ab      	ldrh	r3, [r5, #12]
 8004290:	059a      	lsls	r2, r3, #22
 8004292:	d402      	bmi.n	800429a <_vfiprintf_r+0x2a>
 8004294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004296:	f7fe fcec 	bl	8002c72 <__retarget_lock_acquire_recursive>
 800429a:	89ab      	ldrh	r3, [r5, #12]
 800429c:	071b      	lsls	r3, r3, #28
 800429e:	d501      	bpl.n	80042a4 <_vfiprintf_r+0x34>
 80042a0:	692b      	ldr	r3, [r5, #16]
 80042a2:	b99b      	cbnz	r3, 80042cc <_vfiprintf_r+0x5c>
 80042a4:	4629      	mov	r1, r5
 80042a6:	4630      	mov	r0, r6
 80042a8:	f7fe fc10 	bl	8002acc <__swsetup_r>
 80042ac:	b170      	cbz	r0, 80042cc <_vfiprintf_r+0x5c>
 80042ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042b0:	07dc      	lsls	r4, r3, #31
 80042b2:	d504      	bpl.n	80042be <_vfiprintf_r+0x4e>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	b01d      	add	sp, #116	@ 0x74
 80042ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042be:	89ab      	ldrh	r3, [r5, #12]
 80042c0:	0598      	lsls	r0, r3, #22
 80042c2:	d4f7      	bmi.n	80042b4 <_vfiprintf_r+0x44>
 80042c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042c6:	f7fe fcd5 	bl	8002c74 <__retarget_lock_release_recursive>
 80042ca:	e7f3      	b.n	80042b4 <_vfiprintf_r+0x44>
 80042cc:	2300      	movs	r3, #0
 80042ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d0:	2320      	movs	r3, #32
 80042d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042da:	2330      	movs	r3, #48	@ 0x30
 80042dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800448c <_vfiprintf_r+0x21c>
 80042e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042e4:	f04f 0901 	mov.w	r9, #1
 80042e8:	4623      	mov	r3, r4
 80042ea:	469a      	mov	sl, r3
 80042ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f0:	b10a      	cbz	r2, 80042f6 <_vfiprintf_r+0x86>
 80042f2:	2a25      	cmp	r2, #37	@ 0x25
 80042f4:	d1f9      	bne.n	80042ea <_vfiprintf_r+0x7a>
 80042f6:	ebba 0b04 	subs.w	fp, sl, r4
 80042fa:	d00b      	beq.n	8004314 <_vfiprintf_r+0xa4>
 80042fc:	465b      	mov	r3, fp
 80042fe:	4622      	mov	r2, r4
 8004300:	4629      	mov	r1, r5
 8004302:	4630      	mov	r0, r6
 8004304:	f7ff ffa1 	bl	800424a <__sfputs_r>
 8004308:	3001      	adds	r0, #1
 800430a:	f000 80a7 	beq.w	800445c <_vfiprintf_r+0x1ec>
 800430e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004310:	445a      	add	r2, fp
 8004312:	9209      	str	r2, [sp, #36]	@ 0x24
 8004314:	f89a 3000 	ldrb.w	r3, [sl]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 809f 	beq.w	800445c <_vfiprintf_r+0x1ec>
 800431e:	2300      	movs	r3, #0
 8004320:	f04f 32ff 	mov.w	r2, #4294967295
 8004324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004328:	f10a 0a01 	add.w	sl, sl, #1
 800432c:	9304      	str	r3, [sp, #16]
 800432e:	9307      	str	r3, [sp, #28]
 8004330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004334:	931a      	str	r3, [sp, #104]	@ 0x68
 8004336:	4654      	mov	r4, sl
 8004338:	2205      	movs	r2, #5
 800433a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433e:	4853      	ldr	r0, [pc, #332]	@ (800448c <_vfiprintf_r+0x21c>)
 8004340:	f7fb ff46 	bl	80001d0 <memchr>
 8004344:	9a04      	ldr	r2, [sp, #16]
 8004346:	b9d8      	cbnz	r0, 8004380 <_vfiprintf_r+0x110>
 8004348:	06d1      	lsls	r1, r2, #27
 800434a:	bf44      	itt	mi
 800434c:	2320      	movmi	r3, #32
 800434e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004352:	0713      	lsls	r3, r2, #28
 8004354:	bf44      	itt	mi
 8004356:	232b      	movmi	r3, #43	@ 0x2b
 8004358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800435c:	f89a 3000 	ldrb.w	r3, [sl]
 8004360:	2b2a      	cmp	r3, #42	@ 0x2a
 8004362:	d015      	beq.n	8004390 <_vfiprintf_r+0x120>
 8004364:	9a07      	ldr	r2, [sp, #28]
 8004366:	4654      	mov	r4, sl
 8004368:	2000      	movs	r0, #0
 800436a:	f04f 0c0a 	mov.w	ip, #10
 800436e:	4621      	mov	r1, r4
 8004370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004374:	3b30      	subs	r3, #48	@ 0x30
 8004376:	2b09      	cmp	r3, #9
 8004378:	d94b      	bls.n	8004412 <_vfiprintf_r+0x1a2>
 800437a:	b1b0      	cbz	r0, 80043aa <_vfiprintf_r+0x13a>
 800437c:	9207      	str	r2, [sp, #28]
 800437e:	e014      	b.n	80043aa <_vfiprintf_r+0x13a>
 8004380:	eba0 0308 	sub.w	r3, r0, r8
 8004384:	fa09 f303 	lsl.w	r3, r9, r3
 8004388:	4313      	orrs	r3, r2
 800438a:	9304      	str	r3, [sp, #16]
 800438c:	46a2      	mov	sl, r4
 800438e:	e7d2      	b.n	8004336 <_vfiprintf_r+0xc6>
 8004390:	9b03      	ldr	r3, [sp, #12]
 8004392:	1d19      	adds	r1, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	9103      	str	r1, [sp, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	bfbb      	ittet	lt
 800439c:	425b      	neglt	r3, r3
 800439e:	f042 0202 	orrlt.w	r2, r2, #2
 80043a2:	9307      	strge	r3, [sp, #28]
 80043a4:	9307      	strlt	r3, [sp, #28]
 80043a6:	bfb8      	it	lt
 80043a8:	9204      	strlt	r2, [sp, #16]
 80043aa:	7823      	ldrb	r3, [r4, #0]
 80043ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80043ae:	d10a      	bne.n	80043c6 <_vfiprintf_r+0x156>
 80043b0:	7863      	ldrb	r3, [r4, #1]
 80043b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b4:	d132      	bne.n	800441c <_vfiprintf_r+0x1ac>
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	9203      	str	r2, [sp, #12]
 80043be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043c2:	3402      	adds	r4, #2
 80043c4:	9305      	str	r3, [sp, #20]
 80043c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800449c <_vfiprintf_r+0x22c>
 80043ca:	7821      	ldrb	r1, [r4, #0]
 80043cc:	2203      	movs	r2, #3
 80043ce:	4650      	mov	r0, sl
 80043d0:	f7fb fefe 	bl	80001d0 <memchr>
 80043d4:	b138      	cbz	r0, 80043e6 <_vfiprintf_r+0x176>
 80043d6:	9b04      	ldr	r3, [sp, #16]
 80043d8:	eba0 000a 	sub.w	r0, r0, sl
 80043dc:	2240      	movs	r2, #64	@ 0x40
 80043de:	4082      	lsls	r2, r0
 80043e0:	4313      	orrs	r3, r2
 80043e2:	3401      	adds	r4, #1
 80043e4:	9304      	str	r3, [sp, #16]
 80043e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ea:	4829      	ldr	r0, [pc, #164]	@ (8004490 <_vfiprintf_r+0x220>)
 80043ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043f0:	2206      	movs	r2, #6
 80043f2:	f7fb feed 	bl	80001d0 <memchr>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d03f      	beq.n	800447a <_vfiprintf_r+0x20a>
 80043fa:	4b26      	ldr	r3, [pc, #152]	@ (8004494 <_vfiprintf_r+0x224>)
 80043fc:	bb1b      	cbnz	r3, 8004446 <_vfiprintf_r+0x1d6>
 80043fe:	9b03      	ldr	r3, [sp, #12]
 8004400:	3307      	adds	r3, #7
 8004402:	f023 0307 	bic.w	r3, r3, #7
 8004406:	3308      	adds	r3, #8
 8004408:	9303      	str	r3, [sp, #12]
 800440a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800440c:	443b      	add	r3, r7
 800440e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004410:	e76a      	b.n	80042e8 <_vfiprintf_r+0x78>
 8004412:	fb0c 3202 	mla	r2, ip, r2, r3
 8004416:	460c      	mov	r4, r1
 8004418:	2001      	movs	r0, #1
 800441a:	e7a8      	b.n	800436e <_vfiprintf_r+0xfe>
 800441c:	2300      	movs	r3, #0
 800441e:	3401      	adds	r4, #1
 8004420:	9305      	str	r3, [sp, #20]
 8004422:	4619      	mov	r1, r3
 8004424:	f04f 0c0a 	mov.w	ip, #10
 8004428:	4620      	mov	r0, r4
 800442a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800442e:	3a30      	subs	r2, #48	@ 0x30
 8004430:	2a09      	cmp	r2, #9
 8004432:	d903      	bls.n	800443c <_vfiprintf_r+0x1cc>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0c6      	beq.n	80043c6 <_vfiprintf_r+0x156>
 8004438:	9105      	str	r1, [sp, #20]
 800443a:	e7c4      	b.n	80043c6 <_vfiprintf_r+0x156>
 800443c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004440:	4604      	mov	r4, r0
 8004442:	2301      	movs	r3, #1
 8004444:	e7f0      	b.n	8004428 <_vfiprintf_r+0x1b8>
 8004446:	ab03      	add	r3, sp, #12
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	462a      	mov	r2, r5
 800444c:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <_vfiprintf_r+0x228>)
 800444e:	a904      	add	r1, sp, #16
 8004450:	4630      	mov	r0, r6
 8004452:	f7fd fdd1 	bl	8001ff8 <_printf_float>
 8004456:	4607      	mov	r7, r0
 8004458:	1c78      	adds	r0, r7, #1
 800445a:	d1d6      	bne.n	800440a <_vfiprintf_r+0x19a>
 800445c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800445e:	07d9      	lsls	r1, r3, #31
 8004460:	d405      	bmi.n	800446e <_vfiprintf_r+0x1fe>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	059a      	lsls	r2, r3, #22
 8004466:	d402      	bmi.n	800446e <_vfiprintf_r+0x1fe>
 8004468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800446a:	f7fe fc03 	bl	8002c74 <__retarget_lock_release_recursive>
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	065b      	lsls	r3, r3, #25
 8004472:	f53f af1f 	bmi.w	80042b4 <_vfiprintf_r+0x44>
 8004476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004478:	e71e      	b.n	80042b8 <_vfiprintf_r+0x48>
 800447a:	ab03      	add	r3, sp, #12
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	462a      	mov	r2, r5
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <_vfiprintf_r+0x228>)
 8004482:	a904      	add	r1, sp, #16
 8004484:	4630      	mov	r0, r6
 8004486:	f7fe f84f 	bl	8002528 <_printf_i>
 800448a:	e7e4      	b.n	8004456 <_vfiprintf_r+0x1e6>
 800448c:	08004a67 	.word	0x08004a67
 8004490:	08004a71 	.word	0x08004a71
 8004494:	08001ff9 	.word	0x08001ff9
 8004498:	0800424b 	.word	0x0800424b
 800449c:	08004a6d 	.word	0x08004a6d

080044a0 <__sflush_r>:
 80044a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044a8:	0716      	lsls	r6, r2, #28
 80044aa:	4605      	mov	r5, r0
 80044ac:	460c      	mov	r4, r1
 80044ae:	d454      	bmi.n	800455a <__sflush_r+0xba>
 80044b0:	684b      	ldr	r3, [r1, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	dc02      	bgt.n	80044bc <__sflush_r+0x1c>
 80044b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	dd48      	ble.n	800454e <__sflush_r+0xae>
 80044bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044be:	2e00      	cmp	r6, #0
 80044c0:	d045      	beq.n	800454e <__sflush_r+0xae>
 80044c2:	2300      	movs	r3, #0
 80044c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80044c8:	682f      	ldr	r7, [r5, #0]
 80044ca:	6a21      	ldr	r1, [r4, #32]
 80044cc:	602b      	str	r3, [r5, #0]
 80044ce:	d030      	beq.n	8004532 <__sflush_r+0x92>
 80044d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	0759      	lsls	r1, r3, #29
 80044d6:	d505      	bpl.n	80044e4 <__sflush_r+0x44>
 80044d8:	6863      	ldr	r3, [r4, #4]
 80044da:	1ad2      	subs	r2, r2, r3
 80044dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044de:	b10b      	cbz	r3, 80044e4 <__sflush_r+0x44>
 80044e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044e2:	1ad2      	subs	r2, r2, r3
 80044e4:	2300      	movs	r3, #0
 80044e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044e8:	6a21      	ldr	r1, [r4, #32]
 80044ea:	4628      	mov	r0, r5
 80044ec:	47b0      	blx	r6
 80044ee:	1c43      	adds	r3, r0, #1
 80044f0:	89a3      	ldrh	r3, [r4, #12]
 80044f2:	d106      	bne.n	8004502 <__sflush_r+0x62>
 80044f4:	6829      	ldr	r1, [r5, #0]
 80044f6:	291d      	cmp	r1, #29
 80044f8:	d82b      	bhi.n	8004552 <__sflush_r+0xb2>
 80044fa:	4a2a      	ldr	r2, [pc, #168]	@ (80045a4 <__sflush_r+0x104>)
 80044fc:	40ca      	lsrs	r2, r1
 80044fe:	07d6      	lsls	r6, r2, #31
 8004500:	d527      	bpl.n	8004552 <__sflush_r+0xb2>
 8004502:	2200      	movs	r2, #0
 8004504:	6062      	str	r2, [r4, #4]
 8004506:	04d9      	lsls	r1, r3, #19
 8004508:	6922      	ldr	r2, [r4, #16]
 800450a:	6022      	str	r2, [r4, #0]
 800450c:	d504      	bpl.n	8004518 <__sflush_r+0x78>
 800450e:	1c42      	adds	r2, r0, #1
 8004510:	d101      	bne.n	8004516 <__sflush_r+0x76>
 8004512:	682b      	ldr	r3, [r5, #0]
 8004514:	b903      	cbnz	r3, 8004518 <__sflush_r+0x78>
 8004516:	6560      	str	r0, [r4, #84]	@ 0x54
 8004518:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800451a:	602f      	str	r7, [r5, #0]
 800451c:	b1b9      	cbz	r1, 800454e <__sflush_r+0xae>
 800451e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004522:	4299      	cmp	r1, r3
 8004524:	d002      	beq.n	800452c <__sflush_r+0x8c>
 8004526:	4628      	mov	r0, r5
 8004528:	f7ff f9fe 	bl	8003928 <_free_r>
 800452c:	2300      	movs	r3, #0
 800452e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004530:	e00d      	b.n	800454e <__sflush_r+0xae>
 8004532:	2301      	movs	r3, #1
 8004534:	4628      	mov	r0, r5
 8004536:	47b0      	blx	r6
 8004538:	4602      	mov	r2, r0
 800453a:	1c50      	adds	r0, r2, #1
 800453c:	d1c9      	bne.n	80044d2 <__sflush_r+0x32>
 800453e:	682b      	ldr	r3, [r5, #0]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0c6      	beq.n	80044d2 <__sflush_r+0x32>
 8004544:	2b1d      	cmp	r3, #29
 8004546:	d001      	beq.n	800454c <__sflush_r+0xac>
 8004548:	2b16      	cmp	r3, #22
 800454a:	d11e      	bne.n	800458a <__sflush_r+0xea>
 800454c:	602f      	str	r7, [r5, #0]
 800454e:	2000      	movs	r0, #0
 8004550:	e022      	b.n	8004598 <__sflush_r+0xf8>
 8004552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004556:	b21b      	sxth	r3, r3
 8004558:	e01b      	b.n	8004592 <__sflush_r+0xf2>
 800455a:	690f      	ldr	r7, [r1, #16]
 800455c:	2f00      	cmp	r7, #0
 800455e:	d0f6      	beq.n	800454e <__sflush_r+0xae>
 8004560:	0793      	lsls	r3, r2, #30
 8004562:	680e      	ldr	r6, [r1, #0]
 8004564:	bf08      	it	eq
 8004566:	694b      	ldreq	r3, [r1, #20]
 8004568:	600f      	str	r7, [r1, #0]
 800456a:	bf18      	it	ne
 800456c:	2300      	movne	r3, #0
 800456e:	eba6 0807 	sub.w	r8, r6, r7
 8004572:	608b      	str	r3, [r1, #8]
 8004574:	f1b8 0f00 	cmp.w	r8, #0
 8004578:	dde9      	ble.n	800454e <__sflush_r+0xae>
 800457a:	6a21      	ldr	r1, [r4, #32]
 800457c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800457e:	4643      	mov	r3, r8
 8004580:	463a      	mov	r2, r7
 8004582:	4628      	mov	r0, r5
 8004584:	47b0      	blx	r6
 8004586:	2800      	cmp	r0, #0
 8004588:	dc08      	bgt.n	800459c <__sflush_r+0xfc>
 800458a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800458e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004592:	81a3      	strh	r3, [r4, #12]
 8004594:	f04f 30ff 	mov.w	r0, #4294967295
 8004598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800459c:	4407      	add	r7, r0
 800459e:	eba8 0800 	sub.w	r8, r8, r0
 80045a2:	e7e7      	b.n	8004574 <__sflush_r+0xd4>
 80045a4:	20400001 	.word	0x20400001

080045a8 <_fflush_r>:
 80045a8:	b538      	push	{r3, r4, r5, lr}
 80045aa:	690b      	ldr	r3, [r1, #16]
 80045ac:	4605      	mov	r5, r0
 80045ae:	460c      	mov	r4, r1
 80045b0:	b913      	cbnz	r3, 80045b8 <_fflush_r+0x10>
 80045b2:	2500      	movs	r5, #0
 80045b4:	4628      	mov	r0, r5
 80045b6:	bd38      	pop	{r3, r4, r5, pc}
 80045b8:	b118      	cbz	r0, 80045c2 <_fflush_r+0x1a>
 80045ba:	6a03      	ldr	r3, [r0, #32]
 80045bc:	b90b      	cbnz	r3, 80045c2 <_fflush_r+0x1a>
 80045be:	f7fe f95d 	bl	800287c <__sinit>
 80045c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0f3      	beq.n	80045b2 <_fflush_r+0xa>
 80045ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80045cc:	07d0      	lsls	r0, r2, #31
 80045ce:	d404      	bmi.n	80045da <_fflush_r+0x32>
 80045d0:	0599      	lsls	r1, r3, #22
 80045d2:	d402      	bmi.n	80045da <_fflush_r+0x32>
 80045d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045d6:	f7fe fb4c 	bl	8002c72 <__retarget_lock_acquire_recursive>
 80045da:	4628      	mov	r0, r5
 80045dc:	4621      	mov	r1, r4
 80045de:	f7ff ff5f 	bl	80044a0 <__sflush_r>
 80045e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045e4:	07da      	lsls	r2, r3, #31
 80045e6:	4605      	mov	r5, r0
 80045e8:	d4e4      	bmi.n	80045b4 <_fflush_r+0xc>
 80045ea:	89a3      	ldrh	r3, [r4, #12]
 80045ec:	059b      	lsls	r3, r3, #22
 80045ee:	d4e1      	bmi.n	80045b4 <_fflush_r+0xc>
 80045f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045f2:	f7fe fb3f 	bl	8002c74 <__retarget_lock_release_recursive>
 80045f6:	e7dd      	b.n	80045b4 <_fflush_r+0xc>

080045f8 <__swhatbuf_r>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	460c      	mov	r4, r1
 80045fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004600:	2900      	cmp	r1, #0
 8004602:	b096      	sub	sp, #88	@ 0x58
 8004604:	4615      	mov	r5, r2
 8004606:	461e      	mov	r6, r3
 8004608:	da0d      	bge.n	8004626 <__swhatbuf_r+0x2e>
 800460a:	89a3      	ldrh	r3, [r4, #12]
 800460c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004610:	f04f 0100 	mov.w	r1, #0
 8004614:	bf14      	ite	ne
 8004616:	2340      	movne	r3, #64	@ 0x40
 8004618:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800461c:	2000      	movs	r0, #0
 800461e:	6031      	str	r1, [r6, #0]
 8004620:	602b      	str	r3, [r5, #0]
 8004622:	b016      	add	sp, #88	@ 0x58
 8004624:	bd70      	pop	{r4, r5, r6, pc}
 8004626:	466a      	mov	r2, sp
 8004628:	f000 f848 	bl	80046bc <_fstat_r>
 800462c:	2800      	cmp	r0, #0
 800462e:	dbec      	blt.n	800460a <__swhatbuf_r+0x12>
 8004630:	9901      	ldr	r1, [sp, #4]
 8004632:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004636:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800463a:	4259      	negs	r1, r3
 800463c:	4159      	adcs	r1, r3
 800463e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004642:	e7eb      	b.n	800461c <__swhatbuf_r+0x24>

08004644 <__smakebuf_r>:
 8004644:	898b      	ldrh	r3, [r1, #12]
 8004646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004648:	079d      	lsls	r5, r3, #30
 800464a:	4606      	mov	r6, r0
 800464c:	460c      	mov	r4, r1
 800464e:	d507      	bpl.n	8004660 <__smakebuf_r+0x1c>
 8004650:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004654:	6023      	str	r3, [r4, #0]
 8004656:	6123      	str	r3, [r4, #16]
 8004658:	2301      	movs	r3, #1
 800465a:	6163      	str	r3, [r4, #20]
 800465c:	b003      	add	sp, #12
 800465e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004660:	ab01      	add	r3, sp, #4
 8004662:	466a      	mov	r2, sp
 8004664:	f7ff ffc8 	bl	80045f8 <__swhatbuf_r>
 8004668:	9f00      	ldr	r7, [sp, #0]
 800466a:	4605      	mov	r5, r0
 800466c:	4639      	mov	r1, r7
 800466e:	4630      	mov	r0, r6
 8004670:	f7ff f9ce 	bl	8003a10 <_malloc_r>
 8004674:	b948      	cbnz	r0, 800468a <__smakebuf_r+0x46>
 8004676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800467a:	059a      	lsls	r2, r3, #22
 800467c:	d4ee      	bmi.n	800465c <__smakebuf_r+0x18>
 800467e:	f023 0303 	bic.w	r3, r3, #3
 8004682:	f043 0302 	orr.w	r3, r3, #2
 8004686:	81a3      	strh	r3, [r4, #12]
 8004688:	e7e2      	b.n	8004650 <__smakebuf_r+0xc>
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	6020      	str	r0, [r4, #0]
 800468e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004692:	81a3      	strh	r3, [r4, #12]
 8004694:	9b01      	ldr	r3, [sp, #4]
 8004696:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800469a:	b15b      	cbz	r3, 80046b4 <__smakebuf_r+0x70>
 800469c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046a0:	4630      	mov	r0, r6
 80046a2:	f000 f81d 	bl	80046e0 <_isatty_r>
 80046a6:	b128      	cbz	r0, 80046b4 <__smakebuf_r+0x70>
 80046a8:	89a3      	ldrh	r3, [r4, #12]
 80046aa:	f023 0303 	bic.w	r3, r3, #3
 80046ae:	f043 0301 	orr.w	r3, r3, #1
 80046b2:	81a3      	strh	r3, [r4, #12]
 80046b4:	89a3      	ldrh	r3, [r4, #12]
 80046b6:	431d      	orrs	r5, r3
 80046b8:	81a5      	strh	r5, [r4, #12]
 80046ba:	e7cf      	b.n	800465c <__smakebuf_r+0x18>

080046bc <_fstat_r>:
 80046bc:	b538      	push	{r3, r4, r5, lr}
 80046be:	4d07      	ldr	r5, [pc, #28]	@ (80046dc <_fstat_r+0x20>)
 80046c0:	2300      	movs	r3, #0
 80046c2:	4604      	mov	r4, r0
 80046c4:	4608      	mov	r0, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	602b      	str	r3, [r5, #0]
 80046ca:	f7fd fa35 	bl	8001b38 <_fstat>
 80046ce:	1c43      	adds	r3, r0, #1
 80046d0:	d102      	bne.n	80046d8 <_fstat_r+0x1c>
 80046d2:	682b      	ldr	r3, [r5, #0]
 80046d4:	b103      	cbz	r3, 80046d8 <_fstat_r+0x1c>
 80046d6:	6023      	str	r3, [r4, #0]
 80046d8:	bd38      	pop	{r3, r4, r5, pc}
 80046da:	bf00      	nop
 80046dc:	20000390 	.word	0x20000390

080046e0 <_isatty_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4d06      	ldr	r5, [pc, #24]	@ (80046fc <_isatty_r+0x1c>)
 80046e4:	2300      	movs	r3, #0
 80046e6:	4604      	mov	r4, r0
 80046e8:	4608      	mov	r0, r1
 80046ea:	602b      	str	r3, [r5, #0]
 80046ec:	f7fd fa34 	bl	8001b58 <_isatty>
 80046f0:	1c43      	adds	r3, r0, #1
 80046f2:	d102      	bne.n	80046fa <_isatty_r+0x1a>
 80046f4:	682b      	ldr	r3, [r5, #0]
 80046f6:	b103      	cbz	r3, 80046fa <_isatty_r+0x1a>
 80046f8:	6023      	str	r3, [r4, #0]
 80046fa:	bd38      	pop	{r3, r4, r5, pc}
 80046fc:	20000390 	.word	0x20000390

08004700 <_sbrk_r>:
 8004700:	b538      	push	{r3, r4, r5, lr}
 8004702:	4d06      	ldr	r5, [pc, #24]	@ (800471c <_sbrk_r+0x1c>)
 8004704:	2300      	movs	r3, #0
 8004706:	4604      	mov	r4, r0
 8004708:	4608      	mov	r0, r1
 800470a:	602b      	str	r3, [r5, #0]
 800470c:	f7fd fa3c 	bl	8001b88 <_sbrk>
 8004710:	1c43      	adds	r3, r0, #1
 8004712:	d102      	bne.n	800471a <_sbrk_r+0x1a>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	b103      	cbz	r3, 800471a <_sbrk_r+0x1a>
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	bd38      	pop	{r3, r4, r5, pc}
 800471c:	20000390 	.word	0x20000390

08004720 <memcpy>:
 8004720:	440a      	add	r2, r1
 8004722:	4291      	cmp	r1, r2
 8004724:	f100 33ff 	add.w	r3, r0, #4294967295
 8004728:	d100      	bne.n	800472c <memcpy+0xc>
 800472a:	4770      	bx	lr
 800472c:	b510      	push	{r4, lr}
 800472e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004736:	4291      	cmp	r1, r2
 8004738:	d1f9      	bne.n	800472e <memcpy+0xe>
 800473a:	bd10      	pop	{r4, pc}

0800473c <__assert_func>:
 800473c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800473e:	4614      	mov	r4, r2
 8004740:	461a      	mov	r2, r3
 8004742:	4b09      	ldr	r3, [pc, #36]	@ (8004768 <__assert_func+0x2c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4605      	mov	r5, r0
 8004748:	68d8      	ldr	r0, [r3, #12]
 800474a:	b14c      	cbz	r4, 8004760 <__assert_func+0x24>
 800474c:	4b07      	ldr	r3, [pc, #28]	@ (800476c <__assert_func+0x30>)
 800474e:	9100      	str	r1, [sp, #0]
 8004750:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004754:	4906      	ldr	r1, [pc, #24]	@ (8004770 <__assert_func+0x34>)
 8004756:	462b      	mov	r3, r5
 8004758:	f000 f842 	bl	80047e0 <fiprintf>
 800475c:	f000 f852 	bl	8004804 <abort>
 8004760:	4b04      	ldr	r3, [pc, #16]	@ (8004774 <__assert_func+0x38>)
 8004762:	461c      	mov	r4, r3
 8004764:	e7f3      	b.n	800474e <__assert_func+0x12>
 8004766:	bf00      	nop
 8004768:	20000010 	.word	0x20000010
 800476c:	08004a82 	.word	0x08004a82
 8004770:	08004a8f 	.word	0x08004a8f
 8004774:	08004abd 	.word	0x08004abd

08004778 <_calloc_r>:
 8004778:	b570      	push	{r4, r5, r6, lr}
 800477a:	fba1 5402 	umull	r5, r4, r1, r2
 800477e:	b934      	cbnz	r4, 800478e <_calloc_r+0x16>
 8004780:	4629      	mov	r1, r5
 8004782:	f7ff f945 	bl	8003a10 <_malloc_r>
 8004786:	4606      	mov	r6, r0
 8004788:	b928      	cbnz	r0, 8004796 <_calloc_r+0x1e>
 800478a:	4630      	mov	r0, r6
 800478c:	bd70      	pop	{r4, r5, r6, pc}
 800478e:	220c      	movs	r2, #12
 8004790:	6002      	str	r2, [r0, #0]
 8004792:	2600      	movs	r6, #0
 8004794:	e7f9      	b.n	800478a <_calloc_r+0x12>
 8004796:	462a      	mov	r2, r5
 8004798:	4621      	mov	r1, r4
 800479a:	f7fe f9ed 	bl	8002b78 <memset>
 800479e:	e7f4      	b.n	800478a <_calloc_r+0x12>

080047a0 <__ascii_mbtowc>:
 80047a0:	b082      	sub	sp, #8
 80047a2:	b901      	cbnz	r1, 80047a6 <__ascii_mbtowc+0x6>
 80047a4:	a901      	add	r1, sp, #4
 80047a6:	b142      	cbz	r2, 80047ba <__ascii_mbtowc+0x1a>
 80047a8:	b14b      	cbz	r3, 80047be <__ascii_mbtowc+0x1e>
 80047aa:	7813      	ldrb	r3, [r2, #0]
 80047ac:	600b      	str	r3, [r1, #0]
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	1e10      	subs	r0, r2, #0
 80047b2:	bf18      	it	ne
 80047b4:	2001      	movne	r0, #1
 80047b6:	b002      	add	sp, #8
 80047b8:	4770      	bx	lr
 80047ba:	4610      	mov	r0, r2
 80047bc:	e7fb      	b.n	80047b6 <__ascii_mbtowc+0x16>
 80047be:	f06f 0001 	mvn.w	r0, #1
 80047c2:	e7f8      	b.n	80047b6 <__ascii_mbtowc+0x16>

080047c4 <__ascii_wctomb>:
 80047c4:	4603      	mov	r3, r0
 80047c6:	4608      	mov	r0, r1
 80047c8:	b141      	cbz	r1, 80047dc <__ascii_wctomb+0x18>
 80047ca:	2aff      	cmp	r2, #255	@ 0xff
 80047cc:	d904      	bls.n	80047d8 <__ascii_wctomb+0x14>
 80047ce:	228a      	movs	r2, #138	@ 0x8a
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	f04f 30ff 	mov.w	r0, #4294967295
 80047d6:	4770      	bx	lr
 80047d8:	700a      	strb	r2, [r1, #0]
 80047da:	2001      	movs	r0, #1
 80047dc:	4770      	bx	lr
	...

080047e0 <fiprintf>:
 80047e0:	b40e      	push	{r1, r2, r3}
 80047e2:	b503      	push	{r0, r1, lr}
 80047e4:	4601      	mov	r1, r0
 80047e6:	ab03      	add	r3, sp, #12
 80047e8:	4805      	ldr	r0, [pc, #20]	@ (8004800 <fiprintf+0x20>)
 80047ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80047ee:	6800      	ldr	r0, [r0, #0]
 80047f0:	9301      	str	r3, [sp, #4]
 80047f2:	f7ff fd3d 	bl	8004270 <_vfiprintf_r>
 80047f6:	b002      	add	sp, #8
 80047f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80047fc:	b003      	add	sp, #12
 80047fe:	4770      	bx	lr
 8004800:	20000010 	.word	0x20000010

08004804 <abort>:
 8004804:	b508      	push	{r3, lr}
 8004806:	2006      	movs	r0, #6
 8004808:	f000 f82c 	bl	8004864 <raise>
 800480c:	2001      	movs	r0, #1
 800480e:	f7fd f943 	bl	8001a98 <_exit>

08004812 <_raise_r>:
 8004812:	291f      	cmp	r1, #31
 8004814:	b538      	push	{r3, r4, r5, lr}
 8004816:	4605      	mov	r5, r0
 8004818:	460c      	mov	r4, r1
 800481a:	d904      	bls.n	8004826 <_raise_r+0x14>
 800481c:	2316      	movs	r3, #22
 800481e:	6003      	str	r3, [r0, #0]
 8004820:	f04f 30ff 	mov.w	r0, #4294967295
 8004824:	bd38      	pop	{r3, r4, r5, pc}
 8004826:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8004828:	b112      	cbz	r2, 8004830 <_raise_r+0x1e>
 800482a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800482e:	b94b      	cbnz	r3, 8004844 <_raise_r+0x32>
 8004830:	4628      	mov	r0, r5
 8004832:	f000 f831 	bl	8004898 <_getpid_r>
 8004836:	4622      	mov	r2, r4
 8004838:	4601      	mov	r1, r0
 800483a:	4628      	mov	r0, r5
 800483c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004840:	f000 b818 	b.w	8004874 <_kill_r>
 8004844:	2b01      	cmp	r3, #1
 8004846:	d00a      	beq.n	800485e <_raise_r+0x4c>
 8004848:	1c59      	adds	r1, r3, #1
 800484a:	d103      	bne.n	8004854 <_raise_r+0x42>
 800484c:	2316      	movs	r3, #22
 800484e:	6003      	str	r3, [r0, #0]
 8004850:	2001      	movs	r0, #1
 8004852:	e7e7      	b.n	8004824 <_raise_r+0x12>
 8004854:	2100      	movs	r1, #0
 8004856:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800485a:	4620      	mov	r0, r4
 800485c:	4798      	blx	r3
 800485e:	2000      	movs	r0, #0
 8004860:	e7e0      	b.n	8004824 <_raise_r+0x12>
	...

08004864 <raise>:
 8004864:	4b02      	ldr	r3, [pc, #8]	@ (8004870 <raise+0xc>)
 8004866:	4601      	mov	r1, r0
 8004868:	6818      	ldr	r0, [r3, #0]
 800486a:	f7ff bfd2 	b.w	8004812 <_raise_r>
 800486e:	bf00      	nop
 8004870:	20000010 	.word	0x20000010

08004874 <_kill_r>:
 8004874:	b538      	push	{r3, r4, r5, lr}
 8004876:	4d07      	ldr	r5, [pc, #28]	@ (8004894 <_kill_r+0x20>)
 8004878:	2300      	movs	r3, #0
 800487a:	4604      	mov	r4, r0
 800487c:	4608      	mov	r0, r1
 800487e:	4611      	mov	r1, r2
 8004880:	602b      	str	r3, [r5, #0]
 8004882:	f7fd f8f9 	bl	8001a78 <_kill>
 8004886:	1c43      	adds	r3, r0, #1
 8004888:	d102      	bne.n	8004890 <_kill_r+0x1c>
 800488a:	682b      	ldr	r3, [r5, #0]
 800488c:	b103      	cbz	r3, 8004890 <_kill_r+0x1c>
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	bd38      	pop	{r3, r4, r5, pc}
 8004892:	bf00      	nop
 8004894:	20000390 	.word	0x20000390

08004898 <_getpid_r>:
 8004898:	f7fd b8e6 	b.w	8001a68 <_getpid>

0800489c <_init>:
 800489c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800489e:	bf00      	nop
 80048a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a2:	bc08      	pop	{r3}
 80048a4:	469e      	mov	lr, r3
 80048a6:	4770      	bx	lr

080048a8 <_fini>:
 80048a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048aa:	bf00      	nop
 80048ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ae:	bc08      	pop	{r3}
 80048b0:	469e      	mov	lr, r3
 80048b2:	4770      	bx	lr
