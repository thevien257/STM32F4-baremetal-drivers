
Protocols.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000236c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080024fc  080024fc  000034fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800259c  0800259c  00004064  2**0
                  CONTENTS
  4 .ARM          00000008  0800259c  0800259c  0000359c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080025a4  080025a4  00004064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a4  080025a4  000035a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025a8  080025a8  000035a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080025ac  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004064  2**0
                  CONTENTS
 10 .bss          00000278  20000064  20000064  00004064  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002dc  200002dc  00004064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004064  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000177a  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006b2  00000000  00000000  0000580e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000160  00000000  00000000  00005ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f5  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b43  00000000  00000000  00006115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000292e  00000000  00000000  00008c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009484  00000000  00000000  0000b586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00014a0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000f6c  00000000  00000000  00014a50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000054  00000000  00000000  000159bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080024e4 	.word	0x080024e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080024e4 	.word	0x080024e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <Get_APB1_Clock_Speed>:
#include "stm32f4xx_cus.h"

uint32_t SystemClockSrc;
uint32_t APB1_Clock_Speed;

void Get_APB1_Clock_Speed() {
 8000280:	b4b0      	push	{r4, r5, r7}
 8000282:	b08f      	sub	sp, #60	@ 0x3c
 8000284:	af00      	add	r7, sp, #0
	uint32_t ahb_prescaler_table[] = { 2, 4, 8, 16, 64, 128, 256, 512 };
 8000286:	4b2c      	ldr	r3, [pc, #176]	@ (8000338 <Get_APB1_Clock_Speed+0xb8>)
 8000288:	f107 0410 	add.w	r4, r7, #16
 800028c:	461d      	mov	r5, r3
 800028e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t apb1_prescaler_table[] = { 2, 4, 8, 16 };
 800029a:	4b28      	ldr	r3, [pc, #160]	@ (800033c <Get_APB1_Clock_Speed+0xbc>)
 800029c:	463c      	mov	r4, r7
 800029e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t get_system_clock = (RCC->CFGR >> 2) & 0x3;
 80002a4:	4b26      	ldr	r3, [pc, #152]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	089b      	lsrs	r3, r3, #2
 80002aa:	b2db      	uxtb	r3, r3
 80002ac:	f003 0303 	and.w	r3, r3, #3
 80002b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	uint8_t get_ahb_pres = (RCC->CFGR >> 4) & 0xF;
 80002b4:	4b22      	ldr	r3, [pc, #136]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	091b      	lsrs	r3, r3, #4
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 030f 	and.w	r3, r3, #15
 80002c0:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
	uint8_t get_apb1_pres = (RCC->CFGR >> 10) & 0x7;
 80002c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000340 <Get_APB1_Clock_Speed+0xc0>)
 80002c6:	689b      	ldr	r3, [r3, #8]
 80002c8:	0a9b      	lsrs	r3, r3, #10
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	f003 0307 	and.w	r3, r3, #7
 80002d0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
	uint16_t ahb_pres = 1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
	if (get_ahb_pres >= 8) {
 80002d8:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80002dc:	2b07      	cmp	r3, #7
 80002de:	d908      	bls.n	80002f2 <Get_APB1_Clock_Speed+0x72>
		ahb_pres = ahb_prescaler_table[get_ahb_pres - 8];
 80002e0:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80002e4:	3b08      	subs	r3, #8
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	3338      	adds	r3, #56	@ 0x38
 80002ea:	443b      	add	r3, r7
 80002ec:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80002f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
	}
	uint16_t apb1_pres = 1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
	if (get_apb1_pres >= 4) {
 80002f6:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80002fa:	2b03      	cmp	r3, #3
 80002fc:	d908      	bls.n	8000310 <Get_APB1_Clock_Speed+0x90>
		apb1_pres = apb1_prescaler_table[get_apb1_pres - 4];
 80002fe:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8000302:	3b04      	subs	r3, #4
 8000304:	009b      	lsls	r3, r3, #2
 8000306:	3338      	adds	r3, #56	@ 0x38
 8000308:	443b      	add	r3, r7
 800030a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800030e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}
	if (get_system_clock == 0) {
 8000310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000314:	2b00      	cmp	r3, #0
 8000316:	d109      	bne.n	800032c <Get_APB1_Clock_Speed+0xac>
		// HSI System Clock
		SystemClockSrc = (Clock_SRC / ahb_pres) / apb1_pres;
 8000318:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <Get_APB1_Clock_Speed+0xc4>)
 800031c:	fb92 f2f3 	sdiv	r2, r2, r3
 8000320:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000322:	fb92 f3f3 	sdiv	r3, r2, r3
 8000326:	461a      	mov	r2, r3
 8000328:	4b07      	ldr	r3, [pc, #28]	@ (8000348 <Get_APB1_Clock_Speed+0xc8>)
 800032a:	601a      	str	r2, [r3, #0]
	} else if (get_system_clock == 1) {
// HSE System Clock
	} else if (get_system_clock == 2) {
// PLL System Clock
	}
}
 800032c:	bf00      	nop
 800032e:	373c      	adds	r7, #60	@ 0x3c
 8000330:	46bd      	mov	sp, r7
 8000332:	bcb0      	pop	{r4, r5, r7}
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	080024fc 	.word	0x080024fc
 800033c:	0800251c 	.word	0x0800251c
 8000340:	40023800 	.word	0x40023800
 8000344:	00f42400 	.word	0x00f42400
 8000348:	20000080 	.word	0x20000080

0800034c <GPIO_INIT>:
#include "stm32f4xx_cus_gpio.h"

void GPIO_INIT(GPIO_Handle_TypeDef *gpioHandle) {
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	// Enable clock source
	if (gpioHandle->GPIOX == GPIOA) {
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a8f      	ldr	r2, [pc, #572]	@ (8000598 <GPIO_INIT+0x24c>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_INIT+0x20>
		GPIOA_EN();
 800035e:	4b8f      	ldr	r3, [pc, #572]	@ (800059c <GPIO_INIT+0x250>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a8e      	ldr	r2, [pc, #568]	@ (800059c <GPIO_INIT+0x250>)
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
 800036a:	e05e      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOB) {
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a8b      	ldr	r2, [pc, #556]	@ (80005a0 <GPIO_INIT+0x254>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d106      	bne.n	8000384 <GPIO_INIT+0x38>
		GPIOB_EN();
 8000376:	4b89      	ldr	r3, [pc, #548]	@ (800059c <GPIO_INIT+0x250>)
 8000378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037a:	4a88      	ldr	r2, [pc, #544]	@ (800059c <GPIO_INIT+0x250>)
 800037c:	f043 0302 	orr.w	r3, r3, #2
 8000380:	6313      	str	r3, [r2, #48]	@ 0x30
 8000382:	e052      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOC) {
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	4a86      	ldr	r2, [pc, #536]	@ (80005a4 <GPIO_INIT+0x258>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_INIT+0x50>
		GPIOC_EN();
 800038e:	4b83      	ldr	r3, [pc, #524]	@ (800059c <GPIO_INIT+0x250>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000392:	4a82      	ldr	r2, [pc, #520]	@ (800059c <GPIO_INIT+0x250>)
 8000394:	f043 0304 	orr.w	r3, r3, #4
 8000398:	6313      	str	r3, [r2, #48]	@ 0x30
 800039a:	e046      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOD) {
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a81      	ldr	r2, [pc, #516]	@ (80005a8 <GPIO_INIT+0x25c>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_INIT+0x68>
		GPIOD_EN();
 80003a6:	4b7d      	ldr	r3, [pc, #500]	@ (800059c <GPIO_INIT+0x250>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a7c      	ldr	r2, [pc, #496]	@ (800059c <GPIO_INIT+0x250>)
 80003ac:	f043 0308 	orr.w	r3, r3, #8
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003b2:	e03a      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOE) {
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a7c      	ldr	r2, [pc, #496]	@ (80005ac <GPIO_INIT+0x260>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d106      	bne.n	80003cc <GPIO_INIT+0x80>
		GPIOE_EN();
 80003be:	4b77      	ldr	r3, [pc, #476]	@ (800059c <GPIO_INIT+0x250>)
 80003c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c2:	4a76      	ldr	r2, [pc, #472]	@ (800059c <GPIO_INIT+0x250>)
 80003c4:	f043 0310 	orr.w	r3, r3, #16
 80003c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003ca:	e02e      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOF) {
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a77      	ldr	r2, [pc, #476]	@ (80005b0 <GPIO_INIT+0x264>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_INIT+0x98>
		GPIOF_EN();
 80003d6:	4b71      	ldr	r3, [pc, #452]	@ (800059c <GPIO_INIT+0x250>)
 80003d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003da:	4a70      	ldr	r2, [pc, #448]	@ (800059c <GPIO_INIT+0x250>)
 80003dc:	f043 0320 	orr.w	r3, r3, #32
 80003e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80003e2:	e022      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOG) {
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a72      	ldr	r2, [pc, #456]	@ (80005b4 <GPIO_INIT+0x268>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_INIT+0xb0>
		GPIOG_EN();
 80003ee:	4b6b      	ldr	r3, [pc, #428]	@ (800059c <GPIO_INIT+0x250>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a6a      	ldr	r2, [pc, #424]	@ (800059c <GPIO_INIT+0x250>)
 80003f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80003fa:	e016      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOH) {
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a6d      	ldr	r2, [pc, #436]	@ (80005b8 <GPIO_INIT+0x26c>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_INIT+0xc8>
		GPIOH_EN();
 8000406:	4b65      	ldr	r3, [pc, #404]	@ (800059c <GPIO_INIT+0x250>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040a:	4a64      	ldr	r2, [pc, #400]	@ (800059c <GPIO_INIT+0x250>)
 800040c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000410:	6313      	str	r3, [r2, #48]	@ 0x30
 8000412:	e00a      	b.n	800042a <GPIO_INIT+0xde>
	} else if (gpioHandle->GPIOX == GPIOI) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4a68      	ldr	r2, [pc, #416]	@ (80005bc <GPIO_INIT+0x270>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d105      	bne.n	800042a <GPIO_INIT+0xde>
		GPIOI_EN();
 800041e:	4b5f      	ldr	r3, [pc, #380]	@ (800059c <GPIO_INIT+0x250>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000422:	4a5e      	ldr	r2, [pc, #376]	@ (800059c <GPIO_INIT+0x250>)
 8000424:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000428:	6313      	str	r3, [r2, #48]	@ 0x30
	}

	// Reset mode
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	681a      	ldr	r2, [r3, #0]
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	791b      	ldrb	r3, [r3, #4]
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	2103      	movs	r1, #3
 8000438:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->MODER &= ~(GPIO_BIT_11_Mask
 800043c:	43db      	mvns	r3, r3
 800043e:	4619      	mov	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	400a      	ands	r2, r1
 8000446:	601a      	str	r2, [r3, #0]

	// Pull-up or Pull-down
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	68da      	ldr	r2, [r3, #12]
			<< (Shift_2_pos * gpioHandle->pin_number));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	791b      	ldrb	r3, [r3, #4]
 8000452:	005b      	lsls	r3, r3, #1
 8000454:	2103      	movs	r1, #3
 8000456:	fa01 f303 	lsl.w	r3, r1, r3
	gpioHandle->GPIOX->PUPDR &= ~(GPIO_BIT_11_Mask
 800045a:	43db      	mvns	r3, r3
 800045c:	4619      	mov	r1, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	400a      	ands	r2, r1
 8000464:	60da      	str	r2, [r3, #12]

	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	68da      	ldr	r2, [r3, #12]
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	799b      	ldrb	r3, [r3, #6]
 8000470:	4619      	mov	r1, r3
			<< (Shift_2_pos * gpioHandle->pin_number));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	791b      	ldrb	r3, [r3, #4]
 8000476:	005b      	lsls	r3, r3, #1
 8000478:	fa01 f303 	lsl.w	r3, r1, r3
 800047c:	4619      	mov	r1, r3
	gpioHandle->GPIOX->PUPDR |= (gpioHandle->pull_up_pull_down
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	430a      	orrs	r2, r1
 8000484:	60da      	str	r2, [r3, #12]
//	// Handle input mode
//	if (gpioHandle->mode == GPIO_MODE_INPUT) {
//
//	}
// Handle output mode
	if (gpioHandle->mode <= GPIO_MODE_AF) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	2b02      	cmp	r3, #2
 800048c:	f200 8098 	bhi.w	80005c0 <GPIO_INIT+0x274>
		// Set output mode
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	795b      	ldrb	r3, [r3, #5]
 800049a:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number));
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	fa01 f303 	lsl.w	r3, r1, r3
 80004a6:	4619      	mov	r1, r3
		gpioHandle->GPIOX->MODER |= (gpioHandle->mode
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
		// Set output type
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	685a      	ldr	r2, [r3, #4]
				<< (gpioHandle->pin_number));
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	791b      	ldrb	r3, [r3, #4]
 80004ba:	4619      	mov	r1, r3
 80004bc:	2303      	movs	r3, #3
 80004be:	408b      	lsls	r3, r1
		gpioHandle->GPIOX->OTYPER &= ~(GPIO_BIT_11_Mask
 80004c0:	43db      	mvns	r3, r3
 80004c2:	4619      	mov	r1, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	400a      	ands	r2, r1
 80004ca:	605a      	str	r2, [r3, #4]
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	685a      	ldr	r2, [r3, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	7a1b      	ldrb	r3, [r3, #8]
 80004d6:	4619      	mov	r1, r3
				<< (gpioHandle->pin_number);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	791b      	ldrb	r3, [r3, #4]
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OTYPER |= (gpioHandle->output_type)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	430a      	orrs	r2, r1
 80004e8:	605a      	str	r2, [r3, #4]

		// Set output speed
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	689a      	ldr	r2, [r3, #8]
				<< (Shift_2_pos * gpioHandle->pin_number));
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	791b      	ldrb	r3, [r3, #4]
 80004f4:	005b      	lsls	r3, r3, #1
 80004f6:	2103      	movs	r1, #3
 80004f8:	fa01 f303 	lsl.w	r3, r1, r3
		gpioHandle->GPIOX->OSPEEDR &= ~(GPIO_BIT_11_Mask
 80004fc:	43db      	mvns	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	400a      	ands	r2, r1
 8000506:	609a      	str	r2, [r3, #8]
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	79db      	ldrb	r3, [r3, #7]
 8000512:	4619      	mov	r1, r3
				<< (Shift_2_pos * gpioHandle->pin_number);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	791b      	ldrb	r3, [r3, #4]
 8000518:	005b      	lsls	r3, r3, #1
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	4619      	mov	r1, r3
		gpioHandle->GPIOX->OSPEEDR |= (gpioHandle->output_speed)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	430a      	orrs	r2, r1
 8000526:	609a      	str	r2, [r3, #8]
		if (gpioHandle->mode == GPIO_MODE_AF) {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	795b      	ldrb	r3, [r3, #5]
 800052c:	2b02      	cmp	r3, #2
 800052e:	f040 80ea 	bne.w	8000706 <GPIO_INIT+0x3ba>
			uint8_t ALT_low_high =
					(gpioHandle->pin_number / Divide_ALT_Function);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	791b      	ldrb	r3, [r3, #4]
			uint8_t ALT_low_high =
 8000536:	08db      	lsrs	r3, r3, #3
 8000538:	737b      	strb	r3, [r7, #13]
			uint8_t ALT_bit = (gpioHandle->pin_number % Divide_ALT_Function);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	791b      	ldrb	r3, [r3, #4]
 800053e:	f003 0307 	and.w	r3, r3, #7
 8000542:	733b      	strb	r3, [r7, #12]
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	7b7a      	ldrb	r2, [r7, #13]
 800054a:	3208      	adds	r2, #8
 800054c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					<< gpioHandle->pin_number);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	791b      	ldrb	r3, [r3, #4]
 8000554:	461a      	mov	r2, r3
 8000556:	2303      	movs	r3, #3
 8000558:	4093      	lsls	r3, r2
			gpioHandle->GPIOX->AFR[ALT_low_high] &= ~(GPIO_BIT_11_Mask
 800055a:	43db      	mvns	r3, r3
 800055c:	4618      	mov	r0, r3
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	7b7a      	ldrb	r2, [r7, #13]
 8000564:	4001      	ands	r1, r0
 8000566:	3208      	adds	r2, #8
 8000568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	7b7a      	ldrb	r2, [r7, #13]
 8000572:	3208      	adds	r2, #8
 8000574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
					(gpioHandle->alternate_function_select
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7a5b      	ldrb	r3, [r3, #9]
 800057c:	461a      	mov	r2, r3
							<< Shift_4_pos * ALT_bit);
 800057e:	7b3b      	ldrb	r3, [r7, #12]
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	fa02 f303 	lsl.w	r3, r2, r3
 8000586:	4618      	mov	r0, r3
			gpioHandle->GPIOX->AFR[ALT_low_high] |=
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	7b7a      	ldrb	r2, [r7, #13]
 800058e:	4301      	orrs	r1, r0
 8000590:	3208      	adds	r2, #8
 8000592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		// Config Mask bit (Enable EXTI line)
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
	}
}
 8000596:	e0b6      	b.n	8000706 <GPIO_INIT+0x3ba>
 8000598:	40020000 	.word	0x40020000
 800059c:	40023800 	.word	0x40023800
 80005a0:	40020400 	.word	0x40020400
 80005a4:	40020800 	.word	0x40020800
 80005a8:	40020c00 	.word	0x40020c00
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40021400 	.word	0x40021400
 80005b4:	40021800 	.word	0x40021800
 80005b8:	40021c00 	.word	0x40021c00
 80005bc:	40022000 	.word	0x40022000
		SYSCFG_EN();
 80005c0:	4b54      	ldr	r3, [pc, #336]	@ (8000714 <GPIO_INIT+0x3c8>)
 80005c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005c4:	4a53      	ldr	r2, [pc, #332]	@ (8000714 <GPIO_INIT+0x3c8>)
 80005c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ca:	6453      	str	r3, [r2, #68]	@ 0x44
		if (gpioHandle->mode == GPIO_MODE_INTERRUPT_CHANGE) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	795b      	ldrb	r3, [r3, #5]
 80005d0:	2b06      	cmp	r3, #6
 80005d2:	d12e      	bne.n	8000632 <GPIO_INIT+0x2e6>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 80005d4:	4b50      	ldr	r3, [pc, #320]	@ (8000718 <GPIO_INIT+0x3cc>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	7912      	ldrb	r2, [r2, #4]
 80005dc:	4611      	mov	r1, r2
 80005de:	2201      	movs	r2, #1
 80005e0:	408a      	lsls	r2, r1
 80005e2:	43d2      	mvns	r2, r2
 80005e4:	4611      	mov	r1, r2
 80005e6:	4a4c      	ldr	r2, [pc, #304]	@ (8000718 <GPIO_INIT+0x3cc>)
 80005e8:	400b      	ands	r3, r1
 80005ea:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 80005ec:	4b4a      	ldr	r3, [pc, #296]	@ (8000718 <GPIO_INIT+0x3cc>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	687a      	ldr	r2, [r7, #4]
 80005f2:	7912      	ldrb	r2, [r2, #4]
 80005f4:	4611      	mov	r1, r2
 80005f6:	2201      	movs	r2, #1
 80005f8:	408a      	lsls	r2, r1
 80005fa:	43d2      	mvns	r2, r2
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a46      	ldr	r2, [pc, #280]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000600:	400b      	ands	r3, r1
 8000602:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 8000604:	4b44      	ldr	r3, [pc, #272]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	4611      	mov	r1, r2
 800060e:	2201      	movs	r2, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	4611      	mov	r1, r2
 8000614:	4a40      	ldr	r2, [pc, #256]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000616:	430b      	orrs	r3, r1
 8000618:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 800061a:	4b3f      	ldr	r3, [pc, #252]	@ (8000718 <GPIO_INIT+0x3cc>)
 800061c:	68db      	ldr	r3, [r3, #12]
 800061e:	687a      	ldr	r2, [r7, #4]
 8000620:	7912      	ldrb	r2, [r2, #4]
 8000622:	4611      	mov	r1, r2
 8000624:	2201      	movs	r2, #1
 8000626:	408a      	lsls	r2, r1
 8000628:	4611      	mov	r1, r2
 800062a:	4a3b      	ldr	r2, [pc, #236]	@ (8000718 <GPIO_INIT+0x3cc>)
 800062c:	430b      	orrs	r3, r1
 800062e:	60d3      	str	r3, [r2, #12]
 8000630:	e036      	b.n	80006a0 <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_FALLING) {
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	795b      	ldrb	r3, [r3, #5]
 8000636:	2b05      	cmp	r3, #5
 8000638:	d117      	bne.n	800066a <GPIO_INIT+0x31e>
			EXTI->FTSR &= ~(HIGH << gpioHandle->pin_number);
 800063a:	4b37      	ldr	r3, [pc, #220]	@ (8000718 <GPIO_INIT+0x3cc>)
 800063c:	68db      	ldr	r3, [r3, #12]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	7912      	ldrb	r2, [r2, #4]
 8000642:	4611      	mov	r1, r2
 8000644:	2201      	movs	r2, #1
 8000646:	408a      	lsls	r2, r1
 8000648:	43d2      	mvns	r2, r2
 800064a:	4611      	mov	r1, r2
 800064c:	4a32      	ldr	r2, [pc, #200]	@ (8000718 <GPIO_INIT+0x3cc>)
 800064e:	400b      	ands	r3, r1
 8000650:	60d3      	str	r3, [r2, #12]
			EXTI->FTSR |= (HIGH << gpioHandle->pin_number);
 8000652:	4b31      	ldr	r3, [pc, #196]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	7912      	ldrb	r2, [r2, #4]
 800065a:	4611      	mov	r1, r2
 800065c:	2201      	movs	r2, #1
 800065e:	408a      	lsls	r2, r1
 8000660:	4611      	mov	r1, r2
 8000662:	4a2d      	ldr	r2, [pc, #180]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000664:	430b      	orrs	r3, r1
 8000666:	60d3      	str	r3, [r2, #12]
 8000668:	e01a      	b.n	80006a0 <GPIO_INIT+0x354>
		} else if (gpioHandle->mode == GPIO_MODE_INTERRUPT_RISING) {
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	795b      	ldrb	r3, [r3, #5]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d116      	bne.n	80006a0 <GPIO_INIT+0x354>
			EXTI->RTSR &= ~(HIGH << gpioHandle->pin_number);
 8000672:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000674:	689b      	ldr	r3, [r3, #8]
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	7912      	ldrb	r2, [r2, #4]
 800067a:	4611      	mov	r1, r2
 800067c:	2201      	movs	r2, #1
 800067e:	408a      	lsls	r2, r1
 8000680:	43d2      	mvns	r2, r2
 8000682:	4611      	mov	r1, r2
 8000684:	4a24      	ldr	r2, [pc, #144]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000686:	400b      	ands	r3, r1
 8000688:	6093      	str	r3, [r2, #8]
			EXTI->RTSR |= (HIGH << gpioHandle->pin_number);
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <GPIO_INIT+0x3cc>)
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	4611      	mov	r1, r2
 800069a:	4a1f      	ldr	r2, [pc, #124]	@ (8000718 <GPIO_INIT+0x3cc>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6093      	str	r3, [r2, #8]
		uint8_t cal_reg = (gpioHandle->pin_number / 4);
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	089b      	lsrs	r3, r3, #2
 80006a6:	73fb      	strb	r3, [r7, #15]
		uint8_t cal_bit = (gpioHandle->pin_number % 4);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	f003 0303 	and.w	r3, r3, #3
 80006b0:	73bb      	strb	r3, [r7, #14]
		SYSCFG->EXTICR[cal_reg] |= (gpioHandle->exti_select << 4 * cal_bit);
 80006b2:	4a1a      	ldr	r2, [pc, #104]	@ (800071c <GPIO_INIT+0x3d0>)
 80006b4:	7bfb      	ldrb	r3, [r7, #15]
 80006b6:	3302      	adds	r3, #2
 80006b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7a9b      	ldrb	r3, [r3, #10]
 80006c0:	4619      	mov	r1, r3
 80006c2:	7bbb      	ldrb	r3, [r7, #14]
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	4913      	ldr	r1, [pc, #76]	@ (800071c <GPIO_INIT+0x3d0>)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	4302      	orrs	r2, r0
 80006d2:	3302      	adds	r3, #2
 80006d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		EXTI->IMR &= ~(HIGH << gpioHandle->pin_number);
 80006d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <GPIO_INIT+0x3cc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	43d2      	mvns	r2, r2
 80006e8:	4611      	mov	r1, r2
 80006ea:	4a0b      	ldr	r2, [pc, #44]	@ (8000718 <GPIO_INIT+0x3cc>)
 80006ec:	400b      	ands	r3, r1
 80006ee:	6013      	str	r3, [r2, #0]
		EXTI->IMR |= (HIGH << gpioHandle->pin_number);
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <GPIO_INIT+0x3cc>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	7912      	ldrb	r2, [r2, #4]
 80006f8:	4611      	mov	r1, r2
 80006fa:	2201      	movs	r2, #1
 80006fc:	408a      	lsls	r2, r1
 80006fe:	4611      	mov	r1, r2
 8000700:	4a05      	ldr	r2, [pc, #20]	@ (8000718 <GPIO_INIT+0x3cc>)
 8000702:	430b      	orrs	r3, r1
 8000704:	6013      	str	r3, [r2, #0]
}
 8000706:	bf00      	nop
 8000708:	3714      	adds	r7, #20
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40013c00 	.word	0x40013c00
 800071c:	40013800 	.word	0x40013800

08000720 <GPIO_INPUT>:

uint8_t GPIO_INPUT(GPIO_TypeDef *gpiox, uint8_t gpio_pins) {
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
	uint8_t val = ((gpiox->IDR >> gpio_pins) & GPIO_BIT_1_Mask);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691a      	ldr	r2, [r3, #16]
 8000730:	78fb      	ldrb	r3, [r7, #3]
 8000732:	fa22 f303 	lsr.w	r3, r2, r3
 8000736:	b2db      	uxtb	r3, r3
 8000738:	f003 0301 	and.w	r3, r3, #1
 800073c:	73fb      	strb	r3, [r7, #15]
	return val;
 800073e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3714      	adds	r7, #20
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <IRQ_Config>:
	} else {
		gpiox->BSRR |= (HIGH << (Shift_16_pos + gpio_pins));
	}
}

void IRQ_Config(uint8_t IRQn, uint8_t EN) {
 800074c:	b480      	push	{r7}
 800074e:	b087      	sub	sp, #28
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	460a      	mov	r2, r1
 8000756:	71fb      	strb	r3, [r7, #7]
 8000758:	4613      	mov	r3, r2
 800075a:	71bb      	strb	r3, [r7, #6]
	uint8_t cal_reg = IRQn / Shift_32_pos;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	095b      	lsrs	r3, r3, #5
 8000760:	75fb      	strb	r3, [r7, #23]
//	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
//			+ Shift_4_pos * cal_reg);

// This is true because the pointer is uint32_t (4 bytes), so this is move cal_reg positions (each positions is 4 bytes)
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
			+ cal_reg);
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	009b      	lsls	r3, r3, #2
	volatile uint32_t *cal_address_ISER = (volatile uint32_t*) (ISER_BASE_ADDR
 8000766:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
 800076a:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
 800076e:	613b      	str	r3, [r7, #16]
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
			+ cal_reg);
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	009a      	lsls	r2, r3, #2
	volatile uint32_t *cal_address_ICER = (volatile uint32_t*) (ICER_BASE_ADDR
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <IRQ_Config+0x74>)
 8000776:	4413      	add	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
// Enable the NVIC
	if (EN == ENABLE) {
 800077a:	79bb      	ldrb	r3, [r7, #6]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d10b      	bne.n	8000798 <IRQ_Config+0x4c>
		*cal_address_ISER |= (HIGH << IRQn % 32);
 8000780:	693b      	ldr	r3, [r7, #16]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	79fa      	ldrb	r2, [r7, #7]
 8000786:	f002 021f 	and.w	r2, r2, #31
 800078a:	2101      	movs	r1, #1
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	431a      	orrs	r2, r3
 8000792:	693b      	ldr	r3, [r7, #16]
 8000794:	601a      	str	r2, [r3, #0]
	} else if (EN == DISABLE) {
		*cal_address_ICER |= (HIGH << IRQn % 32);
	}

}
 8000796:	e00d      	b.n	80007b4 <IRQ_Config+0x68>
	} else if (EN == DISABLE) {
 8000798:	79bb      	ldrb	r3, [r7, #6]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d10a      	bne.n	80007b4 <IRQ_Config+0x68>
		*cal_address_ICER |= (HIGH << IRQn % 32);
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	79fa      	ldrb	r2, [r7, #7]
 80007a4:	f002 021f 	and.w	r2, r2, #31
 80007a8:	2101      	movs	r1, #1
 80007aa:	fa01 f202 	lsl.w	r2, r1, r2
 80007ae:	431a      	orrs	r2, r3
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	601a      	str	r2, [r3, #0]
}
 80007b4:	bf00      	nop
 80007b6:	371c      	adds	r7, #28
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	e000e180 	.word	0xe000e180

080007c4 <I2C_Close_Communicate>:
		.tx_len = 0, .rx_len = 0, .addr = 0 };

uint8_t rx_complete = 0;
uint8_t tx_complete = 0;

static void I2C_Close_Communicate(I2C_Handle_TypeDef *i2c_handle) {
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	// Generate Stop condition
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_9_pos);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80007da:	601a      	str	r2, [r3, #0]

	I2C_Handle_it.ptx = NULL;
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <I2C_Close_Communicate+0x74>)
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
	I2C_Handle_it.prx = NULL;
 80007e2:	4b15      	ldr	r3, [pc, #84]	@ (8000838 <I2C_Close_Communicate+0x74>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	605a      	str	r2, [r3, #4]
	I2C_Handle_it.state = I2C_READY;
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <I2C_Close_Communicate+0x74>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	721a      	strb	r2, [r3, #8]
	I2C_Handle_it.tx_len = 0;
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <I2C_Close_Communicate+0x74>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
	I2C_Handle_it.rx_len = 0;
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <I2C_Close_Communicate+0x74>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	611a      	str	r2, [r3, #16]
	I2C_Handle_it.addr = 0;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <I2C_Close_Communicate+0x74>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	751a      	strb	r2, [r3, #20]

	// Error interrupt disable
//	i2c_handle->I2Cx->CR2 &= ~(HIGH << Shift_8_pos);

// Event interrupt disable
	i2c_handle->I2Cx->CR2 &= ~(HIGH << Shift_9_pos);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	685a      	ldr	r2, [r3, #4]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800080e:	605a      	str	r2, [r3, #4]

	// Buffer interrupt disable
	i2c_handle->I2Cx->CR2 &= ~(HIGH << Shift_10_pos);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	685a      	ldr	r2, [r3, #4]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800081e:	605a      	str	r2, [r3, #4]

	// RX Complete
	rx_complete = 1;
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <I2C_Close_Communicate+0x78>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
	tx_complete = 1;
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <I2C_Close_Communicate+0x7c>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]

}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr
 8000838:	20000084 	.word	0x20000084
 800083c:	2000009c 	.word	0x2000009c
 8000840:	2000009d 	.word	0x2000009d

08000844 <I2C_Send_DataIT>:

static void I2C_Send_DataIT(I2C_Handle_TypeDef *i2c_handle) {
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if (I2C_Handle_it.tx_len > 0) {
 800084c:	4b0c      	ldr	r3, [pc, #48]	@ (8000880 <I2C_Send_DataIT+0x3c>)
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	2b00      	cmp	r3, #0
 8000852:	d00f      	beq.n	8000874 <I2C_Send_DataIT+0x30>
		i2c_handle->I2Cx->DR = *(I2C_Handle_it.ptx);
 8000854:	4b0a      	ldr	r3, [pc, #40]	@ (8000880 <I2C_Send_DataIT+0x3c>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	781a      	ldrb	r2, [r3, #0]
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	611a      	str	r2, [r3, #16]
		I2C_Handle_it.ptx++;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <I2C_Send_DataIT+0x3c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	3301      	adds	r3, #1
 8000866:	4a06      	ldr	r2, [pc, #24]	@ (8000880 <I2C_Send_DataIT+0x3c>)
 8000868:	6013      	str	r3, [r2, #0]
		I2C_Handle_it.tx_len--;
 800086a:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <I2C_Send_DataIT+0x3c>)
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	3b01      	subs	r3, #1
 8000870:	4a03      	ldr	r2, [pc, #12]	@ (8000880 <I2C_Send_DataIT+0x3c>)
 8000872:	60d3      	str	r3, [r2, #12]
	}
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr
 8000880:	20000084 	.word	0x20000084

08000884 <I2C_Read_DataIT>:

static void I2C_Read_DataIT(I2C_Handle_TypeDef *i2c_handle) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if (I2C_Handle_it.rx_len == 1) {
 800088c:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <I2C_Read_DataIT+0x88>)
 800088e:	691b      	ldr	r3, [r3, #16]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d113      	bne.n	80008bc <I2C_Read_DataIT+0x38>
		// Set ACK LOW
		i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80008a2:	601a      	str	r2, [r3, #0]
		//Read data
		*(I2C_Handle_it.prx) = i2c_handle->I2Cx->DR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	691a      	ldr	r2, [r3, #16]
 80008aa:	4b18      	ldr	r3, [pc, #96]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	b2d2      	uxtb	r2, r2
 80008b0:	701a      	strb	r2, [r3, #0]
		I2C_Handle_it.rx_len--;
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	4a14      	ldr	r2, [pc, #80]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008ba:	6113      	str	r3, [r2, #16]

	}
	if (I2C_Handle_it.rx_len > 1) {
 80008bc:	4b13      	ldr	r3, [pc, #76]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	2b01      	cmp	r3, #1
 80008c2:	d910      	bls.n	80008e6 <I2C_Read_DataIT+0x62>
		*(I2C_Handle_it.prx) = i2c_handle->I2Cx->DR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	691a      	ldr	r2, [r3, #16]
 80008ca:	4b10      	ldr	r3, [pc, #64]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008cc:	685b      	ldr	r3, [r3, #4]
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	701a      	strb	r2, [r3, #0]
		I2C_Handle_it.rx_len--;
 80008d2:	4b0e      	ldr	r3, [pc, #56]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008d4:	691b      	ldr	r3, [r3, #16]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	4a0c      	ldr	r2, [pc, #48]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008da:	6113      	str	r3, [r2, #16]
		I2C_Handle_it.prx++;
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008e4:	6053      	str	r3, [r2, #4]

	}

	if (I2C_Handle_it.rx_len == 0) {
 80008e6:	4b09      	ldr	r3, [pc, #36]	@ (800090c <I2C_Read_DataIT+0x88>)
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d10a      	bne.n	8000904 <I2C_Read_DataIT+0x80>
		// Stop request
		I2C_Close_Communicate(i2c_handle);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ff68 	bl	80007c4 <I2C_Close_Communicate>
		// SET ACK again
		i2c_handle->I2Cx->CR1 |= (HIGH << Shift_10_pos);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000902:	601a      	str	r2, [r3, #0]
	}

}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000084 	.word	0x20000084

08000910 <I2C_INIT>:

void I2C_INIT(I2C_Handle_TypeDef *i2c_handle) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	if (i2c_handle->I2Cx == I2C1) {
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a7b      	ldr	r2, [pc, #492]	@ (8000b0c <I2C_INIT+0x1fc>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d106      	bne.n	8000930 <I2C_INIT+0x20>
		I2C1_EN();
 8000922:	4b7b      	ldr	r3, [pc, #492]	@ (8000b10 <I2C_INIT+0x200>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000926:	4a7a      	ldr	r2, [pc, #488]	@ (8000b10 <I2C_INIT+0x200>)
 8000928:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800092c:	6413      	str	r3, [r2, #64]	@ 0x40
 800092e:	e016      	b.n	800095e <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C2) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a77      	ldr	r2, [pc, #476]	@ (8000b14 <I2C_INIT+0x204>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d106      	bne.n	8000948 <I2C_INIT+0x38>
		I2C2_EN();
 800093a:	4b75      	ldr	r3, [pc, #468]	@ (8000b10 <I2C_INIT+0x200>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	4a74      	ldr	r2, [pc, #464]	@ (8000b10 <I2C_INIT+0x200>)
 8000940:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000944:	6413      	str	r3, [r2, #64]	@ 0x40
 8000946:	e00a      	b.n	800095e <I2C_INIT+0x4e>
	} else if (i2c_handle->I2Cx == I2C3) {
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a72      	ldr	r2, [pc, #456]	@ (8000b18 <I2C_INIT+0x208>)
 800094e:	4293      	cmp	r3, r2
 8000950:	d105      	bne.n	800095e <I2C_INIT+0x4e>
		I2C3_EN();
 8000952:	4b6f      	ldr	r3, [pc, #444]	@ (8000b10 <I2C_INIT+0x200>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	4a6e      	ldr	r2, [pc, #440]	@ (8000b10 <I2C_INIT+0x200>)
 8000958:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800095c:	6413      	str	r3, [r2, #64]	@ 0x40
	}
	Get_APB1_Clock_Speed();
 800095e:	f7ff fc8f 	bl	8000280 <Get_APB1_Clock_Speed>

// Master mode
	if (i2c_handle->MasterOrSlave == I2C_Master_Mode) {
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	795b      	ldrb	r3, [r3, #5]
 8000966:	2b00      	cmp	r3, #0
 8000968:	f040 80b1 	bne.w	8000ace <I2C_INIT+0x1be>
		// Peripheral Clock Frequency (16Mhz)
		i2c_handle->I2Cx->CR2 &= ~(Five_BIT_1 << 0);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	f022 021f 	bic.w	r2, r2, #31
 800097a:	605a      	str	r2, [r3, #4]
		i2c_handle->I2Cx->CR2 |= (Shift_16_pos << 0);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	685a      	ldr	r2, [r3, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f042 0210 	orr.w	r2, r2, #16
 800098a:	605a      	str	r2, [r3, #4]

		// I2C Standard/Fast Mode
		i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_15_pos);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	69da      	ldr	r2, [r3, #28]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800099a:	61da      	str	r2, [r3, #28]
		i2c_handle->I2Cx->CCR |= (i2c_handle->mode << Shift_15_pos);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	69d9      	ldr	r1, [r3, #28]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	791b      	ldrb	r3, [r3, #4]
 80009a6:	03da      	lsls	r2, r3, #15
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	430a      	orrs	r2, r1
 80009ae:	61da      	str	r2, [r3, #28]

		// Tscl = Thigh + Tlow
		if (i2c_handle->mode == I2C_Standard_Mode) {
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	791b      	ldrb	r3, [r3, #4]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d120      	bne.n	80009fa <I2C_INIT+0xea>
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	69d9      	ldr	r1, [r3, #28]
					/ (2 * i2c_handle->scl_speed)) << 0);
 80009be:	4b57      	ldr	r3, [pc, #348]	@ (8000b1c <I2C_INIT+0x20c>)
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	fbb2 f2f3 	udiv	r2, r2, r3
			i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	430a      	orrs	r2, r1
 80009d2:	61da      	str	r2, [r3, #28]
			// Trise
			i2c_handle->I2Cx->TRISE = 0;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc / 1000000)) + 1;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	6a19      	ldr	r1, [r3, #32]
 80009e2:	4b4e      	ldr	r3, [pc, #312]	@ (8000b1c <I2C_INIT+0x20c>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4a4e      	ldr	r2, [pc, #312]	@ (8000b20 <I2C_INIT+0x210>)
 80009e8:	fba2 2303 	umull	r2, r3, r2, r3
 80009ec:	0c9b      	lsrs	r3, r3, #18
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	621a      	str	r2, [r3, #32]
 80009f8:	e053      	b.n	8000aa2 <I2C_INIT+0x192>
		} else if (i2c_handle->mode == I2C_Fast_Mode) {
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	791b      	ldrb	r3, [r3, #4]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d14f      	bne.n	8000aa2 <I2C_INIT+0x192>
			i2c_handle->I2Cx->CCR &= ~(HIGH << Shift_14_pos);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8000a10:	61da      	str	r2, [r3, #28]
			i2c_handle->I2Cx->CCR |= (i2c_handle->duty_cycle << Shift_14_pos);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	69d9      	ldr	r1, [r3, #28]
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	7b1b      	ldrb	r3, [r3, #12]
 8000a1c:	039a      	lsls	r2, r3, #14
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	430a      	orrs	r2, r1
 8000a24:	61da      	str	r2, [r3, #28]
			if (i2c_handle->duty_cycle == I2C_Duty_Cycle_2) {
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	7b1b      	ldrb	r3, [r3, #12]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d110      	bne.n	8000a50 <I2C_INIT+0x140>
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	69d9      	ldr	r1, [r3, #28]
						/ (3 * i2c_handle->scl_speed)) << 0);
 8000a34:	4b39      	ldr	r3, [pc, #228]	@ (8000b1c <I2C_INIT+0x20c>)
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	689a      	ldr	r2, [r3, #8]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	4413      	add	r3, r2
 8000a42:	fbb0 f2f3 	udiv	r2, r0, r3
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	61da      	str	r2, [r3, #28]
 8000a4e:	e015      	b.n	8000a7c <I2C_INIT+0x16c>
			} else if (i2c_handle->duty_cycle == I2C_Duty_Cycle_16_9) {
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7b1b      	ldrb	r3, [r3, #12]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d111      	bne.n	8000a7c <I2C_INIT+0x16c>
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	69d9      	ldr	r1, [r3, #28]
						/ (25 * i2c_handle->scl_speed)) << 0);
 8000a5e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b1c <I2C_INIT+0x20c>)
 8000a60:	6818      	ldr	r0, [r3, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	689a      	ldr	r2, [r3, #8]
 8000a66:	4613      	mov	r3, r2
 8000a68:	009b      	lsls	r3, r3, #2
 8000a6a:	4413      	add	r3, r2
 8000a6c:	009a      	lsls	r2, r3, #2
 8000a6e:	4413      	add	r3, r2
 8000a70:	fbb0 f2f3 	udiv	r2, r0, r3
				i2c_handle->I2Cx->CCR |= ((SystemClockSrc
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	61da      	str	r2, [r3, #28]
			}
			// Trise
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	6a19      	ldr	r1, [r3, #32]
					* I2C_TRISE_MAX_FAST_MODE / 1000000000)) + 1;
 8000a82:	4b26      	ldr	r3, [pc, #152]	@ (8000b1c <I2C_INIT+0x20c>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000a8a:	fb02 f303 	mul.w	r3, r2, r3
 8000a8e:	0a5b      	lsrs	r3, r3, #9
 8000a90:	4a24      	ldr	r2, [pc, #144]	@ (8000b24 <I2C_INIT+0x214>)
 8000a92:	fba2 2303 	umull	r2, r3, r2, r3
 8000a96:	09db      	lsrs	r3, r3, #7
 8000a98:	1c5a      	adds	r2, r3, #1
			i2c_handle->I2Cx->TRISE |= ((SystemClockSrc
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	430a      	orrs	r2, r1
 8000aa0:	621a      	str	r2, [r3, #32]
		}

// Adress mode - 7 bit
		if (i2c_handle->address_select_bit == I2C_7_Bit_Adress) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	799b      	ldrb	r3, [r3, #6]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d109      	bne.n	8000abe <I2C_INIT+0x1ae>
			i2c_handle->I2Cx->OAR1 |= (i2c_handle->address << HIGH);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6899      	ldr	r1, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	79db      	ldrb	r3, [r3, #7]
 8000ab4:	005a      	lsls	r2, r3, #1
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	430a      	orrs	r2, r1
 8000abc:	609a      	str	r2, [r3, #8]
		}
		i2c_handle->I2Cx->OAR1 |= (HIGH << Shift_14_pos);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8000acc:	609a      	str	r2, [r3, #8]
	}

// Enable Peripheral
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_0_pos);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f042 0201 	orr.w	r2, r2, #1
 8000adc:	601a      	str	r2, [r3, #0]

// ACK bit En
	i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000aec:	601a      	str	r2, [r3, #0]
	i2c_handle->I2Cx->CR1 |= (i2c_handle->ack_en << Shift_10_pos);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6819      	ldr	r1, [r3, #0]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	7b5b      	ldrb	r3, [r3, #13]
 8000af8:	029a      	lsls	r2, r3, #10
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	430a      	orrs	r2, r1
 8000b00:	601a      	str	r2, [r3, #0]
// Slave mode
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40005800 	.word	0x40005800
 8000b18:	40005c00 	.word	0x40005c00
 8000b1c:	20000080 	.word	0x20000080
 8000b20:	431bde83 	.word	0x431bde83
 8000b24:	00044b83 	.word	0x00044b83

08000b28 <I2C_Master_Write_IT>:
	i2c_handle->I2Cx->CR1 |= (HIGH << Shift_10_pos);

}

uint8_t I2C_Master_Write_IT(I2C_Handle_TypeDef *i2c_handle, uint8_t addr,
		uint8_t *data, uint32_t size, uint8_t sr) {
 8000b28:	b480      	push	{r7}
 8000b2a:	b087      	sub	sp, #28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	607a      	str	r2, [r7, #4]
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	460b      	mov	r3, r1
 8000b36:	72fb      	strb	r3, [r7, #11]

	uint8_t busy_state = I2C_Handle_it.state;
 8000b38:	4b1d      	ldr	r3, [pc, #116]	@ (8000bb0 <I2C_Master_Write_IT+0x88>)
 8000b3a:	7a1b      	ldrb	r3, [r3, #8]
 8000b3c:	75fb      	strb	r3, [r7, #23]
	if (busy_state == I2C_READY) {
 8000b3e:	7dfb      	ldrb	r3, [r7, #23]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d12e      	bne.n	8000ba2 <I2C_Master_Write_IT+0x7a>

		I2C_Handle_it.addr = addr;
 8000b44:	4a1a      	ldr	r2, [pc, #104]	@ (8000bb0 <I2C_Master_Write_IT+0x88>)
 8000b46:	7afb      	ldrb	r3, [r7, #11]
 8000b48:	7513      	strb	r3, [r2, #20]
		I2C_Handle_it.ptx = data;
 8000b4a:	4a19      	ldr	r2, [pc, #100]	@ (8000bb0 <I2C_Master_Write_IT+0x88>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6013      	str	r3, [r2, #0]
		I2C_Handle_it.tx_len = size;
 8000b50:	4a17      	ldr	r2, [pc, #92]	@ (8000bb0 <I2C_Master_Write_IT+0x88>)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	60d3      	str	r3, [r2, #12]
		I2C_Handle_it.state = I2C_BUSY_TX;
 8000b56:	4b16      	ldr	r3, [pc, #88]	@ (8000bb0 <I2C_Master_Write_IT+0x88>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	721a      	strb	r2, [r3, #8]
		tx_complete = 0;
 8000b5c:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <I2C_Master_Write_IT+0x8c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]

		// Generate Start condition
		i2c_handle->I2Cx->CR1 |= (HIGH << Shift_8_pos);
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b70:	601a      	str	r2, [r3, #0]

		// Error interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_8_pos);
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	685a      	ldr	r2, [r3, #4]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000b80:	605a      	str	r2, [r3, #4]

		// Event interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_9_pos);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	685a      	ldr	r2, [r3, #4]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b90:	605a      	str	r2, [r3, #4]

		// Buffer interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_10_pos);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	685a      	ldr	r2, [r3, #4]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000ba0:	605a      	str	r2, [r3, #4]

	}
	return busy_state;
 8000ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	371c      	adds	r7, #28
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	20000084 	.word	0x20000084
 8000bb4:	2000009d 	.word	0x2000009d

08000bb8 <I2C_Master_Read_IT>:

uint8_t I2C_Master_Read_IT(I2C_Handle_TypeDef *i2c_handle, uint8_t addr,
		uint8_t *data, uint8_t size, uint8_t sr) {
 8000bb8:	b480      	push	{r7}
 8000bba:	b087      	sub	sp, #28
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	607a      	str	r2, [r7, #4]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	72fb      	strb	r3, [r7, #11]
 8000bc8:	4613      	mov	r3, r2
 8000bca:	72bb      	strb	r3, [r7, #10]
	uint8_t busy_state = I2C_Handle_it.state;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <I2C_Master_Read_IT+0x8c>)
 8000bce:	7a1b      	ldrb	r3, [r3, #8]
 8000bd0:	75fb      	strb	r3, [r7, #23]
	if (busy_state == I2C_READY) {
 8000bd2:	7dfb      	ldrb	r3, [r7, #23]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d12e      	bne.n	8000c36 <I2C_Master_Read_IT+0x7e>

		I2C_Handle_it.addr = addr;
 8000bd8:	4a1a      	ldr	r2, [pc, #104]	@ (8000c44 <I2C_Master_Read_IT+0x8c>)
 8000bda:	7afb      	ldrb	r3, [r7, #11]
 8000bdc:	7513      	strb	r3, [r2, #20]
		I2C_Handle_it.prx = data;
 8000bde:	4a19      	ldr	r2, [pc, #100]	@ (8000c44 <I2C_Master_Read_IT+0x8c>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	6053      	str	r3, [r2, #4]
		I2C_Handle_it.rx_len = size;
 8000be4:	7abb      	ldrb	r3, [r7, #10]
 8000be6:	4a17      	ldr	r2, [pc, #92]	@ (8000c44 <I2C_Master_Read_IT+0x8c>)
 8000be8:	6113      	str	r3, [r2, #16]
		I2C_Handle_it.state = I2C_BUSY_RX;
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <I2C_Master_Read_IT+0x8c>)
 8000bec:	2202      	movs	r2, #2
 8000bee:	721a      	strb	r2, [r3, #8]
		rx_complete = 0;
 8000bf0:	4b15      	ldr	r3, [pc, #84]	@ (8000c48 <I2C_Master_Read_IT+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]

		// Generate Start condition
		i2c_handle->I2Cx->CR1 |= (HIGH << Shift_8_pos);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c04:	601a      	str	r2, [r3, #0]

		// Error interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_8_pos);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	685a      	ldr	r2, [r3, #4]
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000c14:	605a      	str	r2, [r3, #4]

		// Event interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_9_pos);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c24:	605a      	str	r2, [r3, #4]

		// Buffer interrupt enable
		i2c_handle->I2Cx->CR2 |= (HIGH << Shift_10_pos);
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c34:	605a      	str	r2, [r3, #4]

	}
	return busy_state;
 8000c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	371c      	adds	r7, #28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	20000084 	.word	0x20000084
 8000c48:	2000009c 	.word	0x2000009c

08000c4c <I2C_EV_IRQ_Handling>:

void I2C_EV_IRQ_Handling(I2C_Handle_TypeDef *i2c_handle) {
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
	volatile uint8_t bit_it = ((i2c_handle->I2Cx->SR1 >> 0) & 0x1);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	695b      	ldr	r3, [r3, #20]
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	72fb      	strb	r3, [r7, #11]
	if (bit_it == HIGH) {
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b01      	cmp	r3, #1
 8000c6a:	d11a      	bne.n	8000ca2 <I2C_EV_IRQ_Handling+0x56>
		// Clear Start bit by reading SR1 register
		uint32_t read;
		read = i2c_handle->I2Cx->SR1;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	695b      	ldr	r3, [r3, #20]
 8000c72:	617b      	str	r3, [r7, #20]
		(void) read;
		if (I2C_Handle_it.state == I2C_BUSY_TX) {
 8000c74:	4b4c      	ldr	r3, [pc, #304]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000c76:	7a1b      	ldrb	r3, [r3, #8]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d107      	bne.n	8000c8c <I2C_EV_IRQ_Handling+0x40>
			I2C_Address(i2c_handle, I2C_Handle_it.addr, I2C_WRITE_BIT);
 8000c7c:	4b4a      	ldr	r3, [pc, #296]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000c7e:	7d1b      	ldrb	r3, [r3, #20]
 8000c80:	2200      	movs	r2, #0
 8000c82:	4619      	mov	r1, r3
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f000 f891 	bl	8000dac <I2C_Address>
 8000c8a:	e00a      	b.n	8000ca2 <I2C_EV_IRQ_Handling+0x56>
		} else if (I2C_Handle_it.state == I2C_BUSY_RX) {
 8000c8c:	4b46      	ldr	r3, [pc, #280]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000c8e:	7a1b      	ldrb	r3, [r3, #8]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d106      	bne.n	8000ca2 <I2C_EV_IRQ_Handling+0x56>
			I2C_Address(i2c_handle, I2C_Handle_it.addr, I2C_READ_BIT);
 8000c94:	4b44      	ldr	r3, [pc, #272]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000c96:	7d1b      	ldrb	r3, [r3, #20]
 8000c98:	2201      	movs	r2, #1
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	6878      	ldr	r0, [r7, #4]
 8000c9e:	f000 f885 	bl	8000dac <I2C_Address>
		}
	}
	bit_it = ((i2c_handle->I2Cx->SR1 >> 1) & 0x1);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	695b      	ldr	r3, [r3, #20]
 8000ca8:	085b      	lsrs	r3, r3, #1
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 0301 	and.w	r3, r3, #1
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	72fb      	strb	r3, [r7, #11]
	if (bit_it == HIGH) {
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d131      	bne.n	8000d20 <I2C_EV_IRQ_Handling+0xd4>
		if (I2C_Handle_it.state == I2C_BUSY_TX) {
 8000cbc:	4b3a      	ldr	r3, [pc, #232]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000cbe:	7a1b      	ldrb	r3, [r3, #8]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d108      	bne.n	8000cd6 <I2C_EV_IRQ_Handling+0x8a>
			//Clear ADDR Flag
			uint32_t read = i2c_handle->I2Cx->SR1;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	60fb      	str	r3, [r7, #12]
			read = i2c_handle->I2Cx->SR2;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	699b      	ldr	r3, [r3, #24]
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e024      	b.n	8000d20 <I2C_EV_IRQ_Handling+0xd4>
			(void) read;
		} else if (I2C_Handle_it.state == I2C_BUSY_RX) {
 8000cd6:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000cd8:	7a1b      	ldrb	r3, [r3, #8]
 8000cda:	2b02      	cmp	r3, #2
 8000cdc:	d120      	bne.n	8000d20 <I2C_EV_IRQ_Handling+0xd4>
			if (I2C_Handle_it.rx_len == 1) {
 8000cde:	4b32      	ldr	r3, [pc, #200]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d110      	bne.n	8000d08 <I2C_EV_IRQ_Handling+0xbc>
				// Set ACK LOW
				i2c_handle->I2Cx->CR1 &= ~(HIGH << Shift_10_pos);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000cf4:	601a      	str	r2, [r3, #0]

				//Clear ADDR Flag
				uint8_t read = i2c_handle->I2Cx->SR1;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	695b      	ldr	r3, [r3, #20]
 8000cfc:	74bb      	strb	r3, [r7, #18]
				read = i2c_handle->I2Cx->SR2;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	74bb      	strb	r3, [r7, #18]
 8000d06:	e00b      	b.n	8000d20 <I2C_EV_IRQ_Handling+0xd4>
				(void) read;

			} else if (I2C_Handle_it.rx_len > 1) {
 8000d08:	4b27      	ldr	r3, [pc, #156]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000d0a:	691b      	ldr	r3, [r3, #16]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d907      	bls.n	8000d20 <I2C_EV_IRQ_Handling+0xd4>
				//Clear ADDR Flag
				uint8_t read = i2c_handle->I2Cx->SR1;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	695b      	ldr	r3, [r3, #20]
 8000d16:	74fb      	strb	r3, [r7, #19]
				read = i2c_handle->I2Cx->SR2;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	699b      	ldr	r3, [r3, #24]
 8000d1e:	74fb      	strb	r3, [r7, #19]
				(void) read;
			}
		}
	}

	bit_it = ((i2c_handle->I2Cx->SR1 >> 2) & 0x1);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	089b      	lsrs	r3, r3, #2
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	f003 0301 	and.w	r3, r3, #1
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	72fb      	strb	r3, [r7, #11]
// Check if BTF is HIGH or not
// If we handled TXE first:
//		+ We might write new data while BTF was signaling the transfer actually ended.
//		+ We could miss the STOP condition timing → corrupt I2C protocol sequence.
//		-> So we should handle the BTF first
	if (bit_it == HIGH) {
 8000d32:	7afb      	ldrb	r3, [r7, #11]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d10e      	bne.n	8000d58 <I2C_EV_IRQ_Handling+0x10c>
		if (I2C_Handle_it.state == I2C_BUSY_TX) {
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <I2C_EV_IRQ_Handling+0x15c>)
 8000d3c:	7a1b      	ldrb	r3, [r3, #8]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d10a      	bne.n	8000d58 <I2C_EV_IRQ_Handling+0x10c>
			if ((i2c_handle->I2Cx->SR1 >> 7) & 0x1) {
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	695b      	ldr	r3, [r3, #20]
 8000d48:	09db      	lsrs	r3, r3, #7
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <I2C_EV_IRQ_Handling+0x10c>
				// Generate Stop condition
				I2C_Close_Communicate(i2c_handle);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fd36 	bl	80007c4 <I2C_Close_Communicate>
			}
		}
	}

// Check TXE Flag
	bit_it = ((i2c_handle->I2Cx->SR1 >> 7) & 0x1);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	695b      	ldr	r3, [r3, #20]
 8000d5e:	09db      	lsrs	r3, r3, #7
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	f003 0301 	and.w	r3, r3, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	72fb      	strb	r3, [r7, #11]
	if (bit_it == HIGH) {
 8000d6a:	7afb      	ldrb	r3, [r7, #11]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d102      	bne.n	8000d78 <I2C_EV_IRQ_Handling+0x12c>
		// Send data
		I2C_Send_DataIT(i2c_handle);
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f7ff fd66 	bl	8000844 <I2C_Send_DataIT>
	}

// Check RXE
	bit_it = ((i2c_handle->I2Cx->SR1 >> 6) & 0x1);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	695b      	ldr	r3, [r3, #20]
 8000d7e:	099b      	lsrs	r3, r3, #6
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	72fb      	strb	r3, [r7, #11]
	if (((i2c_handle->I2Cx->SR1 >> 6) & 0x1) == HIGH) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	099b      	lsrs	r3, r3, #6
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d102      	bne.n	8000da0 <I2C_EV_IRQ_Handling+0x154>
		// Receive data
		I2C_Read_DataIT(i2c_handle);
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff fd72 	bl	8000884 <I2C_Read_DataIT>
	}
}
 8000da0:	bf00      	nop
 8000da2:	3718      	adds	r7, #24
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000084 	.word	0x20000084

08000dac <I2C_Address>:

void I2C_Address(I2C_Handle_TypeDef *i2c_handle, uint8_t addr, uint8_t rnw) {
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
 8000db8:	4613      	mov	r3, r2
 8000dba:	70bb      	strb	r3, [r7, #2]
	uint8_t slave_addr = addr << 1;
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	73fb      	strb	r3, [r7, #15]
	if (rnw == I2C_WRITE_BIT) {
 8000dc2:	78bb      	ldrb	r3, [r7, #2]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d104      	bne.n	8000dd2 <I2C_Address+0x26>
		slave_addr &= ~(HIGH);
 8000dc8:	7bfb      	ldrb	r3, [r7, #15]
 8000dca:	f023 0301 	bic.w	r3, r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	e006      	b.n	8000de0 <I2C_Address+0x34>
	} else if (rnw == I2C_READ_BIT) {
 8000dd2:	78bb      	ldrb	r3, [r7, #2]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d103      	bne.n	8000de0 <I2C_Address+0x34>
		slave_addr |= (HIGH);
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
	}

	i2c_handle->I2Cx->DR = slave_addr;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	7bfa      	ldrb	r2, [r7, #15]
 8000de6:	611a      	str	r2, [r3, #16]

}
 8000de8:	bf00      	nop
 8000dea:	3714      	adds	r7, #20
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <main>:
uint8_t buffer[32] = { };
uint8_t commandCode;
uint8_t readInput;
uint8_t len;

int main(void) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af02      	add	r7, sp, #8
	GPIO_USER_INIT();
 8000dfa:	f000 f8a5 	bl	8000f48 <GPIO_USER_INIT>
	IRQ_Config(I2C1_IRQ31_EV, ENABLE);
 8000dfe:	2101      	movs	r1, #1
 8000e00:	201f      	movs	r0, #31
 8000e02:	f7ff fca3 	bl	800074c <IRQ_Config>
	IRQ_Config(I2C1_IRQ32_ER, ENABLE);
 8000e06:	2101      	movs	r1, #1
 8000e08:	2020      	movs	r0, #32
 8000e0a:	f7ff fc9f 	bl	800074c <IRQ_Config>
	I2C_USER_INIT();
 8000e0e:	f000 f879 	bl	8000f04 <I2C_USER_INIT>

	initialise_monitor_handles();
 8000e12:	f000 fb5d 	bl	80014d0 <initialise_monitor_handles>

	printf("Application is running\n");
 8000e16:	4831      	ldr	r0, [pc, #196]	@ (8000edc <main+0xe8>)
 8000e18:	f000 fd02 	bl	8001820 <puts>
	while (1) {
		readInput = GPIO_INPUT(GPIOA, GPIO_PIN_0);
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4830      	ldr	r0, [pc, #192]	@ (8000ee0 <main+0xec>)
 8000e20:	f7ff fc7e 	bl	8000720 <GPIO_INPUT>
 8000e24:	4603      	mov	r3, r0
 8000e26:	461a      	mov	r2, r3
 8000e28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee4 <main+0xf0>)
 8000e2a:	701a      	strb	r2, [r3, #0]
		if (readInput == HIGH) {
 8000e2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee4 <main+0xf0>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d1f3      	bne.n	8000e1c <main+0x28>
			commandCode = 0x51;
 8000e34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee8 <main+0xf4>)
 8000e36:	2251      	movs	r2, #81	@ 0x51
 8000e38:	701a      	strb	r2, [r3, #0]
			while (I2C_Master_Write_IT(&I2C_Handle, SLAVE_ADDR, &commandCode, 1,
 8000e3a:	bf00      	nop
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	2301      	movs	r3, #1
 8000e42:	4a29      	ldr	r2, [pc, #164]	@ (8000ee8 <main+0xf4>)
 8000e44:	2168      	movs	r1, #104	@ 0x68
 8000e46:	4829      	ldr	r0, [pc, #164]	@ (8000eec <main+0xf8>)
 8000e48:	f7ff fe6e 	bl	8000b28 <I2C_Master_Write_IT>
 8000e4c:	4603      	mov	r3, r0
			I2C_SR_EN) != I2C_READY)
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d1f4      	bne.n	8000e3c <main+0x48>
				;

			while (I2C_Master_Read_IT(&I2C_Handle, SLAVE_ADDR, &len, 1,
 8000e52:	bf00      	nop
 8000e54:	2301      	movs	r3, #1
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	4a25      	ldr	r2, [pc, #148]	@ (8000ef0 <main+0xfc>)
 8000e5c:	2168      	movs	r1, #104	@ 0x68
 8000e5e:	4823      	ldr	r0, [pc, #140]	@ (8000eec <main+0xf8>)
 8000e60:	f7ff feaa 	bl	8000bb8 <I2C_Master_Read_IT>
 8000e64:	4603      	mov	r3, r0
			I2C_SR_EN) != I2C_READY)
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d1f4      	bne.n	8000e54 <main+0x60>
				;

			commandCode = 0x52;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <main+0xf4>)
 8000e6c:	2252      	movs	r2, #82	@ 0x52
 8000e6e:	701a      	strb	r2, [r3, #0]

			while (I2C_Master_Write_IT(&I2C_Handle, SLAVE_ADDR, &commandCode, 1,
 8000e70:	bf00      	nop
 8000e72:	2301      	movs	r3, #1
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	2301      	movs	r3, #1
 8000e78:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee8 <main+0xf4>)
 8000e7a:	2168      	movs	r1, #104	@ 0x68
 8000e7c:	481b      	ldr	r0, [pc, #108]	@ (8000eec <main+0xf8>)
 8000e7e:	f7ff fe53 	bl	8000b28 <I2C_Master_Write_IT>
 8000e82:	4603      	mov	r3, r0
			I2C_SR_EN) != I2C_READY)
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f4      	bne.n	8000e72 <main+0x7e>
				;

			while (I2C_Master_Read_IT(&I2C_Handle, SLAVE_ADDR, buffer, len,
 8000e88:	bf00      	nop
 8000e8a:	4b19      	ldr	r3, [pc, #100]	@ (8000ef0 <main+0xfc>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	9200      	str	r2, [sp, #0]
 8000e92:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <main+0x100>)
 8000e94:	2168      	movs	r1, #104	@ 0x68
 8000e96:	4815      	ldr	r0, [pc, #84]	@ (8000eec <main+0xf8>)
 8000e98:	f7ff fe8e 	bl	8000bb8 <I2C_Master_Read_IT>
 8000e9c:	4603      	mov	r3, r0
			I2C_SR_DIS) != I2C_READY)
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d1f3      	bne.n	8000e8a <main+0x96>
				;
			rx_complete = 0;
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <main+0x104>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	701a      	strb	r2, [r3, #0]
			while (rx_complete == 0)
 8000ea8:	bf00      	nop
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <main+0x104>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0fb      	beq.n	8000eaa <main+0xb6>
				;
			buffer[len + 1] = '\0';   // null-terminate string properly
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <main+0xfc>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <main+0x100>)
 8000eba:	2100      	movs	r1, #0
 8000ebc:	54d1      	strb	r1, [r2, r3]

			printf("Data : %s", buffer);   // already ends with \n
 8000ebe:	490d      	ldr	r1, [pc, #52]	@ (8000ef4 <main+0x100>)
 8000ec0:	480e      	ldr	r0, [pc, #56]	@ (8000efc <main+0x108>)
 8000ec2:	f000 fc45 	bl	8001750 <iprintf>

			for (int i = 0; i < 100000; i++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	e002      	b.n	8000ed2 <main+0xde>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f00 <main+0x10c>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	ddf8      	ble.n	8000ecc <main+0xd8>
		readInput = GPIO_INPUT(GPIOA, GPIO_PIN_0);
 8000eda:	e79f      	b.n	8000e1c <main+0x28>
 8000edc:	0800252c 	.word	0x0800252c
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	200000dd 	.word	0x200000dd
 8000ee8:	200000dc 	.word	0x200000dc
 8000eec:	200000a0 	.word	0x200000a0
 8000ef0:	200000de 	.word	0x200000de
 8000ef4:	200000bc 	.word	0x200000bc
 8000ef8:	2000009c 	.word	0x2000009c
 8000efc:	08002544 	.word	0x08002544
 8000f00:	0001869f 	.word	0x0001869f

08000f04 <I2C_USER_INIT>:
				;
		}
	}
}

void I2C_USER_INIT(void) {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
	I2C_Handle.I2Cx = I2C1;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	@ (8000f3c <I2C_USER_INIT+0x38>)
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <I2C_USER_INIT+0x3c>)
 8000f0c:	601a      	str	r2, [r3, #0]
	I2C_Handle.MasterOrSlave = I2C_Master_Mode;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f3c <I2C_USER_INIT+0x38>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	715a      	strb	r2, [r3, #5]
	I2C_Handle.ack_en = I2C_ACK_EN;
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <I2C_USER_INIT+0x38>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	735a      	strb	r2, [r3, #13]
	I2C_Handle.address = 0x61;
 8000f1a:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <I2C_USER_INIT+0x38>)
 8000f1c:	2261      	movs	r2, #97	@ 0x61
 8000f1e:	71da      	strb	r2, [r3, #7]
	I2C_Handle.address_select_bit = I2C_7_Bit_Adress;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <I2C_USER_INIT+0x38>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	719a      	strb	r2, [r3, #6]
	I2C_Handle.mode = I2C_Standard_Mode;
 8000f26:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <I2C_USER_INIT+0x38>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	711a      	strb	r2, [r3, #4]
	I2C_Handle.scl_speed = I2C_SCL_SPEED_100;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	@ (8000f3c <I2C_USER_INIT+0x38>)
 8000f2e:	4a05      	ldr	r2, [pc, #20]	@ (8000f44 <I2C_USER_INIT+0x40>)
 8000f30:	609a      	str	r2, [r3, #8]
	I2C_INIT(&I2C_Handle);
 8000f32:	4802      	ldr	r0, [pc, #8]	@ (8000f3c <I2C_USER_INIT+0x38>)
 8000f34:	f7ff fcec 	bl	8000910 <I2C_INIT>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000a0 	.word	0x200000a0
 8000f40:	40005400 	.word	0x40005400
 8000f44:	000186a0 	.word	0x000186a0

08000f48 <GPIO_USER_INIT>:

void GPIO_USER_INIT(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

	// PA0 - USER BUTTON
	GPIO_Handle.GPIOX = GPIOA;
 8000f4c:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f4e:	4a18      	ldr	r2, [pc, #96]	@ (8000fb0 <GPIO_USER_INIT+0x68>)
 8000f50:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_INPUT;
 8000f52:	4b16      	ldr	r3, [pc, #88]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.pin_number = GPIO_PIN_0;
 8000f58:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_NONE;
 8000f5e:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	719a      	strb	r2, [r3, #6]
	GPIO_INIT(&GPIO_Handle);
 8000f64:	4811      	ldr	r0, [pc, #68]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f66:	f7ff f9f1 	bl	800034c <GPIO_INIT>

	// PB6 - I2C1_SCL
	GPIO_Handle.GPIOX = GPIOB;
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f6c:	4a11      	ldr	r2, [pc, #68]	@ (8000fb4 <GPIO_USER_INIT+0x6c>)
 8000f6e:	601a      	str	r2, [r3, #0]
	GPIO_Handle.mode = GPIO_MODE_AF;
 8000f70:	4b0e      	ldr	r3, [pc, #56]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	715a      	strb	r2, [r3, #5]
	GPIO_Handle.output_speed = GPIO_OUTPUT_SPEED_VERY_HIGH;
 8000f76:	4b0d      	ldr	r3, [pc, #52]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f78:	2203      	movs	r2, #3
 8000f7a:	71da      	strb	r2, [r3, #7]
	GPIO_Handle.output_type = GPIO_OUTPUT_TYPE_OD;
 8000f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	721a      	strb	r2, [r3, #8]
	GPIO_Handle.pin_number = GPIO_PIN_6;
 8000f82:	4b0a      	ldr	r3, [pc, #40]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f84:	2206      	movs	r2, #6
 8000f86:	711a      	strb	r2, [r3, #4]
	GPIO_Handle.pull_up_pull_down = GPIO_PUPD_PU;
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	719a      	strb	r2, [r3, #6]
	GPIO_Handle.alternate_function_select = GPIO_AF4;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	725a      	strb	r2, [r3, #9]
	GPIO_INIT(&GPIO_Handle);
 8000f94:	4805      	ldr	r0, [pc, #20]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f96:	f7ff f9d9 	bl	800034c <GPIO_INIT>

	// PB9 - I2C1_SDA
	GPIO_Handle.pin_number = GPIO_PIN_9;
 8000f9a:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000f9c:	2209      	movs	r2, #9
 8000f9e:	711a      	strb	r2, [r3, #4]
	GPIO_INIT(&GPIO_Handle);
 8000fa0:	4802      	ldr	r0, [pc, #8]	@ (8000fac <GPIO_USER_INIT+0x64>)
 8000fa2:	f7ff f9d3 	bl	800034c <GPIO_INIT>
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000b0 	.word	0x200000b0
 8000fb0:	40020000 	.word	0x40020000
 8000fb4:	40020400 	.word	0x40020400

08000fb8 <I2C1_EV_IRQHandler>:

void I2C1_EV_IRQHandler() {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
	I2C_EV_IRQ_Handling(&I2C_Handle);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <I2C1_EV_IRQHandler+0x10>)
 8000fbe:	f7ff fe45 	bl	8000c4c <I2C_EV_IRQ_Handling>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000a0 	.word	0x200000a0

08000fcc <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler() {
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
	// Existing code

	while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <I2C1_ER_IRQHandler+0x4>

08000fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fdc:	4a14      	ldr	r2, [pc, #80]	@ (8001030 <_sbrk+0x5c>)
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <_sbrk+0x60>)
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe8:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <_sbrk+0x64>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d102      	bne.n	8000ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <_sbrk+0x64>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <_sbrk+0x68>)
 8000ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	429a      	cmp	r2, r3
 8001002:	d207      	bcs.n	8001014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001004:	f000 fd3a 	bl	8001a7c <__errno>
 8001008:	4603      	mov	r3, r0
 800100a:	220c      	movs	r2, #12
 800100c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100e:	f04f 33ff 	mov.w	r3, #4294967295
 8001012:	e009      	b.n	8001028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001014:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <_sbrk+0x64>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101a:	4b07      	ldr	r3, [pc, #28]	@ (8001038 <_sbrk+0x64>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4413      	add	r3, r2
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <_sbrk+0x64>)
 8001024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001026:	68fb      	ldr	r3, [r7, #12]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3718      	adds	r7, #24
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20020000 	.word	0x20020000
 8001034:	00000400 	.word	0x00000400
 8001038:	200000e0 	.word	0x200000e0
 800103c:	200002e0 	.word	0x200002e0

08001040 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001040:	480d      	ldr	r0, [pc, #52]	@ (8001078 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001042:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001044:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <LoopForever+0x6>)
  ldr r1, =_edata
 800104a:	490d      	ldr	r1, [pc, #52]	@ (8001080 <LoopForever+0xa>)
  ldr r2, =_sidata
 800104c:	4a0d      	ldr	r2, [pc, #52]	@ (8001084 <LoopForever+0xe>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001050:	e002      	b.n	8001058 <LoopCopyDataInit>

08001052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001056:	3304      	adds	r3, #4

08001058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800105a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800105c:	d3f9      	bcc.n	8001052 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001060:	4c0a      	ldr	r4, [pc, #40]	@ (800108c <LoopForever+0x16>)
  movs r3, #0
 8001062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001064:	e001      	b.n	800106a <LoopFillZerobss>

08001066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001068:	3204      	adds	r2, #4

0800106a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800106a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800106c:	d3fb      	bcc.n	8001066 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800106e:	f000 fd0b 	bl	8001a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001072:	f7ff febf 	bl	8000df4 <main>

08001076 <LoopForever>:

LoopForever:
  b LoopForever
 8001076:	e7fe      	b.n	8001076 <LoopForever>
  ldr   r0, =_estack
 8001078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800107c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001080:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001084:	080025ac 	.word	0x080025ac
  ldr r2, =_sbss
 8001088:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800108c:	200002dc 	.word	0x200002dc

08001090 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001090:	e7fe      	b.n	8001090 <ADC_IRQHandler>
	...

08001094 <findslot>:
 8001094:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <findslot+0x2c>)
 8001096:	b510      	push	{r4, lr}
 8001098:	4604      	mov	r4, r0
 800109a:	6818      	ldr	r0, [r3, #0]
 800109c:	b118      	cbz	r0, 80010a6 <findslot+0x12>
 800109e:	6a03      	ldr	r3, [r0, #32]
 80010a0:	b90b      	cbnz	r3, 80010a6 <findslot+0x12>
 80010a2:	f000 fb1f 	bl	80016e4 <__sinit>
 80010a6:	2c13      	cmp	r4, #19
 80010a8:	d807      	bhi.n	80010ba <findslot+0x26>
 80010aa:	4806      	ldr	r0, [pc, #24]	@ (80010c4 <findslot+0x30>)
 80010ac:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80010b0:	3201      	adds	r2, #1
 80010b2:	d002      	beq.n	80010ba <findslot+0x26>
 80010b4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80010b8:	bd10      	pop	{r4, pc}
 80010ba:	2000      	movs	r0, #0
 80010bc:	e7fc      	b.n	80010b8 <findslot+0x24>
 80010be:	bf00      	nop
 80010c0:	20000014 	.word	0x20000014
 80010c4:	200000f0 	.word	0x200000f0

080010c8 <error>:
 80010c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ca:	4604      	mov	r4, r0
 80010cc:	f000 fcd6 	bl	8001a7c <__errno>
 80010d0:	2613      	movs	r6, #19
 80010d2:	4605      	mov	r5, r0
 80010d4:	2700      	movs	r7, #0
 80010d6:	4630      	mov	r0, r6
 80010d8:	4639      	mov	r1, r7
 80010da:	beab      	bkpt	0x00ab
 80010dc:	4606      	mov	r6, r0
 80010de:	602e      	str	r6, [r5, #0]
 80010e0:	4620      	mov	r0, r4
 80010e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010e4 <checkerror>:
 80010e4:	1c43      	adds	r3, r0, #1
 80010e6:	d101      	bne.n	80010ec <checkerror+0x8>
 80010e8:	f7ff bfee 	b.w	80010c8 <error>
 80010ec:	4770      	bx	lr

080010ee <_swiread>:
 80010ee:	b530      	push	{r4, r5, lr}
 80010f0:	b085      	sub	sp, #20
 80010f2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80010f6:	9203      	str	r2, [sp, #12]
 80010f8:	2406      	movs	r4, #6
 80010fa:	ad01      	add	r5, sp, #4
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	beab      	bkpt	0x00ab
 8001102:	4604      	mov	r4, r0
 8001104:	4620      	mov	r0, r4
 8001106:	f7ff ffed 	bl	80010e4 <checkerror>
 800110a:	b005      	add	sp, #20
 800110c:	bd30      	pop	{r4, r5, pc}

0800110e <_read>:
 800110e:	b570      	push	{r4, r5, r6, lr}
 8001110:	460e      	mov	r6, r1
 8001112:	4614      	mov	r4, r2
 8001114:	f7ff ffbe 	bl	8001094 <findslot>
 8001118:	4605      	mov	r5, r0
 800111a:	b930      	cbnz	r0, 800112a <_read+0x1c>
 800111c:	f000 fcae 	bl	8001a7c <__errno>
 8001120:	2309      	movs	r3, #9
 8001122:	6003      	str	r3, [r0, #0]
 8001124:	f04f 30ff 	mov.w	r0, #4294967295
 8001128:	bd70      	pop	{r4, r5, r6, pc}
 800112a:	6800      	ldr	r0, [r0, #0]
 800112c:	4622      	mov	r2, r4
 800112e:	4631      	mov	r1, r6
 8001130:	f7ff ffdd 	bl	80010ee <_swiread>
 8001134:	1c43      	adds	r3, r0, #1
 8001136:	d0f5      	beq.n	8001124 <_read+0x16>
 8001138:	686b      	ldr	r3, [r5, #4]
 800113a:	1a20      	subs	r0, r4, r0
 800113c:	4403      	add	r3, r0
 800113e:	606b      	str	r3, [r5, #4]
 8001140:	e7f2      	b.n	8001128 <_read+0x1a>

08001142 <_swilseek>:
 8001142:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001144:	460c      	mov	r4, r1
 8001146:	4616      	mov	r6, r2
 8001148:	f7ff ffa4 	bl	8001094 <findslot>
 800114c:	4605      	mov	r5, r0
 800114e:	b940      	cbnz	r0, 8001162 <_swilseek+0x20>
 8001150:	f000 fc94 	bl	8001a7c <__errno>
 8001154:	2309      	movs	r3, #9
 8001156:	6003      	str	r3, [r0, #0]
 8001158:	f04f 34ff 	mov.w	r4, #4294967295
 800115c:	4620      	mov	r0, r4
 800115e:	b003      	add	sp, #12
 8001160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001162:	2e02      	cmp	r6, #2
 8001164:	d903      	bls.n	800116e <_swilseek+0x2c>
 8001166:	f000 fc89 	bl	8001a7c <__errno>
 800116a:	2316      	movs	r3, #22
 800116c:	e7f3      	b.n	8001156 <_swilseek+0x14>
 800116e:	2e01      	cmp	r6, #1
 8001170:	d112      	bne.n	8001198 <_swilseek+0x56>
 8001172:	6843      	ldr	r3, [r0, #4]
 8001174:	18e4      	adds	r4, r4, r3
 8001176:	d4f6      	bmi.n	8001166 <_swilseek+0x24>
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	260a      	movs	r6, #10
 800117c:	e9cd 3400 	strd	r3, r4, [sp]
 8001180:	466f      	mov	r7, sp
 8001182:	4630      	mov	r0, r6
 8001184:	4639      	mov	r1, r7
 8001186:	beab      	bkpt	0x00ab
 8001188:	4606      	mov	r6, r0
 800118a:	4630      	mov	r0, r6
 800118c:	f7ff ffaa 	bl	80010e4 <checkerror>
 8001190:	2800      	cmp	r0, #0
 8001192:	dbe1      	blt.n	8001158 <_swilseek+0x16>
 8001194:	606c      	str	r4, [r5, #4]
 8001196:	e7e1      	b.n	800115c <_swilseek+0x1a>
 8001198:	2e02      	cmp	r6, #2
 800119a:	6803      	ldr	r3, [r0, #0]
 800119c:	d1ec      	bne.n	8001178 <_swilseek+0x36>
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	260c      	movs	r6, #12
 80011a2:	466f      	mov	r7, sp
 80011a4:	4630      	mov	r0, r6
 80011a6:	4639      	mov	r1, r7
 80011a8:	beab      	bkpt	0x00ab
 80011aa:	4606      	mov	r6, r0
 80011ac:	4630      	mov	r0, r6
 80011ae:	f7ff ff99 	bl	80010e4 <checkerror>
 80011b2:	1c43      	adds	r3, r0, #1
 80011b4:	d0d0      	beq.n	8001158 <_swilseek+0x16>
 80011b6:	4404      	add	r4, r0
 80011b8:	e7de      	b.n	8001178 <_swilseek+0x36>

080011ba <_lseek>:
 80011ba:	f7ff bfc2 	b.w	8001142 <_swilseek>

080011be <_swiwrite>:
 80011be:	b530      	push	{r4, r5, lr}
 80011c0:	b085      	sub	sp, #20
 80011c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80011c6:	9203      	str	r2, [sp, #12]
 80011c8:	2405      	movs	r4, #5
 80011ca:	ad01      	add	r5, sp, #4
 80011cc:	4620      	mov	r0, r4
 80011ce:	4629      	mov	r1, r5
 80011d0:	beab      	bkpt	0x00ab
 80011d2:	4604      	mov	r4, r0
 80011d4:	4620      	mov	r0, r4
 80011d6:	f7ff ff85 	bl	80010e4 <checkerror>
 80011da:	b005      	add	sp, #20
 80011dc:	bd30      	pop	{r4, r5, pc}

080011de <_write>:
 80011de:	b570      	push	{r4, r5, r6, lr}
 80011e0:	460e      	mov	r6, r1
 80011e2:	4615      	mov	r5, r2
 80011e4:	f7ff ff56 	bl	8001094 <findslot>
 80011e8:	4604      	mov	r4, r0
 80011ea:	b930      	cbnz	r0, 80011fa <_write+0x1c>
 80011ec:	f000 fc46 	bl	8001a7c <__errno>
 80011f0:	2309      	movs	r3, #9
 80011f2:	6003      	str	r3, [r0, #0]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	bd70      	pop	{r4, r5, r6, pc}
 80011fa:	6800      	ldr	r0, [r0, #0]
 80011fc:	462a      	mov	r2, r5
 80011fe:	4631      	mov	r1, r6
 8001200:	f7ff ffdd 	bl	80011be <_swiwrite>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	dbf5      	blt.n	80011f4 <_write+0x16>
 8001208:	6862      	ldr	r2, [r4, #4]
 800120a:	1ae8      	subs	r0, r5, r3
 800120c:	4402      	add	r2, r0
 800120e:	42ab      	cmp	r3, r5
 8001210:	6062      	str	r2, [r4, #4]
 8001212:	d1f1      	bne.n	80011f8 <_write+0x1a>
 8001214:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001218:	2000      	movs	r0, #0
 800121a:	f7ff bf55 	b.w	80010c8 <error>

0800121e <_swiclose>:
 800121e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001220:	2402      	movs	r4, #2
 8001222:	9001      	str	r0, [sp, #4]
 8001224:	ad01      	add	r5, sp, #4
 8001226:	4620      	mov	r0, r4
 8001228:	4629      	mov	r1, r5
 800122a:	beab      	bkpt	0x00ab
 800122c:	4604      	mov	r4, r0
 800122e:	4620      	mov	r0, r4
 8001230:	f7ff ff58 	bl	80010e4 <checkerror>
 8001234:	b003      	add	sp, #12
 8001236:	bd30      	pop	{r4, r5, pc}

08001238 <_close>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4605      	mov	r5, r0
 800123c:	f7ff ff2a 	bl	8001094 <findslot>
 8001240:	4604      	mov	r4, r0
 8001242:	b930      	cbnz	r0, 8001252 <_close+0x1a>
 8001244:	f000 fc1a 	bl	8001a7c <__errno>
 8001248:	2309      	movs	r3, #9
 800124a:	6003      	str	r3, [r0, #0]
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	bd38      	pop	{r3, r4, r5, pc}
 8001252:	3d01      	subs	r5, #1
 8001254:	2d01      	cmp	r5, #1
 8001256:	d809      	bhi.n	800126c <_close+0x34>
 8001258:	4b09      	ldr	r3, [pc, #36]	@ (8001280 <_close+0x48>)
 800125a:	689a      	ldr	r2, [r3, #8]
 800125c:	691b      	ldr	r3, [r3, #16]
 800125e:	429a      	cmp	r2, r3
 8001260:	d104      	bne.n	800126c <_close+0x34>
 8001262:	f04f 33ff 	mov.w	r3, #4294967295
 8001266:	6003      	str	r3, [r0, #0]
 8001268:	2000      	movs	r0, #0
 800126a:	e7f1      	b.n	8001250 <_close+0x18>
 800126c:	6820      	ldr	r0, [r4, #0]
 800126e:	f7ff ffd6 	bl	800121e <_swiclose>
 8001272:	2800      	cmp	r0, #0
 8001274:	d1ec      	bne.n	8001250 <_close+0x18>
 8001276:	f04f 33ff 	mov.w	r3, #4294967295
 800127a:	6023      	str	r3, [r4, #0]
 800127c:	e7e8      	b.n	8001250 <_close+0x18>
 800127e:	bf00      	nop
 8001280:	200000f0 	.word	0x200000f0

08001284 <_swistat>:
 8001284:	b570      	push	{r4, r5, r6, lr}
 8001286:	460c      	mov	r4, r1
 8001288:	f7ff ff04 	bl	8001094 <findslot>
 800128c:	4605      	mov	r5, r0
 800128e:	b930      	cbnz	r0, 800129e <_swistat+0x1a>
 8001290:	f000 fbf4 	bl	8001a7c <__errno>
 8001294:	2309      	movs	r3, #9
 8001296:	6003      	str	r3, [r0, #0]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	bd70      	pop	{r4, r5, r6, pc}
 800129e:	6863      	ldr	r3, [r4, #4]
 80012a0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012a4:	6063      	str	r3, [r4, #4]
 80012a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012aa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80012ac:	260c      	movs	r6, #12
 80012ae:	4630      	mov	r0, r6
 80012b0:	4629      	mov	r1, r5
 80012b2:	beab      	bkpt	0x00ab
 80012b4:	4605      	mov	r5, r0
 80012b6:	4628      	mov	r0, r5
 80012b8:	f7ff ff14 	bl	80010e4 <checkerror>
 80012bc:	1c43      	adds	r3, r0, #1
 80012be:	d0eb      	beq.n	8001298 <_swistat+0x14>
 80012c0:	6120      	str	r0, [r4, #16]
 80012c2:	2000      	movs	r0, #0
 80012c4:	e7ea      	b.n	800129c <_swistat+0x18>

080012c6 <_fstat>:
 80012c6:	460b      	mov	r3, r1
 80012c8:	b510      	push	{r4, lr}
 80012ca:	2100      	movs	r1, #0
 80012cc:	4604      	mov	r4, r0
 80012ce:	2258      	movs	r2, #88	@ 0x58
 80012d0:	4618      	mov	r0, r3
 80012d2:	f000 fb85 	bl	80019e0 <memset>
 80012d6:	4601      	mov	r1, r0
 80012d8:	4620      	mov	r0, r4
 80012da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012de:	f7ff bfd1 	b.w	8001284 <_swistat>

080012e2 <_stat>:
 80012e2:	b538      	push	{r3, r4, r5, lr}
 80012e4:	460d      	mov	r5, r1
 80012e6:	4604      	mov	r4, r0
 80012e8:	2258      	movs	r2, #88	@ 0x58
 80012ea:	2100      	movs	r1, #0
 80012ec:	4628      	mov	r0, r5
 80012ee:	f000 fb77 	bl	80019e0 <memset>
 80012f2:	4620      	mov	r0, r4
 80012f4:	2100      	movs	r1, #0
 80012f6:	f000 f811 	bl	800131c <_swiopen>
 80012fa:	1c43      	adds	r3, r0, #1
 80012fc:	4604      	mov	r4, r0
 80012fe:	d00b      	beq.n	8001318 <_stat+0x36>
 8001300:	686b      	ldr	r3, [r5, #4]
 8001302:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8001306:	606b      	str	r3, [r5, #4]
 8001308:	4629      	mov	r1, r5
 800130a:	f7ff ffbb 	bl	8001284 <_swistat>
 800130e:	4605      	mov	r5, r0
 8001310:	4620      	mov	r0, r4
 8001312:	f7ff ff91 	bl	8001238 <_close>
 8001316:	462c      	mov	r4, r5
 8001318:	4620      	mov	r0, r4
 800131a:	bd38      	pop	{r3, r4, r5, pc}

0800131c <_swiopen>:
 800131c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001320:	f8df 90a8 	ldr.w	r9, [pc, #168]	@ 80013cc <_swiopen+0xb0>
 8001324:	b096      	sub	sp, #88	@ 0x58
 8001326:	4607      	mov	r7, r0
 8001328:	460e      	mov	r6, r1
 800132a:	2400      	movs	r4, #0
 800132c:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8001330:	3301      	adds	r3, #1
 8001332:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8001336:	d032      	beq.n	800139e <_swiopen+0x82>
 8001338:	3401      	adds	r4, #1
 800133a:	2c14      	cmp	r4, #20
 800133c:	d1f6      	bne.n	800132c <_swiopen+0x10>
 800133e:	f000 fb9d 	bl	8001a7c <__errno>
 8001342:	2318      	movs	r3, #24
 8001344:	e03a      	b.n	80013bc <_swiopen+0xa0>
 8001346:	f3c6 4500 	ubfx	r5, r6, #16, #1
 800134a:	f240 6301 	movw	r3, #1537	@ 0x601
 800134e:	07b2      	lsls	r2, r6, #30
 8001350:	bf48      	it	mi
 8001352:	f045 0502 	orrmi.w	r5, r5, #2
 8001356:	421e      	tst	r6, r3
 8001358:	bf18      	it	ne
 800135a:	f045 0504 	orrne.w	r5, r5, #4
 800135e:	0733      	lsls	r3, r6, #28
 8001360:	bf48      	it	mi
 8001362:	f025 0504 	bicmi.w	r5, r5, #4
 8001366:	4638      	mov	r0, r7
 8001368:	bf48      	it	mi
 800136a:	f045 0508 	orrmi.w	r5, r5, #8
 800136e:	9700      	str	r7, [sp, #0]
 8001370:	f7fe ff2e 	bl	80001d0 <strlen>
 8001374:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8001378:	2501      	movs	r5, #1
 800137a:	4628      	mov	r0, r5
 800137c:	4651      	mov	r1, sl
 800137e:	beab      	bkpt	0x00ab
 8001380:	4605      	mov	r5, r0
 8001382:	2d00      	cmp	r5, #0
 8001384:	db06      	blt.n	8001394 <_swiopen+0x78>
 8001386:	44c8      	add	r8, r9
 8001388:	2300      	movs	r3, #0
 800138a:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 800138e:	f8c8 3004 	str.w	r3, [r8, #4]
 8001392:	e016      	b.n	80013c2 <_swiopen+0xa6>
 8001394:	4628      	mov	r0, r5
 8001396:	f7ff fe97 	bl	80010c8 <error>
 800139a:	4604      	mov	r4, r0
 800139c:	e011      	b.n	80013c2 <_swiopen+0xa6>
 800139e:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80013a2:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80013a6:	46ea      	mov	sl, sp
 80013a8:	d1cd      	bne.n	8001346 <_swiopen+0x2a>
 80013aa:	4651      	mov	r1, sl
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff ff98 	bl	80012e2 <_stat>
 80013b2:	3001      	adds	r0, #1
 80013b4:	d0c7      	beq.n	8001346 <_swiopen+0x2a>
 80013b6:	f000 fb61 	bl	8001a7c <__errno>
 80013ba:	2311      	movs	r3, #17
 80013bc:	6003      	str	r3, [r0, #0]
 80013be:	f04f 34ff 	mov.w	r4, #4294967295
 80013c2:	4620      	mov	r0, r4
 80013c4:	b016      	add	sp, #88	@ 0x58
 80013c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013ca:	bf00      	nop
 80013cc:	200000f0 	.word	0x200000f0

080013d0 <_get_semihosting_exts>:
 80013d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80013d4:	4606      	mov	r6, r0
 80013d6:	460f      	mov	r7, r1
 80013d8:	4829      	ldr	r0, [pc, #164]	@ (8001480 <_get_semihosting_exts+0xb0>)
 80013da:	2100      	movs	r1, #0
 80013dc:	4615      	mov	r5, r2
 80013de:	f7ff ff9d 	bl	800131c <_swiopen>
 80013e2:	462a      	mov	r2, r5
 80013e4:	4604      	mov	r4, r0
 80013e6:	2100      	movs	r1, #0
 80013e8:	4630      	mov	r0, r6
 80013ea:	f000 faf9 	bl	80019e0 <memset>
 80013ee:	1c63      	adds	r3, r4, #1
 80013f0:	d014      	beq.n	800141c <_get_semihosting_exts+0x4c>
 80013f2:	4620      	mov	r0, r4
 80013f4:	f7ff fe4e 	bl	8001094 <findslot>
 80013f8:	f04f 080c 	mov.w	r8, #12
 80013fc:	4681      	mov	r9, r0
 80013fe:	4640      	mov	r0, r8
 8001400:	4649      	mov	r1, r9
 8001402:	beab      	bkpt	0x00ab
 8001404:	4680      	mov	r8, r0
 8001406:	4640      	mov	r0, r8
 8001408:	f7ff fe6c 	bl	80010e4 <checkerror>
 800140c:	2803      	cmp	r0, #3
 800140e:	dd02      	ble.n	8001416 <_get_semihosting_exts+0x46>
 8001410:	1ec3      	subs	r3, r0, #3
 8001412:	42ab      	cmp	r3, r5
 8001414:	dc07      	bgt.n	8001426 <_get_semihosting_exts+0x56>
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff ff0e 	bl	8001238 <_close>
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	b003      	add	sp, #12
 8001422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001426:	2204      	movs	r2, #4
 8001428:	eb0d 0102 	add.w	r1, sp, r2
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fe6e 	bl	800110e <_read>
 8001432:	2803      	cmp	r0, #3
 8001434:	ddef      	ble.n	8001416 <_get_semihosting_exts+0x46>
 8001436:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800143a:	2b53      	cmp	r3, #83	@ 0x53
 800143c:	d1eb      	bne.n	8001416 <_get_semihosting_exts+0x46>
 800143e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001442:	2b48      	cmp	r3, #72	@ 0x48
 8001444:	d1e7      	bne.n	8001416 <_get_semihosting_exts+0x46>
 8001446:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800144a:	2b46      	cmp	r3, #70	@ 0x46
 800144c:	d1e3      	bne.n	8001416 <_get_semihosting_exts+0x46>
 800144e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001452:	2b42      	cmp	r3, #66	@ 0x42
 8001454:	d1df      	bne.n	8001416 <_get_semihosting_exts+0x46>
 8001456:	2201      	movs	r2, #1
 8001458:	4639      	mov	r1, r7
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff fe71 	bl	8001142 <_swilseek>
 8001460:	2800      	cmp	r0, #0
 8001462:	dbd8      	blt.n	8001416 <_get_semihosting_exts+0x46>
 8001464:	462a      	mov	r2, r5
 8001466:	4631      	mov	r1, r6
 8001468:	4620      	mov	r0, r4
 800146a:	f7ff fe50 	bl	800110e <_read>
 800146e:	4605      	mov	r5, r0
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fee1 	bl	8001238 <_close>
 8001476:	4628      	mov	r0, r5
 8001478:	f7ff fe34 	bl	80010e4 <checkerror>
 800147c:	e7d0      	b.n	8001420 <_get_semihosting_exts+0x50>
 800147e:	bf00      	nop
 8001480:	0800254e 	.word	0x0800254e

08001484 <initialise_semihosting_exts>:
 8001484:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001486:	4d0a      	ldr	r5, [pc, #40]	@ (80014b0 <initialise_semihosting_exts+0x2c>)
 8001488:	4c0a      	ldr	r4, [pc, #40]	@ (80014b4 <initialise_semihosting_exts+0x30>)
 800148a:	2100      	movs	r1, #0
 800148c:	2201      	movs	r2, #1
 800148e:	a801      	add	r0, sp, #4
 8001490:	6029      	str	r1, [r5, #0]
 8001492:	6022      	str	r2, [r4, #0]
 8001494:	f7ff ff9c 	bl	80013d0 <_get_semihosting_exts>
 8001498:	2800      	cmp	r0, #0
 800149a:	dd07      	ble.n	80014ac <initialise_semihosting_exts+0x28>
 800149c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80014a0:	f003 0201 	and.w	r2, r3, #1
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	602a      	str	r2, [r5, #0]
 80014aa:	6023      	str	r3, [r4, #0]
 80014ac:	b003      	add	sp, #12
 80014ae:	bd30      	pop	{r4, r5, pc}
 80014b0:	20000004 	.word	0x20000004
 80014b4:	20000000 	.word	0x20000000

080014b8 <_has_ext_stdout_stderr>:
 80014b8:	b510      	push	{r4, lr}
 80014ba:	4c04      	ldr	r4, [pc, #16]	@ (80014cc <_has_ext_stdout_stderr+0x14>)
 80014bc:	6823      	ldr	r3, [r4, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da01      	bge.n	80014c6 <_has_ext_stdout_stderr+0xe>
 80014c2:	f7ff ffdf 	bl	8001484 <initialise_semihosting_exts>
 80014c6:	6820      	ldr	r0, [r4, #0]
 80014c8:	bd10      	pop	{r4, pc}
 80014ca:	bf00      	nop
 80014cc:	20000000 	.word	0x20000000

080014d0 <initialise_monitor_handles>:
 80014d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014d4:	b085      	sub	sp, #20
 80014d6:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8001588 <initialise_monitor_handles+0xb8>
 80014da:	f8cd 9004 	str.w	r9, [sp, #4]
 80014de:	2303      	movs	r3, #3
 80014e0:	2400      	movs	r4, #0
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	af01      	add	r7, sp, #4
 80014e6:	9402      	str	r4, [sp, #8]
 80014e8:	2501      	movs	r5, #1
 80014ea:	4628      	mov	r0, r5
 80014ec:	4639      	mov	r1, r7
 80014ee:	beab      	bkpt	0x00ab
 80014f0:	4605      	mov	r5, r0
 80014f2:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800158c <initialise_monitor_handles+0xbc>
 80014f6:	4623      	mov	r3, r4
 80014f8:	4c20      	ldr	r4, [pc, #128]	@ (800157c <initialise_monitor_handles+0xac>)
 80014fa:	f8c8 5000 	str.w	r5, [r8]
 80014fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001502:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8001506:	3301      	adds	r3, #1
 8001508:	2b14      	cmp	r3, #20
 800150a:	d1fa      	bne.n	8001502 <initialise_monitor_handles+0x32>
 800150c:	f7ff ffd4 	bl	80014b8 <_has_ext_stdout_stderr>
 8001510:	4d1b      	ldr	r5, [pc, #108]	@ (8001580 <initialise_monitor_handles+0xb0>)
 8001512:	b1d0      	cbz	r0, 800154a <initialise_monitor_handles+0x7a>
 8001514:	f04f 0a03 	mov.w	sl, #3
 8001518:	2304      	movs	r3, #4
 800151a:	f8cd 9004 	str.w	r9, [sp, #4]
 800151e:	2601      	movs	r6, #1
 8001520:	f8cd a00c 	str.w	sl, [sp, #12]
 8001524:	9302      	str	r3, [sp, #8]
 8001526:	4630      	mov	r0, r6
 8001528:	4639      	mov	r1, r7
 800152a:	beab      	bkpt	0x00ab
 800152c:	4683      	mov	fp, r0
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <initialise_monitor_handles+0xb4>)
 8001530:	f8cd 9004 	str.w	r9, [sp, #4]
 8001534:	f8c3 b000 	str.w	fp, [r3]
 8001538:	2308      	movs	r3, #8
 800153a:	f8cd a00c 	str.w	sl, [sp, #12]
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	4630      	mov	r0, r6
 8001542:	4639      	mov	r1, r7
 8001544:	beab      	bkpt	0x00ab
 8001546:	4606      	mov	r6, r0
 8001548:	602e      	str	r6, [r5, #0]
 800154a:	682b      	ldr	r3, [r5, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	bf02      	ittt	eq
 8001550:	4b0c      	ldreq	r3, [pc, #48]	@ (8001584 <initialise_monitor_handles+0xb4>)
 8001552:	681b      	ldreq	r3, [r3, #0]
 8001554:	602b      	streq	r3, [r5, #0]
 8001556:	2600      	movs	r6, #0
 8001558:	f8d8 3000 	ldr.w	r3, [r8]
 800155c:	6023      	str	r3, [r4, #0]
 800155e:	6066      	str	r6, [r4, #4]
 8001560:	f7ff ffaa 	bl	80014b8 <_has_ext_stdout_stderr>
 8001564:	b130      	cbz	r0, 8001574 <initialise_monitor_handles+0xa4>
 8001566:	4b07      	ldr	r3, [pc, #28]	@ (8001584 <initialise_monitor_handles+0xb4>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800156e:	682b      	ldr	r3, [r5, #0]
 8001570:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8001574:	b005      	add	sp, #20
 8001576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800157a:	bf00      	nop
 800157c:	200000f0 	.word	0x200000f0
 8001580:	200000e4 	.word	0x200000e4
 8001584:	200000e8 	.word	0x200000e8
 8001588:	08002564 	.word	0x08002564
 800158c:	200000ec 	.word	0x200000ec

08001590 <_isatty>:
 8001590:	b570      	push	{r4, r5, r6, lr}
 8001592:	f7ff fd7f 	bl	8001094 <findslot>
 8001596:	2409      	movs	r4, #9
 8001598:	4605      	mov	r5, r0
 800159a:	b920      	cbnz	r0, 80015a6 <_isatty+0x16>
 800159c:	f000 fa6e 	bl	8001a7c <__errno>
 80015a0:	6004      	str	r4, [r0, #0]
 80015a2:	2000      	movs	r0, #0
 80015a4:	bd70      	pop	{r4, r5, r6, pc}
 80015a6:	4620      	mov	r0, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	beab      	bkpt	0x00ab
 80015ac:	4604      	mov	r4, r0
 80015ae:	2c01      	cmp	r4, #1
 80015b0:	4620      	mov	r0, r4
 80015b2:	d0f7      	beq.n	80015a4 <_isatty+0x14>
 80015b4:	f000 fa62 	bl	8001a7c <__errno>
 80015b8:	2513      	movs	r5, #19
 80015ba:	4604      	mov	r4, r0
 80015bc:	2600      	movs	r6, #0
 80015be:	4628      	mov	r0, r5
 80015c0:	4631      	mov	r1, r6
 80015c2:	beab      	bkpt	0x00ab
 80015c4:	4605      	mov	r5, r0
 80015c6:	6025      	str	r5, [r4, #0]
 80015c8:	e7eb      	b.n	80015a2 <_isatty+0x12>
	...

080015cc <std>:
 80015cc:	2300      	movs	r3, #0
 80015ce:	b510      	push	{r4, lr}
 80015d0:	4604      	mov	r4, r0
 80015d2:	e9c0 3300 	strd	r3, r3, [r0]
 80015d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80015da:	6083      	str	r3, [r0, #8]
 80015dc:	8181      	strh	r1, [r0, #12]
 80015de:	6643      	str	r3, [r0, #100]	@ 0x64
 80015e0:	81c2      	strh	r2, [r0, #14]
 80015e2:	6183      	str	r3, [r0, #24]
 80015e4:	4619      	mov	r1, r3
 80015e6:	2208      	movs	r2, #8
 80015e8:	305c      	adds	r0, #92	@ 0x5c
 80015ea:	f000 f9f9 	bl	80019e0 <memset>
 80015ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001624 <std+0x58>)
 80015f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <std+0x5c>)
 80015f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <std+0x60>)
 80015f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <std+0x64>)
 80015fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80015fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <std+0x68>)
 8001600:	6224      	str	r4, [r4, #32]
 8001602:	429c      	cmp	r4, r3
 8001604:	d006      	beq.n	8001614 <std+0x48>
 8001606:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800160a:	4294      	cmp	r4, r2
 800160c:	d002      	beq.n	8001614 <std+0x48>
 800160e:	33d0      	adds	r3, #208	@ 0xd0
 8001610:	429c      	cmp	r4, r3
 8001612:	d105      	bne.n	8001620 <std+0x54>
 8001614:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800161c:	f000 ba58 	b.w	8001ad0 <__retarget_lock_init_recursive>
 8001620:	bd10      	pop	{r4, pc}
 8001622:	bf00      	nop
 8001624:	08001831 	.word	0x08001831
 8001628:	08001853 	.word	0x08001853
 800162c:	0800188b 	.word	0x0800188b
 8001630:	080018af 	.word	0x080018af
 8001634:	20000190 	.word	0x20000190

08001638 <stdio_exit_handler>:
 8001638:	4a02      	ldr	r2, [pc, #8]	@ (8001644 <stdio_exit_handler+0xc>)
 800163a:	4903      	ldr	r1, [pc, #12]	@ (8001648 <stdio_exit_handler+0x10>)
 800163c:	4803      	ldr	r0, [pc, #12]	@ (800164c <stdio_exit_handler+0x14>)
 800163e:	f000 b869 	b.w	8001714 <_fwalk_sglue>
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008
 8001648:	0800236d 	.word	0x0800236d
 800164c:	20000018 	.word	0x20000018

08001650 <cleanup_stdio>:
 8001650:	6841      	ldr	r1, [r0, #4]
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <cleanup_stdio+0x34>)
 8001654:	4299      	cmp	r1, r3
 8001656:	b510      	push	{r4, lr}
 8001658:	4604      	mov	r4, r0
 800165a:	d001      	beq.n	8001660 <cleanup_stdio+0x10>
 800165c:	f000 fe86 	bl	800236c <_fflush_r>
 8001660:	68a1      	ldr	r1, [r4, #8]
 8001662:	4b09      	ldr	r3, [pc, #36]	@ (8001688 <cleanup_stdio+0x38>)
 8001664:	4299      	cmp	r1, r3
 8001666:	d002      	beq.n	800166e <cleanup_stdio+0x1e>
 8001668:	4620      	mov	r0, r4
 800166a:	f000 fe7f 	bl	800236c <_fflush_r>
 800166e:	68e1      	ldr	r1, [r4, #12]
 8001670:	4b06      	ldr	r3, [pc, #24]	@ (800168c <cleanup_stdio+0x3c>)
 8001672:	4299      	cmp	r1, r3
 8001674:	d004      	beq.n	8001680 <cleanup_stdio+0x30>
 8001676:	4620      	mov	r0, r4
 8001678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800167c:	f000 be76 	b.w	800236c <_fflush_r>
 8001680:	bd10      	pop	{r4, pc}
 8001682:	bf00      	nop
 8001684:	20000190 	.word	0x20000190
 8001688:	200001f8 	.word	0x200001f8
 800168c:	20000260 	.word	0x20000260

08001690 <global_stdio_init.part.0>:
 8001690:	b510      	push	{r4, lr}
 8001692:	4b0b      	ldr	r3, [pc, #44]	@ (80016c0 <global_stdio_init.part.0+0x30>)
 8001694:	4c0b      	ldr	r4, [pc, #44]	@ (80016c4 <global_stdio_init.part.0+0x34>)
 8001696:	4a0c      	ldr	r2, [pc, #48]	@ (80016c8 <global_stdio_init.part.0+0x38>)
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	4620      	mov	r0, r4
 800169c:	2200      	movs	r2, #0
 800169e:	2104      	movs	r1, #4
 80016a0:	f7ff ff94 	bl	80015cc <std>
 80016a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80016a8:	2201      	movs	r2, #1
 80016aa:	2109      	movs	r1, #9
 80016ac:	f7ff ff8e 	bl	80015cc <std>
 80016b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80016b4:	2202      	movs	r2, #2
 80016b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016ba:	2112      	movs	r1, #18
 80016bc:	f7ff bf86 	b.w	80015cc <std>
 80016c0:	200002c8 	.word	0x200002c8
 80016c4:	20000190 	.word	0x20000190
 80016c8:	08001639 	.word	0x08001639

080016cc <__sfp_lock_acquire>:
 80016cc:	4801      	ldr	r0, [pc, #4]	@ (80016d4 <__sfp_lock_acquire+0x8>)
 80016ce:	f000 ba00 	b.w	8001ad2 <__retarget_lock_acquire_recursive>
 80016d2:	bf00      	nop
 80016d4:	200002d1 	.word	0x200002d1

080016d8 <__sfp_lock_release>:
 80016d8:	4801      	ldr	r0, [pc, #4]	@ (80016e0 <__sfp_lock_release+0x8>)
 80016da:	f000 b9fb 	b.w	8001ad4 <__retarget_lock_release_recursive>
 80016de:	bf00      	nop
 80016e0:	200002d1 	.word	0x200002d1

080016e4 <__sinit>:
 80016e4:	b510      	push	{r4, lr}
 80016e6:	4604      	mov	r4, r0
 80016e8:	f7ff fff0 	bl	80016cc <__sfp_lock_acquire>
 80016ec:	6a23      	ldr	r3, [r4, #32]
 80016ee:	b11b      	cbz	r3, 80016f8 <__sinit+0x14>
 80016f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016f4:	f7ff bff0 	b.w	80016d8 <__sfp_lock_release>
 80016f8:	4b04      	ldr	r3, [pc, #16]	@ (800170c <__sinit+0x28>)
 80016fa:	6223      	str	r3, [r4, #32]
 80016fc:	4b04      	ldr	r3, [pc, #16]	@ (8001710 <__sinit+0x2c>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f5      	bne.n	80016f0 <__sinit+0xc>
 8001704:	f7ff ffc4 	bl	8001690 <global_stdio_init.part.0>
 8001708:	e7f2      	b.n	80016f0 <__sinit+0xc>
 800170a:	bf00      	nop
 800170c:	08001651 	.word	0x08001651
 8001710:	200002c8 	.word	0x200002c8

08001714 <_fwalk_sglue>:
 8001714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001718:	4607      	mov	r7, r0
 800171a:	4688      	mov	r8, r1
 800171c:	4614      	mov	r4, r2
 800171e:	2600      	movs	r6, #0
 8001720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001724:	f1b9 0901 	subs.w	r9, r9, #1
 8001728:	d505      	bpl.n	8001736 <_fwalk_sglue+0x22>
 800172a:	6824      	ldr	r4, [r4, #0]
 800172c:	2c00      	cmp	r4, #0
 800172e:	d1f7      	bne.n	8001720 <_fwalk_sglue+0xc>
 8001730:	4630      	mov	r0, r6
 8001732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001736:	89ab      	ldrh	r3, [r5, #12]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d907      	bls.n	800174c <_fwalk_sglue+0x38>
 800173c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001740:	3301      	adds	r3, #1
 8001742:	d003      	beq.n	800174c <_fwalk_sglue+0x38>
 8001744:	4629      	mov	r1, r5
 8001746:	4638      	mov	r0, r7
 8001748:	47c0      	blx	r8
 800174a:	4306      	orrs	r6, r0
 800174c:	3568      	adds	r5, #104	@ 0x68
 800174e:	e7e9      	b.n	8001724 <_fwalk_sglue+0x10>

08001750 <iprintf>:
 8001750:	b40f      	push	{r0, r1, r2, r3}
 8001752:	b507      	push	{r0, r1, r2, lr}
 8001754:	4906      	ldr	r1, [pc, #24]	@ (8001770 <iprintf+0x20>)
 8001756:	ab04      	add	r3, sp, #16
 8001758:	6808      	ldr	r0, [r1, #0]
 800175a:	f853 2b04 	ldr.w	r2, [r3], #4
 800175e:	6881      	ldr	r1, [r0, #8]
 8001760:	9301      	str	r3, [sp, #4]
 8001762:	f000 fadb 	bl	8001d1c <_vfiprintf_r>
 8001766:	b003      	add	sp, #12
 8001768:	f85d eb04 	ldr.w	lr, [sp], #4
 800176c:	b004      	add	sp, #16
 800176e:	4770      	bx	lr
 8001770:	20000014 	.word	0x20000014

08001774 <_puts_r>:
 8001774:	6a03      	ldr	r3, [r0, #32]
 8001776:	b570      	push	{r4, r5, r6, lr}
 8001778:	6884      	ldr	r4, [r0, #8]
 800177a:	4605      	mov	r5, r0
 800177c:	460e      	mov	r6, r1
 800177e:	b90b      	cbnz	r3, 8001784 <_puts_r+0x10>
 8001780:	f7ff ffb0 	bl	80016e4 <__sinit>
 8001784:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001786:	07db      	lsls	r3, r3, #31
 8001788:	d405      	bmi.n	8001796 <_puts_r+0x22>
 800178a:	89a3      	ldrh	r3, [r4, #12]
 800178c:	0598      	lsls	r0, r3, #22
 800178e:	d402      	bmi.n	8001796 <_puts_r+0x22>
 8001790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001792:	f000 f99e 	bl	8001ad2 <__retarget_lock_acquire_recursive>
 8001796:	89a3      	ldrh	r3, [r4, #12]
 8001798:	0719      	lsls	r1, r3, #28
 800179a:	d502      	bpl.n	80017a2 <_puts_r+0x2e>
 800179c:	6923      	ldr	r3, [r4, #16]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d135      	bne.n	800180e <_puts_r+0x9a>
 80017a2:	4621      	mov	r1, r4
 80017a4:	4628      	mov	r0, r5
 80017a6:	f000 f8c5 	bl	8001934 <__swsetup_r>
 80017aa:	b380      	cbz	r0, 800180e <_puts_r+0x9a>
 80017ac:	f04f 35ff 	mov.w	r5, #4294967295
 80017b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80017b2:	07da      	lsls	r2, r3, #31
 80017b4:	d405      	bmi.n	80017c2 <_puts_r+0x4e>
 80017b6:	89a3      	ldrh	r3, [r4, #12]
 80017b8:	059b      	lsls	r3, r3, #22
 80017ba:	d402      	bmi.n	80017c2 <_puts_r+0x4e>
 80017bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80017be:	f000 f989 	bl	8001ad4 <__retarget_lock_release_recursive>
 80017c2:	4628      	mov	r0, r5
 80017c4:	bd70      	pop	{r4, r5, r6, pc}
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da04      	bge.n	80017d4 <_puts_r+0x60>
 80017ca:	69a2      	ldr	r2, [r4, #24]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	dc17      	bgt.n	8001800 <_puts_r+0x8c>
 80017d0:	290a      	cmp	r1, #10
 80017d2:	d015      	beq.n	8001800 <_puts_r+0x8c>
 80017d4:	6823      	ldr	r3, [r4, #0]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	6022      	str	r2, [r4, #0]
 80017da:	7019      	strb	r1, [r3, #0]
 80017dc:	68a3      	ldr	r3, [r4, #8]
 80017de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80017e2:	3b01      	subs	r3, #1
 80017e4:	60a3      	str	r3, [r4, #8]
 80017e6:	2900      	cmp	r1, #0
 80017e8:	d1ed      	bne.n	80017c6 <_puts_r+0x52>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da11      	bge.n	8001812 <_puts_r+0x9e>
 80017ee:	4622      	mov	r2, r4
 80017f0:	210a      	movs	r1, #10
 80017f2:	4628      	mov	r0, r5
 80017f4:	f000 f85f 	bl	80018b6 <__swbuf_r>
 80017f8:	3001      	adds	r0, #1
 80017fa:	d0d7      	beq.n	80017ac <_puts_r+0x38>
 80017fc:	250a      	movs	r5, #10
 80017fe:	e7d7      	b.n	80017b0 <_puts_r+0x3c>
 8001800:	4622      	mov	r2, r4
 8001802:	4628      	mov	r0, r5
 8001804:	f000 f857 	bl	80018b6 <__swbuf_r>
 8001808:	3001      	adds	r0, #1
 800180a:	d1e7      	bne.n	80017dc <_puts_r+0x68>
 800180c:	e7ce      	b.n	80017ac <_puts_r+0x38>
 800180e:	3e01      	subs	r6, #1
 8001810:	e7e4      	b.n	80017dc <_puts_r+0x68>
 8001812:	6823      	ldr	r3, [r4, #0]
 8001814:	1c5a      	adds	r2, r3, #1
 8001816:	6022      	str	r2, [r4, #0]
 8001818:	220a      	movs	r2, #10
 800181a:	701a      	strb	r2, [r3, #0]
 800181c:	e7ee      	b.n	80017fc <_puts_r+0x88>
	...

08001820 <puts>:
 8001820:	4b02      	ldr	r3, [pc, #8]	@ (800182c <puts+0xc>)
 8001822:	4601      	mov	r1, r0
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f7ff bfa5 	b.w	8001774 <_puts_r>
 800182a:	bf00      	nop
 800182c:	20000014 	.word	0x20000014

08001830 <__sread>:
 8001830:	b510      	push	{r4, lr}
 8001832:	460c      	mov	r4, r1
 8001834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001838:	f000 f8fc 	bl	8001a34 <_read_r>
 800183c:	2800      	cmp	r0, #0
 800183e:	bfab      	itete	ge
 8001840:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001842:	89a3      	ldrhlt	r3, [r4, #12]
 8001844:	181b      	addge	r3, r3, r0
 8001846:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800184a:	bfac      	ite	ge
 800184c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800184e:	81a3      	strhlt	r3, [r4, #12]
 8001850:	bd10      	pop	{r4, pc}

08001852 <__swrite>:
 8001852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001856:	461f      	mov	r7, r3
 8001858:	898b      	ldrh	r3, [r1, #12]
 800185a:	05db      	lsls	r3, r3, #23
 800185c:	4605      	mov	r5, r0
 800185e:	460c      	mov	r4, r1
 8001860:	4616      	mov	r6, r2
 8001862:	d505      	bpl.n	8001870 <__swrite+0x1e>
 8001864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001868:	2302      	movs	r3, #2
 800186a:	2200      	movs	r2, #0
 800186c:	f000 f8d0 	bl	8001a10 <_lseek_r>
 8001870:	89a3      	ldrh	r3, [r4, #12]
 8001872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001876:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800187a:	81a3      	strh	r3, [r4, #12]
 800187c:	4632      	mov	r2, r6
 800187e:	463b      	mov	r3, r7
 8001880:	4628      	mov	r0, r5
 8001882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001886:	f000 b8e7 	b.w	8001a58 <_write_r>

0800188a <__sseek>:
 800188a:	b510      	push	{r4, lr}
 800188c:	460c      	mov	r4, r1
 800188e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001892:	f000 f8bd 	bl	8001a10 <_lseek_r>
 8001896:	1c43      	adds	r3, r0, #1
 8001898:	89a3      	ldrh	r3, [r4, #12]
 800189a:	bf15      	itete	ne
 800189c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800189e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80018a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80018a6:	81a3      	strheq	r3, [r4, #12]
 80018a8:	bf18      	it	ne
 80018aa:	81a3      	strhne	r3, [r4, #12]
 80018ac:	bd10      	pop	{r4, pc}

080018ae <__sclose>:
 80018ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018b2:	f000 b89d 	b.w	80019f0 <_close_r>

080018b6 <__swbuf_r>:
 80018b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018b8:	460e      	mov	r6, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	4605      	mov	r5, r0
 80018be:	b118      	cbz	r0, 80018c8 <__swbuf_r+0x12>
 80018c0:	6a03      	ldr	r3, [r0, #32]
 80018c2:	b90b      	cbnz	r3, 80018c8 <__swbuf_r+0x12>
 80018c4:	f7ff ff0e 	bl	80016e4 <__sinit>
 80018c8:	69a3      	ldr	r3, [r4, #24]
 80018ca:	60a3      	str	r3, [r4, #8]
 80018cc:	89a3      	ldrh	r3, [r4, #12]
 80018ce:	071a      	lsls	r2, r3, #28
 80018d0:	d501      	bpl.n	80018d6 <__swbuf_r+0x20>
 80018d2:	6923      	ldr	r3, [r4, #16]
 80018d4:	b943      	cbnz	r3, 80018e8 <__swbuf_r+0x32>
 80018d6:	4621      	mov	r1, r4
 80018d8:	4628      	mov	r0, r5
 80018da:	f000 f82b 	bl	8001934 <__swsetup_r>
 80018de:	b118      	cbz	r0, 80018e8 <__swbuf_r+0x32>
 80018e0:	f04f 37ff 	mov.w	r7, #4294967295
 80018e4:	4638      	mov	r0, r7
 80018e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80018e8:	6823      	ldr	r3, [r4, #0]
 80018ea:	6922      	ldr	r2, [r4, #16]
 80018ec:	1a98      	subs	r0, r3, r2
 80018ee:	6963      	ldr	r3, [r4, #20]
 80018f0:	b2f6      	uxtb	r6, r6
 80018f2:	4283      	cmp	r3, r0
 80018f4:	4637      	mov	r7, r6
 80018f6:	dc05      	bgt.n	8001904 <__swbuf_r+0x4e>
 80018f8:	4621      	mov	r1, r4
 80018fa:	4628      	mov	r0, r5
 80018fc:	f000 fd36 	bl	800236c <_fflush_r>
 8001900:	2800      	cmp	r0, #0
 8001902:	d1ed      	bne.n	80018e0 <__swbuf_r+0x2a>
 8001904:	68a3      	ldr	r3, [r4, #8]
 8001906:	3b01      	subs	r3, #1
 8001908:	60a3      	str	r3, [r4, #8]
 800190a:	6823      	ldr	r3, [r4, #0]
 800190c:	1c5a      	adds	r2, r3, #1
 800190e:	6022      	str	r2, [r4, #0]
 8001910:	701e      	strb	r6, [r3, #0]
 8001912:	6962      	ldr	r2, [r4, #20]
 8001914:	1c43      	adds	r3, r0, #1
 8001916:	429a      	cmp	r2, r3
 8001918:	d004      	beq.n	8001924 <__swbuf_r+0x6e>
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	07db      	lsls	r3, r3, #31
 800191e:	d5e1      	bpl.n	80018e4 <__swbuf_r+0x2e>
 8001920:	2e0a      	cmp	r6, #10
 8001922:	d1df      	bne.n	80018e4 <__swbuf_r+0x2e>
 8001924:	4621      	mov	r1, r4
 8001926:	4628      	mov	r0, r5
 8001928:	f000 fd20 	bl	800236c <_fflush_r>
 800192c:	2800      	cmp	r0, #0
 800192e:	d0d9      	beq.n	80018e4 <__swbuf_r+0x2e>
 8001930:	e7d6      	b.n	80018e0 <__swbuf_r+0x2a>
	...

08001934 <__swsetup_r>:
 8001934:	b538      	push	{r3, r4, r5, lr}
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <__swsetup_r+0xa8>)
 8001938:	4605      	mov	r5, r0
 800193a:	6818      	ldr	r0, [r3, #0]
 800193c:	460c      	mov	r4, r1
 800193e:	b118      	cbz	r0, 8001948 <__swsetup_r+0x14>
 8001940:	6a03      	ldr	r3, [r0, #32]
 8001942:	b90b      	cbnz	r3, 8001948 <__swsetup_r+0x14>
 8001944:	f7ff fece 	bl	80016e4 <__sinit>
 8001948:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800194c:	0719      	lsls	r1, r3, #28
 800194e:	d422      	bmi.n	8001996 <__swsetup_r+0x62>
 8001950:	06da      	lsls	r2, r3, #27
 8001952:	d407      	bmi.n	8001964 <__swsetup_r+0x30>
 8001954:	2209      	movs	r2, #9
 8001956:	602a      	str	r2, [r5, #0]
 8001958:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800195c:	81a3      	strh	r3, [r4, #12]
 800195e:	f04f 30ff 	mov.w	r0, #4294967295
 8001962:	e033      	b.n	80019cc <__swsetup_r+0x98>
 8001964:	0758      	lsls	r0, r3, #29
 8001966:	d512      	bpl.n	800198e <__swsetup_r+0x5a>
 8001968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800196a:	b141      	cbz	r1, 800197e <__swsetup_r+0x4a>
 800196c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001970:	4299      	cmp	r1, r3
 8001972:	d002      	beq.n	800197a <__swsetup_r+0x46>
 8001974:	4628      	mov	r0, r5
 8001976:	f000 f8af 	bl	8001ad8 <_free_r>
 800197a:	2300      	movs	r3, #0
 800197c:	6363      	str	r3, [r4, #52]	@ 0x34
 800197e:	89a3      	ldrh	r3, [r4, #12]
 8001980:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001984:	81a3      	strh	r3, [r4, #12]
 8001986:	2300      	movs	r3, #0
 8001988:	6063      	str	r3, [r4, #4]
 800198a:	6923      	ldr	r3, [r4, #16]
 800198c:	6023      	str	r3, [r4, #0]
 800198e:	89a3      	ldrh	r3, [r4, #12]
 8001990:	f043 0308 	orr.w	r3, r3, #8
 8001994:	81a3      	strh	r3, [r4, #12]
 8001996:	6923      	ldr	r3, [r4, #16]
 8001998:	b94b      	cbnz	r3, 80019ae <__swsetup_r+0x7a>
 800199a:	89a3      	ldrh	r3, [r4, #12]
 800199c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019a4:	d003      	beq.n	80019ae <__swsetup_r+0x7a>
 80019a6:	4621      	mov	r1, r4
 80019a8:	4628      	mov	r0, r5
 80019aa:	f000 fd2d 	bl	8002408 <__smakebuf_r>
 80019ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019b2:	f013 0201 	ands.w	r2, r3, #1
 80019b6:	d00a      	beq.n	80019ce <__swsetup_r+0x9a>
 80019b8:	2200      	movs	r2, #0
 80019ba:	60a2      	str	r2, [r4, #8]
 80019bc:	6962      	ldr	r2, [r4, #20]
 80019be:	4252      	negs	r2, r2
 80019c0:	61a2      	str	r2, [r4, #24]
 80019c2:	6922      	ldr	r2, [r4, #16]
 80019c4:	b942      	cbnz	r2, 80019d8 <__swsetup_r+0xa4>
 80019c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80019ca:	d1c5      	bne.n	8001958 <__swsetup_r+0x24>
 80019cc:	bd38      	pop	{r3, r4, r5, pc}
 80019ce:	0799      	lsls	r1, r3, #30
 80019d0:	bf58      	it	pl
 80019d2:	6962      	ldrpl	r2, [r4, #20]
 80019d4:	60a2      	str	r2, [r4, #8]
 80019d6:	e7f4      	b.n	80019c2 <__swsetup_r+0x8e>
 80019d8:	2000      	movs	r0, #0
 80019da:	e7f7      	b.n	80019cc <__swsetup_r+0x98>
 80019dc:	20000014 	.word	0x20000014

080019e0 <memset>:
 80019e0:	4402      	add	r2, r0
 80019e2:	4603      	mov	r3, r0
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d100      	bne.n	80019ea <memset+0xa>
 80019e8:	4770      	bx	lr
 80019ea:	f803 1b01 	strb.w	r1, [r3], #1
 80019ee:	e7f9      	b.n	80019e4 <memset+0x4>

080019f0 <_close_r>:
 80019f0:	b538      	push	{r3, r4, r5, lr}
 80019f2:	4d06      	ldr	r5, [pc, #24]	@ (8001a0c <_close_r+0x1c>)
 80019f4:	2300      	movs	r3, #0
 80019f6:	4604      	mov	r4, r0
 80019f8:	4608      	mov	r0, r1
 80019fa:	602b      	str	r3, [r5, #0]
 80019fc:	f7ff fc1c 	bl	8001238 <_close>
 8001a00:	1c43      	adds	r3, r0, #1
 8001a02:	d102      	bne.n	8001a0a <_close_r+0x1a>
 8001a04:	682b      	ldr	r3, [r5, #0]
 8001a06:	b103      	cbz	r3, 8001a0a <_close_r+0x1a>
 8001a08:	6023      	str	r3, [r4, #0]
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
 8001a0c:	200002cc 	.word	0x200002cc

08001a10 <_lseek_r>:
 8001a10:	b538      	push	{r3, r4, r5, lr}
 8001a12:	4d07      	ldr	r5, [pc, #28]	@ (8001a30 <_lseek_r+0x20>)
 8001a14:	4604      	mov	r4, r0
 8001a16:	4608      	mov	r0, r1
 8001a18:	4611      	mov	r1, r2
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	602a      	str	r2, [r5, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	f7ff fbcb 	bl	80011ba <_lseek>
 8001a24:	1c43      	adds	r3, r0, #1
 8001a26:	d102      	bne.n	8001a2e <_lseek_r+0x1e>
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	b103      	cbz	r3, 8001a2e <_lseek_r+0x1e>
 8001a2c:	6023      	str	r3, [r4, #0]
 8001a2e:	bd38      	pop	{r3, r4, r5, pc}
 8001a30:	200002cc 	.word	0x200002cc

08001a34 <_read_r>:
 8001a34:	b538      	push	{r3, r4, r5, lr}
 8001a36:	4d07      	ldr	r5, [pc, #28]	@ (8001a54 <_read_r+0x20>)
 8001a38:	4604      	mov	r4, r0
 8001a3a:	4608      	mov	r0, r1
 8001a3c:	4611      	mov	r1, r2
 8001a3e:	2200      	movs	r2, #0
 8001a40:	602a      	str	r2, [r5, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	f7ff fb63 	bl	800110e <_read>
 8001a48:	1c43      	adds	r3, r0, #1
 8001a4a:	d102      	bne.n	8001a52 <_read_r+0x1e>
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	b103      	cbz	r3, 8001a52 <_read_r+0x1e>
 8001a50:	6023      	str	r3, [r4, #0]
 8001a52:	bd38      	pop	{r3, r4, r5, pc}
 8001a54:	200002cc 	.word	0x200002cc

08001a58 <_write_r>:
 8001a58:	b538      	push	{r3, r4, r5, lr}
 8001a5a:	4d07      	ldr	r5, [pc, #28]	@ (8001a78 <_write_r+0x20>)
 8001a5c:	4604      	mov	r4, r0
 8001a5e:	4608      	mov	r0, r1
 8001a60:	4611      	mov	r1, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	602a      	str	r2, [r5, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	f7ff fbb9 	bl	80011de <_write>
 8001a6c:	1c43      	adds	r3, r0, #1
 8001a6e:	d102      	bne.n	8001a76 <_write_r+0x1e>
 8001a70:	682b      	ldr	r3, [r5, #0]
 8001a72:	b103      	cbz	r3, 8001a76 <_write_r+0x1e>
 8001a74:	6023      	str	r3, [r4, #0]
 8001a76:	bd38      	pop	{r3, r4, r5, pc}
 8001a78:	200002cc 	.word	0x200002cc

08001a7c <__errno>:
 8001a7c:	4b01      	ldr	r3, [pc, #4]	@ (8001a84 <__errno+0x8>)
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	20000014 	.word	0x20000014

08001a88 <__libc_init_array>:
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8001ac0 <__libc_init_array+0x38>)
 8001a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8001ac4 <__libc_init_array+0x3c>)
 8001a8e:	1b64      	subs	r4, r4, r5
 8001a90:	10a4      	asrs	r4, r4, #2
 8001a92:	2600      	movs	r6, #0
 8001a94:	42a6      	cmp	r6, r4
 8001a96:	d109      	bne.n	8001aac <__libc_init_array+0x24>
 8001a98:	4d0b      	ldr	r5, [pc, #44]	@ (8001ac8 <__libc_init_array+0x40>)
 8001a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8001acc <__libc_init_array+0x44>)
 8001a9c:	f000 fd22 	bl	80024e4 <_init>
 8001aa0:	1b64      	subs	r4, r4, r5
 8001aa2:	10a4      	asrs	r4, r4, #2
 8001aa4:	2600      	movs	r6, #0
 8001aa6:	42a6      	cmp	r6, r4
 8001aa8:	d105      	bne.n	8001ab6 <__libc_init_array+0x2e>
 8001aaa:	bd70      	pop	{r4, r5, r6, pc}
 8001aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ab0:	4798      	blx	r3
 8001ab2:	3601      	adds	r6, #1
 8001ab4:	e7ee      	b.n	8001a94 <__libc_init_array+0xc>
 8001ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8001aba:	4798      	blx	r3
 8001abc:	3601      	adds	r6, #1
 8001abe:	e7f2      	b.n	8001aa6 <__libc_init_array+0x1e>
 8001ac0:	080025a4 	.word	0x080025a4
 8001ac4:	080025a4 	.word	0x080025a4
 8001ac8:	080025a4 	.word	0x080025a4
 8001acc:	080025a8 	.word	0x080025a8

08001ad0 <__retarget_lock_init_recursive>:
 8001ad0:	4770      	bx	lr

08001ad2 <__retarget_lock_acquire_recursive>:
 8001ad2:	4770      	bx	lr

08001ad4 <__retarget_lock_release_recursive>:
 8001ad4:	4770      	bx	lr
	...

08001ad8 <_free_r>:
 8001ad8:	b538      	push	{r3, r4, r5, lr}
 8001ada:	4605      	mov	r5, r0
 8001adc:	2900      	cmp	r1, #0
 8001ade:	d041      	beq.n	8001b64 <_free_r+0x8c>
 8001ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ae4:	1f0c      	subs	r4, r1, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bfb8      	it	lt
 8001aea:	18e4      	addlt	r4, r4, r3
 8001aec:	f000 f8e0 	bl	8001cb0 <__malloc_lock>
 8001af0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b68 <_free_r+0x90>)
 8001af2:	6813      	ldr	r3, [r2, #0]
 8001af4:	b933      	cbnz	r3, 8001b04 <_free_r+0x2c>
 8001af6:	6063      	str	r3, [r4, #4]
 8001af8:	6014      	str	r4, [r2, #0]
 8001afa:	4628      	mov	r0, r5
 8001afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b00:	f000 b8dc 	b.w	8001cbc <__malloc_unlock>
 8001b04:	42a3      	cmp	r3, r4
 8001b06:	d908      	bls.n	8001b1a <_free_r+0x42>
 8001b08:	6820      	ldr	r0, [r4, #0]
 8001b0a:	1821      	adds	r1, r4, r0
 8001b0c:	428b      	cmp	r3, r1
 8001b0e:	bf01      	itttt	eq
 8001b10:	6819      	ldreq	r1, [r3, #0]
 8001b12:	685b      	ldreq	r3, [r3, #4]
 8001b14:	1809      	addeq	r1, r1, r0
 8001b16:	6021      	streq	r1, [r4, #0]
 8001b18:	e7ed      	b.n	8001af6 <_free_r+0x1e>
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	b10b      	cbz	r3, 8001b24 <_free_r+0x4c>
 8001b20:	42a3      	cmp	r3, r4
 8001b22:	d9fa      	bls.n	8001b1a <_free_r+0x42>
 8001b24:	6811      	ldr	r1, [r2, #0]
 8001b26:	1850      	adds	r0, r2, r1
 8001b28:	42a0      	cmp	r0, r4
 8001b2a:	d10b      	bne.n	8001b44 <_free_r+0x6c>
 8001b2c:	6820      	ldr	r0, [r4, #0]
 8001b2e:	4401      	add	r1, r0
 8001b30:	1850      	adds	r0, r2, r1
 8001b32:	4283      	cmp	r3, r0
 8001b34:	6011      	str	r1, [r2, #0]
 8001b36:	d1e0      	bne.n	8001afa <_free_r+0x22>
 8001b38:	6818      	ldr	r0, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	6053      	str	r3, [r2, #4]
 8001b3e:	4408      	add	r0, r1
 8001b40:	6010      	str	r0, [r2, #0]
 8001b42:	e7da      	b.n	8001afa <_free_r+0x22>
 8001b44:	d902      	bls.n	8001b4c <_free_r+0x74>
 8001b46:	230c      	movs	r3, #12
 8001b48:	602b      	str	r3, [r5, #0]
 8001b4a:	e7d6      	b.n	8001afa <_free_r+0x22>
 8001b4c:	6820      	ldr	r0, [r4, #0]
 8001b4e:	1821      	adds	r1, r4, r0
 8001b50:	428b      	cmp	r3, r1
 8001b52:	bf04      	itt	eq
 8001b54:	6819      	ldreq	r1, [r3, #0]
 8001b56:	685b      	ldreq	r3, [r3, #4]
 8001b58:	6063      	str	r3, [r4, #4]
 8001b5a:	bf04      	itt	eq
 8001b5c:	1809      	addeq	r1, r1, r0
 8001b5e:	6021      	streq	r1, [r4, #0]
 8001b60:	6054      	str	r4, [r2, #4]
 8001b62:	e7ca      	b.n	8001afa <_free_r+0x22>
 8001b64:	bd38      	pop	{r3, r4, r5, pc}
 8001b66:	bf00      	nop
 8001b68:	200002d8 	.word	0x200002d8

08001b6c <sbrk_aligned>:
 8001b6c:	b570      	push	{r4, r5, r6, lr}
 8001b6e:	4e0f      	ldr	r6, [pc, #60]	@ (8001bac <sbrk_aligned+0x40>)
 8001b70:	460c      	mov	r4, r1
 8001b72:	6831      	ldr	r1, [r6, #0]
 8001b74:	4605      	mov	r5, r0
 8001b76:	b911      	cbnz	r1, 8001b7e <sbrk_aligned+0x12>
 8001b78:	f000 fca4 	bl	80024c4 <_sbrk_r>
 8001b7c:	6030      	str	r0, [r6, #0]
 8001b7e:	4621      	mov	r1, r4
 8001b80:	4628      	mov	r0, r5
 8001b82:	f000 fc9f 	bl	80024c4 <_sbrk_r>
 8001b86:	1c43      	adds	r3, r0, #1
 8001b88:	d103      	bne.n	8001b92 <sbrk_aligned+0x26>
 8001b8a:	f04f 34ff 	mov.w	r4, #4294967295
 8001b8e:	4620      	mov	r0, r4
 8001b90:	bd70      	pop	{r4, r5, r6, pc}
 8001b92:	1cc4      	adds	r4, r0, #3
 8001b94:	f024 0403 	bic.w	r4, r4, #3
 8001b98:	42a0      	cmp	r0, r4
 8001b9a:	d0f8      	beq.n	8001b8e <sbrk_aligned+0x22>
 8001b9c:	1a21      	subs	r1, r4, r0
 8001b9e:	4628      	mov	r0, r5
 8001ba0:	f000 fc90 	bl	80024c4 <_sbrk_r>
 8001ba4:	3001      	adds	r0, #1
 8001ba6:	d1f2      	bne.n	8001b8e <sbrk_aligned+0x22>
 8001ba8:	e7ef      	b.n	8001b8a <sbrk_aligned+0x1e>
 8001baa:	bf00      	nop
 8001bac:	200002d4 	.word	0x200002d4

08001bb0 <_malloc_r>:
 8001bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bb4:	1ccd      	adds	r5, r1, #3
 8001bb6:	f025 0503 	bic.w	r5, r5, #3
 8001bba:	3508      	adds	r5, #8
 8001bbc:	2d0c      	cmp	r5, #12
 8001bbe:	bf38      	it	cc
 8001bc0:	250c      	movcc	r5, #12
 8001bc2:	2d00      	cmp	r5, #0
 8001bc4:	4606      	mov	r6, r0
 8001bc6:	db01      	blt.n	8001bcc <_malloc_r+0x1c>
 8001bc8:	42a9      	cmp	r1, r5
 8001bca:	d904      	bls.n	8001bd6 <_malloc_r+0x26>
 8001bcc:	230c      	movs	r3, #12
 8001bce:	6033      	str	r3, [r6, #0]
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001bd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001cac <_malloc_r+0xfc>
 8001bda:	f000 f869 	bl	8001cb0 <__malloc_lock>
 8001bde:	f8d8 3000 	ldr.w	r3, [r8]
 8001be2:	461c      	mov	r4, r3
 8001be4:	bb44      	cbnz	r4, 8001c38 <_malloc_r+0x88>
 8001be6:	4629      	mov	r1, r5
 8001be8:	4630      	mov	r0, r6
 8001bea:	f7ff ffbf 	bl	8001b6c <sbrk_aligned>
 8001bee:	1c43      	adds	r3, r0, #1
 8001bf0:	4604      	mov	r4, r0
 8001bf2:	d158      	bne.n	8001ca6 <_malloc_r+0xf6>
 8001bf4:	f8d8 4000 	ldr.w	r4, [r8]
 8001bf8:	4627      	mov	r7, r4
 8001bfa:	2f00      	cmp	r7, #0
 8001bfc:	d143      	bne.n	8001c86 <_malloc_r+0xd6>
 8001bfe:	2c00      	cmp	r4, #0
 8001c00:	d04b      	beq.n	8001c9a <_malloc_r+0xea>
 8001c02:	6823      	ldr	r3, [r4, #0]
 8001c04:	4639      	mov	r1, r7
 8001c06:	4630      	mov	r0, r6
 8001c08:	eb04 0903 	add.w	r9, r4, r3
 8001c0c:	f000 fc5a 	bl	80024c4 <_sbrk_r>
 8001c10:	4581      	cmp	r9, r0
 8001c12:	d142      	bne.n	8001c9a <_malloc_r+0xea>
 8001c14:	6821      	ldr	r1, [r4, #0]
 8001c16:	1a6d      	subs	r5, r5, r1
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f7ff ffa6 	bl	8001b6c <sbrk_aligned>
 8001c20:	3001      	adds	r0, #1
 8001c22:	d03a      	beq.n	8001c9a <_malloc_r+0xea>
 8001c24:	6823      	ldr	r3, [r4, #0]
 8001c26:	442b      	add	r3, r5
 8001c28:	6023      	str	r3, [r4, #0]
 8001c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	bb62      	cbnz	r2, 8001c8c <_malloc_r+0xdc>
 8001c32:	f8c8 7000 	str.w	r7, [r8]
 8001c36:	e00f      	b.n	8001c58 <_malloc_r+0xa8>
 8001c38:	6822      	ldr	r2, [r4, #0]
 8001c3a:	1b52      	subs	r2, r2, r5
 8001c3c:	d420      	bmi.n	8001c80 <_malloc_r+0xd0>
 8001c3e:	2a0b      	cmp	r2, #11
 8001c40:	d917      	bls.n	8001c72 <_malloc_r+0xc2>
 8001c42:	1961      	adds	r1, r4, r5
 8001c44:	42a3      	cmp	r3, r4
 8001c46:	6025      	str	r5, [r4, #0]
 8001c48:	bf18      	it	ne
 8001c4a:	6059      	strne	r1, [r3, #4]
 8001c4c:	6863      	ldr	r3, [r4, #4]
 8001c4e:	bf08      	it	eq
 8001c50:	f8c8 1000 	streq.w	r1, [r8]
 8001c54:	5162      	str	r2, [r4, r5]
 8001c56:	604b      	str	r3, [r1, #4]
 8001c58:	4630      	mov	r0, r6
 8001c5a:	f000 f82f 	bl	8001cbc <__malloc_unlock>
 8001c5e:	f104 000b 	add.w	r0, r4, #11
 8001c62:	1d23      	adds	r3, r4, #4
 8001c64:	f020 0007 	bic.w	r0, r0, #7
 8001c68:	1ac2      	subs	r2, r0, r3
 8001c6a:	bf1c      	itt	ne
 8001c6c:	1a1b      	subne	r3, r3, r0
 8001c6e:	50a3      	strne	r3, [r4, r2]
 8001c70:	e7af      	b.n	8001bd2 <_malloc_r+0x22>
 8001c72:	6862      	ldr	r2, [r4, #4]
 8001c74:	42a3      	cmp	r3, r4
 8001c76:	bf0c      	ite	eq
 8001c78:	f8c8 2000 	streq.w	r2, [r8]
 8001c7c:	605a      	strne	r2, [r3, #4]
 8001c7e:	e7eb      	b.n	8001c58 <_malloc_r+0xa8>
 8001c80:	4623      	mov	r3, r4
 8001c82:	6864      	ldr	r4, [r4, #4]
 8001c84:	e7ae      	b.n	8001be4 <_malloc_r+0x34>
 8001c86:	463c      	mov	r4, r7
 8001c88:	687f      	ldr	r7, [r7, #4]
 8001c8a:	e7b6      	b.n	8001bfa <_malloc_r+0x4a>
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	42a3      	cmp	r3, r4
 8001c92:	d1fb      	bne.n	8001c8c <_malloc_r+0xdc>
 8001c94:	2300      	movs	r3, #0
 8001c96:	6053      	str	r3, [r2, #4]
 8001c98:	e7de      	b.n	8001c58 <_malloc_r+0xa8>
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	6033      	str	r3, [r6, #0]
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	f000 f80c 	bl	8001cbc <__malloc_unlock>
 8001ca4:	e794      	b.n	8001bd0 <_malloc_r+0x20>
 8001ca6:	6005      	str	r5, [r0, #0]
 8001ca8:	e7d6      	b.n	8001c58 <_malloc_r+0xa8>
 8001caa:	bf00      	nop
 8001cac:	200002d8 	.word	0x200002d8

08001cb0 <__malloc_lock>:
 8001cb0:	4801      	ldr	r0, [pc, #4]	@ (8001cb8 <__malloc_lock+0x8>)
 8001cb2:	f7ff bf0e 	b.w	8001ad2 <__retarget_lock_acquire_recursive>
 8001cb6:	bf00      	nop
 8001cb8:	200002d0 	.word	0x200002d0

08001cbc <__malloc_unlock>:
 8001cbc:	4801      	ldr	r0, [pc, #4]	@ (8001cc4 <__malloc_unlock+0x8>)
 8001cbe:	f7ff bf09 	b.w	8001ad4 <__retarget_lock_release_recursive>
 8001cc2:	bf00      	nop
 8001cc4:	200002d0 	.word	0x200002d0

08001cc8 <__sfputc_r>:
 8001cc8:	6893      	ldr	r3, [r2, #8]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	b410      	push	{r4}
 8001cd0:	6093      	str	r3, [r2, #8]
 8001cd2:	da08      	bge.n	8001ce6 <__sfputc_r+0x1e>
 8001cd4:	6994      	ldr	r4, [r2, #24]
 8001cd6:	42a3      	cmp	r3, r4
 8001cd8:	db01      	blt.n	8001cde <__sfputc_r+0x16>
 8001cda:	290a      	cmp	r1, #10
 8001cdc:	d103      	bne.n	8001ce6 <__sfputc_r+0x1e>
 8001cde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ce2:	f7ff bde8 	b.w	80018b6 <__swbuf_r>
 8001ce6:	6813      	ldr	r3, [r2, #0]
 8001ce8:	1c58      	adds	r0, r3, #1
 8001cea:	6010      	str	r0, [r2, #0]
 8001cec:	7019      	strb	r1, [r3, #0]
 8001cee:	4608      	mov	r0, r1
 8001cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <__sfputs_r>:
 8001cf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cf8:	4606      	mov	r6, r0
 8001cfa:	460f      	mov	r7, r1
 8001cfc:	4614      	mov	r4, r2
 8001cfe:	18d5      	adds	r5, r2, r3
 8001d00:	42ac      	cmp	r4, r5
 8001d02:	d101      	bne.n	8001d08 <__sfputs_r+0x12>
 8001d04:	2000      	movs	r0, #0
 8001d06:	e007      	b.n	8001d18 <__sfputs_r+0x22>
 8001d08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001d0c:	463a      	mov	r2, r7
 8001d0e:	4630      	mov	r0, r6
 8001d10:	f7ff ffda 	bl	8001cc8 <__sfputc_r>
 8001d14:	1c43      	adds	r3, r0, #1
 8001d16:	d1f3      	bne.n	8001d00 <__sfputs_r+0xa>
 8001d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001d1c <_vfiprintf_r>:
 8001d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d20:	460d      	mov	r5, r1
 8001d22:	b09d      	sub	sp, #116	@ 0x74
 8001d24:	4614      	mov	r4, r2
 8001d26:	4698      	mov	r8, r3
 8001d28:	4606      	mov	r6, r0
 8001d2a:	b118      	cbz	r0, 8001d34 <_vfiprintf_r+0x18>
 8001d2c:	6a03      	ldr	r3, [r0, #32]
 8001d2e:	b90b      	cbnz	r3, 8001d34 <_vfiprintf_r+0x18>
 8001d30:	f7ff fcd8 	bl	80016e4 <__sinit>
 8001d34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d36:	07d9      	lsls	r1, r3, #31
 8001d38:	d405      	bmi.n	8001d46 <_vfiprintf_r+0x2a>
 8001d3a:	89ab      	ldrh	r3, [r5, #12]
 8001d3c:	059a      	lsls	r2, r3, #22
 8001d3e:	d402      	bmi.n	8001d46 <_vfiprintf_r+0x2a>
 8001d40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d42:	f7ff fec6 	bl	8001ad2 <__retarget_lock_acquire_recursive>
 8001d46:	89ab      	ldrh	r3, [r5, #12]
 8001d48:	071b      	lsls	r3, r3, #28
 8001d4a:	d501      	bpl.n	8001d50 <_vfiprintf_r+0x34>
 8001d4c:	692b      	ldr	r3, [r5, #16]
 8001d4e:	b99b      	cbnz	r3, 8001d78 <_vfiprintf_r+0x5c>
 8001d50:	4629      	mov	r1, r5
 8001d52:	4630      	mov	r0, r6
 8001d54:	f7ff fdee 	bl	8001934 <__swsetup_r>
 8001d58:	b170      	cbz	r0, 8001d78 <_vfiprintf_r+0x5c>
 8001d5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d5c:	07dc      	lsls	r4, r3, #31
 8001d5e:	d504      	bpl.n	8001d6a <_vfiprintf_r+0x4e>
 8001d60:	f04f 30ff 	mov.w	r0, #4294967295
 8001d64:	b01d      	add	sp, #116	@ 0x74
 8001d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d6a:	89ab      	ldrh	r3, [r5, #12]
 8001d6c:	0598      	lsls	r0, r3, #22
 8001d6e:	d4f7      	bmi.n	8001d60 <_vfiprintf_r+0x44>
 8001d70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d72:	f7ff feaf 	bl	8001ad4 <__retarget_lock_release_recursive>
 8001d76:	e7f3      	b.n	8001d60 <_vfiprintf_r+0x44>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d7c:	2320      	movs	r3, #32
 8001d7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d82:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d86:	2330      	movs	r3, #48	@ 0x30
 8001d88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001f38 <_vfiprintf_r+0x21c>
 8001d8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d90:	f04f 0901 	mov.w	r9, #1
 8001d94:	4623      	mov	r3, r4
 8001d96:	469a      	mov	sl, r3
 8001d98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d9c:	b10a      	cbz	r2, 8001da2 <_vfiprintf_r+0x86>
 8001d9e:	2a25      	cmp	r2, #37	@ 0x25
 8001da0:	d1f9      	bne.n	8001d96 <_vfiprintf_r+0x7a>
 8001da2:	ebba 0b04 	subs.w	fp, sl, r4
 8001da6:	d00b      	beq.n	8001dc0 <_vfiprintf_r+0xa4>
 8001da8:	465b      	mov	r3, fp
 8001daa:	4622      	mov	r2, r4
 8001dac:	4629      	mov	r1, r5
 8001dae:	4630      	mov	r0, r6
 8001db0:	f7ff ffa1 	bl	8001cf6 <__sfputs_r>
 8001db4:	3001      	adds	r0, #1
 8001db6:	f000 80a7 	beq.w	8001f08 <_vfiprintf_r+0x1ec>
 8001dba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001dbc:	445a      	add	r2, fp
 8001dbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8001dc0:	f89a 3000 	ldrb.w	r3, [sl]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f000 809f 	beq.w	8001f08 <_vfiprintf_r+0x1ec>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001dd4:	f10a 0a01 	add.w	sl, sl, #1
 8001dd8:	9304      	str	r3, [sp, #16]
 8001dda:	9307      	str	r3, [sp, #28]
 8001ddc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001de0:	931a      	str	r3, [sp, #104]	@ 0x68
 8001de2:	4654      	mov	r4, sl
 8001de4:	2205      	movs	r2, #5
 8001de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dea:	4853      	ldr	r0, [pc, #332]	@ (8001f38 <_vfiprintf_r+0x21c>)
 8001dec:	f7fe f9f8 	bl	80001e0 <memchr>
 8001df0:	9a04      	ldr	r2, [sp, #16]
 8001df2:	b9d8      	cbnz	r0, 8001e2c <_vfiprintf_r+0x110>
 8001df4:	06d1      	lsls	r1, r2, #27
 8001df6:	bf44      	itt	mi
 8001df8:	2320      	movmi	r3, #32
 8001dfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001dfe:	0713      	lsls	r3, r2, #28
 8001e00:	bf44      	itt	mi
 8001e02:	232b      	movmi	r3, #43	@ 0x2b
 8001e04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001e08:	f89a 3000 	ldrb.w	r3, [sl]
 8001e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e0e:	d015      	beq.n	8001e3c <_vfiprintf_r+0x120>
 8001e10:	9a07      	ldr	r2, [sp, #28]
 8001e12:	4654      	mov	r4, sl
 8001e14:	2000      	movs	r0, #0
 8001e16:	f04f 0c0a 	mov.w	ip, #10
 8001e1a:	4621      	mov	r1, r4
 8001e1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001e20:	3b30      	subs	r3, #48	@ 0x30
 8001e22:	2b09      	cmp	r3, #9
 8001e24:	d94b      	bls.n	8001ebe <_vfiprintf_r+0x1a2>
 8001e26:	b1b0      	cbz	r0, 8001e56 <_vfiprintf_r+0x13a>
 8001e28:	9207      	str	r2, [sp, #28]
 8001e2a:	e014      	b.n	8001e56 <_vfiprintf_r+0x13a>
 8001e2c:	eba0 0308 	sub.w	r3, r0, r8
 8001e30:	fa09 f303 	lsl.w	r3, r9, r3
 8001e34:	4313      	orrs	r3, r2
 8001e36:	9304      	str	r3, [sp, #16]
 8001e38:	46a2      	mov	sl, r4
 8001e3a:	e7d2      	b.n	8001de2 <_vfiprintf_r+0xc6>
 8001e3c:	9b03      	ldr	r3, [sp, #12]
 8001e3e:	1d19      	adds	r1, r3, #4
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	9103      	str	r1, [sp, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bfbb      	ittet	lt
 8001e48:	425b      	neglt	r3, r3
 8001e4a:	f042 0202 	orrlt.w	r2, r2, #2
 8001e4e:	9307      	strge	r3, [sp, #28]
 8001e50:	9307      	strlt	r3, [sp, #28]
 8001e52:	bfb8      	it	lt
 8001e54:	9204      	strlt	r2, [sp, #16]
 8001e56:	7823      	ldrb	r3, [r4, #0]
 8001e58:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e5a:	d10a      	bne.n	8001e72 <_vfiprintf_r+0x156>
 8001e5c:	7863      	ldrb	r3, [r4, #1]
 8001e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e60:	d132      	bne.n	8001ec8 <_vfiprintf_r+0x1ac>
 8001e62:	9b03      	ldr	r3, [sp, #12]
 8001e64:	1d1a      	adds	r2, r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	9203      	str	r2, [sp, #12]
 8001e6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e6e:	3402      	adds	r4, #2
 8001e70:	9305      	str	r3, [sp, #20]
 8001e72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001f48 <_vfiprintf_r+0x22c>
 8001e76:	7821      	ldrb	r1, [r4, #0]
 8001e78:	2203      	movs	r2, #3
 8001e7a:	4650      	mov	r0, sl
 8001e7c:	f7fe f9b0 	bl	80001e0 <memchr>
 8001e80:	b138      	cbz	r0, 8001e92 <_vfiprintf_r+0x176>
 8001e82:	9b04      	ldr	r3, [sp, #16]
 8001e84:	eba0 000a 	sub.w	r0, r0, sl
 8001e88:	2240      	movs	r2, #64	@ 0x40
 8001e8a:	4082      	lsls	r2, r0
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	3401      	adds	r4, #1
 8001e90:	9304      	str	r3, [sp, #16]
 8001e92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e96:	4829      	ldr	r0, [pc, #164]	@ (8001f3c <_vfiprintf_r+0x220>)
 8001e98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e9c:	2206      	movs	r2, #6
 8001e9e:	f7fe f99f 	bl	80001e0 <memchr>
 8001ea2:	2800      	cmp	r0, #0
 8001ea4:	d03f      	beq.n	8001f26 <_vfiprintf_r+0x20a>
 8001ea6:	4b26      	ldr	r3, [pc, #152]	@ (8001f40 <_vfiprintf_r+0x224>)
 8001ea8:	bb1b      	cbnz	r3, 8001ef2 <_vfiprintf_r+0x1d6>
 8001eaa:	9b03      	ldr	r3, [sp, #12]
 8001eac:	3307      	adds	r3, #7
 8001eae:	f023 0307 	bic.w	r3, r3, #7
 8001eb2:	3308      	adds	r3, #8
 8001eb4:	9303      	str	r3, [sp, #12]
 8001eb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001eb8:	443b      	add	r3, r7
 8001eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ebc:	e76a      	b.n	8001d94 <_vfiprintf_r+0x78>
 8001ebe:	fb0c 3202 	mla	r2, ip, r2, r3
 8001ec2:	460c      	mov	r4, r1
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	e7a8      	b.n	8001e1a <_vfiprintf_r+0xfe>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	3401      	adds	r4, #1
 8001ecc:	9305      	str	r3, [sp, #20]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	f04f 0c0a 	mov.w	ip, #10
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eda:	3a30      	subs	r2, #48	@ 0x30
 8001edc:	2a09      	cmp	r2, #9
 8001ede:	d903      	bls.n	8001ee8 <_vfiprintf_r+0x1cc>
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0c6      	beq.n	8001e72 <_vfiprintf_r+0x156>
 8001ee4:	9105      	str	r1, [sp, #20]
 8001ee6:	e7c4      	b.n	8001e72 <_vfiprintf_r+0x156>
 8001ee8:	fb0c 2101 	mla	r1, ip, r1, r2
 8001eec:	4604      	mov	r4, r0
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e7f0      	b.n	8001ed4 <_vfiprintf_r+0x1b8>
 8001ef2:	ab03      	add	r3, sp, #12
 8001ef4:	9300      	str	r3, [sp, #0]
 8001ef6:	462a      	mov	r2, r5
 8001ef8:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <_vfiprintf_r+0x228>)
 8001efa:	a904      	add	r1, sp, #16
 8001efc:	4630      	mov	r0, r6
 8001efe:	f3af 8000 	nop.w
 8001f02:	4607      	mov	r7, r0
 8001f04:	1c78      	adds	r0, r7, #1
 8001f06:	d1d6      	bne.n	8001eb6 <_vfiprintf_r+0x19a>
 8001f08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001f0a:	07d9      	lsls	r1, r3, #31
 8001f0c:	d405      	bmi.n	8001f1a <_vfiprintf_r+0x1fe>
 8001f0e:	89ab      	ldrh	r3, [r5, #12]
 8001f10:	059a      	lsls	r2, r3, #22
 8001f12:	d402      	bmi.n	8001f1a <_vfiprintf_r+0x1fe>
 8001f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f16:	f7ff fddd 	bl	8001ad4 <__retarget_lock_release_recursive>
 8001f1a:	89ab      	ldrh	r3, [r5, #12]
 8001f1c:	065b      	lsls	r3, r3, #25
 8001f1e:	f53f af1f 	bmi.w	8001d60 <_vfiprintf_r+0x44>
 8001f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001f24:	e71e      	b.n	8001d64 <_vfiprintf_r+0x48>
 8001f26:	ab03      	add	r3, sp, #12
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	462a      	mov	r2, r5
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <_vfiprintf_r+0x228>)
 8001f2e:	a904      	add	r1, sp, #16
 8001f30:	4630      	mov	r0, r6
 8001f32:	f000 f879 	bl	8002028 <_printf_i>
 8001f36:	e7e4      	b.n	8001f02 <_vfiprintf_r+0x1e6>
 8001f38:	08002568 	.word	0x08002568
 8001f3c:	08002572 	.word	0x08002572
 8001f40:	00000000 	.word	0x00000000
 8001f44:	08001cf7 	.word	0x08001cf7
 8001f48:	0800256e 	.word	0x0800256e

08001f4c <_printf_common>:
 8001f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f50:	4616      	mov	r6, r2
 8001f52:	4698      	mov	r8, r3
 8001f54:	688a      	ldr	r2, [r1, #8]
 8001f56:	690b      	ldr	r3, [r1, #16]
 8001f58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	bfb8      	it	lt
 8001f60:	4613      	movlt	r3, r2
 8001f62:	6033      	str	r3, [r6, #0]
 8001f64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f68:	4607      	mov	r7, r0
 8001f6a:	460c      	mov	r4, r1
 8001f6c:	b10a      	cbz	r2, 8001f72 <_printf_common+0x26>
 8001f6e:	3301      	adds	r3, #1
 8001f70:	6033      	str	r3, [r6, #0]
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	0699      	lsls	r1, r3, #26
 8001f76:	bf42      	ittt	mi
 8001f78:	6833      	ldrmi	r3, [r6, #0]
 8001f7a:	3302      	addmi	r3, #2
 8001f7c:	6033      	strmi	r3, [r6, #0]
 8001f7e:	6825      	ldr	r5, [r4, #0]
 8001f80:	f015 0506 	ands.w	r5, r5, #6
 8001f84:	d106      	bne.n	8001f94 <_printf_common+0x48>
 8001f86:	f104 0a19 	add.w	sl, r4, #25
 8001f8a:	68e3      	ldr	r3, [r4, #12]
 8001f8c:	6832      	ldr	r2, [r6, #0]
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	42ab      	cmp	r3, r5
 8001f92:	dc26      	bgt.n	8001fe2 <_printf_common+0x96>
 8001f94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f98:	6822      	ldr	r2, [r4, #0]
 8001f9a:	3b00      	subs	r3, #0
 8001f9c:	bf18      	it	ne
 8001f9e:	2301      	movne	r3, #1
 8001fa0:	0692      	lsls	r2, r2, #26
 8001fa2:	d42b      	bmi.n	8001ffc <_printf_common+0xb0>
 8001fa4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001fa8:	4641      	mov	r1, r8
 8001faa:	4638      	mov	r0, r7
 8001fac:	47c8      	blx	r9
 8001fae:	3001      	adds	r0, #1
 8001fb0:	d01e      	beq.n	8001ff0 <_printf_common+0xa4>
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	6922      	ldr	r2, [r4, #16]
 8001fb6:	f003 0306 	and.w	r3, r3, #6
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	bf02      	ittt	eq
 8001fbe:	68e5      	ldreq	r5, [r4, #12]
 8001fc0:	6833      	ldreq	r3, [r6, #0]
 8001fc2:	1aed      	subeq	r5, r5, r3
 8001fc4:	68a3      	ldr	r3, [r4, #8]
 8001fc6:	bf0c      	ite	eq
 8001fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fcc:	2500      	movne	r5, #0
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	bfc4      	itt	gt
 8001fd2:	1a9b      	subgt	r3, r3, r2
 8001fd4:	18ed      	addgt	r5, r5, r3
 8001fd6:	2600      	movs	r6, #0
 8001fd8:	341a      	adds	r4, #26
 8001fda:	42b5      	cmp	r5, r6
 8001fdc:	d11a      	bne.n	8002014 <_printf_common+0xc8>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	e008      	b.n	8001ff4 <_printf_common+0xa8>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	4652      	mov	r2, sl
 8001fe6:	4641      	mov	r1, r8
 8001fe8:	4638      	mov	r0, r7
 8001fea:	47c8      	blx	r9
 8001fec:	3001      	adds	r0, #1
 8001fee:	d103      	bne.n	8001ff8 <_printf_common+0xac>
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ff8:	3501      	adds	r5, #1
 8001ffa:	e7c6      	b.n	8001f8a <_printf_common+0x3e>
 8001ffc:	18e1      	adds	r1, r4, r3
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	2030      	movs	r0, #48	@ 0x30
 8002002:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002006:	4422      	add	r2, r4
 8002008:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800200c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002010:	3302      	adds	r3, #2
 8002012:	e7c7      	b.n	8001fa4 <_printf_common+0x58>
 8002014:	2301      	movs	r3, #1
 8002016:	4622      	mov	r2, r4
 8002018:	4641      	mov	r1, r8
 800201a:	4638      	mov	r0, r7
 800201c:	47c8      	blx	r9
 800201e:	3001      	adds	r0, #1
 8002020:	d0e6      	beq.n	8001ff0 <_printf_common+0xa4>
 8002022:	3601      	adds	r6, #1
 8002024:	e7d9      	b.n	8001fda <_printf_common+0x8e>
	...

08002028 <_printf_i>:
 8002028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800202c:	7e0f      	ldrb	r7, [r1, #24]
 800202e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002030:	2f78      	cmp	r7, #120	@ 0x78
 8002032:	4691      	mov	r9, r2
 8002034:	4680      	mov	r8, r0
 8002036:	460c      	mov	r4, r1
 8002038:	469a      	mov	sl, r3
 800203a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800203e:	d807      	bhi.n	8002050 <_printf_i+0x28>
 8002040:	2f62      	cmp	r7, #98	@ 0x62
 8002042:	d80a      	bhi.n	800205a <_printf_i+0x32>
 8002044:	2f00      	cmp	r7, #0
 8002046:	f000 80d1 	beq.w	80021ec <_printf_i+0x1c4>
 800204a:	2f58      	cmp	r7, #88	@ 0x58
 800204c:	f000 80b8 	beq.w	80021c0 <_printf_i+0x198>
 8002050:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002054:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002058:	e03a      	b.n	80020d0 <_printf_i+0xa8>
 800205a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800205e:	2b15      	cmp	r3, #21
 8002060:	d8f6      	bhi.n	8002050 <_printf_i+0x28>
 8002062:	a101      	add	r1, pc, #4	@ (adr r1, 8002068 <_printf_i+0x40>)
 8002064:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002068:	080020c1 	.word	0x080020c1
 800206c:	080020d5 	.word	0x080020d5
 8002070:	08002051 	.word	0x08002051
 8002074:	08002051 	.word	0x08002051
 8002078:	08002051 	.word	0x08002051
 800207c:	08002051 	.word	0x08002051
 8002080:	080020d5 	.word	0x080020d5
 8002084:	08002051 	.word	0x08002051
 8002088:	08002051 	.word	0x08002051
 800208c:	08002051 	.word	0x08002051
 8002090:	08002051 	.word	0x08002051
 8002094:	080021d3 	.word	0x080021d3
 8002098:	080020ff 	.word	0x080020ff
 800209c:	0800218d 	.word	0x0800218d
 80020a0:	08002051 	.word	0x08002051
 80020a4:	08002051 	.word	0x08002051
 80020a8:	080021f5 	.word	0x080021f5
 80020ac:	08002051 	.word	0x08002051
 80020b0:	080020ff 	.word	0x080020ff
 80020b4:	08002051 	.word	0x08002051
 80020b8:	08002051 	.word	0x08002051
 80020bc:	08002195 	.word	0x08002195
 80020c0:	6833      	ldr	r3, [r6, #0]
 80020c2:	1d1a      	adds	r2, r3, #4
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6032      	str	r2, [r6, #0]
 80020c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020d0:	2301      	movs	r3, #1
 80020d2:	e09c      	b.n	800220e <_printf_i+0x1e6>
 80020d4:	6833      	ldr	r3, [r6, #0]
 80020d6:	6820      	ldr	r0, [r4, #0]
 80020d8:	1d19      	adds	r1, r3, #4
 80020da:	6031      	str	r1, [r6, #0]
 80020dc:	0606      	lsls	r6, r0, #24
 80020de:	d501      	bpl.n	80020e4 <_printf_i+0xbc>
 80020e0:	681d      	ldr	r5, [r3, #0]
 80020e2:	e003      	b.n	80020ec <_printf_i+0xc4>
 80020e4:	0645      	lsls	r5, r0, #25
 80020e6:	d5fb      	bpl.n	80020e0 <_printf_i+0xb8>
 80020e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80020ec:	2d00      	cmp	r5, #0
 80020ee:	da03      	bge.n	80020f8 <_printf_i+0xd0>
 80020f0:	232d      	movs	r3, #45	@ 0x2d
 80020f2:	426d      	negs	r5, r5
 80020f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020f8:	4858      	ldr	r0, [pc, #352]	@ (800225c <_printf_i+0x234>)
 80020fa:	230a      	movs	r3, #10
 80020fc:	e011      	b.n	8002122 <_printf_i+0xfa>
 80020fe:	6821      	ldr	r1, [r4, #0]
 8002100:	6833      	ldr	r3, [r6, #0]
 8002102:	0608      	lsls	r0, r1, #24
 8002104:	f853 5b04 	ldr.w	r5, [r3], #4
 8002108:	d402      	bmi.n	8002110 <_printf_i+0xe8>
 800210a:	0649      	lsls	r1, r1, #25
 800210c:	bf48      	it	mi
 800210e:	b2ad      	uxthmi	r5, r5
 8002110:	2f6f      	cmp	r7, #111	@ 0x6f
 8002112:	4852      	ldr	r0, [pc, #328]	@ (800225c <_printf_i+0x234>)
 8002114:	6033      	str	r3, [r6, #0]
 8002116:	bf14      	ite	ne
 8002118:	230a      	movne	r3, #10
 800211a:	2308      	moveq	r3, #8
 800211c:	2100      	movs	r1, #0
 800211e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002122:	6866      	ldr	r6, [r4, #4]
 8002124:	60a6      	str	r6, [r4, #8]
 8002126:	2e00      	cmp	r6, #0
 8002128:	db05      	blt.n	8002136 <_printf_i+0x10e>
 800212a:	6821      	ldr	r1, [r4, #0]
 800212c:	432e      	orrs	r6, r5
 800212e:	f021 0104 	bic.w	r1, r1, #4
 8002132:	6021      	str	r1, [r4, #0]
 8002134:	d04b      	beq.n	80021ce <_printf_i+0x1a6>
 8002136:	4616      	mov	r6, r2
 8002138:	fbb5 f1f3 	udiv	r1, r5, r3
 800213c:	fb03 5711 	mls	r7, r3, r1, r5
 8002140:	5dc7      	ldrb	r7, [r0, r7]
 8002142:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002146:	462f      	mov	r7, r5
 8002148:	42bb      	cmp	r3, r7
 800214a:	460d      	mov	r5, r1
 800214c:	d9f4      	bls.n	8002138 <_printf_i+0x110>
 800214e:	2b08      	cmp	r3, #8
 8002150:	d10b      	bne.n	800216a <_printf_i+0x142>
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	07df      	lsls	r7, r3, #31
 8002156:	d508      	bpl.n	800216a <_printf_i+0x142>
 8002158:	6923      	ldr	r3, [r4, #16]
 800215a:	6861      	ldr	r1, [r4, #4]
 800215c:	4299      	cmp	r1, r3
 800215e:	bfde      	ittt	le
 8002160:	2330      	movle	r3, #48	@ 0x30
 8002162:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002166:	f106 36ff 	addle.w	r6, r6, #4294967295
 800216a:	1b92      	subs	r2, r2, r6
 800216c:	6122      	str	r2, [r4, #16]
 800216e:	f8cd a000 	str.w	sl, [sp]
 8002172:	464b      	mov	r3, r9
 8002174:	aa03      	add	r2, sp, #12
 8002176:	4621      	mov	r1, r4
 8002178:	4640      	mov	r0, r8
 800217a:	f7ff fee7 	bl	8001f4c <_printf_common>
 800217e:	3001      	adds	r0, #1
 8002180:	d14a      	bne.n	8002218 <_printf_i+0x1f0>
 8002182:	f04f 30ff 	mov.w	r0, #4294967295
 8002186:	b004      	add	sp, #16
 8002188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800218c:	6823      	ldr	r3, [r4, #0]
 800218e:	f043 0320 	orr.w	r3, r3, #32
 8002192:	6023      	str	r3, [r4, #0]
 8002194:	4832      	ldr	r0, [pc, #200]	@ (8002260 <_printf_i+0x238>)
 8002196:	2778      	movs	r7, #120	@ 0x78
 8002198:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	6831      	ldr	r1, [r6, #0]
 80021a0:	061f      	lsls	r7, r3, #24
 80021a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80021a6:	d402      	bmi.n	80021ae <_printf_i+0x186>
 80021a8:	065f      	lsls	r7, r3, #25
 80021aa:	bf48      	it	mi
 80021ac:	b2ad      	uxthmi	r5, r5
 80021ae:	6031      	str	r1, [r6, #0]
 80021b0:	07d9      	lsls	r1, r3, #31
 80021b2:	bf44      	itt	mi
 80021b4:	f043 0320 	orrmi.w	r3, r3, #32
 80021b8:	6023      	strmi	r3, [r4, #0]
 80021ba:	b11d      	cbz	r5, 80021c4 <_printf_i+0x19c>
 80021bc:	2310      	movs	r3, #16
 80021be:	e7ad      	b.n	800211c <_printf_i+0xf4>
 80021c0:	4826      	ldr	r0, [pc, #152]	@ (800225c <_printf_i+0x234>)
 80021c2:	e7e9      	b.n	8002198 <_printf_i+0x170>
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	f023 0320 	bic.w	r3, r3, #32
 80021ca:	6023      	str	r3, [r4, #0]
 80021cc:	e7f6      	b.n	80021bc <_printf_i+0x194>
 80021ce:	4616      	mov	r6, r2
 80021d0:	e7bd      	b.n	800214e <_printf_i+0x126>
 80021d2:	6833      	ldr	r3, [r6, #0]
 80021d4:	6825      	ldr	r5, [r4, #0]
 80021d6:	6961      	ldr	r1, [r4, #20]
 80021d8:	1d18      	adds	r0, r3, #4
 80021da:	6030      	str	r0, [r6, #0]
 80021dc:	062e      	lsls	r6, r5, #24
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	d501      	bpl.n	80021e6 <_printf_i+0x1be>
 80021e2:	6019      	str	r1, [r3, #0]
 80021e4:	e002      	b.n	80021ec <_printf_i+0x1c4>
 80021e6:	0668      	lsls	r0, r5, #25
 80021e8:	d5fb      	bpl.n	80021e2 <_printf_i+0x1ba>
 80021ea:	8019      	strh	r1, [r3, #0]
 80021ec:	2300      	movs	r3, #0
 80021ee:	6123      	str	r3, [r4, #16]
 80021f0:	4616      	mov	r6, r2
 80021f2:	e7bc      	b.n	800216e <_printf_i+0x146>
 80021f4:	6833      	ldr	r3, [r6, #0]
 80021f6:	1d1a      	adds	r2, r3, #4
 80021f8:	6032      	str	r2, [r6, #0]
 80021fa:	681e      	ldr	r6, [r3, #0]
 80021fc:	6862      	ldr	r2, [r4, #4]
 80021fe:	2100      	movs	r1, #0
 8002200:	4630      	mov	r0, r6
 8002202:	f7fd ffed 	bl	80001e0 <memchr>
 8002206:	b108      	cbz	r0, 800220c <_printf_i+0x1e4>
 8002208:	1b80      	subs	r0, r0, r6
 800220a:	6060      	str	r0, [r4, #4]
 800220c:	6863      	ldr	r3, [r4, #4]
 800220e:	6123      	str	r3, [r4, #16]
 8002210:	2300      	movs	r3, #0
 8002212:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002216:	e7aa      	b.n	800216e <_printf_i+0x146>
 8002218:	6923      	ldr	r3, [r4, #16]
 800221a:	4632      	mov	r2, r6
 800221c:	4649      	mov	r1, r9
 800221e:	4640      	mov	r0, r8
 8002220:	47d0      	blx	sl
 8002222:	3001      	adds	r0, #1
 8002224:	d0ad      	beq.n	8002182 <_printf_i+0x15a>
 8002226:	6823      	ldr	r3, [r4, #0]
 8002228:	079b      	lsls	r3, r3, #30
 800222a:	d413      	bmi.n	8002254 <_printf_i+0x22c>
 800222c:	68e0      	ldr	r0, [r4, #12]
 800222e:	9b03      	ldr	r3, [sp, #12]
 8002230:	4298      	cmp	r0, r3
 8002232:	bfb8      	it	lt
 8002234:	4618      	movlt	r0, r3
 8002236:	e7a6      	b.n	8002186 <_printf_i+0x15e>
 8002238:	2301      	movs	r3, #1
 800223a:	4632      	mov	r2, r6
 800223c:	4649      	mov	r1, r9
 800223e:	4640      	mov	r0, r8
 8002240:	47d0      	blx	sl
 8002242:	3001      	adds	r0, #1
 8002244:	d09d      	beq.n	8002182 <_printf_i+0x15a>
 8002246:	3501      	adds	r5, #1
 8002248:	68e3      	ldr	r3, [r4, #12]
 800224a:	9903      	ldr	r1, [sp, #12]
 800224c:	1a5b      	subs	r3, r3, r1
 800224e:	42ab      	cmp	r3, r5
 8002250:	dcf2      	bgt.n	8002238 <_printf_i+0x210>
 8002252:	e7eb      	b.n	800222c <_printf_i+0x204>
 8002254:	2500      	movs	r5, #0
 8002256:	f104 0619 	add.w	r6, r4, #25
 800225a:	e7f5      	b.n	8002248 <_printf_i+0x220>
 800225c:	08002579 	.word	0x08002579
 8002260:	0800258a 	.word	0x0800258a

08002264 <__sflush_r>:
 8002264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800226c:	0716      	lsls	r6, r2, #28
 800226e:	4605      	mov	r5, r0
 8002270:	460c      	mov	r4, r1
 8002272:	d454      	bmi.n	800231e <__sflush_r+0xba>
 8002274:	684b      	ldr	r3, [r1, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	dc02      	bgt.n	8002280 <__sflush_r+0x1c>
 800227a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800227c:	2b00      	cmp	r3, #0
 800227e:	dd48      	ble.n	8002312 <__sflush_r+0xae>
 8002280:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002282:	2e00      	cmp	r6, #0
 8002284:	d045      	beq.n	8002312 <__sflush_r+0xae>
 8002286:	2300      	movs	r3, #0
 8002288:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800228c:	682f      	ldr	r7, [r5, #0]
 800228e:	6a21      	ldr	r1, [r4, #32]
 8002290:	602b      	str	r3, [r5, #0]
 8002292:	d030      	beq.n	80022f6 <__sflush_r+0x92>
 8002294:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002296:	89a3      	ldrh	r3, [r4, #12]
 8002298:	0759      	lsls	r1, r3, #29
 800229a:	d505      	bpl.n	80022a8 <__sflush_r+0x44>
 800229c:	6863      	ldr	r3, [r4, #4]
 800229e:	1ad2      	subs	r2, r2, r3
 80022a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80022a2:	b10b      	cbz	r3, 80022a8 <__sflush_r+0x44>
 80022a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80022a6:	1ad2      	subs	r2, r2, r3
 80022a8:	2300      	movs	r3, #0
 80022aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80022ac:	6a21      	ldr	r1, [r4, #32]
 80022ae:	4628      	mov	r0, r5
 80022b0:	47b0      	blx	r6
 80022b2:	1c43      	adds	r3, r0, #1
 80022b4:	89a3      	ldrh	r3, [r4, #12]
 80022b6:	d106      	bne.n	80022c6 <__sflush_r+0x62>
 80022b8:	6829      	ldr	r1, [r5, #0]
 80022ba:	291d      	cmp	r1, #29
 80022bc:	d82b      	bhi.n	8002316 <__sflush_r+0xb2>
 80022be:	4a2a      	ldr	r2, [pc, #168]	@ (8002368 <__sflush_r+0x104>)
 80022c0:	40ca      	lsrs	r2, r1
 80022c2:	07d6      	lsls	r6, r2, #31
 80022c4:	d527      	bpl.n	8002316 <__sflush_r+0xb2>
 80022c6:	2200      	movs	r2, #0
 80022c8:	6062      	str	r2, [r4, #4]
 80022ca:	04d9      	lsls	r1, r3, #19
 80022cc:	6922      	ldr	r2, [r4, #16]
 80022ce:	6022      	str	r2, [r4, #0]
 80022d0:	d504      	bpl.n	80022dc <__sflush_r+0x78>
 80022d2:	1c42      	adds	r2, r0, #1
 80022d4:	d101      	bne.n	80022da <__sflush_r+0x76>
 80022d6:	682b      	ldr	r3, [r5, #0]
 80022d8:	b903      	cbnz	r3, 80022dc <__sflush_r+0x78>
 80022da:	6560      	str	r0, [r4, #84]	@ 0x54
 80022dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022de:	602f      	str	r7, [r5, #0]
 80022e0:	b1b9      	cbz	r1, 8002312 <__sflush_r+0xae>
 80022e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80022e6:	4299      	cmp	r1, r3
 80022e8:	d002      	beq.n	80022f0 <__sflush_r+0x8c>
 80022ea:	4628      	mov	r0, r5
 80022ec:	f7ff fbf4 	bl	8001ad8 <_free_r>
 80022f0:	2300      	movs	r3, #0
 80022f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80022f4:	e00d      	b.n	8002312 <__sflush_r+0xae>
 80022f6:	2301      	movs	r3, #1
 80022f8:	4628      	mov	r0, r5
 80022fa:	47b0      	blx	r6
 80022fc:	4602      	mov	r2, r0
 80022fe:	1c50      	adds	r0, r2, #1
 8002300:	d1c9      	bne.n	8002296 <__sflush_r+0x32>
 8002302:	682b      	ldr	r3, [r5, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0c6      	beq.n	8002296 <__sflush_r+0x32>
 8002308:	2b1d      	cmp	r3, #29
 800230a:	d001      	beq.n	8002310 <__sflush_r+0xac>
 800230c:	2b16      	cmp	r3, #22
 800230e:	d11e      	bne.n	800234e <__sflush_r+0xea>
 8002310:	602f      	str	r7, [r5, #0]
 8002312:	2000      	movs	r0, #0
 8002314:	e022      	b.n	800235c <__sflush_r+0xf8>
 8002316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800231a:	b21b      	sxth	r3, r3
 800231c:	e01b      	b.n	8002356 <__sflush_r+0xf2>
 800231e:	690f      	ldr	r7, [r1, #16]
 8002320:	2f00      	cmp	r7, #0
 8002322:	d0f6      	beq.n	8002312 <__sflush_r+0xae>
 8002324:	0793      	lsls	r3, r2, #30
 8002326:	680e      	ldr	r6, [r1, #0]
 8002328:	bf08      	it	eq
 800232a:	694b      	ldreq	r3, [r1, #20]
 800232c:	600f      	str	r7, [r1, #0]
 800232e:	bf18      	it	ne
 8002330:	2300      	movne	r3, #0
 8002332:	eba6 0807 	sub.w	r8, r6, r7
 8002336:	608b      	str	r3, [r1, #8]
 8002338:	f1b8 0f00 	cmp.w	r8, #0
 800233c:	dde9      	ble.n	8002312 <__sflush_r+0xae>
 800233e:	6a21      	ldr	r1, [r4, #32]
 8002340:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002342:	4643      	mov	r3, r8
 8002344:	463a      	mov	r2, r7
 8002346:	4628      	mov	r0, r5
 8002348:	47b0      	blx	r6
 800234a:	2800      	cmp	r0, #0
 800234c:	dc08      	bgt.n	8002360 <__sflush_r+0xfc>
 800234e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002356:	81a3      	strh	r3, [r4, #12]
 8002358:	f04f 30ff 	mov.w	r0, #4294967295
 800235c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002360:	4407      	add	r7, r0
 8002362:	eba8 0800 	sub.w	r8, r8, r0
 8002366:	e7e7      	b.n	8002338 <__sflush_r+0xd4>
 8002368:	20400001 	.word	0x20400001

0800236c <_fflush_r>:
 800236c:	b538      	push	{r3, r4, r5, lr}
 800236e:	690b      	ldr	r3, [r1, #16]
 8002370:	4605      	mov	r5, r0
 8002372:	460c      	mov	r4, r1
 8002374:	b913      	cbnz	r3, 800237c <_fflush_r+0x10>
 8002376:	2500      	movs	r5, #0
 8002378:	4628      	mov	r0, r5
 800237a:	bd38      	pop	{r3, r4, r5, pc}
 800237c:	b118      	cbz	r0, 8002386 <_fflush_r+0x1a>
 800237e:	6a03      	ldr	r3, [r0, #32]
 8002380:	b90b      	cbnz	r3, 8002386 <_fflush_r+0x1a>
 8002382:	f7ff f9af 	bl	80016e4 <__sinit>
 8002386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f3      	beq.n	8002376 <_fflush_r+0xa>
 800238e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002390:	07d0      	lsls	r0, r2, #31
 8002392:	d404      	bmi.n	800239e <_fflush_r+0x32>
 8002394:	0599      	lsls	r1, r3, #22
 8002396:	d402      	bmi.n	800239e <_fflush_r+0x32>
 8002398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800239a:	f7ff fb9a 	bl	8001ad2 <__retarget_lock_acquire_recursive>
 800239e:	4628      	mov	r0, r5
 80023a0:	4621      	mov	r1, r4
 80023a2:	f7ff ff5f 	bl	8002264 <__sflush_r>
 80023a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023a8:	07da      	lsls	r2, r3, #31
 80023aa:	4605      	mov	r5, r0
 80023ac:	d4e4      	bmi.n	8002378 <_fflush_r+0xc>
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	059b      	lsls	r3, r3, #22
 80023b2:	d4e1      	bmi.n	8002378 <_fflush_r+0xc>
 80023b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023b6:	f7ff fb8d 	bl	8001ad4 <__retarget_lock_release_recursive>
 80023ba:	e7dd      	b.n	8002378 <_fflush_r+0xc>

080023bc <__swhatbuf_r>:
 80023bc:	b570      	push	{r4, r5, r6, lr}
 80023be:	460c      	mov	r4, r1
 80023c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80023c4:	2900      	cmp	r1, #0
 80023c6:	b096      	sub	sp, #88	@ 0x58
 80023c8:	4615      	mov	r5, r2
 80023ca:	461e      	mov	r6, r3
 80023cc:	da0d      	bge.n	80023ea <__swhatbuf_r+0x2e>
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80023d4:	f04f 0100 	mov.w	r1, #0
 80023d8:	bf14      	ite	ne
 80023da:	2340      	movne	r3, #64	@ 0x40
 80023dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80023e0:	2000      	movs	r0, #0
 80023e2:	6031      	str	r1, [r6, #0]
 80023e4:	602b      	str	r3, [r5, #0]
 80023e6:	b016      	add	sp, #88	@ 0x58
 80023e8:	bd70      	pop	{r4, r5, r6, pc}
 80023ea:	466a      	mov	r2, sp
 80023ec:	f000 f848 	bl	8002480 <_fstat_r>
 80023f0:	2800      	cmp	r0, #0
 80023f2:	dbec      	blt.n	80023ce <__swhatbuf_r+0x12>
 80023f4:	9901      	ldr	r1, [sp, #4]
 80023f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80023fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80023fe:	4259      	negs	r1, r3
 8002400:	4159      	adcs	r1, r3
 8002402:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002406:	e7eb      	b.n	80023e0 <__swhatbuf_r+0x24>

08002408 <__smakebuf_r>:
 8002408:	898b      	ldrh	r3, [r1, #12]
 800240a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800240c:	079d      	lsls	r5, r3, #30
 800240e:	4606      	mov	r6, r0
 8002410:	460c      	mov	r4, r1
 8002412:	d507      	bpl.n	8002424 <__smakebuf_r+0x1c>
 8002414:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	6123      	str	r3, [r4, #16]
 800241c:	2301      	movs	r3, #1
 800241e:	6163      	str	r3, [r4, #20]
 8002420:	b003      	add	sp, #12
 8002422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002424:	ab01      	add	r3, sp, #4
 8002426:	466a      	mov	r2, sp
 8002428:	f7ff ffc8 	bl	80023bc <__swhatbuf_r>
 800242c:	9f00      	ldr	r7, [sp, #0]
 800242e:	4605      	mov	r5, r0
 8002430:	4639      	mov	r1, r7
 8002432:	4630      	mov	r0, r6
 8002434:	f7ff fbbc 	bl	8001bb0 <_malloc_r>
 8002438:	b948      	cbnz	r0, 800244e <__smakebuf_r+0x46>
 800243a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800243e:	059a      	lsls	r2, r3, #22
 8002440:	d4ee      	bmi.n	8002420 <__smakebuf_r+0x18>
 8002442:	f023 0303 	bic.w	r3, r3, #3
 8002446:	f043 0302 	orr.w	r3, r3, #2
 800244a:	81a3      	strh	r3, [r4, #12]
 800244c:	e7e2      	b.n	8002414 <__smakebuf_r+0xc>
 800244e:	89a3      	ldrh	r3, [r4, #12]
 8002450:	6020      	str	r0, [r4, #0]
 8002452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002456:	81a3      	strh	r3, [r4, #12]
 8002458:	9b01      	ldr	r3, [sp, #4]
 800245a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800245e:	b15b      	cbz	r3, 8002478 <__smakebuf_r+0x70>
 8002460:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002464:	4630      	mov	r0, r6
 8002466:	f000 f81d 	bl	80024a4 <_isatty_r>
 800246a:	b128      	cbz	r0, 8002478 <__smakebuf_r+0x70>
 800246c:	89a3      	ldrh	r3, [r4, #12]
 800246e:	f023 0303 	bic.w	r3, r3, #3
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	81a3      	strh	r3, [r4, #12]
 8002478:	89a3      	ldrh	r3, [r4, #12]
 800247a:	431d      	orrs	r5, r3
 800247c:	81a5      	strh	r5, [r4, #12]
 800247e:	e7cf      	b.n	8002420 <__smakebuf_r+0x18>

08002480 <_fstat_r>:
 8002480:	b538      	push	{r3, r4, r5, lr}
 8002482:	4d07      	ldr	r5, [pc, #28]	@ (80024a0 <_fstat_r+0x20>)
 8002484:	2300      	movs	r3, #0
 8002486:	4604      	mov	r4, r0
 8002488:	4608      	mov	r0, r1
 800248a:	4611      	mov	r1, r2
 800248c:	602b      	str	r3, [r5, #0]
 800248e:	f7fe ff1a 	bl	80012c6 <_fstat>
 8002492:	1c43      	adds	r3, r0, #1
 8002494:	d102      	bne.n	800249c <_fstat_r+0x1c>
 8002496:	682b      	ldr	r3, [r5, #0]
 8002498:	b103      	cbz	r3, 800249c <_fstat_r+0x1c>
 800249a:	6023      	str	r3, [r4, #0]
 800249c:	bd38      	pop	{r3, r4, r5, pc}
 800249e:	bf00      	nop
 80024a0:	200002cc 	.word	0x200002cc

080024a4 <_isatty_r>:
 80024a4:	b538      	push	{r3, r4, r5, lr}
 80024a6:	4d06      	ldr	r5, [pc, #24]	@ (80024c0 <_isatty_r+0x1c>)
 80024a8:	2300      	movs	r3, #0
 80024aa:	4604      	mov	r4, r0
 80024ac:	4608      	mov	r0, r1
 80024ae:	602b      	str	r3, [r5, #0]
 80024b0:	f7ff f86e 	bl	8001590 <_isatty>
 80024b4:	1c43      	adds	r3, r0, #1
 80024b6:	d102      	bne.n	80024be <_isatty_r+0x1a>
 80024b8:	682b      	ldr	r3, [r5, #0]
 80024ba:	b103      	cbz	r3, 80024be <_isatty_r+0x1a>
 80024bc:	6023      	str	r3, [r4, #0]
 80024be:	bd38      	pop	{r3, r4, r5, pc}
 80024c0:	200002cc 	.word	0x200002cc

080024c4 <_sbrk_r>:
 80024c4:	b538      	push	{r3, r4, r5, lr}
 80024c6:	4d06      	ldr	r5, [pc, #24]	@ (80024e0 <_sbrk_r+0x1c>)
 80024c8:	2300      	movs	r3, #0
 80024ca:	4604      	mov	r4, r0
 80024cc:	4608      	mov	r0, r1
 80024ce:	602b      	str	r3, [r5, #0]
 80024d0:	f7fe fd80 	bl	8000fd4 <_sbrk>
 80024d4:	1c43      	adds	r3, r0, #1
 80024d6:	d102      	bne.n	80024de <_sbrk_r+0x1a>
 80024d8:	682b      	ldr	r3, [r5, #0]
 80024da:	b103      	cbz	r3, 80024de <_sbrk_r+0x1a>
 80024dc:	6023      	str	r3, [r4, #0]
 80024de:	bd38      	pop	{r3, r4, r5, pc}
 80024e0:	200002cc 	.word	0x200002cc

080024e4 <_init>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	bf00      	nop
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr

080024f0 <_fini>:
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	bf00      	nop
 80024f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f6:	bc08      	pop	{r3}
 80024f8:	469e      	mov	lr, r3
 80024fa:	4770      	bx	lr
