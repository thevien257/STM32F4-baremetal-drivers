#ifndef INC_STM32F4XX_CUS_TIMER_H_
#define INC_STM32F4XX_CUS_TIMER_H_

#include <stm32f4xx_cus.h>

// TIM2 to TIM5 register structure
typedef struct {
	volatile uint32_t CR1;      // Control register 1,              Offset: 0x00
	volatile uint32_t CR2;      // Control register 2,              Offset: 0x04
	volatile uint32_t SMCR;     // Slave mode control register,     Offset: 0x08
	volatile uint32_t DIER;     // DMA/Interrupt enable register,   Offset: 0x0C
	volatile uint32_t SR;       // Status register,                 Offset: 0x10
	volatile uint32_t EGR;      // Event generation register,       Offset: 0x14
	volatile uint32_t CCMR1;    // Capture/Compare mode register 1, Offset: 0x18
	volatile uint32_t CCMR2;    // Capture/Compare mode register 2, Offset: 0x1C
	volatile uint32_t CCER;     // Capture/Compare enable register, Offset: 0x20
	volatile uint32_t CNT;      // Counter register,                Offset: 0x24
	volatile uint32_t PSC;      // Prescaler register,              Offset: 0x28
	volatile uint32_t ARR;      // Auto-reload register,            Offset: 0x2C
	uint32_t RESERVED1;         // Reserved,                        Offset: 0x30
	volatile uint32_t CCR1;     // Capture/Compare register 1,      Offset: 0x34
	volatile uint32_t CCR2;     // Capture/Compare register 2,      Offset: 0x38
	volatile uint32_t CCR3;     // Capture/Compare register 3,      Offset: 0x3C
	volatile uint32_t CCR4;     // Capture/Compare register 4,      Offset: 0x40
	uint32_t RESERVED2;         // Reserved,                        Offset: 0x44
	volatile uint32_t DCR;      // DMA control register,            Offset: 0x48
	volatile uint32_t DMAR;     // DMA address for full transfer,   Offset: 0x4C
	volatile uint32_t OR;       // Option register,                 Offset: 0x50
} TIM_TypeDef;

typedef struct {
	TIM_TypeDef *TIMx;
	uint8_t timerMode;
	uint32_t prescaler;
	uint32_t directionCounter;
	uint32_t autoReload;
	uint8_t autoReloadPreload;
	uint8_t updateRequestSource;
	uint8_t updateDisable;

	struct {
		uint8_t channel;              // TIM_CHANNEL_1 to TIM_CHANNEL_4
		uint8_t polarity;             // Rising, falling, or both edges
		uint8_t selection;            // Direct TI or indirect TI
		uint8_t prescaler;            // Input capture prescaler
		uint8_t filter;               // Input filter value
		uint8_t enableInterrupt;      // Enable capture interrupt
	} TIM_IC_HandleTypeDef;

	struct {
		uint8_t channel;              // TIM_CHANNEL_1 to TIM_CHANNEL_4
		uint8_t polarity;             // Rising, falling, or both edges
		uint8_t preload;
		uint8_t mode;
		uint8_t enableInterrupt;      // Enable capture interrupt
	} TIM_OC_HandleTypeDef;

} TIM_HandleTypeDef;

// Input Capture Channel Selection
#define TIM_CHANNEL_1    0
#define TIM_CHANNEL_2    1
#define TIM_CHANNEL_3    2
#define TIM_CHANNEL_4    3

// Input Capture Prescaler
#define TIM_ICPSC_DIV1   0  // No prescaler, capture every edge
#define TIM_ICPSC_DIV2   1  // Capture every 2 events
#define TIM_ICPSC_DIV4   2  // Capture every 4 events
#define TIM_ICPSC_DIV8   3  // Capture every 8 events

// Input Capture Filter (0-15, higher = more filtering)
#define TIM_IC_FILTER_NONE  0
#define TIM_IC_FILTER_2     1
#define TIM_IC_FILTER_4     2
#define TIM_IC_FILTER_8     3

// Input Capture Polarity
#define TIM_IC_RISING_EDGE   0  // Capture on rising edge
#define TIM_IC_FALLING_EDGE  1  // Capture on falling edge
#define TIM_IC_BOTH_EDGES    3  // Capture on both edges

// Input Capture Selection
#define TIM_IC_SELECTION_TI1    1  // Map to TI1
#define TIM_IC_SELECTION_TI2  2  // Map to TI2
#define TIM_IC_SELECTION_TRC         3  // Map to TRC

// Base address definitions
#define TIM2_BASE           0x40000000UL
#define TIM3_BASE           0x40000400UL
#define TIM4_BASE           0x40000800UL
#define TIM5_BASE           0x40000C00UL

// Peripheral declarations
// 16-bit (TIM3 and TIM4) or 32-bit (TIM2 and TIM5) up, down, up/down auto-reload counter.
#define TIM2                ((TIM_TypeDef *) TIM2_BASE)
#define TIM3                ((TIM_TypeDef *) TIM3_BASE)
#define TIM4                ((TIM_TypeDef *) TIM4_BASE)
#define TIM5                ((TIM_TypeDef *) TIM5_BASE)

// Mode
#define TIM_INPUT_CAPTURE_MODE 0x0
#define TIM_OUTPUT_COMPARE_MODE 0x1
#define TIM_PWM_MODE 0x2
#define TIM_ONE_PULSE_MODE 0x3

// Counter mode
#define TIM_COUNT_UP 0x0
#define TIM_COUNT_DOWN 0x1

#define ONE_MEGA_HERT 1000000

extern volatile uint32_t mil;

void TIM_INIT(TIM_HandleTypeDef *timHandleTypeDef);
void TIM_ENABLE(TIM_HandleTypeDef *timHandleTypeDef);
void TIM_DELAY_INIT(TIM_HandleTypeDef *timHandleTypeDef);
void TIM_MILLIS_INIT(TIM_HandleTypeDef *timHandleTypeDef);
void delay_us(TIM_HandleTypeDef *timHandleTypeDef, uint32_t us);
void delay_ms(TIM_HandleTypeDef *timHandleTypeDef, uint32_t ms);
uint32_t millis();
void TIM_MICROS_INIT(TIM_HandleTypeDef *timHandleTypeDef);
uint32_t micros();
void TIM_Handling(TIM_HandleTypeDef *timHandleTypeDef);
uint32_t TIM_IC_ReadCapture(TIM_HandleTypeDef *timHandleTypeDef,
		uint8_t channel);
void TIM_IC_ClearFlag(TIM_HandleTypeDef *timHandleTypeDef, uint8_t channel);
uint8_t TIM_IC_GetFlag(TIM_HandleTypeDef *timHandleTypeDef, uint8_t channel);
// TIM10/11/13/14 register structure
typedef struct {
	volatile uint32_t CR1;      // Control register 1,              Offset: 0x00
	uint32_t RESERVED1;         // Reserved,                        Offset: 0x04
	volatile uint32_t SMCR;     // Slave mode control register,     Offset: 0x08
	volatile uint32_t DIER;     // DMA/Interrupt enable register,   Offset: 0x0C
	volatile uint32_t SR;       // Status register,                 Offset: 0x10
	volatile uint32_t EGR;      // Event generation register,       Offset: 0x14
	volatile uint32_t CCMR1;    // Capture/Compare mode register 1, Offset: 0x18
	uint32_t RESERVED2;         // Reserved,                        Offset: 0x1C
	volatile uint32_t CCER;     // Capture/Compare enable register, Offset: 0x20
	volatile uint32_t CNT;      // Counter register,                Offset: 0x24
	volatile uint32_t PSC;      // Prescaler register,              Offset: 0x28
	volatile uint32_t ARR;      // Auto-reload register,            Offset: 0x2C
	uint32_t RESERVED3;         // Reserved,                        Offset: 0x30
	volatile uint32_t CCR1;     // Capture/Compare register 1,      Offset: 0x34
	uint32_t RESERVED4[6]; // Reserved,                        Offset: 0x38 - 0x4C
	volatile uint32_t OR;       // Option register,                 Offset: 0x50
} TIM_Simple_TypeDef;

// TIM6 and TIM7 register structure (Basic timers)
typedef struct {
	volatile uint32_t CR1;      // Control register 1,              Offset: 0x00
	volatile uint32_t CR2;      // Control register 2,              Offset: 0x04
	uint32_t RESERVED1;         // Reserved,                        Offset: 0x08
	volatile uint32_t DIER;     // DMA/Interrupt enable register,   Offset: 0x0C
	volatile uint32_t SR;       // Status register,                 Offset: 0x10
	volatile uint32_t EGR;      // Event generation register,       Offset: 0x14
	uint32_t RESERVED2[3]; // Reserved,                        Offset: 0x18 - 0x20
	volatile uint32_t CNT;      // Counter register,                Offset: 0x24
	volatile uint32_t PSC;      // Prescaler register,              Offset: 0x28
	volatile uint32_t ARR;      // Auto-reload register,            Offset: 0x2C
} TIM_Basic_TypeDef;

#endif /* INC_STM32F4XX_CUS_TIMER_H_ */
